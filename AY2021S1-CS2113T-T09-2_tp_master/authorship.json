[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "## Workflow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The workflow will go like this:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Synchronise your local repo with the team repo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Make a separate branch for your work session."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Commit and push your work to the corresponding branch on your remote repo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Make a pull request to merge your remote repo\u0027s work to the team repo and resolve merge conflicts."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Setting up for each work session"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "*  `git fetch upstream`, `git rebase upstream/master`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * The command means to fetch from the team repo (upstream) and then rebase master."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Your local master should be synchronised with the upstream master now."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* `git switch -c \u003cbranchname\u003e`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Make a new branch for your local work (to preserve master\u0027s functionality)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * `git checkout -b \u003cbranchname\u003e` does the same thing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Pushing and merging your work after each work session"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* First, `git add .` if you want to stage all files or `git add \u003cpath/to/file\u003e` if you want to add specific files."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* `git commit -m \u0027commit message here\u0027` followed by `git push origin \u003cbranchname\u003e`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Git will create the corresponding branch on your remote repo and push your commits there."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Merge your work into the team repo\u0027s master with a pull request over Github\u0027s interface."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Do not confirm merge! Let the rest of the team view the pull request first before we confirm that it can be merged."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Any merge conflicts should be resolved AFTER we okay the merge."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * After we all okay-ed the merge, the merge can continue and your work is complete."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Rolling back"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* First off, you can bookmark [this website](https://ohshitgit.com/) because you will need it at some point."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Undoing a local commit: Do `git revert HEAD`. `git revert` works by bringing your previous commit in as a new commit to undo what you did so far."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * `HEAD` refers to your current commit (which is the one you want to undo)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * If you want to revert back to __BEFORE__ a specific commit, use `git log` and find the commit hash (a long string of characters but you only need the first 6 or so) and do `git revert \u003chash\u003e`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Undoing a push to remote: Do `git push -f origin \u003chash\u003e:\u003cbranch\u003e`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * This forces a push of the `\u003chash\u003e` commit, which is the one you want to revert __to__, to the specified remote branch in `\u003cbranch\u003e`. Use `git log` to find the hash."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Alternatively, you can undo the local commit first (as in point 1), then `git push -f origin master:\u003cbranch\u003e` instead of finding a specific commit."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Hard reset:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * First, try doing `git fetch` then `git reset --hard origin/\u003cbranch\u003e`. This gets your remote\u0027s latest commits (which shouldn\u0027t include your mistakes) and then resets your working directory to match the latest commit on your remote. __ALL WORK ON LOCAL THAT IS NOT ALSO ON REMOTE IS LOST!__"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "   * If that doesn\u0027t work, delete everything in your repo except the .git folder, download from the Github repo page (green button on top right of file window), put everything in the same folder, then `git add *`, `git commit`."
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 15,
      "f0fz": 25,
      "-": 64
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.12\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    implementation group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            srcDirs \"src/main/resources\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    mainClassName \u003d \"seedu.ravi.Ravi\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "java {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    archiveBaseName \u003d \"ravi\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 8,
      "tobiasceg": 1,
      "wangqinNick": 5,
      "-": 46,
      "Aseanseen": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![](https://github.com/tobiasceg.png) | Tan Jian Hui Tobias | [Github](https://github.com/tobiasceg) | [Portfolio](docs/team/tobiasceg.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![](https://github.com/f0fz.png) | Sim Jun You | [Github](https://github.com/f0fz) | [Portfolio](docs/team/f0fz.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![](https://github.com/amalinasani.png) | Amalina | [Github](https://github.com/amalinasani) | [Portfolio](docs/team/amalinasani.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![](https://github.com/aseanseen.png) | Sean Lim | [Github](https://github.com/Aseanseen) | [Portfolio](docs/team/aseanseen.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![](https://github.com/wangqinNick.png) | Wang Qin | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/wangqinNick.md)"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "Aseanseen": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "# Developer Guide for ra.VI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "The following section describes how to set up ra.VI on your own computer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Software Prerequisites"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. **JDK** 11"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. **IntelliJ** IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Setting up the work environment"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. **Fork** this repo onto your GitHub account. **Clone** it onto your computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Open IntelliJ. Close any existing projects if you are not at the welcome page."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. Ensure it is set to the correct JDK version."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    a. `Configure` \u003e `Project Structure for New Projects` \u003e Select Java 11 under Project SDK."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4. Click `Open or Import` to open the cloned repo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "5. If necessary, locate the `build.gradle` file and select it. Click OK."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Verifying the setup"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. Run the program by selecting the `run` Gradle task at the top right and running it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Test the program by trying to run commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. Additionally, select the `test` Gradle task and run it. Check that all the tests pass."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Configure coding style"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "ra.VI\u0027s code uses the Gradle Checkstyle plugin."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "It is advised to change [IntelliJ\u0027s built-in code style"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "options](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to match the requirements."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The checkstyle configurations is in `\u003cROOT\u003e/config/checkstyle/` by default. Here is some information on [how to use the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Checkstyle plugin with IntelliJ IDEA](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Top level classes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "This is a class diagram of the top-level of ra.Vi.  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The classes depicted here are those which are direct dependencies of the main class `Ravi`.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The various dependencies of the classes depicted here are not shown to avoid cluttering, and are described in later"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "sections.  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The main class holds the main loop. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Most classes used by the main class are static in nature and do not need to be instantiated. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The `Command` and `CommandResult` objects are dependencies of Executor in addition to `Ravi`. `Executor` can be"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "viewed as a simple layer of abstraction on top of `Command` and `CommandResult` to facilitate the execution of user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "commands. `Command` is a dependency of `Parser` as `Parser` creates `Command` objects to return to the main loop."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Main Class](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/MainClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Command Family"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Command family of classes are nearly all derived from the abstract `Command` class, except for"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`CommandResult` and `PromptType`. All `Command` classes belong to the `Command` package. This is shown in the diagram"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "below."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![UML class diagram for Command Family Classes](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/CommandClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`PromptType` indicates the functionality of the `Command` object. The most useful type is `EDIT`, which indicates to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "StateManager that there has been a change in state."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The `Command` classes carry information about the user\u0027s command. There is one class for each exact user command. The"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`execute()` function of the `Command` class generates a `CommandResult`, which holds the reply to the user. This is"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "shown in the diagram below."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML sequence diagram for Command Classes](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/CommandSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Data Family"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Data family of classes consists of all the abstracted data types required for our features, such as"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`Task`, `Module`, and their respective Managers. All Data classes exist in the `data` package, and the classes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "in charge of saving and loading like `InputOutputManager` are in the storage subpackage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`Lesson`, `Task`, and `Module` are the base level abstractions, with their respective Managers containing the logic"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "to store and manipulate instances of these objects in a meaningful way. `InputOutputManager` reads and writes"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "information from the various Managers in order to save and load. `State` and `StateManager` are specifically for undo"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and redo functionality. They do not interact directly with the rest of the Data family."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`LessonFilter` is the only interface in the data package. It allows for flexible creation of filters for powerful user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "filtering of lessons via lambda functions. For example, the user can choose to filter only lectures on Mondays before"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2PM."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Since there is no `Command` to save or load, `InputOutputManager` is not a dependency of `Command`. All the other"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Managers, however, are dependencies of `Command` as there are commands for using/manipulating each one of them."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`InputOutputManager` and `Command` are then dependencies of the main class `Ravi`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Data Family Classes](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/DataClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Parser Family"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Parser family of classes consists of the main `Parser` class and the `xCommandParser` subclasses. The main `Parser` class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "first determines the main `Command` in the user `Command` string. If it is one of the 10 commands with a `xCommandParser`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "subclass, then `Parser` delegates the remaining work to the subclass due to the complicated logic involved. Otherwise, it"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "handles the logic itself."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "**Parser \"subclasses\" do not inherit from the `Parser` class.** They serve to organise the code that would otherwise all"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "be placed in the `Parser` class."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`Parser` will create a `Command` object, no matter whether the user `Command` is valid or not (if it is not, then an"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`IncorrectCommand` object is created). This `Command` object passes back to the main class `Ravi` for execution."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Parser Family Classes](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/ParserClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Timetable Family "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Timetable Family of classes is a _cross-family_ family of classes from the `Data` and `Command` families, "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and consists of the `TimeTableCommand` and `TimeTableCommandParser` classes, as well as `TimeTableManager` and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TimeTable` themselves. Extending from the abstract `TimeTableCommand` class are the `TimeTableAddCommand`,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TimeTableDeleteCommand`, `TimeTableViewCommand`, and `TimeTableResetCommand` classes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![Class diagram for TimeTable Family Classes](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/TimeTableClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "**This is a good representation of how the other data classes (`Task`, `Module`) work as well.** The `Command` objects"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "call the methods held in the Manager classes to perform work on the stored user data."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Upon the first start up of ra.VI, `TimeTableManager.initialise()` will be run. This will no longer run again in future"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "sessions as long as the user does not tamper with or delete the files in the created data folder, or use ra.VI elsewhere."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The `TimeTable` is created based on the user\u0027s initial input, with an appropriate number of `LessonManagers`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The point of entry for this feature will be at `TimeTableCommandParser`, which will decide which of the commands "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "to return through `parseTimeTableCommand()`. If the `TimeTableCommand` is returned and executed, the "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TimeTableManager` will carry out the associated commands, adding, deleting or viewing the lessons in the timetable."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Feature explanation with sequence diagrams"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Main loop sequence"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![Sequence diagram 1 for Main loop](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/MainSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This sequence diagram shows the activity of the main class, `Ravi`. When it starts, it first adds the shutdown hook to"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "handle both unexpected and normal shutdowns."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`start()` and `runCommandLoopUntilExitCommand()` are referenced in sequence diagrams below."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Following that, `Ravi` calls the `run()` function, which is just a wrapper for the two methods `start()` and"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`runCommandLoopUntilExitCommand()`. `start()` may throw an exception while trying to load the NUSMods data; if it cannot"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "load the NUSMods data, `run()` will show the error message to the user using `TextUi` then return"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "to `main()`, where `main()` terminates and ra.VI shuts down."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "After `start()` runs successfully, `runCommandLoopUntilExitCommand()` will run until the user gives the exit command,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`bye`. Subsequently, `run()` will return, `main()` will terminate, and ra.VI shuts down."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The shutdown hook runs right before ra.VI shuts down (i.e. when `main()` terminates or when the process is shut down via"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "any other means other than `SIGKILL`). It prints a shutdown message as described in the diagram to assure the user that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "their data is saved."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![Sequence diagram 2 for Main loop](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/MainSequenceDiagramStartSd.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This sequence diagram holds the reference for `start()`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TextUi` is initialised with a new `Scanner` object set to `System.in` to get user input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`InputOutputManager` is initialised, which makes it load all user data files and NUSMods data. It will return the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "results of the load (i.e. success or failure) which will be displayed by `TextUi` later on. As mentioned earlier, if"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "it fails to load NUSMods data (when resource file is corrupted and there is no Internet connection), it will throw an"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "exception so that ra.VI terminates."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`StateManager` is initialised, creating the empty stacks of \u0027snapshots\u0027 as well as pushing the first snapshot (which is"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "the starting state) to the stack."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TimeTableManager` is initialised. The user is required to input the **current NUS week**."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* If it is currently before or exactly Week 6 of the semester, the user should input the actual week number."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* If it\u0027s currently recess week, the user should input \"7\"."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* If it\u0027s currently after recess week, the user should input the current week number plus one (to account for"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "recess week)."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "There is a validation loop to catch invalid user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![Sequence diagram 3 for Main loop](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/MainSequenceDiagramLoopSd.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The main loop is contained in the `runCommandLoopUntilExitCommand()` method."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The main loop follows the following steps:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. Get the user input as a string."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Parse the input using `Parser`. `Parser` will return a `Command` object."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. Execute the `Command` object with the `execute()` method. This will do the necessary work and return a"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`CommandResult` object."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4. If any data was changed, `StateManager` will run `saveState()` to facilitate undo commands, and `InputOutputManager`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "f0fz"
        },
        "content": "will run `save()` to save all user data as a measure against unexpected shutdowns."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "f0fz"
        },
        "content": "5. Finally, use the `CommandResult` object to show the result of the `Command` to the user using `TextUi`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Note that the `Command` and `CommandResult` objects are destroyed after use."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Add/Delete Feature"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This feature is facilitated by the `TaskManager`, `ModuleManager` classes."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Extending from the abstract `Command` class are the `AddModuleCommand` and `AddTaskCommand` classes. This feature implements"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "the following operations:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Add tasks - Add a task to the task list through `TaskManager.add()`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Add modules - Add a module to the module list through `ModuleManager.add()`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Delete tasks - Deletes a task from the task list through `TaskManager.delete()`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Delete modules - Deletes a module from the module list through `ModuleManager.delete()`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![Sequence diagram for AddCommand](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/AddCommandSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "As seen from the sequence diagram above, this is the flow of an add command.\\"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`AddCommand` is an abstract class, inheriting from it are `AddTaskCommand` and `AddModuleCommand`.\\"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The `AddCommandParser` decides to create either `AddModuleCommand`, `AddTaskCommand` or `IncorrectCommand` objects"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "f0fz"
        },
        "content": "based on the user input.\\"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Each of these have an `execute()` function that creates a `CommandResult` object that shows the user the result of"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "f0fz"
        },
        "content": "the `Command` through `TextUi`, using `showOutputToUser()`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below is an example usage scenario and how the add feature behaves at each step."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. The user launches the application for the first time."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. The user inputs `add -m CS2101` into ra.VI, as the user wants to note down a module named ‘CS2101’ and add it to their module list.\\"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TextUi` receives the input as a string. `Parser` and `AddCommandParser` parse the string before creating an `AddModuleCommand`. "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. The `AddModuleCommand` is executed, returning a `CommandResult` containing a success message if the module has been successfully added.\\"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Otherwise, an exception message will be shown explaining the exception to the user.\\"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Common reasons for failure include:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Wrong command format\\"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add --t task`\\"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add -t task --by 2-10-2020 1400`\\"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add -m Fake Mod`\\"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add -t task -by 2nd Jan`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Module already exists in module list\\"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add -m CS1010` but the module list already contains `CS1010`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### List Feature"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This feature is facilitated by the `TaskManager` and `ModuleManager` classes.  "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "It extends from the abstract `Command` class.  "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "This feature implements the following operations:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* List tasks - List all tasks in the task list through `TaskManager.list()`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* List modules - List all modules in the module map through `ModuleManager.list()`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![Sequence diagram for List Feature in Command class](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/ListCommandSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "As seen from the sequence diagram above, this is the flow of `ListCommand`.  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`ListCommandParser` class calls `ListCommand(1)`, `ListCommand(0)`, or throws an `InvalidParameterException()`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "f0fz"
        },
        "content": "based on the user input."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`ListCommand` has an `execute()` method. Depending on the type of entry, `ListCommand` calls `list()` method of"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TaskManager` if it is \"TASK\", or `list()` method of `ModuleManager` if it is \"MODULE\"."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "f0fz"
        },
        "content": "If output is null, `ListCommand` calls `CommandResult(MESSAGE_LIST_EMPTY)`, creating a `CommandResult` object."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Else, `ListCommand` calls `CommandResult(MESSAGE_LIST_PRINTED + output)`, creating a `CommandResult` object."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "`ListCommand` returns `CommandResult`. "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Given below is an example usage scenario and how the cap feature behaves at each step.  "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. The user launches the application for the first time.  "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. The user inputs `add -t Read book` into ra.VI, adding the task to the task list in TaskManager. The user keys in multiple other tasks of the following:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -t Return book -by 2-10-2020 1400`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -t Meeting`  "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. The user inputs `add -m CS2113T` into ra.VI, adding the module to the module map in ModuleManager. The user keys in multiple other modules of the following:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -m CS2101`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -m CG2271`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4. The user inputs `list -t`. The `CommandResult` returns  "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Read book [x]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "2. Return book [x], by 02:00PM, Friday, 02 Oct 20 "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "3. Meeting [x]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Step 5. The user inputs `list -m`. The `CommandResult` returns  "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. CS2113T: Software Engineering \u0026 Object-Oriented Programming: No grade yet"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. CG2271: Real-Time Operating Systems: No grade yet"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. CS2101: Effective Communication for Computing Professionals: No grade yet"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### CAP Feature "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This feature is faciliatated by `ModuleManager` and `Module` classes."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "f0fz"
        },
        "content": "It extends `Command` and runs through the `ModuleManager`, checking every `Module`\u0027s grade and module credit."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Calculate user\u0027s CAP - Uses a formula to calculate the user\u0027s current cap, with the user\u0027s total Module Credits taken"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and latest CAP."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![Sequence diagram for Cap Feature in Command class](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/CapCommandSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "f0fz"
        },
        "content": "As seen from the sequence diagram above, this is the flow of a CAP command."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The `CapCommandParser` parses the user\u0027s input and calls the `CapCommand` constructor."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "f0fz"
        },
        "content": "When `CapCommand` executes, a `CommandResult` object is created that calculates the user\u0027s current cap after taking into "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "f0fz"
        },
        "content": "account the current modules and the past semester\u0027s total MC taken and latest CAP."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Given below is an example usage scenario and how the CAP feature behaves at each step. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. The user launches the application for the first time. "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. The user inputs `add -m CS2101` into ra.VI, as the user adds a module they are taking into the `ModuleManager`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The user keys in as many modules into ra.VI as they are taking. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. Once the user attains a grade for the modules keyed in, they inputs `grade CS2101 4 A-` (4 MCs, A grade) to record the"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "f0fz"
        },
        "content": "grade for their module. They does this for all the other modules they have taken."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4. Once every module in the `ModuleManager` has been graded, they inputs `cap 46 4.24` to calculate their accumulative "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "f0fz"
        },
        "content": "CAP after attaining their new grades."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "f0fz"
        },
        "content": "5. The `CommandResult` returns the success message to show the user their current CAP after attaining their grades."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Grade Feature "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This feature is facilitated by `ModuleManager` and `Module` classes. "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "f0fz"
        },
        "content": "It extends `Command` and is stored internally inside `Module` as a `grade` and `moduleCredit`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Grading a module - assigns a grade and MC number to a specific module present in the module list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![Sequence diagram for Grade Feature in Command class](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/GradeCommandSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "As seen from the sequence diagram above, this is the flow of a Grade command."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The `GradeCommandParser` parses the user\u0027s input, and assigns the relevant attributes in the `GradeCommand` constructor,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "f0fz"
        },
        "content": "such as `moduleCredit` and `grade`. When `GradeCommand` executes,a `CommandResult` object is created that shows"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "f0fz"
        },
        "content": "the user the result of the `Command` through `TextUi`, using `showOutputToUser()`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Given below is an example usage scenario and how the grade feature behaves at each step."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. The user launches the application. The user inputs `add -m CS2101` into ra.VI, as the user wants to note down "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "f0fz"
        },
        "content": "a module named ‘CS2101’ and add it to their module list."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. The user inputs `grade CS2101 4 A+`. The `Parser` parses and allocates the user input to `GradeCommand`. "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`GradeCommand.execute()` is called and `ModuleManager` checks if such a module exists in the user’s module list, "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "f0fz"
        },
        "content": "then checks if the input grade is valid according to the NUS grading schematic. Finally, it assigns the specific module"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "f0fz"
        },
        "content": "with the grade and module credits."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. The `CommandResult` returns the success message to show the user that their module has successfully been graded. "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Otherwise, an exception message will be shown regarding the exception caught."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Timetable Feature"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This feature is facilitated by the `TimeTableManager` class and `TimeTableCommand` class."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Extending from the abstract `TimeTableCommand` class are the `TimeTableAddCommand`, `TimeTableDeleteCommand`,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TimeTableViewCommand` and `TimeTableResetCommand` classes."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Add a lesson - Add a lesson to the timetable through `TimeTableManager.addLesson()`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Delete a lesson - Delete all associated lessons from the timetable through `TimeTableManager.deleteLesson()`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* View today\u0027s timetable - List all lessons for today through `TimeTableManager.getSpecificDayLessons()`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* View this week\u0027s timetable - List all lessons in this week through `TimeTableManager.getSpecifiedWeekLessons()`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Reset timetable - Reset the whole timetable through `TimeTableManager.initialiseTimetable()` "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "f0fz"
        },
        "content": "##### Add lesson/s to timetable"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below is an example scenario to add a lesson to the timetable and how the timetable feature behaves at each step."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. The user launches the application for the first time. ra.VI asks for the current NUS week. This input is parsed and "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "f0fz"
        },
        "content": "initialises the `TimeTableManager`. "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. The user inputs `add -m CS2101`, as the user wants to note down a module named `CS2101` and add it to their module list."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. The user inputs `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1`. This means the user wants to add a `CS2101 LECTURE` "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "f0fz"
        },
        "content": "that occurs once a week on `TUESDAY 0800 1000`. This `Command` will be parsed and eventually returns a `TimeTableAddCommand`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4. The `TimeTableAddCommand` is executed, returning a `CommandResult` containing a success message if the lesson has "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "f0fz"
        },
        "content": "been successfully added. Otherwise, an exception message will be shown explaining the exception to the user.\\"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Common reasons for failure include:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Wrong command format\\"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUE 0800 1000 LECTURE 1`\\"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUESDAY 8am 10am LECTURE 1`\\"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUESDAY 0800 1000 NONSENSE 1`\\"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "e.g. `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 5`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Module does not exist in module list\\"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1` but the module list does not contain `CS2101`. Available modules can be found by entering `list -m`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add BAD TUESDAY 0800 1000 LECTURE 1` but the module list does not contain `BAD` and `BAD` is not a valid NUS module."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "f0fz"
        },
        "content": "##### Delete lesson/s from timetable"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below is an example scenario to delete a lesson from the timetable and how the timetable feature behaves at each step."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. The user launches the application for the first time. ra.VI asks for the current NUS week. This input is parsed "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and initialises the `TimeTableManager`. "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. The user inputs `add -m CS2101`, as the user wants to note down a module named `CS2101` and add it to their module list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. The user inputs `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1`. This means the user wants to add a "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`CS2101 LECTURE` that occurs once a week on `TUESDAY 0800 1000`. This `Command` will be parsed and eventually returns a "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "f0fz"
        },
        "content": "`TimeTableAddCommand`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4. The user inputs `timetable -del TUESDAY 1`. This means the user wants to delete the `CS2101 TUESDAY 0800 1000 LECTURE` "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "f0fz"
        },
        "content": "lessons. The `1` at the end reflects lessons on index `1` on `TUESDAY` as reflected by `timetable -day` or `timetable -week`. "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This `Command` will be parsed and eventually returns a `TimeTableDeleteCommand`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "f0fz"
        },
        "content": "5. The `TimeTableDeleteCommand` is executed, returning a `CommandResult` containing a success message if the lessons "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "f0fz"
        },
        "content": "have been successfully deleted. Otherwise, an exception message will be shown explaining the exception to the user."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Common reasons for failure include:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Wrong Command format\\"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "f0fz"
        },
        "content": "e.g. `timetable -del TUE 1`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Lesson does not exist in the timetable\\"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "f0fz"
        },
        "content": "e.g. `timetable -del TUESDAY 5` but the timetable does not contain a lesson/s on `TUESDAY` at index `5`. Current "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "f0fz"
        },
        "content": "lessons can be found by entering `timetable -day` or `timetable -week`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "f0fz"
        },
        "content": "##### View the timetable"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below is an example scenario to view the timetable for the day."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. The user adds a lesson to the timetable for today, for e.g. `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. The user inputs `timetable -day`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. The timetable for the day is shown to the user. The user is able to see the Tuesday CS2101 lecture that was "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "f0fz"
        },
        "content": "previously added in step 1."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "f0fz"
        },
        "content": "##### Filter the timetable"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below is an example scenario to filter the timetable for CS2101 LECTURE."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. The user adds a lesson to the timetable for today, for e.g. `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. The user inputs `timetable -filter CS2101 - - - LECTURE`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. All CS2101 lectures in the timetable are shown to the user. The user is able to see the CS2101 weekly lectures that were previously added in step 1."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Wrong Command format\\"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -filter`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "f0fz"
        },
        "content": "##### Reset the timetable"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Given below is an example scenario to reset the timetable. "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. The user inputs `timetable -reset`.  "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. ra.VI will ask for the current NUS week. This input is parsed and re-initialises the `TimeTableManager` with a new `Timetable`. "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### [Proposed] Notes Feature"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "![Class diagram for Notes Feature in Command class](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/diagrams/NotesClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "The proposed notes feature is facililated by the NotesManager class and NotesCommand class"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Extending from the abstract NotesCommand class are the NotesAddCommand, NotesListCommand, NotesDeleteCommand, and NotesViewCommand classes. "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `NotesManager.addNote()` - Add a note"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `NoteManager.listNote()` - View the list of notes and their indexes"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `NoteManager.deleteNote()` - Delete a note"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `NoteManager.viewNote()` - View a particular note"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Add notes"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Given below is an example scenario to add a note and how the notes feature behave at each step"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 1. The user inputs `note -add Orbital Mechanics: Application of ballistics and celestial mechanics`, as the user wants to add a note."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 2. This input is parsed by NotesCommandParser and it returns NotesAddCommand. "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 3. NotesAddCommand is executed, returning a `CommandResult` containing a success message if the note has been added successfully. Otherwise, an exception message will be shown explaining the exception to the user."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Viewing list of notes"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Given below is an example scenario to view the list of notes and how the notes feature behaves at each step."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 1. The user inputs `note -list` as the user wants to view the list of notes."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 2. This input is parsed by NotesCommandParser and it returns NotesListCommand."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 3. NotesListCommand is executed, returning a `CommandResult` containing the list of notes and their indexes. Otherwise, an exception message will be shown explaining the exception to the user. "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Delete a note"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Given below is an example scenario to delete a note and how the notes feature behaves at each step."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 1. The user inputs `note -del 1` as the user wants to delete the note with index 1."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 2. This input is parsed by NotesCommandParser and it returns NotesDeleteCommand."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 3. NotesDeleteCommand is executed, returning a `CommandResult` containing a success message if the note has been deleted successfully. Otherwise, an exception message will be shown explaining the exception to the user. "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* Currently available notes and their indexes can be found by entering `notes -list`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### View the timetable"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Given below is an example scenario to view a particular note in the list"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 1. The user inputs `note -view 1` as the user wants to view the note with index 1."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 2. This input is parsed by NotesCommandParser and it returns NotesDeleteCommand."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Step 3. NotesViewCommand is executed, returning a `CommandResult` containing a the note if the note has been shown successfully. Otherwise, an exception message will be shown explaining the exception to the user. "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "## Appendix A: Product scope"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "The target user profile for ra.VI is described by the following:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* A student of NUS (a freshman in particular)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* Has a need to manage their school related tasks, classes and notes"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* Types fast"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "A common problem amongst freshmen is the inability to organise all the incoming information.  "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "NUS places a focus on taking responsibility for your own learning, so it might be a tough transition from tertiary education.  "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "A lot of students miss lessons, assignments, and even exams, just because they\u0027re struggling to adapt to the new"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "environment."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "ra.VI helps students to manage their school-related information in a compact, stripped-down interface that does not bombard them with too much information.  "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "When you receive your modules and lessons, simply enter them into ra.VI as they arrive. ra.VI will keep track of all of it"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "for you.  "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "You can create tasks, give them deadlines, and tag them to certain modules. You can see all of your tasks and deadlines at a glance.  "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "You can even write and save your notes in ra.VI, uncluttering your work environment even further."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "ra.VI is even integrated with NUSMods, bringing its comprehensive library of information to your fingertips.  "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "All the above features are wrapped in a compact, no-frills command-line interface. No confusing menus and dropdowns"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "to distract you; only simple commands to give you what you want."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|save and load my information|store all my school related data in the application|"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add tasks to the application|keep track of all my tasks|"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add deadlines for tasks to the application|keep track of when I need to complete the tasks|"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add modules to the application|keep track of them during the school term|"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|delete tasks from the application|keep track of new tasks|"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|delete modules from the application|keep track of new modules|"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "|v1.0|user|edit task descriptions|make changes or updates to my tasks|"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "|v1.0|user|edit module code|make changes to module codes in the list|"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "|v1.0|user|mark task as done|update the completion status of my tasks|"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "|v1.0|user|view my task list|be aware of the tasks I have added to my list|"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "|v1.0|user|view my module list|be aware of the modules I have added to my list|"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "|v2.0|user|receive help easily|use ra.VI efficiently|"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v2.0|user|add lessons to my timetable|view my timetable with a simple command|"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v2.0|user|delete lessons from my timetable|view my accurate timetable with a simple command|"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v2.0|user|view my timetable quickly|be aware of my classes and prepare for them quickly|"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v2.0|user|filter the lessons in my timetable |be aware of specific classes and prepare for them quickly|"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "f0fz"
        },
        "content": "|v2.0|user|view a summary of my tasks|be aware of my tasks and work on them as needed|"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "|v2.0|user|grade my modules|keep track of my grades for respective modules|"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "|v2.0|user|calculate my accumulative cap|keep track of my progress in university|"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v2.0|user|undo unintended commands|make amends quickly|"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "|v2.1|user|reset my timetable|prepare for another semester|"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "f0fz"
        },
        "content": "should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "## Appendix D: Glossary"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* *Mainstream OS* - Windows, Linux, OSX"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "## Appendix E: Instructions for manual testing"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Download the latest version of `ra.VI` from [here](https://github.com/AY2021S1-CS2113T-T09-2/tp/releases/tag/v2.0) and copy it into an empty folder."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Open a new terminal window and navigate to the same directory where `ravi.jar` is located. "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "3. Enter the command `java -jar ravi.jar` into the terminal window to launch the application. The application should now be running."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "4. Enter the command `help` to get a list of all available commands and its usages."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "f0fz"
        },
        "content": "5. For a detailed list on available features, refer to the [user guide](https://github.com/AY2021S1-CS2113T-T09-2/tp/blob/master/docs/UserGuide.md)."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "6. Simply enter `bye` to terminate and exit the application."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Adding a task"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Adding a task without deadline"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `add -t read a book`\\"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Task `read a book` will be added to the task list. Details of the success of the added task will be shown."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    2. Test case: `add -t `\\"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: As there is no task to add, details of the associated error message will be shown."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. Adding a task with deadline"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `add -t read a book -by 20-10-2020 1800`\\"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Task `read a book` will be added to the task list. Additionally, the deadline "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    will be added to the task. Details of the added task is shown in the status message."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    2. Test case: `add -t read a book -by 20/20/2020`\\"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: Invalid deadline `20/20/2020` will not allow the task to be added to the task list. Details of the "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    associated error message will be shown."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Adding a module"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Adding a module"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `add -m CS2113T`\\"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Module `CS2113T` will be checked against the NUS module list.  "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Since `CS2113T` is a valid module, it will be added to the module list. Details of the success of the added module will be shown."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    2. Test case: `add -m Fake Mod`\\"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: As there is no such module `Fake Mod` in the NUS module list, it will not be added to the module list. "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Details of the associated error message will be shown."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Deleting a task"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Deleting a task"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `del -t 1` where `task` is index `0` in the task list.\\"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: The DeleteCommandParser parses `1` and converts it to index `0` in the task list. "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    As task `task` is the index `0` in the task list, `task` will be deleted from the task list."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    2. Test case: `del -t 10` where there is no task of index `9` in the task list.\\"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: The DeleteCommandParser parses `10` and converts it to index `9` in the task list. "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    As there is no task of index `9` in the task list, the deletion will give an error. "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Details of the associated error message will be shown."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Deleting a module"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Deleting a module"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `del -m CS2113T` where `CS2113T` has been previously added to the module list.\\"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: As module `CS2113T` is in the module list, `CS2113T` will be deleted from the module list. "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Details of the success of the deleted module will be shown."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    2. Test case: `del -m 0` where there is no module `0` in the module list.\\"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: As there is no such module in the module list, the deletion will give an error. "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Details of the associated error message will be shown."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Editing a task"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Editing a task "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Test case: `edit -t 3 read a book`, where task index `3` has already been added previously into the task list.\\"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: As the task at index `3` is in the task list, the task description will be edited and changed to `read a book`. "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Details of the success of the edit task will be shown."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    2. Test case: `edit -t 10 meet girlfriend`, where there is no task `10` in the task list.\\"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: As there is no such task in the task list, an error will be given to the user. Details of the associated error "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    message will be shown."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Editing a module"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Editing a module "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Test case: `edit -m CG2271 GER1000`, where module `CG2271` has already been added previously into the module list.\\"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: As `CG2271` is in the module list, the module will be edited and changed to `GER1000`. Details of the success "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    of the edit module will be shown."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    2. Test case: `edit -m ACC1101 GER1000`, where there is no module `ACC1101` in the module list.\\"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: As there is no such module in the module list, an error will be given to the user. Details of the associated "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    error message will be shown. "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Marking a task as done / undone"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Marking a task as done"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Test case: `done 1`, where `task` is index `0` in the task list.\\"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: The DoneCommandParser parses `1` and converts it to index `0` in the task list. "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    As task `task` is the index `0` in the task list, `task` will be marked as done."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    2. Test case: `done 10`, where there is no task of index `9` in the task list.\\"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: The DoneCommandParser parses `10` and converts it to index `9` in the task list. "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    As there is no task of index `9` in the task list, an error is thrown. Details of the associated error message will be shown."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Viewing the task list"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Viewing the task list"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Test case: `list -t`, with the tasks \"read book\" and \"buy stuff\" in the task list.\\"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: A list containing the two tasks will be shown."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    2. Test case: `list -t` when no tasks have been added.\\"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: As there are no tasks in the list, a message signifying the empty list is shown."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Viewing the module list"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Viewing the module list"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Test case: `list -m`, with the modules \"CS2113T\" and \"CS2101\" in the module list.\\"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: A list containing the two module codes, MCs, and grades associated will be shown."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    2. Test case: `list -m` when no modules have been added.\\"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: As there are no modules in the list, a message signifying the empty list is shown. "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Viewing help messages and prompts"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Viewing the help message for a specific command"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Test case: `help add`\\"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: A help message containing the `add` command format and examples of its usage is shown."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    2. Test case: `add CS2101`\\"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: As this is an incorrect command format, a help message containing the correct format is shown. A prompt message suggesting the use of `help` is also shown. "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Viewing task summary"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Viewing the task summary "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Test case: "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    `summary`, when the list contains"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Read a book [x]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    2. Return book [x], by 06:00PM, Tuesday, 20 Oct 2020"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    3. meeting [√], by 08:00PM, Thursday, 22 Oct 2020"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: The task summary will be shown, each task belonging to their respective categories. "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Amending the timetable"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Adding a lesson"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `timetable -add CS2113T MONDAY 1200 1400 LECTURE 0` where `CS2113T` is a module in module list.\\"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: The TimeTableCommandParser parses the lesson parameters, `CS2113T` is the associated module, "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    `MONDAY 1200 1400 LECTURE` reflects that the lesson is a lecture on Monday from 12pm to 2pm. `0` indicates "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    that this lesson only occurs once. Since `CS2113T` is a valid module in the module list, the lesson will be added "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    to the timetable. Details of the success of the added lesson will be shown."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. Deleting a lesson"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `timetable -del MONDAY 0` where the only lesson on MONDAY is a CS2113T lecture from 12pm to 2pm.\\"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: The TimeTableCommandParser parses the lesson parameters, and searches for a lesson/s of index `0` on "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    `MONDAY`. However, the timetable does not contain such lesson/s. Details of the associated error message will be shown."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Viewing the timetable"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Timetable for the day"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `timetable -day`\\"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: If there are no lessons for today, this information is shown to the user. Otherwise, the lessons for today "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    are shown to the user."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. Timetable for the week"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `timetable -week`\\"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: The lessons for Monday to Sunday of this week are shown to the user."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Filtering the timetable"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Filter all lessons"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `timetable -filter CS2113T - - - -`, which filters CS2113T lessons only.\\"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: All CS2113T lessons are shown to the user."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    2. Test case: `timetable -filter CS2113T - - - LECTURE`, which filters CS2113T **lectures** only.\\"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: All CS2113T lectures are shown to the user."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    3. Test case: `timetable -filter CS2113T MONDAY 1200 2000 LECTURE`, which filters CS2113T lectures **on Monday "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    between 1200 and 2000** only.\\"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: All CS2113T lectures on Monday between 1200 and 2000 are shown to the user."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Resetting the timetable"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "1. Reset the timetable"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    1. Test case: `timetable -reset`\\"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    Expected: TimeTableManager clears and reinitialises the timetable. The user is prompted to input the current week for reinitialisation."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Calculating the Accumulated Cap after the current semester"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. Calculate the Cap:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `cap 46 4.24`, where the modules in Module List has already been graded individually.\\"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Excepted: Each module in `ModuleManager` will be checked for its `moduleCredit` and `grade`."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Using the accumulative CAP formula, the user\u0027s most updated CAP will be calculated and shown to user."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Grading an existing module in module list"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. Grade the module:"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `grade CS2101 4 A+`, where the module `CS2101` has been previously added to the module list.\\"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Expected: Module `CS2101` will be checked if its inside ModuleManager."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Since `CS2101` exists then the attributes of `4` and `A+` which are module credit and grade,"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    will be added to the Module.  "
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Undo the previous command"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. Undo previous action:"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `undo`, after the user has input in an initial command.\\"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: The previous Command that was input will be undone. Details of the success of the undone will be shown."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    2. Test case: `undo`, without any initial input by the user.\\"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Expected: Due to the fact that there is nothing to undo as there was no user input, details of the associated error message will be shown."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Do note that if you exit the application without entering `bye`, ra.VI will still be able to retrieve data that was "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "amended during that session. However, this is not a recommended way to use ra.VI.**\\"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Tampering with the files created by ra.VI, through any other application, may also cause ra.VI to malfunction and is "
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "f0fz"
        },
        "content": "strongly discouraged.**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. Add tasks and modules, then exit"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `add -t task 1`, `add -m CS1010`, `bye`\\"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: `user_task_data.json` and `user_mod_data.json` should be created in `\u003cROOT\u003e/data/` with a JSON"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    representation of the task and module."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Loading tasks and modules"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: Run ra.VI again after the first test case, then run `list -t` and `list -m`.\\"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: `task 1` should be shown in the task list, and `CS1010` should be shown in the module list."
      }
    ],
    "authorContributionMap": {
      "f0fz": 345,
      "tobiasceg": 28,
      "amalinasani": 183,
      "-": 31,
      "Aseanseen": 111
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "# ra.VI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Hello! Thank you for choosing **ra.VI**."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "**Repository Assistant with a Versatile Interface (ra.VI)** is a desktop app for managing tasks, deadlines, and notes, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "If you can type fast, **ra.VI** can manage your tasks faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "-": 6,
      "Aseanseen": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "# ra.VI User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Welcome to the ra.VI User Guide! Choose a section or sub-section from the table of contents below, get step-by-step instructions, and plan your day."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "[1. **Introduction**](#1-introduction) \u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.1 About](#11-about) \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.2 Product Overview](#12-product-overview) \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.3 Keywords](#13-keywords)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "[2. **Quick Start**](#2-quick-start)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "[3. **Features**](#3-features) \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.1 Viewing help](#31-viewing-help-help) \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.1.1 Viewing help for a specific command](#311-viewing-help-for-a-specific-command-help-command_word) \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.2 Add an item](#32-adding-an-item-add-opt-args) \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2.1 Add a task](#321-adding-a-task-add--t--by) \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2.2 Add a module](#322-adding-a-module-add--m) \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.3 Edit an item](#33-editing-an-item-edit-opt-args) \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.1 Edit a task description](#331-editing-a-task-description-edit--t)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.2 Editing a module](#332-editing-a-module-edit--m) \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.4 Delete an item](#34-deleting-an-item-del-opt-args) \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.1 Delete a task](#341-deleting-a-task-del--t) \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.2 Delete a module](#342-deleting-a-module-del--m) \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.5 List items](#35-listing-all-items-list-opt-args) \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.5.1 List tasks](#351-listing-all-tasks-list--t) \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.5.2 List modules](#352-listing-all-modules-list--m)  \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.6 Grade a module](#36-grade-a-existing-module-grade) \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.7 Calculate CAP](#37-calculate-your-cap-after-the-semester-cap) \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.8 Mark task as done](#38-mark-as-done-done-task_index) \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.9 Undo previous command](#39-undo-a-command-undo) \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.10 Summary](#310-summary-summary) \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.11 Timetable](#311-timetable-timetable-opt-args) \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.11.1 View timetable](#3111-view-the-timetable-timetable-args) \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.11.2 Add a lesson](#3112-add-a-lesson-timetable--add) \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.11.3 Delete a lesson](#3113-delete-a-lesson-timetable--del) \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.11.4 Reset timetable](#3114-reset-the-timetable-timetable--reset) \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.12 Exit](#312-exiting-the-program-bye) \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "[4. **FAQ**](#4-faq) \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "[5. **Command Summary**](#5-command-summary) \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 1 Introduction"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Repository Assistant with a Versatile Interface (ra.VI) is a desktop app for managing tasks, deadlines, and timetable, optimized for use via a Command Line Interface (CLI). If you can type fast, ra.VI can manage your tasks and timetable faster than traditional GUI apps."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 1.1 About"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This user guide provides a clear documentation of ra.VI\u0027s features. In addition, the quick start guide provides an end-to-end setup process to begin tracking your tasks and timetable with ra.VI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 1.2 Product Overview"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "ra.VI is targeted at the NUS freshman. As a freshman, there are many documents and new procedures that you must get familiar with. This may be daunting for you but ra.VI will provide you with the assistance you need. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "By helping you keep track of your tasks and deadlines, you will be able to keep on top of deadlines. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Moreover, the timetable feature helps you to schedule your lessons, allowing you to be more prepared for lessons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Adding on, ra.VI also allows you to keep track of your CAP, so that you can keep tabs on how well you are doing, motivating you towards that elusive CAP 5.0."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 1.3 Keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Tasks**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "A task refers to something that you would like to get done. This refers to reading a book or doing an assignment. Tasks can be created with or without a deadline. \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Deadline**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "A deadline refers to a date and time associated with a task. This is in the format: DAY-MONTH-YEAR TIME_24H, e.g. `23-12-2020 1400` or `1-2-2000 0800` \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Modules**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "A module refers to a module taken under NUS. Entered modules will be checked against the list of NUS modules. \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**CAP**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "CAP refers to Cumulative Average Point, which is the grading system used by NUS. CAP will be calculated based on your modules. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Done**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "A task can be marked as done. This will signify completion of the task so that you can get an easy view of any remaining tasks. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Timetable**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "The timetable is specific to you. It allows you to add lessons to your timetable with respect to the modules that you are taking. After setting the timetable up the first time, you do not need to go through the set up again. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Day**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Values for `\u003cday\u003e`:\\"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Lesson Type**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Values for `\u003clesson type\u003e`:\\"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`TUTORIAL`, `LECTURE`, `SEMINAR`, `LAB`, `RECITATION`, `SESSION`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Time**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Format of `\u003ctime\u003e`:\\"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Must be in the 24h format e.g. `0900`, `1415`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 2 Quick Start"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. Download the latest version of `ra.VI` from [here](https://github.com/AY2021S1-CS2113T-T09-2/tp/releases/tag/v2.1)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for `ra.VI`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4. Open a command prompt in the folder from step 3 and enter `java -jar ravi.jar`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "5. Enter the current NUS week number as prompted."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will show the help message.  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -t`: Add a task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `list -t`: List all tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `bye`: Exit the program"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "6. Refer to the Features below for details of each command, or refer to the command summary for a quick look at all possible commands."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## 3 Features "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.1 Viewing help: `help`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Shows a message with the list of available commands and functions."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.1.1 Viewing help for a specific command: `help \u003ccommand_word\u003e`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `help timetable`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `help add`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Get detailed help message for each command"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\thelp"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Hello! I\u0027m ra.VI, your personal NUS assistant."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "I\u0027m here to help you manage your tasks, modules, and lessons."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "This help message appears when you type \u0027help\u0027, or an unrecognised command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "To find out more about any of my commands, type \u0027help \u003ccommand\u003e\u0027."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Here\u0027s a list of my commands to help you out:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "🏃 Action commands:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ add       → Add a task or module"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ del       → Delete a task or module"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ edit      → Edit a task or module"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ done      → Mark a task as complete"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ grade     → Grades and allocates MCs to a Module"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ undo      → Undo the previous action (if you made changes)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ timetable → Manage your timetable"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "📖 Viewing commands:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ list      → Lists all tasks or modules"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ summary   → See a neat summary of your tasks"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ timetable → View your timetable, by day or by week"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "🛠 Utility commands:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ help      → Get detailed help for each command"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t▻ bye       → Exit ra.VI (saves all changes!)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\thelp add"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Add a task to the scheduler."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\tFormat: add -t \u003ctask_name\u003e [-by \u003cdeadline\u003e]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\tExample usage: add -t Read Book"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\t               add -t Return Book -by 30-12-2020 1800"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Add a module from NUSMods to the scheduler."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\tFormat: add -m \u003cmodule_code\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\tExample usage: add -m CS2113T"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.2 Adding an item: `add \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.2.1 Adding a task: `add -t [-by]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Add a task to the scheduler.  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `add -t \u003ctask_name\u003e [-by \u003cdeadline\u003e]`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -t read chapter 1`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -t read chapter 1 -by 30-12-2020 1800`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tadd -t read a book"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your task has been added successfully."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your new task - \u0027read a book [x]\u0027"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tadd -t read a book -by 02-02-2020 1900"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your task has been added successfully."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your new task - \u0027read a book [x], by 07:00PM, Sunday, 02 Feb 20\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.2.2 Adding a module: `add -m`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Add a module to the scheduler.  "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `add -m \u003cmodule_code\u003e`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -m CS1231`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tadd -m CS1010s"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your module has been added successfully."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your new module - \u0027CS1010S: Programming Methodology (0.0MC) (Grade: No grade yet)\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.3 Editing an item: `edit \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.3.1 Editing a task description: `edit -t`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Edit a task description in the scheduler.  "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `edit -t \u003ctask_index\u003e \u003ctask_name\u003e`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `edit -t 3 revise for CS2113`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "**Note:** \u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " You can find the task indexes with `list -t`  "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tedit -t 1 buy stuff"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your task has been edited successfully."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your task before editing - \u0027go running [x]\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your task after editing  - \u0027buy stuff [x]\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.3.2 Editing a module: `edit -m`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Edit a module code in the scheduler.  "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `edit -m \u003cmodule_code\u003e \u003cnew_module_code\u003e`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `edit -m CS2113 CS2113T`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tedit -m CG1112 CG2271"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your module has been edited successfully."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your module before editing - \u0027CG1112: Engineering Principles and Practice II (4.0MC) (Grade: CS)\u0027"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your module after editing  - \u0027CG2271: Real-Time Operating Systems (4.0MC) (Grade: CS)\u0027"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.4 Deleting an item: `del \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.4.1 Deleting a task: `del -t`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Remove a task from the scheduler.  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `del -t \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `del -t 1`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tdel -t 1"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your task has been deleted successfully."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your deleted task - \u0027buy stuff [x]\u0027"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.4.2 Deleting a module: `del -m`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Remove a module from the scheduler.  "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `del -m \u003cmodule_code\u003e`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `del -m CS1010` "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tdel -m CG1112"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your module has been deleted successfully."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your deleted module - \u0027CG2271: Real-Time Operating Systems (4.0MC) (Grade: CS)\u0027"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.5 Listing all items: `list \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.5.1 Listing all tasks: `list -t`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "List all tasks in the scheduler.   "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `list -t`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tlist -t"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Here\u0027s your list:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. go running [x]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "2. buy something [x], by 07:00PM, Sunday, 02 Feb 20"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.5.2 Listing all modules: `list -m`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "List all modules in the scheduler.  "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `list -m`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tlist -m"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Here\u0027s your list:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. CG1111: Engineering Principles and Practice I: A+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "2. CS2101: Effective Communication for Computing Professionals: No grade yet"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.6 Grade a existing module: `grade`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Assign a grade to a module in the Scheduler."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Format: `grade \u003cmodule Code\u003e \u003cmodule credit\u003e \u003cgrade\u003e`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "**Note:** \u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;CS \u0026 CU are covered in the cap calculator \u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;All grades input must be in Caps. ie `A+`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `grade CS2101 4 B+`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tgrade CS2101 4 A-"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your module has been graded successfully."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "The module - \u0027CS2101: Effective Communication for Computing Professionals (4.0MC) (Grade: A-)\u0027. "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.7 Calculate your cap after the semester: `cap`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Calculate your new updated cap, accumulated from past semesters."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Format: `cap \u003ctotal module credit taken\u003e \u003ccurrent cap\u003e`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "**Note:** For first semester, key in \u003cbr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;`\u003ctotal module credit taken\u003e` \u003d 0 \u003cbr\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;`\u003ccurrent cap\u003e` \u003d 0 \u003cbr\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "To get the current semester\u0027s CAP."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `cap 46 4.24`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tcap 20 4.24"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your current CAP is "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "4.31"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.8 Mark as done: `done \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Mark a task in the scheduler as done.  "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `done \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `done 1`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "**Note:** \u003cbr\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " You can find the task indexes with `list -t`  "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tdone 1"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "The task has been successfully marked as complete."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your completed task - \u0027buy new stuff [√]\u0027"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.9 Undo a command: `undo`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Takes the previous command and revert its changes.\\"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Requires the previous command to be undone, a command that affects the storage. e.g. add, del, edit, done"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. `add -m CS2113T`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. `undo`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tundo"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Undo is successful."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command undone - \u0027done 1\u0027"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.10 Summary: `summary`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Gets an overall view of the tasks."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Format: `summary`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `summary`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tsummary"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Here\u0027s a summary of your latest tasks..."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⏰ Incomplete tasks with deadlines:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. buy something [x], by 07:00PM, Sunday, 02 Feb 20"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "❗ Incomplete tasks with no deadline:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. go running [x]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "👌 Completed tasks:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your list is empty."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.11 TimeTable: `timetable \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.11.1 View the timetable: `timetable \u003cargs\u003e`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "View the timetable for the day or for the week.\\"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003cargs\u003e` : Must be one of the following : `-day` or `-week`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -day`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -week`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\ttimetable -day"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Current NUS Week: 1"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "TUESDAY, 03-11-20:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " ┌───────────┬────┬────────────────────┐"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " │   Time    │ ID │       Lesson       │"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " ├───────────┼────┼────────────────────┤"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " │ 1300-1400 │ 01 │  CS2101 Tutorial   │"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " └───────────┴────┴────────────────────┘"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\ttimetable -week"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Current NUS Week: 1"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "No lessons on MONDAY, 02-11-20."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "TUESDAY, 03-11-20:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " ┌───────────┬────┬────────────────────┐"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " │   Time    │ ID │       Lesson       │"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " ├───────────┼────┼────────────────────┤"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " │ 1300-1400 │ 01 │  CS2101 Tutorial   │"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " └───────────┴────┴────────────────────┘"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "No lessons on WEDNESDAY, 04-11-20."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "THURSDAY, 05-11-20:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " ┌───────────┬────┬────────────────────┐"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " │   Time    │ ID │       Lesson       │"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " ├───────────┼────┼────────────────────┤"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " │ 0900-1200 │ 01 │     CG1111 Lab     │"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " └───────────┴────┴────────────────────┘"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "No lessons on FRIDAY, 06-11-20."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "No lessons on SATURDAY, 07-11-20."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "No lessons on SUNDAY, 08-11-20."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.11.2 Add a lesson: `timetable -add`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Adds a lesson to the timetable.\\"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Format: `timetable -add \u003cmodule\u003e \u003cday\u003e \u003cstart time\u003e \u003cend time\u003e \u003clesson type\u003e \u003crepeat\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "`\u003cmodule\u003e` : Must be added to the module list. See module list with `list -m`. \u003cbr\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "`\u003cday\u003e` : Must be one of the following : `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY` \u003cbr\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "`\u003cstart time\u003e` : Must be in 24h format \u003cbr\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "`\u003cend time\u003e` : Must be in 24h format and is after `\u003cstart time\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "`\u003clesson type\u003e` : Must be one of the following : `TUTORIAL`, `LECTURE`, `SEMINAR`, `LAB`, `RECITATION`, `SESSION` \u003cbr\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003crepeat\u003e` : 0 : One time lesson ; 1 : Once a week ; 2 : Every even week ; 3 : Every odd week"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 0`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -add CS2113T MONDAY 1300 1500 LAB 1`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\ttimetable -add cg1111 MONDAY 0900 1200 LAB 1"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your lesson has been added successfully."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your new lesson - \u0027CG1111 Lab: MONDAY 900-1200\u0027"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Added to: every week."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### 3.11.3 Delete a lesson: `timetable -del`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Deletes a lesson from the timetable.\u003cbr\u003e "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Format: `timetable -del \u003cday\u003e \u003clesson index\u003e` \u003cbr\u003e "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "`\u003cday\u003e` : Must be one of the following : `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY` \u003cbr\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "`\u003clesson index\u003e` : Index of the lesson to be deleted. See timetable and the indexes with `timetable -day` or `timetable -week` \u003cbr\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -del MONDAY 1`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\ttimetable -del MONDAY 1"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your lesson has been deleted successfully from all weeks."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Your deleted lesson - \u0027CG1111 Lab: MONDAY 900-1200\u0027"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### 3.11.4 Reset the timetable: `timetable -reset`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Clears the current timetable and creates a new timetable.\\"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `timetable -reset`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "**Note:** \u003cbr\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "After reset, it is mandatory to key in the current academic week"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `timetable -reset` \u003cbr\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `3`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of ouput:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\ttimetable -reset"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Please enter the current week num e.g. 1 - 14 where 7 is recess week."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "In ra.Vi, NUS week 7 onwards is week 8 onwards. "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "For example, in Academic week 9, please input the current week num to be 10"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "3"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Timetable reset successful."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 3.12 Exiting the program: `bye`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Exits ra.VI.\\"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of output:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "⋗\tbye"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Goodbye, hope to see you soon!"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "════════════════════════════════════════════════════════════════════════════════"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "```"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## 4 FAQ"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Q**: Can I use ra.VI on operating system other than Windows?\\"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**A**: Yes. ra.VI is compatible with Windows, macOS and Linux."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Q**: Can I use ra.VI throughout my time in NUS?\\"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**A**: Yes! In fact, we strongly encourage using ra.VI for your time at NUS. ra.VI is robust enough to handle the trials of time."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Q**: How do I transfer my data to another computer?\\"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**A**: Zip the folder where you have installed ra.VI on and transfer the zip file to the other computer. Unzip the folder on the new computer, and you are good to go!"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Q**: Can I edit the files created by ra.VI?\\"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**A**: It is not advised to edit the files created by ra.VI with any other software."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**Q**: Can I force close ra.VI?\\"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**A**: It is not advised to force close ra.VI. If you decide to do so, the changes made during that current session may get corrupted. To close ra.VI, please enter `bye`."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## 5 Command Summary"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Function | Command |"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "|--------|---------------------------------------|"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Add a task | `add -t \u003ctask_name\u003e [-by \u003cdeadline\u003e]`|"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Add a module | `add -m \u003cmodule_code\u003e` |"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Delete a task | `del -t \u003ctask_index\u003e` |"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Delete a module | `del -m \u003cmodule_code\u003e` |"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Edit a task | `edit -t \u003ctask_index\u003e \u003ctask_name\u003e` |"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Edit a module | `edit -m \u003cmodule_code\u003e \u003cnew_module_code\u003e` |"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Mark task as Done | `done \u003ctask_index\u003e` |"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Grade and allocated MCs to a module | `grade \u003cmodule_code\u003e \u003cgrade\u003e` | "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "| Calculate cap | `cap \u003ctotal mc taken\u003e \u003ccurrent cap\u003e` |"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Undo previous action | `undo` | "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Add lesson to timetable | `timetable -add \u003cmodule\u003e \u003cday\u003e \u003cstart time\u003e \u003cend time\u003e \u003clesson type\u003e \u003crepeat\u003e` |"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Delete lesson from timetable | `timetable -del \u003cday\u003e \u003clesson index\u003e` |   "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| List all tasks | `list -t` |"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| List all modules | `list -m` |"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| View task summary | `summary` |"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| View day\u0027s timetable | `timetable -day` |"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| View week\u0027s timetable | `timetable -week` |"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "| Filter timetable | `timetable -filter \u003cmodule\u003e \u003cday\u003e \u003cstart time\u003e \u003cend time\u003e \u003clesson type\u003e` |"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Reset timetable | `timetable -reset` |"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Get list of commands | `help` |"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Get detailed help message for each command | `help \u003ccommand_word\u003e` |"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "| Exit ra.VI | `bye` |"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 353,
      "f0fz": 1,
      "amalinasani": 77,
      "-": 35,
      "Aseanseen": 186
    }
  },
  {
    "path": "docs/team/amalinasani.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "# Amalina Sani\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "## CS2113T Project: ra.VI"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Repository assistant with a Versatile Interface (ra.VI) is a desktop app for managing tasks, deadlines, and timetables, optimized for use via a Command Line Interface (CLI). "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Ra.VI aims to help freshmen ease into and adapt to their new university schedules. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Features"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* **Done Feature**: Added the ability to mark a task as done in ra.VI. (Pull request [\\#38](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/38))"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * What it does: Allows the user to mark a task in the task list as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Justification: This feature is integral to the product so that the user can update the completion status of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Highlights: This enhancement ties in with the `summary` command, in which the tasks will be listed according to completion status. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* **List Feature**: Added the ability to list all added tasks and modules in ra.VI. (Pull request [\\#38](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/38))"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * What it does: Allows the user to view the list of tasks or modules. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Justification: This feature is integral to the product so that the user can view all the tasks and modules that has been added at a quick glance. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Highlights: This enhancement affects existing commands as the task index from `list` is required as a parameter for `done` and `edit` commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* **Help Feature**: Added the ability to view the list of all available commands, and help messages for each command. (Pull requests [\\#39](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/39), [\\#107](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/107))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * What it does: A general help message allows the user to view the list of all available commands and its functions. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  Detailed help messages for each command allows the user to view the command\u0027s format and example usage. A prompt to use `help` is also shown to the user when the user inputs an incorrect command. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Justification: This feature is important in providing seamless assistance for the usage of ra.VI. It assists the user in navigating all the features and commands of the application. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Highlights: The implementation of this feature was challenging as a unique help message had to be integrated into each existing command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* **Summary Feature**: Added the ability to view a task summary in collaboration with [Jun You](https://github.com/AY2021S1-CS2113T-T09-2/tp/tree/master/docs/team/f0fz.md). (Pull request [\\#93](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/93))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * What it does: Allows the user to view a task summary, categorising tasks into \"Incomplete tasks with deadlines\", \"Incomplete tasks without deadlines\", and \"Completed tasks\". "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Justification: This feature is important in providing the user with a brief, categorised list of tasks for quick viewing. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* **View Timetable Feature**: Added the ability to view the timetable for the day or week in collaboration with [Sean Lim](https://github.com/AY2021S1-CS2113T-T09-2/tp/tree/master/docs/team/aseanseen.md). (Pull request [\\#120](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/120))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * What it does: Allows the user to view the timetable, listing all lessons and lesson times for the day or week."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Justification: This feature is important in providing the user with a brief, day-to-day timetable of lessons for quick viewing. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* **Reset Timetable Feature**: Added the ability to reset the timetable. (Pull request [\\#230](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/230))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * What it does: Allows the user to clear and reinitisialise the timetable."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Justification: This feature is necessary for the user to populate the timetable with new lessons in preparation for a new semester.  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Code contributed [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003damalinasani\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Documentation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added documentation for the features `help`, `add`, `edit`, `del`, `list`, `done`, `bye` [\\#106](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/106)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added a command summary table [\\#132](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/132)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added documentation for the features `timetable -reset` [\\#240](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/240)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added instructions for manual testing. [\\#128](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/128)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added implementation details and sequence diagram for the `list` feature. [\\#133](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/133)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added documentation for `timetable -reset` [\\#240](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/240)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added user stories for existing features [\\#251](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/251)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added manual testing steps for `list`, `help`, and `summary` commands. [\\#251](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/251)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    * Added implementation details and class diagram for the proposed `notes` feature [\\#257](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/257)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Project management"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* Added and managed issues for milestones v1.0, v2.0, v2.1. "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Enhancements to existing features"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Wrote additional tests for `help`,`done`,`list` commands to increase coverage. (Pull requests [\\#79](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/79), [\\#252](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/252))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Solve issues surfaced from bug bounty. ([\\#233](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/233))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Community"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2113T-T12-2/tp/issues/226), [2](https://github.com/AY2021S1-CS2113T-T12-2/tp/issues/225), [3](https://github.com/AY2021S1-CS2113T-T12-2/tp/issues/224), [4](https://github.com/nus-cs2113-AY2021S1/tp/pull/36/files/8b45df880852c7cd42988080fb263f72f22a6328))"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 61
    }
  },
  {
    "path": "docs/team/aseanseen.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "# Sean Lim Zhi Xiang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "# CS2113T Project: ra.VI"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Repository Assistant with a Versatile Interface (ra.VI) is a desktop app for NUS freshmen, helping them manage tasks, deadlines, and their timetable. It is optimized for use via a Command Line Interface (CLI), written in Java and is built to run on Java 11 on Linux, Mac and Windows machines."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## My contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Features implemented:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **New Feature**: Added the timetable feature [#101](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/101) [#118](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/118)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * What it does: Allows the user to manage their lessons in their timetable. This includes adding, deleting, viewing and filtering."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Justification: This feature allows students to manage all of their classes in addition to their tasks and deadlines. This allows the student be aware of their lessons on a daily basis and prepare for them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Highlights: This feature was challenging due to the Time element. Therefore, we had to be very careful during our implementation, creating a robust data structure to handle the timetable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * In-depth contribution:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Implemented the parsing of the timetable commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            * Used Regex to ensure that only timetable commands with the appropriate format create `TimeTableCommand` objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Implemented the `TimeTableManager` to handle the lessons from the timetable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            * Implemented `TimeTableManager` to contain a hashmap of week number of the year to `LessonManager` objects where each `LessonManager` contained the lessons for a week.\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            `TimeTableManager` creates the number of `LessonManager`(s) based on the number of weeks left in one semester."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            * Amended by [Jun You](https://ay2021s1-cs2113t-t09-2.github.io/tp/team/f0fz.html) to include a `TimeTable` object instead due to the difficulty faced during saving."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Implemented the commands to add and delete lessons from the timetable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            * Created `TimeTableCommand`, `TimeTableAddCommand`, `TimeTableDeleteCommand`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Credits: [Jun You](https://ay2021s1-cs2113t-t09-2.github.io/tp/team/f0fz.html)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **New Feature**: Added add/delete tasks and modules feature [#17](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/17) [#35](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/35) [#54](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/54)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * What it does: Allows the user to manage their tasks and modules. This includes adding, deleting and handling of deadlines."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Justification: This feature allows students to manage their tasks, deadlines and modules. This allows the student be on top of their tasks and deadlines, while keeping track of the modules they are taking / have taken."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Highlights: Implemented with adaptations from my [iP](https://github.com/Aseanseen/ip)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * In-depth contribution:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Created `AddTaskCommand`, `AddModuleCommand`, `DeleteTaskCommand`, `DeleteModuleCommand`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Credits: Implemented with adaptations from my [iP](https://github.com/Aseanseen/ip)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **New Feature**: Added main class and exit command [#40](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/40) [#53](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/53)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * What it does: Main entry and exit points for the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Justification: This is a fundamental feature for the app to work."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Credits: Implemented with adaptations from my [iP](https://github.com/Aseanseen/ip) and [AddressBook (Level 2)](https://se-education.org/addressbook-level2/)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003daseanseen)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **Enhancements**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * After a successful undo command, show the user the command that was undone. [#241](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/241)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Added an ArrayList to the `State` to save the successful command input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Fix checkstyle for many classes. [#145](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/145)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Based on the Java coding standard, I amended `checkstyle.xml` to make it more comprehensive."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Added Jansi library"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Did cosmetic tweaks to add some colors to the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Credits: [Jun You](https://ay2021s1-cs2113t-t09-2.github.io/tp/team/f0fz.html)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **Project Management**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Managed releases `v1.0` - `v2.1` (3 releases) on Github"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Added documentation for the `timetable`, `add`, `delete` features. [#96](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/96) [#97](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/97) [#122](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/122) [#136](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/136)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Added class diagrams for `Command`, `TimeTable`. [#122](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/122) [#127](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/127) [#136](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/136) [#244](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/244)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Added sequence diagram for `AddCommand`. [#110](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/110)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * User Guide:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Added documentation for the Introduction. [#116](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/116) [#235](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/235)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Added documentation for the FAQ. [#235](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/235)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        * Added documentation for the `timetable` feature. [#116](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/116)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **Review/mentoring contributions**:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * PRs reviewed (with non-trivial review comments): [#242](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/242) [#29](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/29) [#106](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/106) [#44](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/44) [#226](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/226) [#238](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/238)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    * Reported bugs and suggestions for [other teams\u0027 tp](https://github.com/Aseanseen/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 72
    }
  },
  {
    "path": "docs/team/f0fz.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "# Sim Jun You - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Repository Assistant with a Versatile Interface (ra.VI) is a desktop app for managing tasks, deadlines, and timetable,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "optimized for use via a Command Line Interface (CLI). It is written in Java and is built to run on Java 11 on Linux, Mac"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and Windows machines."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Code contributed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "[RepoSense link here.](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003df0fz)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Features implemented"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Built the entire `data` package, excluding State and StateManager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Built the user-based data classes such as `Lesson`, `Module`, `Task`, and their respective \"Managers\". Also,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    maintained and made tests for them to ensure reliability."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Created a modular system where each atomic data item (like `Lesson`, `Task`, etc.) are stored in progressively "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    larger \"Managers\" (`LessonManager`, etc.) which can be held in even larger \"Managers\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    (i.e. `TimeTableManager` \u003e `TimeTable` \u003e `LessonManager` \u003e `Lesson`)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Built the entire `storage` package that allows ra.VI to save and load. Integrated `InputOutputManager`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "into the main codebase for seamless saving and loading when ra.VI starts/exits."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Created a granular and robust system for saving and loading, with multiple fallbacks and comprehensive error"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    handling."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Maintained the package, and was in charge of fixing all bugs for saving and loading."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Was not the one who first implemented FastJSON usage, but took over its implementation and maintenance. Also,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    did not write the HTTP functions that call the NUSMods API."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Implemented the logging feature, which improved our ability to debug ra.VI during the development process."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Enhancements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Assisted in resolving bugs and adding functionality to many other areas, like the various Commands and Parser classes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "as well as the main class. Some examples:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Made adding, editing, and deleting tasks/modules/lessons show the results of the change."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Reduced dependencies in the main class by packaging all dependencies needed to execute a command into the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    `Executor` class, following the Single Responsibility Principle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Added the shutdown hook to catch unexpected shutdowns."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Improved the `CommandResult` class to make it more useful and output-friendly."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Worked heavily on the `TextUi` class to improve formatting and created the helper class `TextHelper` to decrease"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    bloat and to follow the Single Responsibility Principle."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Polished the user interface formatting as well as each message to make it cleaner and easier to read."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Contributions to documentation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* DG:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Wrote the following sections: Setting Up, Value Proposition, Implementation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Added class diagrams for the Main Class, and the Command/Data/Parser/TimeTable Family Classes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * Added sequence diagram for the main loop."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* UG:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    * "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Contributions to team-based tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Did general code enhancements (cleanups, refactoring)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Introduced the use of PlantUML for our UML diagrams."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Documented non-feature-specific portions in our DG."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Review/mentoring contributions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* PRs reviewed (with non-trivial review comments): #13 #17 #44 #57 #76 #106 #107 #231 #235 #243"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "#### Contributions beyond the project team"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Reviewed and gave [detailed issues](https://github.com/f0fz/ped/issues) for other teams\u0027 projects"
      }
    ],
    "authorContributionMap": {
      "f0fz": 66
    }
  },
  {
    "path": "docs/team/template.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "# [Insert full name] - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Repository Assistant with a Versatile Interface (ra.VI) is a desktop app for managing tasks, deadlines, and timetable, optimized for use via a Command Line Interface (CLI). It is written in Java and is built to run on Java 11 on Linux, Mac and Windows machines."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Code contributed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "[Insert reposense link]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Features implemented"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Contributions to documentation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Contributions to the DG"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Contributions to team-based tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "##### Review/mentoring contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "##### Contributions beyond the project team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### [Optional] Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### [Optional] Contributions to the Developer Guide (Extracts)"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 16
    }
  },
  {
    "path": "docs/team/tobiasceg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "# Tan Jian Hui Tobias - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "# CS2113T Project: ra.VI"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "The Repository Assistant with a Versatile Interface is a user-friendly desktop application for managing task,deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ",modules and planning of timetable via a Command Line Interface (CLI). ra.VI aims to help freshmen of Universities to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "better integrate and manage their hectic schedule. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "## Overview of my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Features implemented: "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * Added and Managed the parser commands (excluding timetable parser)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * What it does: Parses the user\u0027s input using java REGEX to parse and filter specific words and phrases, calling the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    relevant constructors to ensure that the subsequent command executes with the appropriate arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Justification: There is a specific parser command for each respective command in ra.VI , each and every parser has"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    its very own specialised REGEX format as the different commands require their own specific variables to execute and achieve"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    the desired results"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Highlights: This filter affects almost every command in ra.VI as the user\u0027s raw input has to be parsed to ensure that "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    the relevant desired inputs by the user are captured by the program and executed correctly. Most important and general "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    exceptions are caught and filtered by the parser class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Credits: Special thanks to teammates, [Sean Lim](https://github.com/AY2021S1-CS2113T-T09-2/tp/tree/master/docs/team/aseanseen.md) and [Jun You](https://github.com/AY2021S1-CS2113T-T09-2/tp/tree/master/docs/team/f0fz.md) for the assistance in debugging and correcting the REGEX used, as"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    it is a relatively new and unknown area of java to tackle, thus a lot of problems and bugs were found making parser successful."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * Added and Managed the grade and cap command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * What it does: Allows the user to grade modules that have been previously input and keyed into their personalised module list,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    thus allowing them to assign its module credits and the grade achieved by the user on the module. Subsequently, the user is able "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    to calculate their new Cumulative Average Point (CAP) after grading all their respective modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Justification: This enhancement improves the product in a way that allows users to not only keep track of the modules taken, but"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    also add the relevant details such as the module credit and grade attained for that specific module. Therefore, allowing the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    user to calculate and keep track of their new CAP after the semester has ended. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Highlights: This enhancement affects and compliments existing commands adding additional attributes of existing modules in"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    module manager and subsequently consolidating the relevant attributes, to calculate the user\u0027s CAP. Multiple grades and scenarios "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    had to be taken into account to ensure that the CAP calculated was as accurate as possible. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* **Code Contribution**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dtobiasceg)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * Assisted in release `v1.0 - v2.1` (3 releases) on GitHub"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * Split Parser to handle individual commands separately (Pull request [\\#78](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/78))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * Added option for `CS/CU` for Cap command (Pull request [\\#243](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/243))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage. (Pull request [\\#119](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/119), [\\#59](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/59))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": " "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Contributions to Documentation:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * **User Guide**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Added Documentation for the features `Cap` and `Grade`. (Pull request [\\#99](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/99), [\\#115](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/115))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Solved issues raised after bug bounties (Pull request [\\#238](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/238))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Added in certain cosmetic tweaks to existing documentation of features and tables (Pull request [\\#225](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/225))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * **Developer Guide**:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Added Documentation for the features `Cap` and `Grade` including their respective sequence diagrams. (Pull request [\\#99](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/99)), [\\#112](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/112))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    * Enhancement in certain cosmetic areas to existing documentation of features and tables (Pull request [\\#129](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/129))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Community Contributions:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  * PRs reviewed: [\\#237](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/237), [\\#242](https://github.com/AY2021S1-CS2113T-T09-2/tp/pull/242)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 56,
      "Aseanseen": 2
    }
  },
  {
    "path": "src/main/java/seedu/ravi/Executor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param userInput The input from the user to be parsed and executed as a command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static CommandResult executeCommand(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (command.getPromptType() \u003d\u003d PromptType.EDIT) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            StateManager.saveState(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            InputOutputManager.save();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "wangqinNick": 17,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/main/java/seedu/ravi/Ravi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_NUS_MODS_NOT_LOADED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_SHUTDOWN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Ravi {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final RaviLogger logger \u003d new RaviLogger(Ravi.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Entry-point for the java.ravi.Ravi application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param args arguments passed to the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws FileNotFoundException exception is thrown if the file is not found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Runtime.getRuntime().addShutdownHook(new Thread(() -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            logger.getLogger().info(\"PROGRAM TERMINATED SUCCESSFULLY\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            TextUi.outputToUser(MESSAGE_SHUTDOWN);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        run(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Sets up the storage, loads up the data from the storage file and prints the welcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  From the command line"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws NusModsNotLoadedException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When no NUSMods data can be loaded"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void start(String[] args) throws NusModsNotLoadedException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TextUi.initialiseTextUi(new Scanner(System.in));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int loadStatus \u003d InputOutputManager.start();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        StateManager.initialise();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TextUi.showWelcomeMessage(loadStatus);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.saveNusMods();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        while (!TimeTableManager.isInitialised()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            TimeTableManager.initialiseTimetable();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Initialised scanner, UI, and IO\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param args arguments passed to the program."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void run(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"STARTING PROGRAM...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            start(args);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (NusModsNotLoadedException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // Show NUSMods not loaded error message if NUSMods not loaded and crash!"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            TextUi.showResultToUser(new IncorrectCommand(MESSAGE_NUS_MODS_NOT_LOADED).execute());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (NoSuchElementException ignored) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // User has entered ctrl-c"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Reads the user command and executes it, until the user issues the exit command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the user input is ctrl-c."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static void runCommandLoopUntilExitCommand() throws NoSuchElementException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"ENTERING COMMAND LOOP\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        CommandResult result;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            userInput \u003d TextUi.getUserCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            result \u003d Executor.executeCommand(userInput); // Saves state too"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            TextUi.showResultToUser(result);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } while (!result.isExit);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 33,
      "wangqinNick": 9,
      "amalinasani": 1,
      "-": 4,
      "Aseanseen": 47
    }
  },
  {
    "path": "src/main/java/seedu/ravi/RaviLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.LogRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class RaviLogger {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Logger raviLogger; // One logger for each instance"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    // The following are shared across all RaviLogger instances"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static FileHandler logFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static String logFileName \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_PATH \u003d \"./logs/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_NAME \u003d \"session_\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_EXT \u003d \".log\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final Level LOGGING_LEVEL \u003d Level.INFO; // CHANGE LOGGING LEVEL HERE!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final SimpleFormatter FORMATTER \u003d new SimpleFormatter() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        private static final String formatE \u003d \"%1$s - %2$s:%n[%3$-7s] %4$s%n%5$s%n%n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        private static final String format \u003d \"%1$s - %2$s:%n[%3$-7s] %4$s%n%n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        public synchronized String format(LogRecord lr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (lr.getThrown() !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return String.format(formatE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceClassName(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceMethodName(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getLevel().getLocalizedName(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getMessage(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getThrown()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return String.format(format,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceClassName(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceMethodName(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getLevel().getLocalizedName(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getMessage()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public RaviLogger(String className) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            raviLogger \u003d Logger.getLogger(className);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (logFileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                globalSetup();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logFile \u003d new FileHandler(logFileName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            raviLogger.setUseParentHandlers(false); // Stop it from logging from console..."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            raviLogger.addHandler(logFile); // Make it log to file instead"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            raviLogger.setLevel(LOGGING_LEVEL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFile.setFormatter(FORMATTER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Logger getLogger() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return raviLogger;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void globalSetup() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            preparePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFileName \u003d prepareFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void preparePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File logFolder \u003d new File(LOG_PATH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!logFolder.exists()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFolder.mkdir();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String prepareFile() throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int sessionNum \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String currentLogFileName \u003d LOG_PATH + LOG_NAME + sessionNum + LOG_EXT;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File logFile \u003d new File(currentLogFileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        while (logFile.exists()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            sessionNum++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentLogFileName \u003d LOG_PATH + LOG_NAME + sessionNum + LOG_EXT;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFile \u003d new File(currentLogFileName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (sessionNum \u003e\u003d 2) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                deletePreviousLogs();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                // do nothing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            sessionNum \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentLogFileName \u003d LOG_PATH + LOG_NAME + sessionNum + LOG_EXT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFile \u003d new File(currentLogFileName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logFile.createNewFile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return currentLogFileName;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void deletePreviousLogs() throws NullPointerException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File logFolder \u003d new File(LOG_PATH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (File file: logFolder.listFiles()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (!file.isDirectory()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                file.delete();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 99,
      "wangqinNick": 4,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.command.PromptType.NONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected PromptType promptType \u003d NONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public PromptType getPromptType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return promptType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setPromptType(PromptType promptType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.promptType \u003d promptType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "wangqinNick": 21,
      "Aseanseen": 2
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public final boolean isError;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public final boolean isExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isError \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isError) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isError \u003d isError;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isError, boolean isExit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isError \u003d isError;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 16,
      "wangqinNick": 7,
      "Aseanseen": 2
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(MESSAGE_GOODBYE, false, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 14
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String feedbackToUser; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.feedbackToUser \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return new CommandResult(feedbackToUser, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "wangqinNick": 23,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/PromptType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Indicates the type of user commands and corresponding command results."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * WARNING: the command results a waring message"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * INFORMATIVE: the command results a help message"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * EDIT: the command is a EDIT command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * NONE: the command is a basic command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public enum PromptType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    WARNING,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    INFORMATIVE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    EDIT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 13,
      "Aseanseen": 2
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.add;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT_ADD_MODULE \u003d COMMAND_WORD + \" -m \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT_ADD_TASK \u003d COMMAND_WORD + \" -t \u003ctask_name\u003e [-by \u003cdeadline\u003e]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d FORMAT_ADD_TASK + \"\\n\" + FORMAT_ADD_MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String HELP \u003d AddTaskCommand.HELP + AddModuleCommand.HELP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 15
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/add/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.add;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DuplicateModuleException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_ADD_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddModuleCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final String module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" -m \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String HELP \u003d   \"Add a module from NUSMods to the scheduler.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ add -m CS2113T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddModuleCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param module Module code to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddModuleCommand(String module) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.module \u003d module.toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Add the Module to the module list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param module Module code to be added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DuplicateModuleException if the module is already in the list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Module addModule(String module) throws"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            DuplicateModuleException, ModuleNotProvidedException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(module);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return ModuleManager.getModule(module);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Executes the AddModuleCommand to add the module to the module list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the add module or messages from exceptions."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Module newModule \u003d addModule(module);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ADD_MODULE_SUCCESS, newModule.toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (DuplicateModuleException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // should not happen"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(\"AddModuleCommand caught ModuleNotFoundException\", true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 65
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/add/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.add;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_ADD_TASK_SUCCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final String desc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" -t \u003ctask_name\u003e [-by \u003cdeadline\u003e]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String HELP \u003d   \"Add a task to the scheduler.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ add -t Read Book\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        + \"\\n\\t               add -t Return Book -by 30-12-2020 1800\\n\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddTaskCommand without the deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the entry."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException If the deadline does not follow the DateTime format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddTaskCommand(String desc) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddTaskCommand and tests the format of the deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the entry."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param deadline Deadline of the task to be added."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException If the deadline does not follow the DateTime format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddTaskCommand(String desc, String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (deadline !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            dateTimeOfDeadline \u003d testDeadline(deadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Test if the deadline of the task follows the DateTimeFormatter."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param deadline LocalDateTime deadline."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException if the deadline does not follow format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime testDeadline(String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        dateTimeOfDeadline \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return dateTimeOfDeadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Add the Task with deadline to the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the task to be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param dateTimeOfDeadline LocalDateTime of the deadline."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return newTask The new task object that was added."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Task addTask(String desc, LocalDateTime dateTimeOfDeadline) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Option for user to input a deadline"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (dateTimeOfDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            newTask \u003d new Task(desc);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            newTask \u003d new Task(desc, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Executes the AddTaskCommand to add the task to the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the add task or messages from exceptions."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Task addedTask \u003d addTask(desc, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        message \u003d String.format(MESSAGE_ADD_TASK_SUCCESS, addedTask.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 96
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/cap/CapCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.command.cap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidCapCalculatedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_INVALID_CAP_ATTAINED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_CAP_DISPLAY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class CapCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private final int totalMcTaken;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private final double currentCap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cap\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ctotal_mc\u003e \u003ccurrent_cap\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String HELP \u003d   \"Calculate your CAP.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ cap 20 4.5\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static double cap \u003d 0.0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final double SUMMCGRADE \u003d 20;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final double SUMMC \u003d 4;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Constructor for CapCommand which checks if the totalMcTaken and currentCap is valid also."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param totalMcTaken"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * users total module credit attained"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param currentCap"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * users current cap score"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CapCommand(int totalMcTaken, double currentCap) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.totalMcTaken \u003d totalMcTaken;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.currentCap \u003d currentCap;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Enum for the grading schematic of NUS."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private enum GradeSchematic {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        A_PLUS(\"A+\", 5.0),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        A(\"A\", 5.0),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        A_MINUS(\"A-\", 4.5),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        B_PLUS(\"B+\", 4.0),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        B(\"B\", 3.5),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        B_MINUS(\"B-\", 3.0),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        C_PLUS(\"C+\", 2.5),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        C(\"C\", 2.0),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        D_PLUS(\"D+\", 1.5),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        D(\"D\", 1.0),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        F(\"F\", 0.0),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CS(\"CS\", -2.0),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CU(\"CU\", -3.0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        private final String symbol;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        private final double value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeSchematic(String symbol, double value) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Converts the grade assigned to a module the value by using the enum."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * grade assigned to module"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the value of the grade"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private double gradeConvert(String grade) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double score \u003d 0.0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (grade.equals(\"No grade yet\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            score \u003d -1.0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return score;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (GradeSchematic g : GradeSchematic.values()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (grade.equals(g.symbol)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                score \u003d g.value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Calculates the cap of the user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * cap of the user"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidCapCalculatedException"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the attained cap is unimaginable"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the module called isn\u0027t found"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private double calculateCap() throws InvalidCapCalculatedException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String[] moduleList \u003d ModuleManager.getModCodeList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double mcGrade \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double sumMcGrade \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double sumMc \u003d 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double gradeValue;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int numberOfCsCuModules \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int numberOfModules \u003d 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (String i : moduleList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            numberOfModules++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            gradeValue \u003d gradeConvert(ModuleManager.getModule(i).getModuleGrade());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (gradeValue \u003d\u003d -1.0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                throw new InvalidCapCalculatedException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            } else if (gradeValue \u003e\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                sumMc +\u003d ModuleManager.getModule(i).getModuleCredit();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                mcGrade \u003d ModuleManager.getModule(i).getModuleCredit()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                        * gradeValue;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                sumMcGrade +\u003d mcGrade;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                numberOfCsCuModules++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (numberOfCsCuModules \u003d\u003d numberOfModules) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            sumMcGrade \u003d SUMMCGRADE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            sumMc \u003d SUMMC;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        cap \u003d ((currentCap * totalMcTaken) + sumMcGrade) / (sumMc + totalMcTaken);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (cap \u003c 0 || cap \u003e 5.0 || isNan(cap)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidCapCalculatedException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private boolean isNan(double cap) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return cap !\u003d cap;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(String.format(\"%s%.2f\\n\", MESSAGE_CAP_DISPLAY, calculateCap()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidCapCalculatedException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID_CAP_ATTAINED, true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND, true);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 154
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.delete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT_DELETE_TASK \u003d DeleteCommand.COMMAND_WORD + \" -t\" + \" \u003ctask_index\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT_DELETE_MODULE \u003d DeleteCommand.COMMAND_WORD + \" -m\" + \" \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d FORMAT_DELETE_TASK + \"\\n\" + FORMAT_DELETE_MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String HELP \u003d DeleteTaskCommand.HELP + DeleteModuleCommand.HELP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 15
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/delete/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.delete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteModuleCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d DeleteCommand.COMMAND_WORD + \" -m\" + \" \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String HELP \u003d   \"Delete a module from the scheduler.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ del -m CS2113T\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructor to delete module from module list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param moduleCode Module code to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the module from the module list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param moduleCode Module code to be deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleNotFoundException If the module is not found in the module list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Module deleteModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Module deletedModule \u003d ModuleManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.delete(moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return deletedModule;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Executes the DeleteModuleCommand to delete the module from the module list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the delete or errors."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Module deletedMod \u003d deleteModule(moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, deletedMod.toString()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 57
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/delete/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.delete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteTaskCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final int taskId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d DeleteCommand.COMMAND_WORD + \" -t\" + \" \u003ctask_index\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String HELP \u003d   \"Delete a task from the scheduler.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                       + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                                       + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ del -t 1\\n\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructor to delete task from task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId ID of the task to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteTaskCommand(int taskId) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId ID of the task to be deleted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException If the task is not found in the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Task deleteTask(int taskId) throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Task deletedTask \u003d TaskManager.getTask(taskId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.delete(taskId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Executes the DeleteTaskCommand to delete the task from the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the delete or errors."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Task deletedTask \u003d deleteTask(taskId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask.toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 56
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/done/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_DONE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private final int taskId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ctask_index\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Mark a task as done.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ done 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Marks the task from the task list as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @param taskId id of task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException If the task is not found in the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private Task doneTask(int taskId) throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return TaskManager.done(taskId);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Marks the task from the task list as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing acknowledgement of marking task as done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            Task completedTask \u003d doneTask(taskId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, completedTask));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 43,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String FORMAT_EDIT_TASK \u003d COMMAND_WORD + \" -t \u003ctask_index\u003e \u003ctask_name\u003e [-by \u003cdeadline\u003e]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String FORMAT_EDIT_MODULE \u003d COMMAND_WORD + \" -m \u003cmodule_code\u003e \u003cnew_module_code\u003e\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d FORMAT_EDIT_TASK + \"\\n\" + FORMAT_EDIT_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d EditTaskCommand.HELP + EditModuleCommand.HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 1,
      "f0fz": 2,
      "wangqinNick": 4,
      "amalinasani": 3,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/edit/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DuplicateModuleException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_EDIT_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d EditCommand.COMMAND_WORD + \" -m\" + \" \u003cmodule_code\u003e \u003cnew_module_code\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Edit a module code from the module list.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ edit -m CS2113 CS2113T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"(?\u003cidentifier\u003e(edit)) -m(?\u003cmoduleCode\u003e(?:\\\\s+\\\\w\\\\S*))(?\u003cmoduleCode1\u003e(?:\\\\s+\\\\w\\\\S*))\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final String oldModuleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final String newModuleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the command to edit a module."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code of the module to be edited"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The new module code for the module if any"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditModuleCommand(String oldModuleCode, String newModuleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.oldModuleCode \u003d oldModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.newModuleCode \u003d newModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the \u003cb\u003eEdit Module Command\u003c/b\u003e to edit a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * from the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see ModuleManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Module oldModule \u003d ModuleManager.getModule(oldModuleCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Module editedModule \u003d ModuleManager.edit(newModuleCode, oldModuleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            String message \u003d String.format("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    MESSAGE_EDIT_MODULE_SUCCESS, oldModule.toString(), editedModule.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (DuplicateModuleException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 16,
      "wangqinNick": 38,
      "amalinasani": 3,
      "Aseanseen": 12
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/edit/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class EditTaskCommand extends EditCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final int taskId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final String newTaskDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String FORMAT \u003d EditCommand.COMMAND_WORD + \" -t \u003ctask_index\u003e \u003ctask_name\u003e [-by \u003cdeadline\u003e]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Edit a task description from the task list.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ edit -t 1 Project meeting\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ edit -t 1 Project meeting -by\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                        + \" 30-12-2020 1200\\n\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the command to edit a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The ID of the task to be edited"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public EditTaskCommand(int taskId, String newTaskDescription) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.newTaskDescription \u003d newTaskDescription;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.dateTimeOfDeadline \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Constructs AddTaskCommand and tests the format of the deadline."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ID of the task to be edited"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new deadline of the task if any"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws DateTimeParseException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the deadline does not follow the DateTime format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public EditTaskCommand(int taskId, String newTaskDescription, String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.newTaskDescription \u003d newTaskDescription;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (deadline !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dateTimeOfDeadline \u003d testDeadline(deadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Test if the deadline of the task follows the DateTimeFormatter."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param deadline LocalDateTime deadline."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws DateTimeParseException if the deadline does not follow format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalDateTime testDeadline(String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        dateTimeOfDeadline \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return dateTimeOfDeadline;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    protected Task edit() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (dateTimeOfDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return TaskManager.edit(taskId, newTaskDescription);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return TaskManager.edit(taskId, newTaskDescription, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String oldTask \u003d TaskManager.getTask(taskId).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Task editedTask \u003d edit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(String.format("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_EDIT_TASK_SUCCESS, oldTask, editedTask.toString()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(MESSAGE_NO_EDIT_TASK, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 14,
      "f0fz": 61,
      "wangqinNick": 12,
      "amalinasani": 1,
      "Aseanseen": 7
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/grade/GradeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.command.grade;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidGradeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_INVALID_GRADE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_GRADE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class GradeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private final String moduleGraded;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private final double moduleCredit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"grade\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cmodule_code\u003e \u003cmodular_credit\u003e \u003cgrade\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String HELP \u003d   \"Grades and allocates the Module Credit to the Module.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ grade CS2113T 4 A+\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Constructs GradeCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param moduleGraded"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Module to be graded."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param moduleCredit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Modular credits of the module to be graded."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Grade attained by user for the specific module."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public GradeCommand(String moduleGraded, double moduleCredit, String grade) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.moduleGraded \u003d moduleGraded.toUpperCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.grade \u003d grade.toUpperCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Tests if the input grade by the user is valid grade."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * grade input by user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private boolean testGrade(String grade) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String[] validGrades \u003d {\"A+\", \"A\", \"A-\", \"B+\", \"B-\", \"B\", \"C+\", \"C\", \"D+\", \"D\", \"F\", \"CS\", \"CU\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (String i: validGrades) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (grade.equals(i)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Grades and allocates the Module Credit to the Module."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidGradeException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * If the grade isn\u0027t recognised by the NUS grading schematic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private Module grade() throws InvalidGradeException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (testGrade(grade)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            ModuleManager.grade(moduleGraded, grade, moduleCredit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidGradeException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return ModuleManager.getModule(moduleGraded);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Executes the Grade Module Command to grade a Module with the module code"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * from the Module List."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return The Command Result of the execution"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Module moduleGraded \u003d grade();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(String.format("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_GRADE_MODULE_SUCCESS, moduleGraded.toString()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidGradeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID_GRADE, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 97
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/help/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.add.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.cap.CapCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.done.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.edit.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.list.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.summary.SummaryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.timetable.TimeTableCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private final String commandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [\u003ccommand_word\u003e]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"View command information.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ help\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t               help add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public HelpCommand(String commandType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints help message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing help message for that command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d AddCommand.HELP;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d CapCommand.HELP;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d DeleteCommand.HELP;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d DoneCommand.HELP;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d EditCommand.HELP;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case GradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d GradeCommand.HELP;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d HelpCommand.HELP;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d ListCommand.HELP;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d UndoCommand.HELP;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case TimeTableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d TimeTableCommand.HELP;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d SummaryCommand.HELP;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d TextUi.getCommandList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return new CommandResult(output);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 65,
      "Aseanseen": 14
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/list/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_LIST_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_LIST_PRINTED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private final Parser.TypeOfEntries typeOfEntry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_TASK \u003d COMMAND_WORD + \" -t\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_MODULE \u003d COMMAND_WORD + \" -m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d FORMAT_TASK + \"\\n\" + FORMAT_MODULE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"List all tasks in the task list.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT_TASK"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\nList all modules in the module list.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + FORMAT_MODULE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public ListCommand(Parser.TypeOfEntries typeOfEntry) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        setPromptType(PromptType.INFORMATIVE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Lists the tasks/modules from their respective lists."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing list of tasks/modules"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        switch (typeOfEntry) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d TaskManager.list();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d ModuleManager.list();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (output !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_PRINTED + output);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "amalinasani": 44,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/misc/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_UNDO_AT_BEGINNING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Undo last action.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.promptType \u003d PromptType.INFORMATIVE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String lastCommand \u003d StateManager.undo();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UNDO_SUCCESS, lastCommand));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (EmptyStackException | IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_AT_BEGINNING, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "wangqinNick": 20,
      "amalinasani": 1,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/summary/SummaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_SUMMARY_PRINTED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"View task summary.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Lists the tasks from respective lists in summaryLists."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing task summary message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String output \u003d TaskManager.getSummary();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return new CommandResult(MESSAGE_SUMMARY_PRINTED + output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 21,
      "Aseanseen": 5
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/timetable/TimeTableAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.timetable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonOverlapException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.RepeatFrequencyInvalidException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_LESSON_INVALID_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_LESSON_OVERLAP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_REPEAT_FREQUENCY_UNKNOWN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_ADD_LESSON_SUCCESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableAddCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final Lesson newLesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final int repeatFreq;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public TimeTableAddCommand(Lesson newLesson, int repeatFreq) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.newLesson \u003d newLesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.repeatFreq \u003d repeatFreq;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Method runs during execution. Adds the lesson to the timetable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonInvalidTimeException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the lesson overlaps with an existing lesson."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws RepeatFrequencyInvalidException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the repeat parameter given by the user is not from 0 - 3."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the module associated with the Lesson to be added is not in the module list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonOverlapException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the Lesson to be added overlaps with an existing lesson."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void addLessonToTimeTable() throws LessonInvalidTimeException, RepeatFrequencyInvalidException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            ModuleNotFoundException, LessonOverlapException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (repeatFreq \u003c 0 || repeatFreq \u003e 3) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new RepeatFrequencyInvalidException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.addLesson(newLesson, repeatFreq);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public String parseRepeatFreq() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        switch (repeatFreq) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return \"this week only.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return \"every week.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return \"every even week.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return \"every odd week.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return \"error!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            addLessonToTimeTable();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    String.format(MESSAGE_ADD_LESSON_SUCCESS, newLesson.toString(), parseRepeatFreq()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (LessonInvalidTimeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_LESSON_INVALID_TIME, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (RepeatFrequencyInvalidException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_REPEAT_FREQUENCY_UNKNOWN, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (LessonOverlapException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_LESSON_OVERLAP, e.overlapLessonStr), true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 81
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/timetable/TimeTableCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.timetable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class TimeTableCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String TIMETABLE_DAY_VIEW_FORMAT \u003d COMMAND_WORD + \" -day\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String TIMETABLE_WEEK_VIEW_FORMAT \u003d COMMAND_WORD + \" -week\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String TIMETABLE_LESSON_ADD_USER_FORMAT  \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \" -add \u003cmodule_code\u003e \u003cday\u003e \u003cstart_time\u003e... \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t\\t...\u003cend_time\u003e \u003clesson_type\u003e \u003crepeat\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String TIMETABLE_LESSON_DELETE_USER_FORMAT  \u003d COMMAND_WORD + \" -del \u003cday\u003e \u003clesson_index\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String TIMETABLE_LESSON_FILTER_USER_FORMAT  \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \" -filter \u003cmodule_code\u003e \u003cday\u003e \u003cstart_time\u003e... \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t\\t... \u003cend_time\u003e \u003clesson_type\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d TIMETABLE_LESSON_ADD_USER_FORMAT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\" + TIMETABLE_LESSON_DELETE_USER_FORMAT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\" + TIMETABLE_DAY_VIEW_FORMAT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\" + TIMETABLE_WEEK_VIEW_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String HELP \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"View day\u0027s timetable\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + TIMETABLE_DAY_VIEW_FORMAT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\nView week\u0027s timetable\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + TIMETABLE_WEEK_VIEW_FORMAT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\nAdd a lesson to the timetable.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + TIMETABLE_LESSON_ADD_USER_FORMAT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t\u003crepeat\u003e 0: Once\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t         1: Once a week\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t         2: Even weeks\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t         3: Odd weeks\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\nRemove a lesson from the timetable.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + TIMETABLE_LESSON_DELETE_USER_FORMAT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@ timetable -del MONDAY 2\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\nFilter out lessons from the timetable based on certain criteria.\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\tUse \u0027-\u0027 to signify no criteria for that property.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t@|bold,blue,BG_BLACK Format:|@ \" + TIMETABLE_LESSON_FILTER_USER_FORMAT"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t@|bold,blue,BG_BLACK Example usage:|@\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t\\t- Any CS1010 lesson after 1000 on any day:\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t\\t- timetable -filter CS1010 - 1000 - -\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t\\t- Any lecture on Monday before 1200:\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\n\\t\\t- timetable -filter - MONDAY - 1200 LECTURE\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 48
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/timetable/TimeTableDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.timetable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.PromptType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_LESSON_NOT_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_DELETE_LESSON_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableDeleteCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final int lessonIndexToDelete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public TimeTableDeleteCommand(DayOfWeek dayOfWeek, int lessonIndexToDelete) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.lessonIndexToDelete \u003d lessonIndexToDelete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Method runs during execution. Deletes the lesson from the timetable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The deleted lesson object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the index given by the user is out of bounds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Lesson removeLessonFromTimeTable() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return TimeTableManager.deleteLesson(dayOfWeek, lessonIndexToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Lesson deletedLesson \u003d removeLessonFromTimeTable();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_LESSON_SUCCESS, deletedLesson.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_LESSON_NOT_FOUND, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 46
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/timetable/TimeTableFilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.LessonFilter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.previousOrSame;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.data.TimeTableManager.getCurrNusWeekStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableFilterCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final ArrayList\u003cLessonFilter\u003e filterList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public TimeTableFilterCommand(ArrayList\u003cLessonFilter\u003e filterList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.filterList \u003d filterList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getFilteredWeekTimetable() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cArrayList\u003cLesson\u003e\u003e weekLessons \u003d TimeTableManager.filterWeekWithFilterList(filterList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        StringBuilder out \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDate dateIterator \u003d now.with(previousOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        out.append(\"Current NUS Week: \" + getCurrNusWeekStr() + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (ArrayList\u003cLesson\u003e dayLesson : weekLessons) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            out.append(TextUi.printDayTimetable(dateIterator, dayLesson));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dateIterator \u003d dateIterator.plusDays(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return out.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return new CommandResult(getFilteredWeekTimetable());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 27,
      "Aseanseen": 14
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/timetable/TimeTableResetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_TIMETABLE_RESET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class TimeTableResetCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (TimeTableManager.isInitialised()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            TimeTableManager.clearTimeTable();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TimeTableManager.initialiseTimetable();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return new CommandResult(MESSAGE_TIMETABLE_RESET);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 14,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/main/java/seedu/ravi/command/timetable/TimeTableViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.previousOrSame;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.data.TimeTableManager.getCurrWeekNum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.data.TimeTableManager.getCurrNusWeekStr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.data.TimeTableManager.getSpecificDayLessons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.data.TimeTableManager.getSpecifiedWeekLessons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class TimeTableViewCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private final int numOfDays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private final LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public TimeTableViewCommand(int numOfDays) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.numOfDays \u003d numOfDays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public String generateDayTimeTable() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cLesson\u003e lessonList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        lessonList \u003d getSpecificDayLessons(now.getDayOfWeek());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return \"Current NUS Week: \" + getCurrNusWeekStr() + \"\\n\" + TextUi.printDayTimetable(now, lessonList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public String generateWeekTimeTable() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        int currentWeek \u003d getCurrWeekNum();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cArrayList\u003cLesson\u003e\u003e weekLessons \u003d getSpecifiedWeekLessons(currentWeek);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        StringBuilder out \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        LocalDate dateIterator \u003d now.with(previousOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        out.append(\"Current NUS Week: \" + getCurrNusWeekStr() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        for (ArrayList\u003cLesson\u003e dayLesson : weekLessons) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            out.append(TextUi.printDayTimetable(dateIterator, dayLesson));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            dateIterator \u003d dateIterator.plusDays(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return out.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (numOfDays \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(generateDayTimeTable());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(generateWeekTimeTable());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "amalinasani": 39,
      "Aseanseen": 13
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LessonType lessonType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String hiddenId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Lesson(String moduleCode, LessonType lessonType, DayOfWeek day, LocalTime startTime, LocalTime endTime)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (startTime.isAfter(endTime) || startTime.equals(endTime)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonInvalidTimeException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LessonType getLessonType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Generates the unique hiddenId for each instance of this Lesson class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * No two instances of Lesson class should share a hiddenId."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void generateHiddenId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        hiddenId \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getHiddenId() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return hiddenId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks if \u0027this\u0027 lesson is after otherLesson."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param otherLesson"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The other lesson object to check against"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether \u0027this\u0027 lesson is after otherLesson"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isAfter(Lesson otherLesson) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return otherLesson.getEndTime().isBefore(startTime) || otherLesson.getEndTime().equals(startTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks if \u0027this\u0027 lesson is before otherLesson."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param otherLesson"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The other lesson object to check against"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether \u0027this\u0027 lesson is before otherLesson"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isBefore(Lesson otherLesson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return otherLesson.getStartTime().isAfter(endTime) || otherLesson.getStartTime().equals(endTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks for time period overlap with the specified Lesson."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param otherLesson"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified lesson"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether their start and end times overlap"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean checkOverlap(Lesson otherLesson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (otherLesson.getDay() !\u003d day) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // lessons are constructed with valid start-end times"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // for NO OVERLAP, (isAfter ^ isBefore) is true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so OVERLAP is just (isAfter \u003d\u003d isBefore)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return isAfter(otherLesson) \u003d\u003d isBefore(otherLesson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Generates string based on lesson type."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  String of lesson type"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public String getLessonTypeString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        switch (lessonType) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case LECTURE:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Lecture\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case TUTORIAL:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Tutorial\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case LAB:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Lab\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case SEMINAR:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Seminar\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case RECITATION:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Recitation\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Session\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Creates string representation of lesson."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * e.g. CS1010 Lecture: MONDAY 1400-1500"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  String representation of lesson"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        DateTimeFormatter time \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return String.format(\"%s %s: %s %s-%s\", moduleCode, getLessonTypeString(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                day.toString(), startTime.format(time), endTime.format(time));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // vvv Required for fastJSON, not used otherwise vvv"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Lesson() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setLessonType(LessonType lessonType) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setHiddenId(String hiddenId) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.hiddenId \u003d hiddenId;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // ^^^ Required for fastJSON, not used otherwise ^^^"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 165,
      "amalinasani": 1,
      "Aseanseen": 2
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/LessonFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public interface LessonFilter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    boolean filter(Lesson l);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/LessonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.RaviLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private HashMap\u003cDayOfWeek, ArrayList\u003cLesson\u003e\u003e lessonMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final RaviLogger logger \u003d new RaviLogger(LessonManager.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Initialise the lessonMap upon construction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LessonManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.put(eachDay, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Inserts a Lesson object in the correct position in the correct ArrayList in lessonMap, based on its day and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newLesson"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new Lesson object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonInvalidTimeException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the new lesson overlaps with an existing lesson"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void addLesson(Lesson newLesson) throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        DayOfWeek lessonDay \u003d newLesson.getDay();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Trying to add lesson: \" + newLesson.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // if lessonMap is not initialised yet..."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (lessonMap.keySet().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Adding to uninitialised lessonMap\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(newLesson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int indexToInsertNewLesson \u003d -1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c lessonMap.get(lessonDay).size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Lesson eachLesson \u003d lessonMap.get(lessonDay).get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (newLesson.checkOverlap(eachLesson)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().warning(\"New lesson overlaps with the lesson: \" + eachLesson.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                throw new LessonInvalidTimeException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // insert before the lesson which starts right after newLesson"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // each day ArrayList in lessonMap is hence always sorted due to addLesson\u0027s logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachLesson.isAfter(newLesson)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Lesson inserted at index \" + i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                indexToInsertNewLesson \u003d i;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (indexToInsertNewLesson \u003d\u003d -1) { // lesson is the latest lesson in the day"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Lesson inserted at index \" + lessonMap.get(lessonDay).size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(newLesson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Lesson inserted at index \" + indexToInsertNewLesson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(indexToInsertNewLesson, newLesson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void addLesson(DayOfWeek day, Lesson lesson) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lessonMap.get(day).add(lesson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes the lesson at lessonIndex on the given day."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param lessonIndex"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the lesson to be removed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonNotFoundException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the lesson to be removed does not exist in the lesson map"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void removeLesson(DayOfWeek day, int lessonIndex) throws LessonNotFoundException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!lessonMap.containsKey(day)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"lessonMap does not contain day: \" + day);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (lessonIndex \u003c 0 || lessonIndex \u003e\u003d lessonMap.get(day).size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"The lesson index is out of bounds; size is: \" + lessonMap.get(day).size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lessonMap.get(day).remove(lessonIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes the lesson at lessonIndex on the given day."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The hiddenId of the lesson to be removed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void removeLessonById(DayOfWeek day, String id) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!lessonMap.containsKey(day)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"lessonMap does not contain day: \" + day);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c lessonMap.get(day).size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (lessonMap.get(day).get(i).getHiddenId().equals(id)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                lessonMap.get(day).remove(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Lesson removed at index: \" + i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns the ArrayList of lessons on the given day."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList of lessons on that day"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public ArrayList\u003cLesson\u003e getDayLessonList(DayOfWeek day) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonMap.get(day);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getLessonCountOnDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonMap.get(day).size();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int countTotalLessons() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int numLessons \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (ArrayList\u003cLesson\u003e eachDay : lessonMap.values()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            numLessons +\u003d eachDay.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return numLessons;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Resets lessonMap to blank state."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void clearAllLessons() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.put(eachDay, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public HashMap\u003cDayOfWeek, ArrayList\u003cLesson\u003e\u003e getLessonMap() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonMap;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setLessonMap(HashMap\u003cDayOfWeek, ArrayList\u003cLesson\u003e\u003e lessonMap) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.lessonMap \u003d lessonMap;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 150,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/LessonType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public enum LessonType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    TUTORIAL,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    LECTURE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    SEMINAR,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    LAB,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    RECITATION,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    SESSION"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 8,
      "Aseanseen": 2
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Module extends Directory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private String grade;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private double moduleCredit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Module(String moduleCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public String getModuleGrade() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (grade \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"No grade yet\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public void setModuleGrade(String grade) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public double getModuleCredit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public void setModuleCredit(double moduleCredit) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isSameModule(Module checkModule) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String moduleCode \u003d checkModule.getModuleCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String moduleTitle \u003d checkModule.getTitle();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return this.moduleCode.equalsIgnoreCase(moduleCode) \u0026\u0026 this.title.equalsIgnoreCase(moduleTitle);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String format \u003d \"%s: %s (%sMC) (Grade: %s)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return String.format(format, getModuleCode(), getTitle(), getModuleCredit(), getModuleGrade());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//import seedu.ravi.directory.Directory;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//import seedu.ravi.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//public class Module extends Directory {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    public Directory getParent() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 19,
      "tobiasceg": 18,
      "wangqinNick": 45,
      "Aseanseen": 8
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/ModuleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.RaviLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DuplicateModuleException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final RaviLogger logger \u003d new RaviLogger(ModuleManager.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static HashMap\u003cString, Module\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // modulesMap is the main module list. Maps module code to module object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static HashMap\u003cString, Module\u003e nusModsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // nusModsMap is the module list containing the Module objects created from NUSMods\u0027 JSON file of modules."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  Finds a module with the specified module code in the Module List."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Module getModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Retrieving module with code: \" + moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : modulesMap.values()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().warning(\"Can\u0027t retrieve module because it doesn\u0027t exist!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a module in the Module List by replacing the old module object with a new one."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new module code of the new module that replaces the old one."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to be edited."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module object after editing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If there is no module with the new module code offered by NUS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws DuplicateModuleException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If there are duplicate modules with the same module code as the new module code in the Module List"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the old module is not found"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Module edit(String newModuleCode, String oldModuleCode)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throws ModuleNotProvidedException, DuplicateModuleException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Editing module at old module code: \" + oldModuleCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!doesContainMod(oldModuleCode)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"Old module code not found!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        add(newModuleCode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module oldModule \u003d getModule(oldModuleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (oldModule.getModuleCredit() !\u003d 0 \u0026\u0026 oldModule.getModuleGrade() !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            grade(newModuleCode, oldModule.getModuleGrade(), oldModule.getModuleCredit());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        delete(oldModuleCode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return getModule(newModuleCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks if the module to be graded is in the moduleMap and assigns the grade to the module."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Module code of the module to be graded"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The grade to be assigned"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param moduleCredit"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The module\u0027s assigned module credit"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * If there is no such module in the user\u0027s module list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void grade(String moduleCode, String grade, double moduleCredit) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (doesContainMod(moduleCode)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            getModule(moduleCode).setModuleGrade(grade);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            getModule(moduleCode).setModuleCredit(moduleCredit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks for duplicates of the same module code in the Module List."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code to check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean doesContainMod(String moduleCode) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachCode : modulesMap.keySet()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachCode.equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a module to the Module List. Uses the module code to grab the module object from the NUSMods list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code string of the module to add to the module list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DuplicateModuleException"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the module to be added already exists in the module list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the module to be added is not a valid NUS module"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void add(String moduleCode) throws DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Adding module with code: \" + moduleCode);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (doesContainMod(moduleCode)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"Can\u0027t add module because it already exists!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module verifiedNusMod \u003d getNusModule(moduleCode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.put(moduleCode, verifiedNusMod);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes a module from the Module List using the module code."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to remove from the module list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the module to be deleted is not in the module list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Deleting module with code: \" + moduleCode);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!doesContainMod(moduleCode)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"Can\u0027t delete module because it doesn\u0027t exist!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.remove(moduleCode);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Finds a module with the specified module code in the NUSMods Module List."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Module getNusModule(String moduleCode) throws ModuleNotProvidedException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : nusModsMap.values()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String[] getModCodeList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return modulesMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String[] getNusModCodeList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return nusModsMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    //@@author amalinasani"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * List modules in the module map."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *  The formatted module list from TextUi or null if list is empty"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String list() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (modulesMap.size() \u003e 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return TextUi.getIndexModuleList(modulesMap);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded module map into ModuleManager\u0027s own module map."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedModulesMap the loaded module map from file"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadMods(HashMap\u003cString, Module\u003e loadedModulesMap) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap \u003d loadedModulesMap;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded module map into ModuleManager\u0027s own module map."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedModulesMap the loaded module map from file"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadNusMods(HashMap\u003cString, Module\u003e loadedModulesMap) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        nusModsMap \u003d loadedModulesMap;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears all modules in modulesMap."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clearModules() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the modules in the system."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return modulesMap"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e getModulesMap() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 123,
      "tobiasceg": 13,
      "wangqinNick": 56,
      "amalinasani": 17,
      "Aseanseen": 14
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/State.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final String encodedSavedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private final String encodedSavedMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private final ArrayList\u003cString\u003e commandArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public State(String encodedSavedList, String encodedSavedMap, ArrayList\u003cString\u003e commandArrayList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.encodedSavedList \u003d encodedSavedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.encodedSavedMap \u003d encodedSavedMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.commandArrayList \u003d commandArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getEncodedSavedList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return encodedSavedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getEncodedSavedMap() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return encodedSavedMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public ArrayList\u003cString\u003e getEditTypeCommandArrayList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return commandArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "wangqinNick": 15,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/StateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class StateManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static Stack\u003cState\u003e undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static Stack\u003cState\u003e redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static ArrayList\u003cString\u003e editTypeCommandArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Initialises the screen shot manager with its first screen shot of the starting list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void initialise() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //for Junit Test only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var gson \u003d new GsonBuilder().create();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d gson.toJson(TaskManager.getTaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d gson.toJson(ModuleManager.getModulesMap());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        var screenShot \u003d new State(encodedSavedList, encodedSavedMap, editTypeCommandArrayList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assert undoStack.isEmpty() : \"Undo stack should be empty!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assert redoStack.isEmpty() : \"Redo stack should be empty!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack.push(screenShot);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns and pops the top state."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the last state."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws EmptyStackException stack is empty."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static State popPreviousScreenShot() throws EmptyStackException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // There should be at least 2 screen shots to allow undo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (undoStack.size() \u003c 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new EmptyStackException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var currentState \u003d undoStack.pop();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        editTypeCommandArrayList \u003d currentState.getEditTypeCommandArrayList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        redoStack.push(currentState);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the last state without pop it."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the last state."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static State peekPreviousScreenShot() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Reverts to the previous changed state of the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return The last edit type command entered by the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws IOException exception is thrown when error occurred during IO operation."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws EmptyStackException exception is thrown when user trying to undo at the initial state."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static String undo() throws IOException, EmptyStackException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousState \u003d popPreviousScreenShot();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d previousState.getEncodedSavedList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d previousState.getEncodedSavedMap();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var stream1 \u003d new ByteArrayInputStream(encodedSavedList.getBytes());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var bufferedReader1 \u003d new BufferedReader(new InputStreamReader(stream1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var stream2 \u003d new ByteArrayInputStream(encodedSavedMap.getBytes());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var bufferedReader2 \u003d new BufferedReader(new InputStreamReader(stream2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task[] readList1 \u003d new Gson().fromJson(bufferedReader1, Task[].class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.loadTasks(getDecodedTaskList(readList1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Type type \u003d new TypeToken\u003cHashMap\u003cString, Module\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e map \u003d new Gson().fromJson(bufferedReader2, type);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ModuleManager.loadMods(map);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        bufferedReader1.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        bufferedReader2.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String lastCommand \u003d editTypeCommandArrayList.remove(editTypeCommandArrayList.size() - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String[] arrOfLastCommand \u003d lastCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String out;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Special case to find tasks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (arrOfLastCommand[1].equals(\"-t\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            out \u003d String.join(\" \", arrOfLastCommand[0], arrOfLastCommand[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String substring \u003d lastCommand.substring(lastCommand.indexOf(arrOfLastCommand[2]));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            out +\u003d \" \" + substring;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            out \u003d String.join(\" \", arrOfLastCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Saves the moduleList as a string if it was changed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param editTypeCommand The edit type command entered by the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void saveState(String editTypeCommand) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        editTypeCommandArrayList.add(editTypeCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var gson \u003d new GsonBuilder().create();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d gson.toJson(TaskManager.getTaskList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d gson.toJson(ModuleManager.getModulesMap());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        var screenShot \u003d new State(encodedSavedList, encodedSavedMap, editTypeCommandArrayList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack.push(screenShot);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (getUndoStackSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousScreenShot \u003d peekPreviousScreenShot();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousEncodedSavedList \u003d previousScreenShot.getEncodedSavedList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!previousEncodedSavedList.equals(encodedSavedList)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (!redoStack.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                redoStack.clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the task list read from Json file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param readList the task array read from Json file"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list parsed from readList array"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cTask\u003e getDecodedTaskList(Task[] readList) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cTask\u003e tempTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Task task : readList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            tempTaskList.add(new Task(task.getName(), task.retrieveDeadline(), task.getStatus()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return tempTaskList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the number of states store in th stack."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the stack size"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static int getUndoStackSize() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.size();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the task list read from Json file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param readList the module map read from Json file"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list parsed from readList array"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cModule\u003e getDecodedModuleList(Module[] readList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cModule\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module module : readList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            temp.add(new Module(module.getModuleCode()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parse map to list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return module list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cModule\u003e parseModuleList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cModule\u003e moduleArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Iterator\u003cString\u003e it \u003d ModuleManager.getModulesMap().keySet().iterator();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            String key \u003d it.next();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            moduleArrayList.add(ModuleManager.getModulesMap().get(key));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleArrayList;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parse list to map."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleArrayList module list"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return module map"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e parseModuleMap(ArrayList\u003cModule\u003e moduleArrayList) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module module: moduleArrayList"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            map.put(module.getModuleCode(), module);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 1,
      "wangqinNick": 181,
      "Aseanseen": 24
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalDateTime deadline \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task(String name, LocalDateTime dateTimeOfDeadline) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.deadline \u003d dateTimeOfDeadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task(String name, LocalDateTime dateTimeOfDeadline, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.deadline \u003d dateTimeOfDeadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setStatus(boolean status) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.isDone \u003d status;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // For use within codebase"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LocalDateTime retrieveDeadline() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // For FastJSON use"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return LocalDateTime.of(1, 1, 1, 0, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // For FastJSON use"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void setDeadline(LocalDateTime deadline) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (deadline.isEqual(LocalDateTime.of(1, 1, 1, 0, 0))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            this.deadline \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    //@@author amalinasani"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public String generateStatusIcon() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return Message.ICON_DONE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return Message.ICON_NOT_DONE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"hh:mma, EEEE, dd MMM yyyy\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (retrieveDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return getName() + \" [\" + generateStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return getName() + \" [\" + generateStatusIcon() + \"],\" + \" by \" + retrieveDeadline().format(formatter);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//import seedu.ravi.directory.Directory;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//import seedu.ravi.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//public class Task extends Directory {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    public Directory getParent() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 74,
      "wangqinNick": 7,
      "amalinasani": 17,
      "Aseanseen": 13
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/TaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e(); // Main task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Finds a task with the specified task index (id) in the Task List."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task to be found"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The found task with the specified task index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the task is not found in the Task List"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Task getTask(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.get(taskId);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a task in the Task List."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task in the Task List"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param editedTaskDesc"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The edited task description string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The task object after editing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If there is no task found with that ID"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Task edit(int taskId, String editedTaskDesc) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.get(taskId).setName(editedTaskDesc);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.get(taskId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a task in the Task List."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task in the Task List."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param editedTaskDesc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The edited task description string"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The edited deadline"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The task object after editing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If there is no task found with that ID"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Task edit(int taskId, String editedTaskDesc, LocalDateTime deadline) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.get(taskId).setName(editedTaskDesc);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.get(taskId).setDeadline(deadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.get(taskId);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a task to the Task List."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newTask"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The task object to add to the task list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void add(Task newTask) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.add(newTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes a task from the Task List using the task index (id)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task to be deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the task to be removed is not in the task list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void delete(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.remove(taskId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    //@@author amalinasani"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Marks a task from the Task List as done using the task index (id)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *  The index of the task to be marked done"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *  The task object marked as done"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *  When the task to be removed is not in the task list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static Task done(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        task \u003d getTask(taskId);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        task.setStatus(true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Generate an ordered ArrayList of ArrayLists."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * First ArrayList contains a list of uncompleted tasks with deadlines, sorted by deadlines."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Second ArrayList contains a list of uncompleted tasks without deadlines."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Last ArrayList contains a list of completed tasks."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList of ArrayLists mentioned above."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cTask\u003e\u003e summary() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cArrayList\u003cTask\u003e\u003e summaryLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteTasksDated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteTasksUndated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e completedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Task eachTask : tasksList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachTask.getStatus()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                completedTasks.add(eachTask);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (eachTask.retrieveDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                incompleteTasksUndated.add(eachTask);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                incompleteTasksDated.add(eachTask);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Comparator\u003cTask\u003e compareByDeadline \u003d Comparator.comparing(Task::retrieveDeadline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        incompleteTasksDated.sort(compareByDeadline);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Do not change the adding order!"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(incompleteTasksDated);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(incompleteTasksUndated);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(completedTasks);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return summaryLists;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    //@@author amalinasani"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Gets Task summary."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *  The message containing the task summary"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String getSummary() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cArrayList\u003cTask\u003e\u003e summaryLists \u003d summary();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return TextUi.getSummaryList(summaryLists);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Gets Task List."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return tasksList"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return tasksList;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints all tasks in task list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *  The formatted task list from TextUi or null if list is empty"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String list() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (getTaskList().size() \u003e 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return TextUi.getIndexTaskList(tasksList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded task list into TaskManager\u0027s own task list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedTasksList the loaded task list from file"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadTasks(ArrayList\u003cTask\u003e loadedTasksList) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList \u003d loadedTasksList;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns the number of tasks."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the number of tasks"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getTaskCount() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.size();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears the current task list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clear() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static class TaskNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 145,
      "wangqinNick": 5,
      "amalinasani": 60,
      "Aseanseen": 5
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/TimeTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private HashMap\u003cInteger, LessonManager\u003e semesterMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private int semStartWeekNum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private int semEndWeekNum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private int semRecessWeekNum;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public TimeTable() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void initWeek(int weekNum) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        semesterMap.put(weekNum, new LessonManager());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getSemEndWeekNum() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semEndWeekNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getSemRecessWeekNum() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semRecessWeekNum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getSemStartWeekNum() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semStartWeekNum;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int countLessonManagers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semesterMap.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LessonManager getLessonManagerOfWeek(int weekNum) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semesterMap.get(weekNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void deleteLessonById(DayOfWeek dayOfWeek, String id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (LessonManager eachWeek : semesterMap.values()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            eachWeek.removeLessonById(dayOfWeek, id);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int countWeekLessons(int week) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semesterMap.get(week).countTotalLessons();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int countTimetableLessons() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int totalLessonNum \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (LessonManager eachWeek : semesterMap.values()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            totalLessonNum +\u003d eachWeek.countTotalLessons();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return totalLessonNum;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public HashMap\u003cInteger, LessonManager\u003e getSemesterMap() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semesterMap;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setSemesterMap(HashMap\u003cInteger, LessonManager\u003e semesterMap) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.semesterMap \u003d semesterMap;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setSemEndWeekNum(int semEndWeekNum) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.semEndWeekNum \u003d semEndWeekNum;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setSemRecessWeekNum(int semRecessWeekNum) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.semRecessWeekNum \u003d semRecessWeekNum;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setSemStartWeekNum(int semStartWeekNum) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.semStartWeekNum \u003d semStartWeekNum;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 77,
      "Aseanseen": 2
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/TimeTableManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.RaviLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonOverlapException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.TIMETABLE_NOT_INITIALISED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static TimeTable timetable \u003d new TimeTable();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final RaviLogger logger \u003d new RaviLogger(TimeTableManager.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static boolean isInitialised;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Initialise the semesterMap when it is empty."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Takes in the current week number in order to initialise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param userCurrWeekNum"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The current nus week number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws TimeTableInitialiseException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  when the userCurrWeekNum is not accepted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void initialise(int userCurrWeekNum) throws TimeTableInitialiseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Initialising timetable with user input: \" + userCurrWeekNum);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // One sem has 13 weeks of lessons"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (userCurrWeekNum \u003e 0 \u0026\u0026 userCurrWeekNum \u003c 15) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // e.g. Current week is 45, NUS week 2"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // semStartWeekNum is NUS week 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // therefore, semStartWeekNum \u003d 45 - (2 - 1) \u003d 44"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            timetable.setSemStartWeekNum(now.get(ChronoField.ALIGNED_WEEK_OF_YEAR) - (userCurrWeekNum - 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            logger.getLogger().warning(\"User input week num is invalid!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new TimeTableInitialiseException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        timetable.setSemEndWeekNum(timetable.getSemStartWeekNum() + 14);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        timetable.setSemRecessWeekNum(timetable.getSemStartWeekNum() + 6);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // e.g. semStartWeekNum is 44, NUS week 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Current week is NUS week 2"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // therefore, userCurrWeekNum \u003d 44 + 2 - 1 \u003d 45"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        userCurrWeekNum \u003d timetable.getSemStartWeekNum() + userCurrWeekNum - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(String.format(\"Current, Start, Recess, End: %d, %d, %d, %d\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                now.get(ChronoField.ALIGNED_WEEK_OF_YEAR), timetable.getSemStartWeekNum(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                timetable.getSemRecessWeekNum(), timetable.getSemEndWeekNum()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Filling semesterMap with empty LessonManagers\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        for (int weekNum \u003d userCurrWeekNum; weekNum \u003c timetable.getSemEndWeekNum(); weekNum++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            timetable.initWeek(weekNum);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Initialisation of timetable complete\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        isInitialised \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Checks if timetable is initialised."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  Boolean of whether it is initialised"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static boolean isInitialised() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return isInitialised;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Adds the lesson to semesterMap based on the repeat parameter. E.g. add to every week, every other week, etc."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Does not add to recess week (week 7) or reading week (week 15)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * The repeat parameter where"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * 0: Current week only."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * 1: Every week."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * 2: Every even week."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * 3: Every odd week."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lesson The lesson object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param repeat The repeat parameter"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonInvalidTimeException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the lesson to be added overlaps with an existing lesson"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the lesson to be added is not in the module list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonOverlapException"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the lesson to be added overlaps with an existing lesson"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void addLesson(Lesson lesson, int repeat) throws"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            LessonInvalidTimeException, ModuleNotFoundException, LessonOverlapException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Check for errors and throw exceptions accordingly"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Adding lesson: \" + lesson.toString() + \" with repeat: \" + repeat);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (!ModuleManager.doesContainMod(lesson.getModuleCode())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            logger.getLogger().warning(\"Could not add lesson as module not in user module list!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Lesson overlapLesson \u003d doesOverlap(lesson, repeat);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (overlapLesson !\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            logger.getLogger().warning(\"Lesson overlaps with other lesson! \" + overlapLesson.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new LessonOverlapException(overlapLesson.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Get current week number and generate lesson\u0027s hidden ID"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int currWeek \u003d getCurrWeekNum();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Current week num is: \" + currWeek);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LessonManager lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        lesson.generateHiddenId(); // tag lesson with unique ID for identifying when removing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"The lesson\u0027s hiddenId is: \" + lesson.getHiddenId());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // If repeat is 0, add for current week only"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (repeat \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            lessonManager.addLesson(lesson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Otherwise, use for loop to add to the right weeks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        for (; currWeek \u003c timetable.getSemEndWeekNum(); currWeek++) { // don\u0027t add for reading week"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (currWeek \u003d\u003d timetable.getSemRecessWeekNum()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                // don\u0027t add for recess week"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else if (repeat \u003d\u003d 1) { // if repeat every week"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                lessonManager.addLesson(lesson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else if (isEvenWeek(currWeek) \u0026\u0026 repeat \u003d\u003d 2) { // if repeat every even week"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                lessonManager.addLesson(lesson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else if (isOddWeek(currWeek) \u0026\u0026 repeat \u003d\u003d 3) { // if repeat every odd week"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                lessonManager.addLesson(lesson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes lesson by identifying the unique lesson from the current week, dayOfWeek, and lessonIndex."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Using the params, the lesson is found and the unique hiddenId is obtained."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Uses the removeLessonById method of LessonManager to delete all lessons with this hiddenId."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param dayOfWeek"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The day of week."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lessonIndex"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The lesson index."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The deleted lesson."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the lesson index is out of bounds."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Lesson deleteLesson(DayOfWeek dayOfWeek, int lessonIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Deleting lesson with index \" + lessonIndex + \" on \" + dayOfWeek"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                + \" (failed if no successful deletion log below)\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int currWeek \u003d getCurrWeekNum();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // retrieve the unique ID, as index does not stay constant over different weeks"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LessonManager lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Lesson lesson \u003d lessonManager.getDayLessonList(dayOfWeek).get(lessonIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String id \u003d lesson.getHiddenId();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // remove by ID"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Lesson deletedLesson \u003d timetable.getLessonManagerOfWeek(currWeek).getDayLessonList(dayOfWeek).get(lessonIndex);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        timetable.deleteLessonById(dayOfWeek, id);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Successful deletion of lesson with hiddenId \" + id);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return deletedLesson;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Get an ArrayList of lessons happening on a certain day."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param dayOfWeek"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The specific day of week."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The ArrayList of lessons."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static ArrayList\u003cLesson\u003e getSpecificDayLessons(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int currWeek \u003d getCurrWeekNum();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LessonManager lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return lessonManager.getDayLessonList(dayOfWeek);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Checks if the given lesson overlaps with any lesson already in timetable with the given repeat."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The specified lesson"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param repeat"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The repeat interval for the lesson."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The lesson in timetable that the given lesson overlaps with, or null if no overlap"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Lesson doesOverlap(Lesson lesson, int repeat) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LessonManager lessonManager;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        for (int i \u003d getCurrWeekNum(); i \u003c timetable.getSemEndWeekNum(); i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (repeat \u003d\u003d 2 \u0026\u0026 !isEvenWeek(i)) {         // Handle even repeat"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else if (repeat \u003d\u003d 3 \u0026\u0026 !isOddWeek(i)) {   // Handle odd repeat"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            lessonManager \u003d timetable.getLessonManagerOfWeek(i);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            for (Lesson eachLesson : lessonManager.getDayLessonList(lesson.getDay())) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                if (eachLesson.checkOverlap(lesson)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    return eachLesson;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (repeat \u003d\u003d 0) {  // Handle no repeat"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Get an ArrayList of ArrayLists of lessons happening in the specified week."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Outer ArrayList: Holds one ArrayList for each day of week, starting from Monday."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Inner ArrayList: Holds lessons happening on that day of week."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param currWeek"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The current week."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The ArrayList of ArrayList of lessons."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cLesson\u003e\u003e getSpecifiedWeekLessons(int currWeek) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ArrayList\u003cArrayList\u003cLesson\u003e\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LessonManager lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            outputList.add(lessonManager.getDayLessonList(eachDay));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Get the current week number (of the year)."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The current week number."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getCurrWeekNum() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return now.get(ChronoField.ALIGNED_WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Get the current week number (of NUS calendar)."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The current week number."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static String getCurrNusWeekStr() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (getCurrWeekNum() \u003d\u003d timetable.getSemRecessWeekNum()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return \"Recess week\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else if (getCurrWeekNum() \u003d\u003d timetable.getSemEndWeekNum()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return \"Reading week\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return Integer.toString(getCurrWeekNum() - timetable.getSemStartWeekNum() + 1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Checks whether the current NUS week is odd."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param week"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The week number to check."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  Whether current NUS week is odd."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static boolean isOddWeek(int week) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int recessWeek \u003d timetable.getSemRecessWeekNum();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int startWeek \u003d timetable.getSemStartWeekNum();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (week \u003c recessWeek) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return (week - startWeek + 1) % 2 \u003d\u003d 1; // check if the NUS week is even"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else if (week \u003d\u003d recessWeek) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return (week - startWeek + 1) % 2 \u003d\u003d 0; // check if the NUS week is even (accounting for recess week)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Checks whether the current NUS week is even."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param week"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The week number to check."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  Whether current NUS week is even."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static boolean isEvenWeek(int week) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int recessWeek \u003d timetable.getSemRecessWeekNum();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int startWeek \u003d timetable.getSemStartWeekNum();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (week \u003c recessWeek) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return (week - startWeek + 1) % 2 \u003d\u003d 0; // check if the NUS week is even"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else if (week \u003d\u003d recessWeek) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return (week - startWeek + 1) % 2 \u003d\u003d 1; // check if the NUS week is even (accounting for recess week)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Returns an ArrayList with lessons by filtering all lessons in lessonList through the given LessonFilter."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lessonList"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The ArrayList of lessons to be filtered"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param currentFilter"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The current LessonFilter in use"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The filtered ArrayList of lessons generated from lessonMap"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static ArrayList\u003cLesson\u003e filterLessonList(ArrayList\u003cLesson\u003e lessonList, LessonFilter currentFilter) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ArrayList\u003cLesson\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        for (Lesson eachLesson : lessonList) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (currentFilter.filter(eachLesson)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                outputList.add(eachLesson);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cLesson\u003e\u003e filterWeekWithFilterList(ArrayList\u003cLessonFilter\u003e currentFilter) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ArrayList\u003cArrayList\u003cLesson\u003e\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        for (DayOfWeek day : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            ArrayList\u003cLesson\u003e lessonList \u003d timetable.getLessonManagerOfWeek(getCurrWeekNum()).getDayLessonList(day);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            for (LessonFilter eachFilter : currentFilter) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                lessonList \u003d filterLessonList(lessonList, eachFilter);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            outputList.add(lessonList);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Initialises the timetable to get the current nus week."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the user input is ctrl-c."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void initialiseTimetable() throws NoSuchElementException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            TextUi.showTimeTableInitialisationMessage();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            int currWeekNum \u003d TextUi.getCurrentWeekNum();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            TimeTableManager.initialise(currWeekNum);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (TimeTableInitialiseException e) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            TextUi.outputToUser(TIMETABLE_NOT_INITIALISED);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getWeekLessonCount(int week) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return timetable.countWeekLessons(week);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getTimetableLessonCount() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return timetable.countTimetableLessons();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void loadTimeTable(TimeTable loadedTimeTable) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        timetable \u003d loadedTimeTable;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        isInitialised \u003d true;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void clearTimeTable() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        timetable \u003d new TimeTable();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getSemEndWeekNum() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return semEndWeekNum;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getSemStartWeekNum() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return semStartWeekNum;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getSemRecessWeekNum() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return semRecessWeekNum;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static boolean isSemRecessWeek(int week) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return week \u003d\u003d semRecessWeekNum;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 386
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/storage/Decoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import com.alibaba.fastjson.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.data.storage.InputOutputManager.JAR_NUS_MODULE_FILE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all outputs from files, and the conversion from String in file to Object in memory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Throws exceptions to InputOutputManager and handles none."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Wang Qin"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Decoder {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static TimeTable loadTimeTable(String dataFileName) throws IOException, JSONException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTable timetable \u003d JSON.parseObject(jsonStr, TimeTable.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads a HashMap of Module objects from the specified file. Used for both user and NUS modules."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The file to load from"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The HashMap of Module objects"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws JSONException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the file to be parsed has caused some error"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the file cannot be loaded or read"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static HashMap\u003cString, Module\u003e loadModules(String dataFileName) throws IOException, JSONException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // FastJSON doesn\u0027t write the square brackets for some reason when we save, so we add it in here"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so that parseArray works as it should"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr \u003d \"[\" + jsonStr + \"]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (moduleList !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (Module eachModule : moduleList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                modulesMap.put(eachModule.getModuleCode(), eachModule);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Parses the specified save file to return an ArrayList of Task objects."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to read from"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList tasksList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws JSONException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the file to be parsed has caused some error"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the file cannot be loaded or read"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cTask\u003e loadTasks(String dataFileName) throws IOException, JSONException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            String[] lines \u003d jsonStr.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (String eachTaskStr : lines) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                tasksList.add(JSON.parseObject(eachTaskStr, Task.class));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return tasksList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads NUSMods list from the JAR file\u0027s resources folder."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The HashMap of Module objects (from NUSMods)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the file cannot be read"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws JSONException"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the file to be parsed has caused some error"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws NullPointerException"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the file cannot be loaded"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static HashMap\u003cString, Module\u003e loadNusModsFromJar() throws IOException, JSONException, NullPointerException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new InputStreamReader("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Decoder.class.getResourceAsStream(JAR_NUS_MODULE_FILE)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String jsonStr \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        while (br.ready()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr +\u003d br.readLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr \u003d \"[\" + jsonStr + \"]\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cModule\u003e modulesList \u003d JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e retrievedNusModsList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module eachModule : modulesList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            retrievedNusModsList.put(eachModule.getModuleCode(), eachModule);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return retrievedNusModsList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Pulls JSON from the NUSMods API, parses it, and returns the HashMap of Module objects."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The HashMap of Module objects (from NUSMods)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ConnectException"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the connection to the NUSMods API fails"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws JSONException"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the JSON data cannot be parsed"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static HashMap\u003cString, Module\u003e generateNusModsList() throws ConnectException, JSONException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e retrievedNusModsList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String retrievedJson;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        retrievedJson \u003d requestNusModsJsonString(\"https://api.nusmods.com/v2/2020-2021/moduleList.json\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // This JSON string comes with the square brackets, so no need to add"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cModule\u003e modulesList \u003d JSON.parseArray(retrievedJson, Module.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module eachModule : modulesList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            retrievedNusModsList.put(eachModule.getModuleCode(), eachModule);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return retrievedNusModsList;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Reads a string from a file (doesn\u0027t necessarily have to be JSON)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified file"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string read from file"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the file cannot be loaded or read"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        byte[] fileContent \u003d new byte[(int) fileLength];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        in.read(fileContent);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Uses the NUSMods API to get a JSON string with the information of all available mods."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The endpoint for the NUSMods API."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The JSON string with information of all currently available mods in NUS."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ConnectException"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the connection to the NUSMods API fails"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static String requestNusModsJsonString(String filePath) throws ConnectException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int httpResult; // the status from the server response"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            URL url \u003d new URL(filePath); // create URL"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            URLConnection urlConn \u003d url.openConnection(); // try to connect and get the status code"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            urlConn.connect();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            HttpURLConnection httpConn \u003d (HttpURLConnection) urlConn;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            httpResult \u003d httpConn.getResponseCode();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (httpResult !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                throw new ConnectException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                int fileSize \u003d urlConn.getContentLength(); // get the length of the data"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                InputStreamReader isReader \u003d new InputStreamReader(urlConn.getInputStream(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(isReader);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                String line; // to save the content of every line"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                line \u003d reader.readLine(); // read the first line"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                while (line !\u003d null) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    buffer.append(line); // append to the buffer"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    buffer.append(\" \"); // add new line"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    line \u003d reader.readLine(); // read the next line"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                content \u003d buffer.toString();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new ConnectException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 149,
      "Aseanseen": 76
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/storage/Encoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all inputs to files, and the conversion from Object in memory to String in file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Throws exceptions to InputOutputManager and handles none."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Encoder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves timetable to file path/name specified."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When there is an error preparing the save file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveTimetable(String dataFileName) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        writeToFile(mySaveFile, JSON.toJSONString(TimeTableManager.getTimeTable()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all tasks to file path/name specified."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When there is an error preparing the save file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If index out of range (should never happen)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveTasks(String dataFileName) throws IOException, TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int taskCount \u003d TaskManager.getTaskCount();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task currentTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentTask \u003d TaskManager.getTask(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentTask));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all modules to file path/name specified."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When there is an error preparing the save file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If module not found (should never happen)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveModules(String dataFileName) throws IOException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module currentModule;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachModCode : ModuleManager.getModCodeList()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentModule \u003d ModuleManager.getModule(eachModCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentModule));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all NUS modules to file path/name specified."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When there is an error preparing the save file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If module not found (should never happen)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveNusModules(String dataFileName) throws IOException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module currentModule;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachModCode : ModuleManager.getNusModCodeList()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentModule \u003d ModuleManager.getNusModule(eachModCode);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentModule));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prepares the specified save file (and dir) by creating it or deleting then creating it (if the file exists)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The File object to prepare the actual file for"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If createNewFile does not work as expected"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void prepareSaveFile(File saveFile) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (saveFile.exists()) { // overwrite by deleting first"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveFile.delete();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        saveFile.createNewFile();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Appends the specified string to the specified File object."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The File object to write to"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param textToAdd"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string to write"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If FileWriter cannot write or close the file"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void writeToFile(File saveFile, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        FileWriter fw \u003d new FileWriter(saveFile, true); // true to append data instead of overwrite"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.write(textToAdd + \"\\n\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 114,
      "Aseanseen": 16
    }
  },
  {
    "path": "src/main/java/seedu/ravi/data/storage/InputOutputManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import com.alibaba.fastjson.JSONException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.RaviLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.FileName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.net.ConnectException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all inputs and outputs (to and from files)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Encoder and Decoder are only used by InputOutputManager."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * InputOutputManager also handles exceptions thrown by Encoder and Decoder. No exceptions are thrown from here."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class InputOutputManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String ROOT \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final java.nio.file.Path DIR_PATH \u003d java.nio.file.Paths.get(ROOT, \"data\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final java.nio.file.Path RESOURCE_DIR_PATH \u003d java.nio.file.Paths.get(ROOT, \"src/main/resources\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String USER_MOD_F_NAME \u003d FileName.MOD_SAVE_FILE_NAME + FileName.FILE_EXT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String USER_TASK_F_NAME \u003d FileName.TASK_SAVE_FILE_NAME + FileName.FILE_EXT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String TTABLE_F_NAME \u003d FileName.TIMETABLE_SAVE_FILE_NAME + FileName.FILE_EXT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String NUS_MOD_F_NAME \u003d FileName.NUSMOD_SAVE_FILE_NAME + FileName.FILE_EXT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String BACKUP \u003d \".bak\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_BK_NAME \u003d FileName.MOD_SAVE_FILE_NAME + FileName.FILE_EXT + BACKUP;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String TASK_BK_NAME \u003d FileName.TASK_SAVE_FILE_NAME + FileName.FILE_EXT + BACKUP;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String TTABLE_BK_NAME \u003d FileName.TIMETABLE_SAVE_FILE_NAME + FileName.FILE_EXT + BACKUP;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final java.nio.file.Path USER_MODULE_FILE \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            java.nio.file.Paths.get(String.valueOf(DIR_PATH), USER_MOD_F_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final java.nio.file.Path USER_TASK_FILE \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            java.nio.file.Paths.get(String.valueOf(DIR_PATH), USER_TASK_F_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final java.nio.file.Path TIMETABLE_FILE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            java.nio.file.Paths.get(String.valueOf(DIR_PATH), TTABLE_F_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final java.nio.file.Path NUS_MODULE_FILE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            java.nio.file.Paths.get(String.valueOf(DIR_PATH), NUS_MOD_F_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String JAR_NUS_MODULE_FILE \u003d \"/\" + NUS_MOD_F_NAME;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final RaviLogger logger \u003d new RaviLogger(InputOutputManager.class.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Creates the save directory if it has not been created."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the user\u0027s module and task saves into memory."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  the integer containing the status of loading of the modules, task and timetable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws NusModsNotLoadedException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When no NUSMods data could be loaded. Signals the main class to crash."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int start() throws NusModsNotLoadedException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int status \u003d 0; // \u0027Skipped load\u0027 status for all 3 files by default"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Starting InputOutputManager\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        java.io.File saveFolder \u003d DIR_PATH.toFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!saveFolder.exists()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Save folder does not exist, creating now\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveFolder.mkdir();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            status +\u003d tryLoadNusMods() * 1000;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // For documentation of this part, look at TextUi\u0027s showWelcomeMessage"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            status +\u003d tryLoadMods();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            status +\u003d tryLoadTasks() * 10;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            status +\u003d tryLoadTimetable() * 100;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            status +\u003d tryLoadNusMods() * 1000;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int tryLoadMods() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (Files.exists(USER_MODULE_FILE)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading user module saves from \" + USER_MOD_F_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                ModuleManager.loadMods(Decoder.loadModules(USER_MODULE_FILE.toString()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Successfully loaded user module saves from \" + USER_MOD_F_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return 1; // \u0027Success\u0027 status"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Skipping user module save; file does not exist: \" + USER_MOD_F_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return 0; // \u0027Skipped\u0027 status"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().severe(\"JSON string can\u0027t be parsed! Error: \" + e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            handleCorruptedFile(USER_MODULE_FILE, MOD_BK_NAME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return 2; // \u0027Corrupted\u0027 status"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // should not happen"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().severe(\"IOException in tryLoadMods - check me now!!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return 0; // \u0027Skipped\u0027 status"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int tryLoadTasks() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (Files.exists(USER_TASK_FILE)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading user task saves from \" + USER_TASK_F_NAME);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TaskManager.loadTasks(Decoder.loadTasks(USER_TASK_FILE.toString()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return 1; // \u0027Success\u0027 status"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Skipping user task save; file does not exist: \" + USER_TASK_F_NAME);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return 0; // \u0027Skipped\u0027 status"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().severe(\"JSON string can\u0027t be parsed! Error: \" + e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            handleCorruptedFile(USER_TASK_FILE, TASK_BK_NAME);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return 2; // \u0027Corrupted\u0027 status"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // should not happen"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().severe(\"IOException in tryLoadTasks - check me now!!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return 0; // \u0027Skipped\u0027 status"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int tryLoadTimetable() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (Files.exists(TIMETABLE_FILE)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading timetable save from \" + TTABLE_F_NAME);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TimeTableManager.loadTimeTable(Decoder.loadTimeTable(TIMETABLE_FILE.toString()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return 1; // \u0027Success\u0027 status"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Skipping timetable save; file does not exist: \" + TTABLE_F_NAME);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return 0; // \u0027Skipped\u0027 status"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().severe(\"JSON string can\u0027t be parsed! Error: \" + e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            handleCorruptedFile(TIMETABLE_FILE, TTABLE_BK_NAME);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return 2; // \u0027Corrupted\u0027 status"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // should not happen"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().severe(\"IOException in tryLoadTimetable - check me now!!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return 0; // \u0027Skipped\u0027 status"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads NUSMods from the saved file in the data directory."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Failing that, it will try to load from the online NUSMods API."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Failing even that, it will fall back to the packaged NUSMods list in the jar file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Finally, failing all these, it will throw the NusModsNotLoadedException as a signal to crash the program."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The status code (refer to TextUi\u0027s showWelcomeMessage method)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws NusModsNotLoadedException"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When no NUSMods data can be loaded"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int tryLoadNusMods() throws NusModsNotLoadedException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e loadedNusModsMap;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int status;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Loading NUSMods data from data directory...\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            loadedNusModsMap \u003d Decoder.loadModules(NUS_MODULE_FILE.toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Successfully loaded NUSMods data from data directory!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            status \u003d 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException | JSONException e1) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().warning(\"Could not load from data directory!\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading NUSMods from NUSMods API...\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                loadedNusModsMap \u003d Decoder.generateNusModsList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Successfully loaded NUSMods data from NUSMods API!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                status \u003d 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } catch (ConnectException | JSONException e2) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    logger.getLogger().warning(\"Could not load from NUSMods API! (No Internet connection?)\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    logger.getLogger().info(\"Loading NUSMods data from JAR resource file...\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    loadedNusModsMap \u003d Decoder.loadNusModsFromJar();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    logger.getLogger().info(\"Successfully loaded NUSMods data from JAR resource file!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    status \u003d 2;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                } catch (IOException | JSONException | NullPointerException e3) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    logger.getLogger().severe(\"Could not load from JAR resource file! Crashing...\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    throw new NusModsNotLoadedException();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.loadNusMods(loadedNusModsMap);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Updates the user\u0027s save files. Does not save NUS Modules."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void save() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (ModuleManager.getModCodeList().length !\u003d 0) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveModules(USER_MODULE_FILE.toString());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Saved module data to \" + USER_MOD_F_NAME);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().warning(\"No module data to save!\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TaskManager.getTaskCount() !\u003d 0) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveTasks(USER_TASK_FILE.toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Saved task data to \" + USER_TASK_F_NAME);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().warning(\"No task data to save!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TimeTableManager.isInitialised()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveTimetable(TIMETABLE_FILE.toString());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Saved timetable data to \" + TTABLE_F_NAME);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().warning(\"No timetable data to save!\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleNotFoundException | TaskManager.TaskNotFoundException | IOException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().severe(\"Something went wrong while trying to save files!\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Updates the user\u0027s NUS Modules save file. Will not create file to save if there is nothing to save."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveNusMods() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Saving NUS modules into \" + NUS_MOD_F_NAME);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (ModuleManager.getNusModCodeList().length !\u003d 0) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveNusModules(NUS_MODULE_FILE.toString());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().warning(\"No NUSMods data to save!\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleNotProvidedException | IOException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Renames the corrupted files (if any) by adding a \".bak\" behind the file name."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void handleAllCorruptedFiles() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String backup \u003d \".bak\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String modBackup \u003d FileName.MOD_SAVE_FILE_NAME + FileName.FILE_EXT + backup;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String taskBackup \u003d FileName.TASK_SAVE_FILE_NAME + FileName.FILE_EXT + backup;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String timetableBackup \u003d FileName.TIMETABLE_SAVE_FILE_NAME + FileName.FILE_EXT + backup;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        handleCorruptedFile(USER_MODULE_FILE, modBackup);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        handleCorruptedFile(USER_TASK_FILE, taskBackup);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        handleCorruptedFile(TIMETABLE_FILE, timetableBackup);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void handleCorruptedFile(java.nio.file.Path currentFile, String newName) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Files.move(currentFile, currentFile.resolveSibling(newName));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Renamed corrupted file to \" + newName);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().severe(\"Could not rename corrupted file to \" + newName);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 234,
      "wangqinNick": 7,
      "Aseanseen": 19
    }
  },
  {
    "path": "src/main/java/seedu/ravi/directory/Directory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Directory parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the Directory without a parent."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.parent \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the Directory that has a parent."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param parent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory(Directory parent) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the parent of the class in the Directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract Directory getParent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the corresponding level of the Directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The level of the Directory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract DirectoryLevel getLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 37,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/directory/DirectoryLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public enum DirectoryLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    ROOT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    MODULE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    TAG {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        public DirectoryLevel next() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel next() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return values()[ordinal() + 1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 18,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/directory/Root.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Root extends Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Root() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return DirectoryLevel.ROOT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 16,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/DataNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class DataNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/DuplicateDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class DuplicateModuleException extends DuplicateDataException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/InvalidCapCalculatedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class InvalidCapCalculatedException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 6
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/InvalidCapException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class InvalidCapException extends Exception{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 6
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/InvalidGradeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class InvalidGradeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 6
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/InvalidMatchException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class InvalidMatchException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public InvalidMatchException(String parameters, String format, String helpPrompt) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        super(String.format(\"%s%s\\n\\n%s%s\\n\\n%s\\n\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, format,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                helpPrompt));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 15
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/InvalidModuleCreditException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class InvalidModuleCreditException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/LessonInvalidTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonInvalidTimeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonNotFoundException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/LessonOverlapException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonOverlapException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String overlapLessonStr;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LessonOverlapException(String overlapLessonStr) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.overlapLessonStr \u003d overlapLessonStr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 8,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class ModuleNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/ModuleNotProvidedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleNotProvidedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/NusModsNotLoadedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class NusModsNotLoadedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/RepeatFrequencyInvalidException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class RepeatFrequencyInvalidException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 6
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/exception/TimeTableInitialiseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.exception;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableInitialiseException extends Exception{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 6
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_ADD_TASK_DATE_TIME_UNKNOWN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_NO_ADD_MODULE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_NO_ADD_TASK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String DESC_GROUP \u003d \"desc\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String DEADLINE_GROUP \u003d \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String BY_GROUP \u003d \"by\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    //@@author aseanseen"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    protected static final Pattern ADD_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e-\\\\S+)\" + \"(?\u003cdesc\u003e(?:(?!-by).)*)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    + \"((?\u003cby\u003e-by)?)\" + \"((?\u003cdeadline\u003e.*)?)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //@@author tobiasceg"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for AddCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * AddCommand with the relevant parameters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When an invalid parameter is given by the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a method has been invoked at an illegal time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the AddCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareAddCommand(String parameters)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, IllegalStateException, InvalidMatchException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d ADD_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, AddCommand.FORMAT, AddCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!(commandFlag.equals(MODULE_PREFIX) || commandFlag.equals(TASK_PREFIX))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\\n%s\\n\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    AddCommand.FORMAT, AddCommand.PROMPT_HELP));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String addedTask \u003d matcher.group(DESC_GROUP).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String taskDeadline \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // Checks for presence of -by"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String dashBy \u003d matcher.group(BY_GROUP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (dashBy !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            taskDeadline \u003d matcher.group(DEADLINE_GROUP).trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (taskDeadline.isEmpty()) { // -by is present but empty deadline"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\\n%s\\n\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                        MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                        AddTaskCommand.FORMAT, AddCommand.PROMPT_HELP));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // no task input by user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (Parser.isEmptyParse(addedTask)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return (commandFlag.equals(MODULE_PREFIX))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? new IncorrectCommand(MESSAGE_NO_ADD_MODULE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    : new IncorrectCommand(MESSAGE_NO_ADD_TASK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return getAddCommand(commandFlag, addedTask, taskDeadline);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_ADD_TASK_DATE_TIME_UNKNOWN);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks the prefix of the user\u0027s input and calls the respective Add command according to it."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param commandFlag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * The command flag which is either \u0027-t\u0027 for task or \u0027-m\u0027 for module"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param addedTask"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Task or module to be added"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param taskDeadline"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * The deadline, if given , assigned to the task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the respective Add command for either task or module"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static AddCommand getAddCommand(String commandFlag, String addedTask, String taskDeadline) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new AddModuleCommand(addedTask.toUpperCase());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new AddTaskCommand(addedTask, taskDeadline);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 106,
      "Aseanseen": 5
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/CapCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.cap.CapCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidCapException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidModuleCreditException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class CapCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String TOTAL_MC_GROUP \u003d \"totalMc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String CAP_GROUP \u003d \"cap\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern CUMULATIVE_CAP_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ctotalMc\u003e\\\\d+)\" + \"(?\u003ccap\u003e\\\\s[0-9.]+)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for CapCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * CapCommand with the relevant parameters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a string is parsed as an integer/double"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NullPointerException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * referenced object is accessed by its a null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Cap Command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareCapCommand(String parameters)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws NumberFormatException, NullPointerException,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            InvalidMatchException, InvalidCapException, InvalidModuleCreditException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d CUMULATIVE_CAP_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, CapCommand.FORMAT, CapCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String mc \u003d Parser.isMatcherNull(matcher.group(TOTAL_MC_GROUP))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(TOTAL_MC_GROUP).trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String cap \u003d Parser.isMatcherNull(matcher.group(CAP_GROUP))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(CAP_GROUP).trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int totalMcTaken \u003d Integer.parseInt(mc);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double currentCap \u003d Double.parseDouble(cap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        isCapParametersValid(totalMcTaken, currentCap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new CapCommand(totalMcTaken, currentCap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks if the user input for cap command is valid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param totalMcTaken"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * users total mc taken"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param currentCap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * users current cap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidModuleCreditException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * user input invalid mc"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidCapException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * user input invalid cap"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static void isCapParametersValid(int totalMcTaken, double currentCap)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidModuleCreditException, InvalidCapException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (totalMcTaken \u003c 0 || totalMcTaken \u003e 190) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidModuleCreditException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (currentCap \u003c 0 || currentCap \u003e 5.0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidCapException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 76
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.delete.DeleteModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String TASK_MODULE_GROUP \u003d \"taskModule\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String INVALID_GROUP \u003d \"invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern DELETE_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"((?\u003ccommandFlag\u003e.*-\\\\S+)?)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    + \"(?\u003ctaskModule\u003e\\\\s\\\\S+)\" + \"((?\u003cinvalid\u003e.*)?)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for Delete Command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Delete command with relevant arguments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a string is parsed as an integer/double"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Delete Command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getDeleteCommand(String parameters) throws NumberFormatException, InvalidMatchException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d DELETE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, DeleteCommand.FORMAT, DeleteCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(Parser.COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(Parser.COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String stringTaskIndex \u003d matcher.group(TASK_MODULE_GROUP).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // Checks for any string after the module or index given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\\n%s\\n\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    DeleteCommand.FORMAT, DeleteCommand.PROMPT_HELP));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new DeleteModuleCommand(stringTaskIndex); //parameter is module code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new DeleteTaskCommand(Integer.parseInt(stringTaskIndex) - 1);//parameters is the index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 66
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.done.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class DoneCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String NUMBER_GROUP \u003d \"digit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern DONE_FORMAT \u003d Pattern.compile(\"(?\u003cdigit\u003e\\\\S+)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for Done Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Done Command with relevant arguments"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a string is parsed as an integer/double"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Parameters entered by the user is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Done Command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareDoneCommand(String parameters)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws NumberFormatException, InvalidParameterException, InvalidMatchException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d DONE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, DoneCommand.FORMAT, DoneCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String digit \u003d Parser.isMatcherNull(matcher.group(NUMBER_GROUP))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(NUMBER_GROUP).trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (digit \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int intDigit \u003d Integer.parseInt(digit) - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new DoneCommand(intDigit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 49
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.edit.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.edit.EditModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.edit.EditTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_ADD_TASK_DATE_TIME_UNKNOWN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_NO_EDIT_MODULE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String ARGUMENT_IDENTIFIER_GROUP \u003d \"argument\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String TASK_INDEX_IDENTIFIER_GROUP \u003d \"taskIndex\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String TASK_DESC_IDENTIFIER_GROUP \u003d \"desc\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String BY_FLAG_IDENTIFIER_GROUP \u003d \"by\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String DEADLINE_IDENTIFIER_GROUP \u003d \"deadline\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern EDIT_PREFIX_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e-\\\\S+)\" + \"(?\u003cargument\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern EDIT_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ctaskIndex\u003e\\\\S+)\" + \"(?\u003cdesc\u003e(?:(?!-by).)*)\" + \"((?\u003cby\u003e-by)?)\" + \"((?\u003cdeadline\u003e.*)?)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Splits the user\u0027s input, based on the prefix and parse it into the respective prepare methods."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The parameters given by the user, but unknown if its module or task yet"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The command to prepare the respective module or task command for edit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getEditCommand(String parameters) throws InvalidMatchException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_PREFIX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, EditModuleCommand.FORMAT + \"\\n\" + EditTaskCommand.FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                EditCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String argument \u003d Parser.isMatcherNull(matcher.group(ARGUMENT_IDENTIFIER_GROUP))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(ARGUMENT_IDENTIFIER_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareEditModuleCommand(argument.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareEditTaskCommand(argument.trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Prepares the command to edit a module."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The command to edit a module"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareEditModuleCommand(String parameters)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, InvalidMatchException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, EditModuleCommand.FORMAT, EditCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String oldModuleCode \u003d matcher.group(TASK_INDEX_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newModuleCode \u003d matcher.group(TASK_DESC_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (Parser.isEmptyParse(oldModuleCode) || Parser.isEmptyParse(newModuleCode)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_MODULE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new EditModuleCommand(oldModuleCode, newModuleCode);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Prepares the command to edit a task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The parameters given by user"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The command to edit a task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareEditTaskCommand(String parameters)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, NumberFormatException, InvalidMatchException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, EditTaskCommand.FORMAT, EditCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String stringTaskIndex \u003d matcher.group(TASK_INDEX_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(stringTaskIndex) - 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newTaskDescription \u003d matcher.group(TASK_DESC_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // Checks for presence of -by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String taskDeadline \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String dashBy \u003d matcher.group(BY_FLAG_IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (dashBy !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            taskDeadline \u003d matcher.group(DEADLINE_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (taskDeadline.isEmpty()) { // -by is present but empty deadline"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\\n%s\\n\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                        MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                        EditTaskCommand.FORMAT, EditCommand.PROMPT_HELP));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (Parser.isEmptyParse(newTaskDescription)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (dashBy \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new EditTaskCommand(taskIndex, newTaskDescription);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new EditTaskCommand(taskIndex, newTaskDescription, taskDeadline);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_ADD_TASK_DATE_TIME_UNKNOWN);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 134
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/GradeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidModuleCreditException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class GradeCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String MODULE_GROUP \u003d \"module\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String GRADE_GROUP \u003d \"grade\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String MC_GROUP \u003d \"mc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern GRADE_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003cmodule\u003e[a-zA-Z0-9]+)\" + \"(?\u003cmc\u003e\\\\s\\\\S+)\" + \"(?\u003cgrade\u003e\\\\s\\\\S+)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for Grade Command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Grade Command with relevant arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a string is parsed as an integer/double"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Grade Command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareGradeCommand(String parameters)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws NumberFormatException, InvalidMatchException, InvalidModuleCreditException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d GRADE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, GradeCommand.FORMAT, GradeCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String module \u003d Parser.isMatcherNull(matcher.group(MODULE_GROUP))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(MODULE_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String mc \u003d Parser.isMatcherNull(matcher.group(MC_GROUP))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(MC_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String grade \u003d Parser.isMatcherNull(matcher.group(GRADE_GROUP))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(GRADE_GROUP).trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double intMc \u003d Double.parseDouble(mc);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        isValidMc(intMc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new GradeCommand(module, intMc, grade);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static void isValidMc(double intMc) throws InvalidModuleCreditException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (intMc \u003c 0 || intMc \u003e 20) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidModuleCreditException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 58
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.help.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class HelpCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String HCW_GROUP \u003d \"helpCommandWord\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern HELP_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"((?\u003chelpCommandWord\u003e\\\\S+)?)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for Help Command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Help Command with relevant arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user inputs parameters that arent accepted by the commands format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Help Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareHelpCommand(String parameters)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, InvalidMatchException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d HELP_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, HelpCommand.FORMAT, HelpCommand.HELP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String helpCommandWord \u003d Parser.isMatcherNull(matcher.group(HCW_GROUP))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? \"genericHelp\" : matcher.group(HCW_GROUP).trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new HelpCommand(helpCommandWord);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 41
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/LessonParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Lesson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.LessonFilter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.LessonType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.parser.TimeTableCommandParser.DAY_GROUP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.parser.TimeTableCommandParser.END_TIME_GROUP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.parser.TimeTableCommandParser.LESSON_TYPE_GROUP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.parser.TimeTableCommandParser.MODULE_GROUP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.parser.TimeTableCommandParser.START_TIME_GROUP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class LessonParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String SKIP_PARAMETER_CHAR \u003d \"-\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the user input for the Lesson parameters, to create a Lesson."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lessonMatcher Matcher for the parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return Lesson created from the Lesson parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ModuleNotFoundException When the module is not found in the module list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonInvalidTimeException When the start is greater than or equal to end time of the Lesson."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException When the time of either the start or end is in the wrong format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IllegalArgumentException When the Lesson to be created has illegal arguments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Lesson parseLesson(Matcher lessonMatcher) throws"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            ModuleNotFoundException, LessonInvalidTimeException, DateTimeParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String modString \u003d lessonMatcher.group(MODULE_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String dayString \u003d lessonMatcher.group(DAY_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String startTimeString \u003d lessonMatcher.group(START_TIME_GROUP).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String endTimeString \u003d lessonMatcher.group(END_TIME_GROUP).trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String lessonTypeString \u003d lessonMatcher.group(LESSON_TYPE_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Check if modString is in module list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!ModuleManager.doesContainMod(modString)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Convert dayString to DayOfWeek"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(dayString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Convert start, end strings to LocalTime"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DateTimeFormatter time \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalTime startTime \u003d LocalTime.parse(startTimeString, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalTime endTime \u003d LocalTime.parse(endTimeString, time);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Convert lessonTypeString to lessonType"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LessonType lessonType \u003d LessonType.valueOf(lessonTypeString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Create the Lesson object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Lesson newLesson \u003d new Lesson(modString, lessonType, dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return newLesson;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cLessonFilter\u003e parseFilterLesson(Matcher filterMatcher) throws"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleNotFoundException, DateTimeParseException,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            IllegalArgumentException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        final String modString \u003d filterMatcher.group(MODULE_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        final String dayString \u003d filterMatcher.group(DAY_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        final String startTimeString \u003d filterMatcher.group(START_TIME_GROUP).trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        final String endTimeString \u003d filterMatcher.group(END_TIME_GROUP).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        final String lessonTypeString \u003d filterMatcher.group(LESSON_TYPE_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cLessonFilter\u003e filterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!modString.equals(SKIP_PARAMETER_CHAR)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // Check if modString is in module list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (!ModuleManager.doesContainMod(modString)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                LessonFilter modFilter \u003d (l) -\u003e l.getModuleCode().equals(modString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                filterList.add(modFilter);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!dayString.equals(SKIP_PARAMETER_CHAR)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // Convert dayString to DayOfWeek"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(dayString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LessonFilter dayFilter \u003d (l) -\u003e l.getDay().equals(dayOfWeek);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            filterList.add(dayFilter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Convert start, end strings to LocalTime"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        DateTimeFormatter time \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Filter for start time. i.e. Filter lessons that start after HH:MM"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!startTimeString.equals(SKIP_PARAMETER_CHAR)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(startTimeString, time);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LessonFilter startFilter \u003d (l) -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    (l.getStartTime().isAfter(startTime) || l.getStartTime().equals(startTime));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            filterList.add(startFilter);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Filter for start time. i.e. Filter lessons that end before HH:MM"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!endTimeString.equals(SKIP_PARAMETER_CHAR)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(endTimeString, time);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LessonFilter endFilter \u003d (l) -\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    (l.getEndTime().isBefore(endTime) || l.getEndTime().equals(endTime));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            filterList.add(endFilter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!lessonTypeString.equals(SKIP_PARAMETER_CHAR)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // Convert lessonTypeString to lessonType"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LessonType lessonType \u003d LessonType.valueOf(lessonTypeString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LessonFilter lessonTypeFilter \u003d (l) -\u003e l.getLessonType().equals(lessonType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            filterList.add(lessonTypeFilter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return filterList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 65,
      "Aseanseen": 53
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.list.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern LIST_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e.*-\\\\S+)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for List Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * List Command with relevant arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the List Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getListCommand(String parameters) throws InvalidMatchException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d LIST_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, ListCommand.FORMAT, ListCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(Parser.COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(Parser.COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new ListCommand(Parser.TypeOfEntries.MODULE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new ListCommand(Parser.TypeOfEntries.TASK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 45
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.RaviLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.cap.CapCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.done.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.edit.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.help.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.list.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.summary.SummaryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.timetable.TimeTableCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidCapException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidModuleCreditException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_INVALID_CAP;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_INVALID_MC;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_STRING_IN_NUMBER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_EMPTY_INPUT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final RaviLogger logger \u003d new RaviLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public enum TypeOfEntries {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        TASK, MODULE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String COMMAND_WORD_GROUP \u003d \"commandWord\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String PARAMETERS_GROUP \u003d \"parameters\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)\" + \"((?\u003cparameters\u003e.*)?)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s full input and parses it, checking for the command word and assigning it to the relevant"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * prepare command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * User\u0027s full input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Relevant prepare command from the respective commands\u0027 parsers"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public Command parseCommand(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        logger.getLogger().info(\"Received input: \" + input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_EMPTY_INPUT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            logger.getLogger().warning(\"Invalid command format\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandWord \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String parameters \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            // Checks if the matched groups are null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            commandWord \u003d isMatcherNull(matcher.group(COMMAND_WORD_GROUP))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(COMMAND_WORD_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            parameters \u003d isMatcherNull(matcher.group(PARAMETERS_GROUP))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(PARAMETERS_GROUP).trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return CapCommandParser.prepareCapCommand(parameters);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case GradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return GradeCommandParser.prepareGradeCommand(parameters);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return EditCommandParser.getEditCommand(parameters);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return AddCommandParser.prepareAddCommand(parameters);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return DeleteCommandParser.getDeleteCommand(parameters);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return DoneCommandParser.prepareDoneCommand(parameters);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return ListCommandParser.getListCommand(parameters); //command flag is the -t or -m"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new SummaryCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case TimeTableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return TimeTableCommandParser.parseTimeTableCommand(parameters);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                logger.getLogger().info(\"Unrecognised or help command\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return HelpCommandParser.prepareHelpCommand(parameters);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            logger.getLogger().warning(\"Found a string where a number should be\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_STRING_IN_NUMBER, commandWord));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (IllegalStateException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            logger.getLogger().warning(\"Invalid parameters for the command\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_PARAMETERS, commandWord));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            logger.getLogger().warning(\"Invalid command word\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidMatchException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            logger.getLogger().warning(e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidModuleCreditException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            logger.getLogger().warning(\"Invalid Module Credit input\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_MC);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidCapException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            logger.getLogger().warning(\"Invalid Cap detected\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_CAP);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static boolean isMatcherNull(String matcherTest) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return (matcherTest \u003d\u003d null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks the input given by the user is empty."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param attributes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The input from the user"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  true if the input is empty, or false otherwise"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static boolean isEmptyParse(String... attributes) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (String attribute : attributes) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (!attribute.isEmpty()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks if the user input matches the REGEX format of the parser."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the format to follow"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user input"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param format"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the actual correct format if user input doesn\u0027t match"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static void matcherMatches(Matcher matcher, String parameters, String format, String helpPrompt)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidMatchException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidMatchException(parameters, format, helpPrompt);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 170
    }
  },
  {
    "path": "src/main/java/seedu/ravi/parser/TimeTableCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.timetable.TimeTableAddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.timetable.TimeTableCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.timetable.TimeTableDeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.timetable.TimeTableFilterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.timetable.TimeTableResetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.timetable.TimeTableViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.LessonFilter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.command.timetable.TimeTableCommand.TIMETABLE_LESSON_ADD_USER_FORMAT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.command.timetable.TimeTableCommand.TIMETABLE_LESSON_DELETE_USER_FORMAT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.command.timetable.TimeTableCommand.TIMETABLE_LESSON_FILTER_USER_FORMAT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_ADD_LESSON_DATE_TIME_UNKNOWN;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_LESSON_INVALID_TIME;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableCommandParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String REPEAT_GROUP \u003d \"repeat\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String TIMETABLE_GROUP \u003d \"timeTableParams\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String INDEX_GROUP \u003d \"index\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MODULE_GROUP \u003d \"module\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String DAY_GROUP \u003d \"day\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String START_TIME_GROUP \u003d \"start\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String END_TIME_GROUP \u003d \"end\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String LESSON_TYPE_GROUP \u003d \"type\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String ADD_FORMAT \u003d \"-add\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String DELETE_FORMAT \u003d \"-del\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FILTER_FORMAT \u003d \"-filter\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String VIEW_DAY_FORMAT \u003d \"-day\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String VIEW_WEEK_FORMAT \u003d \"-week\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String RESET_FORMAT \u003d \"-reset\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final Pattern TIMETABLE_FORMAT \u003d Pattern.compile(\"(?\u003ccommandFlag\u003e-[a-zA-Z]+)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"(?\u003ctimeTableParams\u003e.*)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final Pattern TIMETABLE_LESSON_PARAMETER_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Pattern.compile(\"(?\u003cmodule\u003e[a-zA-Z0-9]+\\\\s+)(?\u003cday\u003e[a-zA-Z]+\\\\s+)(?\u003cstart\u003e[0-9]+\\\\s+)(?\u003cend\u003e[0-9]+\\\\s+)\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    + \"(?\u003ctype\u003e[a-zA-Z]+\\\\s+)(?\u003crepeat\u003e[0-9]+\\\\s*)\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final Pattern TIMETABLE_LESSON_FILTER_PARAMETER_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Pattern.compile(\"(?\u003cmodule\u003e[-a-zA-Z0-9]+\\\\s+)(?\u003cday\u003e[-a-zA-Z]+\\\\s+)(?\u003cstart\u003e[-0-9]+\\\\s+)(?\u003cend\u003e[-0-9]+\\\\s+)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    + \"(?\u003ctype\u003e[-a-zA-Z]+\\\\s*)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final Pattern TIMETABLE_DELETE_PARAMETER_FORMAT \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Pattern.compile(\"(?\u003cday\u003e[a-zA-Z]+\\\\s+)(?\u003cindex\u003e[0-9]+\\\\s*)\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses all timetable related commands into their respective parsers."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Able to Add, Delete, View."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param parameters User input after determining it is a timetable related command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return IncorrectCommand or any of the timetable commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws NumberFormatException When the timetable view command is not given DAY, WEEK or a number."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws InvalidMatchException When the command entered does not match the regex pattern."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Command parseTimeTableCommand(String parameters)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throws NumberFormatException, InvalidMatchException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Matcher matcher \u003d TIMETABLE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, TimeTableCommand.FORMAT, TimeTableCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String commandFlag \u003d matcher.group(Parser.COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String timeTableParams \u003d matcher.group(TIMETABLE_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            switch (commandFlag) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case ADD_FORMAT:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableAddCommand(timeTableParams);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case DELETE_FORMAT:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableDeleteCommand(timeTableParams);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case FILTER_FORMAT:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableFilterCommand(timeTableParams);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case RESET_FORMAT:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableResetCommand(timeTableParams);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            default: // Check if it is a view command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableViewCommand(commandFlag, timeTableParams);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (LessonInvalidTimeException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new IncorrectCommand(MESSAGE_LESSON_INVALID_TIME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new IncorrectCommand(MESSAGE_ADD_LESSON_DATE_TIME_UNKNOWN);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the timetable view command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Accepted commands will be:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * timetable -day"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * timetable -week"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param commandFlag User input determining if it is day, week or custom view."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param timeTableParams Remaining user input."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return TimeTableViewCommand or IncorrectCommand."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static Command parseTimeTableViewCommand(String commandFlag, String timeTableParams) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int daysToView;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (!timeTableParams.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            commandFlag \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        switch (commandFlag) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case VIEW_DAY_FORMAT:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            daysToView \u003d 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case VIEW_WEEK_FORMAT:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            daysToView \u003d 7;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, commandFlag,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    MESSAGE_CHECK_COMMAND_FORMAT, TimeTableCommand.FORMAT));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new TimeTableViewCommand(daysToView);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the timetable add command. For the adding of Lessons into the timetable."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Accepted commands will be in the format: timetable -add module day start end type repeat"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * e.g. timetable -add CS2101 FRIDAY 1400 1600 LECTURE 1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return TimeTableAddCommand or IncorrectCommand"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleNotFoundException When the module is not found in the module list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonInvalidTimeException When the start is greater than or equal to end time of the Lesson."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException When the time of either the start or end is in the wrong format."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws InvalidMatchException When the lessonParams do not match the TimeTableAddCommand regex."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static Command parseTimeTableAddCommand(String lessonParams)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throws ModuleNotFoundException, LessonInvalidTimeException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            DateTimeParseException, InvalidMatchException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Matcher lessonMatcher \u003d TIMETABLE_LESSON_PARAMETER_FORMAT.matcher(lessonParams);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.matcherMatches(lessonMatcher, lessonParams, TIMETABLE_LESSON_ADD_USER_FORMAT,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                TimeTableCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Lesson newLesson \u003d LessonParser.parseLesson(lessonMatcher);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Convert repeatString to int"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String repeatString \u003d lessonMatcher.group(REPEAT_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int repeatFreq \u003d Integer.parseInt(repeatString);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new TimeTableAddCommand(newLesson, repeatFreq);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the timetable delete command. For the deleting of Lessons from the timetable."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Accepted commands will be in the format: timetable -del day index"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * e.g. timetable -del MONDAY 2"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * index can be found through timetable -week"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return TimeTableDeleteCommand or IncorrectCommand"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws InvalidMatchException When the lessonParams do not match the TimeTableDeleteCommand regex."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static Command parseTimeTableDeleteCommand(String deleteParams) throws InvalidMatchException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Matcher lessonMatcher \u003d TIMETABLE_DELETE_PARAMETER_FORMAT.matcher(deleteParams);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.matcherMatches(lessonMatcher, deleteParams, TIMETABLE_LESSON_DELETE_USER_FORMAT,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                TimeTableCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String dayString \u003d lessonMatcher.group(DAY_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(dayString);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Must account for the user input vs the week of year number"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int indexToBeDeleted \u003d Integer.parseInt(lessonMatcher.group(INDEX_GROUP)) - 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new TimeTableDeleteCommand(dayOfWeek, indexToBeDeleted);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Command parseTimeTableFilterCommand(String filterParams) throws"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            InvalidMatchException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Matcher filterMatcher \u003d TIMETABLE_LESSON_FILTER_PARAMETER_FORMAT.matcher(filterParams);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.matcherMatches(filterMatcher, filterParams, TIMETABLE_LESSON_FILTER_USER_FORMAT,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                TimeTableCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ArrayList\u003cLessonFilter\u003e filterList \u003d LessonParser.parseFilterLesson(filterMatcher);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new TimeTableFilterCommand(filterList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the timetable reset command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Accepted command will be:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * timetable -reset"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param resetParams Remaining user input."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return TimeTableResetCommand or IncorrectCommand."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Command parseTimeTableResetCommand(String resetParams) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (!resetParams.isEmpty()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, resetParams,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    MESSAGE_CHECK_COMMAND_FORMAT, TimeTableCommand.FORMAT));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new TimeTableResetCommand();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 206
    }
  },
  {
    "path": "src/main/java/seedu/ravi/system/SystemSetting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class SystemSetting {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 3,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/ui/TextHelper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_LOADING_TEMPLATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class TextHelper {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String DIV_LINE \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"════════════════════════════════════════════════════════════════════════════════\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_HEADER \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \" ┌───────────┬────┬────────────────────┐\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + \" │   Time    │ ID │       Lesson       │\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + \" ├───────────┼────┼────────────────────┤\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_MIDDLE \u003d \"\\n ├───────────┼────┼────────────────────┤\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_FOOTER \u003d \"\\n └───────────┴────┴────────────────────┘\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final int MAX_WIDTH \u003d DIV_LINE.length();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    //Offset required to convert between 1-indexing and 0-indexing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final int DISPLAY_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    //%1$ catches the furthest left arg, %2$ catches the 2nd arg"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String MESSAGE_INDEX_LIST_FORMAT \u003d \"\\n%1$d. %2$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Formats a string with its index in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param listIndex task/module index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param listItem task/module name or description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return String containing the index list in the intended format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String getIndexListFormat(int listIndex, String listItem) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return String.format(MESSAGE_INDEX_LIST_FORMAT, listIndex, listItem);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns a string of the loading status based on the status code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Status parameter is a 4 digit number. First 3 digits are Hundreds: Timetable, Tens: Tasks, Ones: Modules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * 0 - Files do not exist, skipping"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * 1 - Files exist, loading success"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * 2 - Files exist, error parsing JSON"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Then for the Thousands: NUSMods."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * 0 - Loaded from data directory"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * 1 - Loaded from NUSMods API (subsequently to be saved to data directory)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * 2 - No internet connection, loaded from backup in jar file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The status code parameter"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The loading status string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String parseStatusCode(int status) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] items \u003d {\"Modules\", \"Tasks\", \"Timetable\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int latestCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String eachItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String statusMsg;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String loadingOutcomes \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            eachItem \u003d items[i];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            latestCode \u003d status % 10; // find ones digit of status"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            status /\u003d 10; // remove ones digit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            switch (latestCode) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                statusMsg \u003d \"@|bold,blue,BG_BLACK Skipped (file not found!)|@\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                statusMsg \u003d \"@|bold,green,BG_BLACK Success!|@\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                statusMsg \u003d \"@|bold,red,BG_BLACK Failed (corrupted file auto-renamed)|@\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                statusMsg \u003d \"You shouldn\u0027t be here\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            loadingOutcomes +\u003d centerString(String.format(MESSAGE_LOADING_TEMPLATE, eachItem, statusMsg)) + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Now find the NUSMods status, the remaining digit in the status code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String nusModsStatus;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            nusModsStatus \u003d \"@|bold,green,BG_BLACK Loaded from data directory!|@\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            nusModsStatus \u003d \"@|bold,blue,BG_BLACK Downloaded latest version!|@\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            nusModsStatus \u003d \"@|bold,red,BG_BLACK No internet - using packaged backup|@\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            nusModsStatus \u003d \"You shouldn\u0027t be here\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        loadingOutcomes +\u003d centerString(String.format(MESSAGE_LOADING_TEMPLATE, \"NUSMods\", nusModsStatus)) + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return loadingOutcomes;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Simple function that returns a string centered in \u0027width\u0027 number of characters."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Empty characters (i.e. left/right padding) are spaces."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * DOES NOT ACCOUNT for the formatting required by JANSI!"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param width"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The number of characters for width"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string to be centered"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The centered string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String centerString(int width, String s) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return String.format(\"%-\" + width  + \"s\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                String.format(\"%\" + (s.length() + (width - s.length()) / 2) + \"s\", s));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Overloaded centerString that defaults width to MAX_WIDTH."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Accounts for the formatting required by JANSI."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string to be centered"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The centered string"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String centerString(String s) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String temp \u003d s;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (s.contains(\"@|\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // If the string is \"a@|...b|@c\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            String[] splitFrontFormat \u003d s.split(\"@\\\\S*\\\\s+\", 0); // this is [a, b|@c]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            String[] splitBackFormat \u003d splitFrontFormat[1].split(\"\\\\|@\", 0); // this is [b, c]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            temp \u003d splitFrontFormat[0] + splitBackFormat[0]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + (splitBackFormat.length \u003d\u003d 2 ? splitBackFormat[1] : \"\"); // Get a + b + c (c might be null)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int numSpaces \u003d (MAX_WIDTH - temp.length()) / 2;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String spaces \u003d String.format(\"%\" + numSpaces + \"s\", \"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return spaces + s;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 135,
      "Aseanseen": 2
    }
  },
  {
    "path": "src/main/java/seedu/ravi/ui/TextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.EXCEPTION_HEADER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_LIST_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_COMPLETED_TASKLIST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_GENERAL_HELP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_INCOMPLETE_DATED_TASKLIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_INCOMPLETE_UNDATED_TASKLIST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_NO_LESSONS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_TIMETABLE_INIT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static Scanner in;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void initialiseTextUi(Scanner in) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TextUi.in \u003d in;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prints welcome message, and shows file loading status according to the status parameter."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Enum not used because it\u0027s only used by InputOutputManager.start() and this function."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The status code as shown above"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void showWelcomeMessage(int status) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TextHelper.centerString(Message.MESSAGE_WELCOME),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TextHelper.parseStatusCode(status));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static void showTimeTableInitialisationMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        outputToUser(MESSAGE_TIMETABLE_INIT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Shows the result of a command execution to the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The relevant message shown to user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!result.isError) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            outputToUser(result.feedbackToUser);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            outputToUser(TextHelper.centerString(EXCEPTION_HEADER), result.feedbackToUser);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Print the given Strings to the user, capped at top and bottom by the DIV_LINE."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param output"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The strings to be printed to the user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void outputToUser(String... output) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(TextHelper.DIV_LINE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String o : output) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            System.out.println(ansi().render(o));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(TextHelper.DIV_LINE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Formats the lists in summaryLists to string with their index."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @param summaryLists the list of ArrayLists to be formatted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return message as a string, containing the summary list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String getSummaryList(ArrayList\u003cArrayList\u003cTask\u003e\u003e summaryLists) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        final StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteDatedList \u003d summaryLists.get(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        message.append(MESSAGE_INCOMPLETE_DATED_TASKLIST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (incompleteDatedList.size() \u003e 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            message.append(getIndexTaskList(incompleteDatedList));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteUndatedList \u003d summaryLists.get(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        message.append(MESSAGE_INCOMPLETE_UNDATED_TASKLIST);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (incompleteUndatedList.size() \u003e 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            message.append(getIndexTaskList(incompleteUndatedList));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cTask\u003e completeList \u003d summaryLists.get(2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        message.append(MESSAGE_COMPLETED_TASKLIST);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (completeList.size() \u003e 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            message.append(getIndexTaskList(completeList));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints day timetable."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param now the LocalDate object for the current day"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lessonList the lesson list for the day"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the String of the day\u0027s timetable"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String printDayTimetable(LocalDate now, ArrayList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\", dd-MM-yy\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (lessonList.size() \u003e 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output.append(System.lineSeparator())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    .append(now.getDayOfWeek() + now.format(formatter) + \":\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    .append(System.lineSeparator())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    .append(TextHelper.MESSAGE_TIMETABLE_HEADER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            for (Lesson lesson : lessonList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                int lessonNumber \u003d lessonList.indexOf(lesson) + 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                output.append(printLessonBlock(lesson, lessonNumber));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (lessonNumber \u003d\u003d lessonList.size()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    output.append(TextHelper.MESSAGE_TIMETABLE_FOOTER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    output.append(TextHelper.MESSAGE_TIMETABLE_MIDDLE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            output \u003d new StringBuilder(MESSAGE_NO_LESSONS + now.getDayOfWeek() + now.format(formatter) + \".\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints a timetable block for a particular lesson."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lesson the Lesson to be printed"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lessonIndex the index of the Lesson to be printed"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the timetable block containing lesson time, number and name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String printLessonBlock(Lesson lesson, int lessonIndex) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DateTimeFormatter time \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String startTime \u003d lesson.getStartTime().format(time);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String endTime \u003d lesson.getEndTime().format(time);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String lessonNumber \u003d String.format(\"%02d\", lessonIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return String.format(\" │%s│%s│%s│\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TextHelper.centerString(11, startTime + \"-\" + endTime),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TextHelper.centerString(4, lessonNumber),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TextHelper.centerString(20, lesson.getModuleCode() + \" \" + lesson.getLessonTypeString()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Formats an Arraylist of type Task with their Index."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskList the list to be formatted"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return stringFormat as a string, containing the index task list"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String getIndexTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int displayIndex \u003d TextHelper.DISPLAY_INDEX_OFFSET;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            stringFormat.append(TextHelper.getIndexListFormat(displayIndex, t.toString()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        stringFormat.append(\"\\n\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return stringFormat.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Formats the HashMap to string with their index."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param modulesMap"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The HashMap to be formatted"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Formatted string containing the index module list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String getIndexModuleList(HashMap\u003cString, Module\u003e modulesMap) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int displayIndex \u003d TextHelper.DISPLAY_INDEX_OFFSET;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : modulesMap.values()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            stringFormat.append(TextHelper.getIndexListFormat(displayIndex, module.toString()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return stringFormat.toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets the User\u0027s input command."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The trimmed user input command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the user input is ctrl-c."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static String getUserCommand() throws NoSuchElementException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        System.out.println(\"\\n\\nCommand: \");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        System.out.print(\"»\\t\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * The current week of year."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The current week of year."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the user input is ctrl-c."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getCurrentWeekNum() throws NoSuchElementException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String userInput \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets command list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The list of available commands"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String getCommandList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return MESSAGE_GENERAL_HELP;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Gets Help Message prompt."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param commandWord"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The command word entered by the user"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The list of available commands"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String getCommandHelpMessage(String commandWord) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return String.format(\"For more information on %s, type `help %s`.\", commandWord, commandWord);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "f0fz": 130,
      "tobiasceg": 11,
      "wangqinNick": 3,
      "amalinasani": 72,
      "Aseanseen": 33
    }
  },
  {
    "path": "src/main/java/seedu/ravi/util/DummyModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 21,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/util/ExceptionMessage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String EXCEPTION_HEADER \u003d \"@|bold,white,BG_RED Error!|@\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_NUS_MODS_NOT_LOADED \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"@|bold,red,BG_BLACK,underline NUSMods data could not be loaded!|@\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"ra.VI is meant to be able to work offline, and so is packaged with a \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"copy of NUSMods data. If you\u0027re reading this, the ra.VI jar file you are \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"using may be corrupted. Please try to download again when you have an \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Internet connection. Sorry for the inconvenience.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, the module is @|bold,red,BG_BLACK not in your module list|@.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Try checking the spelling of your module code?\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_PROVIDED \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, the module is @|bold,red,BG_BLACK not provided by NUS currently|@.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Try checking the spelling of your module code?\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, the module @|bold,red,BG_BLACK already exists in your list|@, so I can\u0027t add it again.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Perhaps you meant a different module?\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, that @|bold,red,BG_BLACK task index is not valid|@.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Use @|bold,green,BG_BLACK \u0027list -t\u0027|@ to look at your tasks, and their index.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"You can\u0027t use the task index from the summary command!\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_MODULE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, @|bold,red,BG_BLACK please enter a proper module code|@ to edit.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"It should be a module code of an actual NUS mod. E.g. CS1010.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_TASK \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, @|bold,red,BG_BLACK please enter a proper task index|@ to edit.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Use @|bold,green,BG_BLACK \u0027list -t\u0027|@ to look at your tasks, and their index.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"You can\u0027t use the task index from the summary command!\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_NO_ADD_MODULE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, @|bold,red,BG_BLACK please enter a new module code|@ to add.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"It should be a module code of an actual NUS mod. E.g. CS1010.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_NO_ADD_TASK \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, @|bold,red,BG_BLACK please enter a new task|@ to add.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Use @|bold,green,BG_BLACK \u0027list -t\u0027|@ to look at your tasks, and their index.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"You can\u0027t use the task index from the summary command!\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETERS \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Some @|bold,red,BG_BLACK invalid or missing parameters|@ were found!\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Use @|bold,green,BG_BLACK \u0027help\u0027|@ to find out about the parameters required: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"@|bold,green,BG_BLACK \u0027help %s\u0027|@\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_LIST_EMPTY \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"\\nYour list is empty.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_STRING_IN_NUMBER \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"The task index you have entered is @|bold,red,BG_BLACK either not an integer or is too long|@!\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Use @|bold,green,BG_BLACK \u0027list -t\u0027|@ to look at your tasks, and their index.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Please check your command! Use @|bold,green,BG_BLACK \u0027help %s\u0027|@ for assistance.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"ra.VI @|bold,red,BG_BLACK does not recognise|@ that command.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Please use @|bold,green,BG_BLACK \u0027help\u0027|@ to see our list of commands.\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_INVALID_GRADE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your grade input @|bold,red,BG_BLACK isn\u0027t part of the NUS grading scheme|@. \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"For your reference: A+, A, A-, B+, B, B-, C+, C, C-, D+, F, CS, CU.\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_LESSON_INVALID_TIME \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, the lesson you have attempted to add has an @|bold,red,BG_BLACK invalid start/end time|@.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Try using @|bold,green,BG_BLACK \u0027timetable -day\u0027|@ or \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"@|bold,green,BG_BLACK \u0027timetable -week\u0027|@ to look at your\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"current lessons first, or review your new lesson\u0027s start/end time.\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_LESSON_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, the lesson you have attempted to delete @|bold,red,BG_BLACK does not exist|@.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Use @|bold,green,BG_BLACK \u0027timetable (-week/-day)\u0027|@ to look at your lessons and their index (ID).\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_LESSON_OVERLAP \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, the lesson you have attempted to add @|bold,red,BG_BLACK overlaps with other lessons|@.\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"This is the lesson you\u0027re overlapping with: %s\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_REPEAT_FREQUENCY_UNKNOWN \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, the lesson you have attempted to add @|bold,red,BG_BLACK does \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"not have the correct repeatability|@.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"For your reference:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"0 - This week only\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"1 - Every week\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"2 - Every even week\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"3 - Every odd week\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String TIMETABLE_NOT_INITIALISED \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, please enter a @|bold,red,BG_BLACK proper week number|@ as instructed.\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_DATE_TIME_UNKNOWN \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, please enter a @|bold,red,BG_BLACK valid date and time|@.\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"\\tRequired date time format: dd-MM-yyyy HHmm\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"\\tExample: 30-12-2020 1600\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_ADD_LESSON_DATE_TIME_UNKNOWN \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Sorry, please enter a @|bold,red,BG_BLACK valid start time and end time|@.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"\\tRequired date time format: HHmm HHmm (start, end)\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"\\tExample: 1800 2000\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_INVALID_CAP \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"The CAP you entered is @|bold,red,BG_BLACK invalid|@.\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_INVALID_CAP_ATTAINED \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"The CAP calculated from your input is @|bold,red,BG_BLACK invalid|@.\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"Please check if every module has been graded. \\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"For more information, use @|bold,green,BG_BLACK \u0027help cap\u0027|@.\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_INVALID_MC \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"The number of MCs you entered is @|bold,red,BG_BLACK invalid|@.\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"For more information, use @|bold,green,BG_BLACK \u0027help grade\u0027|@.\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MISSING_DIRECTORY_NAME \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Please include the name of the directory you want to move to.\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                    + \"Alternatively, enter .. to move to the parent directory instead.\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_CATEGORY_NOT_FOUND \u003d \"Sorry, the category is not found.\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"Sorry, the category already exists.\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Sorry, the task already exists.\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TASK_FILE_NOT_FOUND \u003d \"Sorry, the file is not found.\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK_FILE \u003d \"Sorry, the file already exists.\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_IMPLICIT_FILE_EXCEED_LIMIT \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the name of the file you are adding exceeds 30 characters.\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                    + \"Please enter a new file name.\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"Sorry, some parameters seem to be missing.\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIORITY \u003d \"Alert! Priority should be a number between 0 and 20.\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Sorry, the deadline you entered is not in a recognised datetime format.\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"Please make sure to follow the datetime format as such:\\n\\t\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DateTime.FORMAT + \"\\nExample: 06/06/2020 12:00am\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Sorry, the date you entered is not in a recognised date format.\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"Please make sure to follow the date format as such:\\n\\t\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DateTime.DATE_FORMAT + \"\\nExample: 07/07/2020\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_LIST_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"The List number is not found on the list! Deletion is aborted.\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TRAVERSE_ERROR \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"There seems to be an error when traversing. Moving back to Root...\\n\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FAILED_DIRECTORY_TRAVERSAL \u003d \"Unable to traverse further.\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DIRECTORY_NOT_FOUND \u003d \"Sorry, the next directory could not be found.\\n\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DIRECTORY_LEVEL \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, unable to execute the command at the current directory level.\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                    + \"Either move to the appropriate directory level, or enter the full directory path.\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIX_FOUND \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"There seems to be duplicate prefix(es) in your input...\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_IO_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file.\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_SYSTEM_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file. \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Please check that your file is not currently running.\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Sorry, the file path entered is invalid.\\n\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_ADD_FILE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the file does not exists. Please check the file path again.\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_SECURITY_EXCEPTION \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Oh no! File access was denied by device\u0027s security program.\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_OPEN \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"The following file(s) could not be opened as they cannot be found:\\n\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_DELETE \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Deletion completed.\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                    + \"However, note that the following file(s) could not be deleted completely from Nuke as they \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                    + \"could not be found:\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 86,
      "tobiasceg": 4,
      "wangqinNick": 50,
      "amalinasani": 5,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/main/java/seedu/ravi/util/FileName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class FileName {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String FILE_EXT          \u003d \".json\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String TASK_SAVE_FILE_NAME      \u003d \"task_data\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MOD_SAVE_FILE_NAME       \u003d \"mod_data\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String NUSMOD_SAVE_FILE_NAME    \u003d \"nus_mod_data\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String TIMETABLE_SAVE_FILE_NAME \u003d \"timetable_data\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 9,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/ravi/util/Message.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"@|bold,magenta,BG_BLACKGoodbye, hope to see you soon!|@\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"@|bold,magenta,BG_BLACK Welcome to ra.VI v2.0|@\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_SHUTDOWN \u003d \"@|bold,magenta,BG_BLACK Shutting down ra.VI...|@\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_LOADING_TEMPLATE \u003d \"Loading %s: %s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your task has been @|bold,green added successfully|@.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your new task:\\n\u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your module has been @|bold,green added successfully|@.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your new module:\\n\u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_ADD_LESSON_SUCCESS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your lesson has been @|bold,green added successfully|@.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your new lesson:\\n\u0027%s\u0027\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Added to: %s\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"The task has been @|bold,green successfully|@ marked as complete.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your completed task - \u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your task has been @|bold,green deleted successfully|@.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your deleted task - \u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your module has been @|bold,green deleted successfully|@.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your deleted module - \u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your lesson has been @|bold,green deleted successfully|@ from \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"all weeks.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your deleted lesson - \u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your task has been @|bold,green edited successfully|@.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your task before editing - \u0027%s\u0027\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your task after editing  - \u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your module has been @|bold,green edited successfully|@.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your module before editing - \u0027%s\u0027\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Your module after editing  - \u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"Please enter a command for me.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"The command entered contains some @|bold,blue,BG_BLACK unrecognised parameters|@ starting from here:\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_CHECK_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"@|bold,red,BG_BLACK,underline Please check to make sure to follow the command format:|@\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String ICON_DONE \u003d \"\\u221A\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String ICON_NOT_DONE \u003d \"\\u0078\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_LIST_PRINTED \u003d \"Here\u0027s your list:\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undo is @|bold,green successful|@.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Command undone - \u0027%s\u0027\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_UNDO_AT_BEGINNING \u003d \"There is nothing to undo.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_GRADE_MODULE_SUCCESS \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Your module has been @|bold,green graded successfully|@.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"The module - \u0027%s\u0027. \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_CAP_DISPLAY \u003d \"Your current CAP is \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_SUMMARY_PRINTED \u003d \"Here\u0027s a summary of your latest tasks...\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_COMPLETED_TASKLIST \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"\\n@|bold,green,BG_BLACK,underline Completed tasks:|@\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_UNDATED_TASKLIST \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"\\n@|bold,blue,BG_BLACK,underline Incomplete tasks with no deadline:|@\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_DATED_TASKLIST \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"\\n@|bold,red,BG_BLACK,underline Incomplete tasks with deadlines:|@\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_GENERAL_HELP \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Hello! I\u0027m @|bold,magenta,BG_BLACK ra.VI|@, your personal NUS assistant.\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"I\u0027m here to help you manage your tasks, modules, and lessons.\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"This help message appears when you type @|bold,green,BG_BLACK \u0027help\u0027|@, or an unrecognised command.\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"To find out more about any of my commands, type @|bold,green,BG_BLACK \u0027help \u003ccommand\u003e\u0027|@.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"Here\u0027s a list of my commands to help you out:\\n\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"@|bold,red,BG_BLACK,underline Action commands:|@\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» add       - Add a task or module\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» del       - Delete a task or module\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» edit      - Edit a task or module\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» done      - Mark a task as complete\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» grade     - Grades and allocates MCs to a Module\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» undo      - Undo the previous action (if you made changes)\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» timetable - Manage your timetable\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"@|bold,blue,BG_BLACK,underline Viewing commands:|@\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» list      - Lists all tasks or modules\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» summary   - See a neat summary of your tasks\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» timetable - View your timetable, by day or by week\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"@|bold,yellow,BG_BLACK,underline Utility commands:|@\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» help      - Get detailed help for each command\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"\\t» bye       - Exit ra.VI (saves all changes!)\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_INIT \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            \"Please enter the @|bold,blue,BG_BLACK current week number|@ e.g. 1 - 14\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + \" where 7 is recess week,\\n\" + \"and NUS week 7 onwards is week 8 onwards. \\n\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + \"@|bold,red,BG_BLACK Before|@ recess week : please input the current NUS week number.\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + \"@|bold,red,BG_BLACK During|@ recess week : please input 7.\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + \"@|bold,red,BG_BLACK After|@ recess week  : please input the current NUS week number + 1.\\n\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + \"E.g. if it\u0027s week 7, enter \u00278\u0027.\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_NO_LESSONS \u003d \"\\nNo lessons on \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_RESET \u003d \"Timetable reset successful.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 75,
      "tobiasceg": 2,
      "wangqinNick": 5,
      "amalinasani": 1,
      "Aseanseen": 16
    }
  },
  {
    "path": "src/test/java/seedu/ravi/RaviTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "class RaviTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/add/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.add;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.ExceptionMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String TASK \u003d \"test task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String BAD_DEADLINE \u003d \"bad_deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String EMPTY_DEADLINE \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String SPACES_DEADLINE \u003d \"        \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static void setup() throws NusModsNotLoadedException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.tryLoadNusMods();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addModule_duplicateModuleMessage_isShown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addMod \u003d new AddModuleCommand(MOD_CODE_1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addDupMod \u003d new AddModuleCommand(MOD_CODE_1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addMod.execute();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d addDupMod.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_DUPLICATE_MODULE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_badDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                () -\u003e new AddTaskCommand(TASK, BAD_DEADLINE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_emptyDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                () -\u003e new AddTaskCommand(TASK, EMPTY_DEADLINE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_blankDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                () -\u003e new AddTaskCommand(TASK, SPACES_DEADLINE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 55
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/cap/CapCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.command.cap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidCapException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidModuleCreditException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_CAP_DISPLAY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class CapCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String MODULE_CODE \u003d \"CS1231\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final double CAP \u003d 4.37;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void setupModManager() throws InvalidModuleCreditException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        AddCommand addModule \u003d new AddModuleCommand(MODULE_CODE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(MODULE_CODE, 4, \"A+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        gradeCommand.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void capCommand_MessageCapDisplayWithCap_isShown() throws InvalidCapException, InvalidModuleCreditException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CapCommand capCommand \u003d new CapCommand(20, 4.24);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult commandResult \u003d capCommand.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(String.format(\"%s%.2f\\n\", MESSAGE_CAP_DISPLAY, CAP), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 37
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/delete/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.delete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.add.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.add.AddTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_MISSING \u003d \"CS2040\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String TASK \u003d \"test task\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int TASK_ID_MISSING \u003d 10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addModule \u003d new AddModuleCommand(MOD_CODE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupTaskObjects() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addModule \u003d new AddTaskCommand(TASK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteMissingModuleMessage_isShown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DeleteCommand deleteMissingModuleTest \u003d new DeleteModuleCommand(MOD_CODE_MISSING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d deleteMissingModuleTest.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteMissingTaskMessage_isShown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DeleteCommand deleteMissingTaskTest \u003d new DeleteTaskCommand(TASK_ID_MISSING);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d deleteMissingTaskTest.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 51
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/done/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.ExceptionMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void setupTaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Task newTask \u003d new Task(\"read a book\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void doneTask_validIndex_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DoneCommand doneValidTask \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d doneValidTask.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Task editedTask \u003d new Task(\"read a book\", true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(String.format(Message.MESSAGE_DONE_TASK_SUCCESS, editedTask.toString()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void doneTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DoneCommand doneInvalidTask \u003d new DoneCommand(2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d doneInvalidTask.execute();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_TASK_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 32,
      "Aseanseen": 6
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/edit/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DuplicateModuleException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "class EditModuleCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void execute() throws"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            NusModsNotLoadedException, DuplicateModuleException, ModuleNotProvidedException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.tryLoadNusMods();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(\"cs1231\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -m cs1231 CS1010\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.getModule(\"CS1010\"); // should not throw exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 24
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/edit/EditTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_ADD_TASK_DATE_TIME_UNKNOWN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditTaskCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task newTask \u003d new Task(\"read a book\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newTaskString \u003d newTask.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task editedTask \u003d new Task(\"return a book\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //base case"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -t 1 return a book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(String.format(MESSAGE_EDIT_TASK_SUCCESS, newTaskString, editedTask.toString()),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                result1.feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //invalid parameters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"edit -t 0 return a book\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result2.feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"edit -t 2 return a book\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result3.feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void execute_withDeadline() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task newTask \u003d new Task(\"read a book\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newTaskString \u003d newTask.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task editedTask \u003d new Task(\"return a book\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                LocalDateTime.of(2020, 12, 30, 12, 00));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        //base case"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -t 1 return a book -by 30-12-2020 1200\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(String.format(MESSAGE_EDIT_TASK_SUCCESS, newTaskString, editedTask.toString()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                result1.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        //invalid parameters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"edit -t 0 return a book\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result2.feedbackToUser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"edit -t 2 return a book\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result3.feedbackToUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        CommandResult result4 \u003d Executor.executeCommand(\"edit -t 1 return a book -by 3131313\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String dateErrorResult \u003d new IncorrectCommand(MESSAGE_ADD_TASK_DATE_TIME_UNKNOWN).execute().feedbackToUser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(dateErrorResult, result4.feedbackToUser);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 27,
      "tobiasceg": 4,
      "wangqinNick": 23,
      "amalinasani": 1,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/grade/GradeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.command.grade;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.data.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidModuleCreditException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.util.ExceptionMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.util.Message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class GradeCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String MODULE_CODE \u003d \"CG2271\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String NON_EXISTENT_MODULE_CODE \u003d \"CS2101\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static void setup() throws NusModsNotLoadedException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        InputOutputManager.tryLoadNusMods();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        AddCommand addModule \u003d new AddModuleCommand(MODULE_CODE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void gradeCommand_MessageGradeSuccessful_isShown() throws InvalidModuleCreditException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(MODULE_CODE, 4, \"A+\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Module moduleGraded \u003d ModuleManager.getModule(MODULE_CODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult commandResult \u003d gradeCommand.execute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(String.format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                Message.MESSAGE_GRADE_MODULE_SUCCESS, moduleGraded), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void gradeCommand_MessageModuleNotFound_isShown() throws InvalidModuleCreditException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(NON_EXISTENT_MODULE_CODE, 4, \"A+\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult commandResult \u003d gradeCommand.execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult expectedResult \u003d new IncorrectCommand(ExceptionMessage.MESSAGE_MODULE_NOT_FOUND).execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(expectedResult.feedbackToUser, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void gradeCommand_MessageInvalidGrade_isShown() throws InvalidModuleCreditException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(MODULE_CODE, 4, \"SU\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult commandResult \u003d gradeCommand.execute();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult expectedResult \u003d new IncorrectCommand(ExceptionMessage.MESSAGE_INVALID_GRADE).execute();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(expectedResult.feedbackToUser, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 63
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/help/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    static final String HELP_MESSAGE \u003d Message.MESSAGE_GENERAL_HELP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void testHelpCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d helpCommand.execute();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(HELP_MESSAGE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 16,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/list/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.ravi.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.command.add.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.command.add.AddTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.util.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.util.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void setupLists() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void listCommand_MessageListEmpty_isShown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ListCommand taskListCommand \u003d new ListCommand(Parser.TypeOfEntries.TASK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult1 \u003d taskListCommand.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_LIST_EMPTY, commandResult1.feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ListCommand moduleListCommand \u003d new ListCommand(Parser.TypeOfEntries.MODULE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult2 \u003d moduleListCommand.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_LIST_EMPTY, commandResult2.feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void listCommand_MessageListPrinted_isShown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        AddCommand addTask \u003d new AddTaskCommand(\"read a book\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        addTask.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ListCommand taskListCommand \u003d new ListCommand(Parser.TypeOfEntries.TASK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult1 \u003d taskListCommand.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String expectedOutput1 \u003d Message.MESSAGE_LIST_PRINTED"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                + TaskManager.list();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(expectedOutput1, commandResult1.feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 47
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/misc/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.Executor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.StateManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupModObjects() throws NusModsNotLoadedException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        InputOutputManager.tryLoadNusMods();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        StateManager.initialise();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void undo_addModule_Success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"add -m cs3235\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"add -m cs3230\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new UndoCommand().execute();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"add -m cs1010\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void undo_deleteModule_Success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"add -m cs3235\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"add -m cs3230\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new UndoCommand().execute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"add -m cs1010\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //CommandResult result4 \u003d Executor.executeCommand(\"del -m cs1010\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //new UndoCommand().execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4,
      "wangqinNick": 40,
      "Aseanseen": 8
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/summary/SummaryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.ravi.command.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.ravi.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.ravi.util.Message.MESSAGE_SUMMARY_PRINTED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "//@@author amalinasani"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class SummaryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void listCommand_Summary_isShown() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        SummaryCommand summaryCommand \u003d new SummaryCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d summaryCommand.execute();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String expectedOutput \u003d MESSAGE_SUMMARY_PRINTED + TaskManager.getSummary();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(expectedOutput, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 20
    }
  },
  {
    "path": "src/test/java/seedu/ravi/command/timetable/TimeTableCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.command.timetable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.LessonType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DuplicateModuleException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.parser.TimeTableCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.ExceptionMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int BAD_REPEAT_FREQ \u003d 4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int REPEAT_FREQ_WEEKLY \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int BAD_LESSON_INDEX \u003d 5;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static Lesson LESSON_1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static Lesson LESSON_1_OVERLAP;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static Lesson LESSON_2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_3 \u003d \"MA1511\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String BAD_VIEW_FORMAT \u003d \"-no\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final DayOfWeek DAY_OF_WEEK \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LocalTime LESSON_1_START_TIME \u003d LocalTime.of(14, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LocalTime LESSON_1_END_TIME \u003d LocalTime.of(16, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LocalTime OTHER_LESSON_START \u003d LocalTime.of(9, 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LocalTime OTHER_LESSON_END \u003d LocalTime.of(10, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LessonType LESSON_TYPE \u003d LessonType.LECTURE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static void setupUserMods() throws DuplicateModuleException, ModuleNotProvidedException, NusModsNotLoadedException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.tryLoadNusMods();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(MOD_CODE_1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(MOD_CODE_2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(MOD_CODE_3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupTimeTable_andLessons() throws LessonInvalidTimeException, TimeTableInitialiseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LESSON_1 \u003d new Lesson(MOD_CODE_1, LESSON_TYPE, DAY_OF_WEEK, LESSON_1_START_TIME, LESSON_1_END_TIME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LESSON_2 \u003d new Lesson(MOD_CODE_2, LESSON_TYPE, DAY_OF_WEEK, OTHER_LESSON_START, OTHER_LESSON_END);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.clearTimeTable();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.initialise(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableAddCommand timeTableAddCommand \u003d new TimeTableAddCommand(LESSON_1, REPEAT_FREQ_WEEKLY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        timeTableAddCommand.execute();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addLesson_badRepeatFreq_RepeatFrequencyMessage_isShown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableAddCommand timeTableAddCommand \u003d new TimeTableAddCommand(LESSON_2, BAD_REPEAT_FREQ);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d timeTableAddCommand.execute();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_REPEAT_FREQUENCY_UNKNOWN, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addLesson_overlapLessonTime_LessonOverlapMessage_isShown() throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LESSON_1_OVERLAP \u003d new Lesson(MOD_CODE_2, LESSON_TYPE, DAY_OF_WEEK, LESSON_1_START_TIME, LESSON_1_END_TIME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableAddCommand timeTableAddCommand \u003d new TimeTableAddCommand(LESSON_1_OVERLAP, REPEAT_FREQ_WEEKLY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d timeTableAddCommand.execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(String.format(ExceptionMessage.MESSAGE_LESSON_OVERLAP, LESSON_1.toString()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteLesson_lessonNotFound_LessonNotFoundMessage_isShown() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableDeleteCommand timeTableDeleteCommand \u003d new TimeTableDeleteCommand(DAY_OF_WEEK, BAD_LESSON_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d timeTableDeleteCommand.execute();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_LESSON_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void viewTimeTable_badViewFormat_IncorrectCommand_isReturned() throws InvalidMatchException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command timeTableviewCommand \u003d TimeTableCommandParser.parseTimeTableCommand(BAD_VIEW_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertTrue(timeTableviewCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 99
    }
  },
  {
    "path": "src/test/java/seedu/ravi/data/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static LessonManager manager \u003d new LessonManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_3 \u003d \"MA1511\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_12 \u003d LocalTime.of(12, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_13 \u003d LocalTime.of(13, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_14 \u003d LocalTime.of(14, 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_15 \u003d LocalTime.of(15, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupLessonObjects() throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson1 \u003d new Lesson(MOD_CODE_1, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_13);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson2 \u003d new Lesson(MOD_CODE_2, LessonType.LECTURE, DayOfWeek.MONDAY, time_14, time_15);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.clearAllLessons();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.addLesson(lesson1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.addLesson(lesson2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getOverlapException_addLesson() throws LessonInvalidTimeException, LessonNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson1 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_13);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e manager.addLesson(testLesson1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson2 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_14);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e manager.addLesson(testLesson2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson3 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_13, time_15);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e manager.addLesson(testLesson3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_LessonNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e manager.removeLesson(DayOfWeek.TUESDAY, 0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e manager.removeLesson(DayOfWeek.MONDAY, -1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e manager.removeLesson(DayOfWeek.MONDAY, 2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_sortsLessons() throws LessonNotFoundException, LessonInvalidTimeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_1, manager.getDayLessonList(DayOfWeek.MONDAY).get(0).getModuleCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_2, manager.getDayLessonList(DayOfWeek.MONDAY).get(1).getModuleCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String testCode \u003d \"Test Code\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson \u003d new Lesson(testCode, LessonType.LECTURE, DayOfWeek.MONDAY, time_13, time_14);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.addLesson(testLesson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_1, manager.getDayLessonList(DayOfWeek.MONDAY).get(0).getModuleCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(testCode, manager.getDayLessonList(DayOfWeek.MONDAY).get(1).getModuleCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_2, manager.getDayLessonList(DayOfWeek.MONDAY).get(2).getModuleCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verifyLessonCount_afterDeletingLessons() throws LessonNotFoundException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, manager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.removeLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, manager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.removeLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, manager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verifyException_lessonConstruction_withInvalidTime() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                () -\u003e new Lesson(MOD_CODE_1, LessonType.LAB, DayOfWeek.TUESDAY, time_13, time_12));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                () -\u003e new Lesson(MOD_CODE_1, LessonType.LAB, DayOfWeek.TUESDAY, time_12, time_12));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 79,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/test/java/seedu/ravi/data/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DuplicateModuleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupModObjects() throws DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(MOD_CODE_1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(MOD_CODE_2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getModuleCount_isEquals2() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getModule_isCorrect() throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_1, ModuleManager.getModule(MOD_CODE_1).getModuleCode());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_2, ModuleManager.getModule(MOD_CODE_2).getModuleCode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void check_moduleNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(ModuleNotFoundException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                () -\u003e ModuleManager.getModule(\"WHAT1010\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void editMod_getCode_equalsNewCode()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throws DuplicateModuleException, ModuleNotProvidedException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newCode \u003d \"MA1512\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.edit(newCode, MOD_CODE_1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newCode, ModuleManager.getModule(newCode).getModuleCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void deleteTask_getTaskCount_isEquals0() throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.delete(MOD_CODE_1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.delete(MOD_CODE_2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e ModuleManager.getModule(MOD_CODE_1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 54,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/test/java/seedu/ravi/data/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Task normalTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Task datedTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupTaskObjects() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalTask \u003d new Task(\"ABC\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime myDate \u003d LocalDateTime.of(2020, 10, 1, 0, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        datedTask \u003d new Task(\"DEF\", myDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(normalTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(datedTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getTaskCount_isEquals2() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TaskManager.getTaskCount());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void check_taskNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(TaskManager.TaskNotFoundException.class, () -\u003e TaskManager.getTask(2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void editTask_getName_equalsNewName() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newName1 \u003d \"NEW\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newName2 \u003d \"NAME\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.edit(0, newName1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.edit(1, newName2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newName1, TaskManager.getTask(0).getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newName2, TaskManager.getTask(1).getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void deleteTask_geTaskCount_isEquals0() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.delete(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.delete(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TaskManager.getTaskCount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(TaskManager.TaskNotFoundException.class, () -\u003e TaskManager.getTask(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkTaskOrder_isCorrect() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime myDate \u003d LocalDateTime.of(2020, 10, 1, 1, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task laterDatedTask \u003d new Task(\"LATER\", myDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(laterDatedTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTaskWithDeadlines \u003d TaskManager.summary().get(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task earlierTask \u003d sortedTaskWithDeadlines.get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task laterTask \u003d sortedTaskWithDeadlines.get(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Assert that laterTask actually has a later deadline than earlierTask"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(laterTask.retrieveDeadline().compareTo(earlierTask.retrieveDeadline()) \u003e 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, sortedTaskWithDeadlines.size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkNoDeadlineList_isCorrect() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTasksWithoutDeadlines \u003d TaskManager.summary().get(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task taskWithoutDeadline \u003d sortedTasksWithoutDeadlines.get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(taskWithoutDeadline.retrieveDeadline() \u003d\u003d null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, sortedTasksWithoutDeadlines.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkCompletedList_isCorrect() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.done(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.done(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e completedTasks \u003d TaskManager.summary().get(2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(completedTasks.get(0).getStatus());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, completedTasks.size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 86,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/test/java/seedu/ravi/data/TimeTableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DuplicateModuleException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.LessonOverlapException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class TimeTableTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_3 \u003d \"MA1511\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_12 \u003d LocalTime.of(12, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_13 \u003d LocalTime.of(13, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_14 \u003d LocalTime.of(14, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_15 \u003d LocalTime.of(15, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_16 \u003d LocalTime.of(16, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_17 \u003d LocalTime.of(17, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final int CURR_WEEK \u003d now.get(ChronoField.ALIGNED_WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static void setupUserMods() throws DuplicateModuleException, ModuleNotProvidedException, NusModsNotLoadedException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        InputOutputManager.tryLoadNusMods();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(MOD_CODE_1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(MOD_CODE_2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(MOD_CODE_3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupTimeTable_andLessons() throws LessonInvalidTimeException, TimeTableInitialiseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson1 \u003d new Lesson(MOD_CODE_1, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_13);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson2 \u003d new Lesson(MOD_CODE_2, LessonType.LECTURE, DayOfWeek.MONDAY, time_14, time_15);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson3 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_16, time_17);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.clearTimeTable();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.initialise(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_repeat1() throws LessonInvalidTimeException, ModuleNotFoundException, LessonOverlapException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d CURR_WEEK; i \u003c CURR_WEEK + 14; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TimeTableManager.isEvenWeek(i)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(1, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (TimeTableManager.isOddWeek(i)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(1, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_repeat2() throws LessonInvalidTimeException, ModuleNotFoundException, LessonOverlapException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d CURR_WEEK; i \u003c CURR_WEEK + 14; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TimeTableManager.isEvenWeek(i)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(1, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (TimeTableManager.isOddWeek(i)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_repeat3() throws LessonInvalidTimeException, ModuleNotFoundException, LessonOverlapException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d CURR_WEEK; i \u003c CURR_WEEK + 14; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TimeTableManager.isEvenWeek(i)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (TimeTableManager.isOddWeek(i)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(1, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_removeLesson_inSingleWeek() throws"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LessonInvalidTimeException, ModuleNotFoundException, LessonOverlapException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson2, 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson3, 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(3, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_removeLesson_overMultipleWeeks() throws"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LessonInvalidTimeException, ModuleNotFoundException, LessonOverlapException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson2, 2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson3, 3);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TimeTableManager.getWeekLessonCount(CURR_WEEK + 1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TimeTableManager.getWeekLessonCount(CURR_WEEK + 2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0); // remove \u0027repeat 1\u0027 lesson"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK + 1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK + 2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0); // remove \u0027repeat 3\u0027 lesson"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK + 1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TimeTableManager.getWeekLessonCount(CURR_WEEK + 2));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_removeLesson_throwsOutOfBounds() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                () -\u003e TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_lessonOverlap_throwsLessonOverlap() throws"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            LessonOverlapException, LessonInvalidTimeException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonOverlapException.class,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                () -\u003e TimeTableManager.addLesson(lesson1, 0));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonOverlapException.class,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                () -\u003e TimeTableManager.addLesson(lesson1, 2));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonOverlapException.class,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                () -\u003e TimeTableManager.addLesson(lesson1, 3));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson2, 2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonOverlapException.class,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                () -\u003e TimeTableManager.addLesson(lesson2, 1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonOverlapException.class,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                () -\u003e TimeTableManager.addLesson(lesson2, 2));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson2, 3); // testing whether repeat 2 and 3 clashes (should not)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 154,
      "Aseanseen": 15
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class AddCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_ADD_WITH_DEADLINE \u003d \"-t project work -by 2-2-2020 1800\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_ADD_WITHOUT_DEADLINE \u003d \"-t do quiz\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_TASK_TO_ADD \u003d \"-t do quiz -by \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareAddCommandTest_returnsAddCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(TASK_TO_ADD_WITH_DEADLINE)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof AddCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(TASK_TO_ADD_WITHOUT_DEADLINE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof AddCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareAddCommandTest_returnsIncorrectCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(BAD_TASK_TO_ADD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 30
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/CapCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.cap.CapCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidCapException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidModuleCreditException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class CapCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String PROPER_CAP_INPUT \u003d \"45 4.24\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_CAP_INPUT_CAP \u003d \"20 FIVE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareCapCommand_returnsCapCommand()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidMatchException, InvalidCapException, InvalidModuleCreditException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new CapCommandParser().prepareCapCommand(PROPER_CAP_INPUT)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof CapCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareCapCommand_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e new CapCommandParser().prepareCapCommand(BAD_CAP_INPUT_CAP));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 30
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.delete.DeleteModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_DELETE_TASK_INPUT \u003d \"-t 3\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_DELETE_MODULE_INPUT \u003d \"-m CG2271\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_DELETE_MODULE_INPUT \u003d \"-t 3 or 5 also can\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_DELETE_TASK_INPUT \u003d \"-m CG2271 or CS2101\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getDeleteCommand_returnsDeleteModuleCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DeleteCommandParser.getDeleteCommand(VALID_DELETE_MODULE_INPUT)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof DeleteModuleCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getDeleteCommand_returnsDeleteTaskCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DeleteCommandParser.getDeleteCommand(VALID_DELETE_TASK_INPUT)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof DeleteTaskCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getDeleteCommand_returnsInvalidCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DeleteCommandParser.getDeleteCommand(INVALID_DELETE_TASK_INPUT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DeleteCommandParser.getDeleteCommand(INVALID_DELETE_MODULE_INPUT)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 38
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.done.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_DONE_INPUT \u003d \"5\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_DONE_INPUT_STRING \u003d \"Five\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_DONE_INPUT_EXCESS \u003d \"5 or 10\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareDoneCommand_returnsDoneCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DoneCommandParser.prepareDoneCommand(VALID_DONE_INPUT)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof DoneCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareDoneCommand_NumberFormatException_isThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e DoneCommandParser.prepareDoneCommand(INVALID_DONE_INPUT_STRING));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareDoneCommand_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e DoneCommandParser.prepareDoneCommand(INVALID_DONE_INPUT_EXCESS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 35
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.edit.EditModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.edit.EditTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class EditCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_EDIT \u003d \"3 read a book\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_TASK_TO_EDIT \u003d \"read a book\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String MODULE_TO_EDIT \u003d \"cs2113 cs3224\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditModuleCommandTest_returnsEditModuleCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new EditCommandParser().prepareEditModuleCommand(MODULE_TO_EDIT)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof EditModuleCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditTaskCommandTest_returnsEditTaskCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new EditCommandParser().prepareEditTaskCommand(TASK_TO_EDIT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof EditTaskCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditTaskCommandTest_NumberFormatException_isThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e new EditCommandParser().prepareEditTaskCommand(BAD_TASK_TO_EDIT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 35
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/GradeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidModuleCreditException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class GradeCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_GRADE_INPUT \u003d \"CG2271 4 A+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_GRADE_INPUT_STRING_SWAP \u003d \"CG2271 B+ 4\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_GRADE_INPUT_STRING \u003d \"CG2271 four B+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_GRADE_INPUT_EXCESS \u003d \"CG2271 4 A+ or B+ anything tbh\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareGradeCommand_returnsGradeCommand() throws InvalidMatchException, InvalidModuleCreditException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(GradeCommandParser.prepareGradeCommand(VALID_GRADE_INPUT)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof GradeCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareGradeCommand_NumberFormatException_isThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e GradeCommandParser.prepareGradeCommand(INVALID_GRADE_INPUT_STRING_SWAP));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e GradeCommandParser.prepareGradeCommand(INVALID_GRADE_INPUT_STRING));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareGradeCommand_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e GradeCommandParser.prepareGradeCommand(INVALID_GRADE_INPUT_EXCESS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 38
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/HelpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.help.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class HelpCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_HELP_INPUT_GENERIC \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_HELP_INPUT_SPECIFIC \u003d \"edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareHelpCommand_returnHelpCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(HelpCommandParser.prepareHelpCommand(VALID_HELP_INPUT_GENERIC)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(HelpCommandParser.prepareHelpCommand(VALID_HELP_INPUT_SPECIFIC)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 22
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.command.list.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_LIST_TASK_INPUT \u003d \"-t\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_LIST_MODULE_INPUT \u003d \"-m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_LIST_PREFIX \u003d \"-by\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_LIST_TASK_INPUT_EXCESS \u003d \"-t now\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getListCommand_returnListCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(ListCommandParser.getListCommand(VALID_LIST_MODULE_INPUT)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof ListCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(ListCommandParser.getListCommand(VALID_LIST_TASK_INPUT)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof ListCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getListCommand_InvalidMatcherException_isThrown() throws InvalidMatchException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e ListCommandParser.getListCommand(INVALID_LIST_TASK_INPUT_EXCESS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getListCommand_InvalidParameterException_isThrown() throws InvalidMatchException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e ListCommandParser.getListCommand(INVALID_LIST_PREFIX));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 39
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "//@@author tobiasceg"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final Pattern TEST_FORMAT \u003d Pattern.compile(\"(?\u003cfirstArg\u003e\\\\S+)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void isEmptyParse_emptyString_returnsTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().isEmptyParse(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().isEmptyParse(\"\", \"\", \"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void isEmptyParse_nonemptyString_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertFalse(new Parser().isEmptyParse(\" \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertFalse(new Parser().isEmptyParse(\"\", \"b\", \"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void matcherMatches_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String userInput \u003d \"this mod is time consuming\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d TEST_FORMAT.matcher(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                () -\u003e Parser.matcherMatches(matcher, userInput, \"\", \"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 37
    }
  },
  {
    "path": "src/test/java/seedu/ravi/parser/TimeTableCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//@@author aseanseen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.ravi.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.command.IncorrectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.ModuleManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.TimeTableManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.DuplicateModuleException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.NusModsNotLoadedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.ravi.util.ExceptionMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.parser.TimeTableCommandParser.ADD_FORMAT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.parser.TimeTableCommandParser.DELETE_FORMAT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.ravi.util.ExceptionMessage.MESSAGE_LESSON_NOT_FOUND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String REPEAT_FREQ \u003d \"1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String DELETE_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String DELETE_INDEX_2 \u003d \"5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_TIMETABLE_COMMAND_FORMAT \u003d \"-no\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CS111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_START_TIME_1 \u003d \"2pm\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_START_TIME_2 \u003d \"10\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_START_TIME_3 \u003d \"1400\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_END_TIME_1 \u003d \"1500\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String DAY_OF_WEEK_1 \u003d \"mon\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String DAY_OF_WEEK_2 \u003d \"MONDAY\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_TYPE \u003d \"LECTURE\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_MOD_TIMETABLE_ADD_COMMAND_FORMAT \u003d ADD_FORMAT + \" \" + MOD_CODE_2 + \" \" + DAY_OF_WEEK_1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \" \" + LESSON_START_TIME_3 + \" \" + LESSON_END_TIME_1 + \" \" + LESSON_TYPE + \" \" + REPEAT_FREQ;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_LESSON_TIME_1_TIMETABLE_ADD_COMMAND_FORMAT \u003d ADD_FORMAT + \" \" + MOD_CODE_1 + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DAY_OF_WEEK_1 + \" \" + LESSON_START_TIME_1 + \" \" + LESSON_END_TIME_1 + \" \" + LESSON_TYPE + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + REPEAT_FREQ;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_LESSON_TIME_2_TIMETABLE_ADD_COMMAND_FORMAT \u003d ADD_FORMAT + \" \" + MOD_CODE_1 + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DAY_OF_WEEK_2 + \" \" + LESSON_START_TIME_2 + \" \" + LESSON_END_TIME_1 + \" \" + LESSON_TYPE + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + REPEAT_FREQ;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_DAY_TIMETABLE_ADD_COMMAND_FORMAT \u003d ADD_FORMAT + \" \" + MOD_CODE_1 + \" \" + DAY_OF_WEEK_1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \" \" + LESSON_START_TIME_3 + \" \" + LESSON_END_TIME_1 + \" \" + LESSON_TYPE + \" \" + REPEAT_FREQ;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_DAY_TIMETABLE_DELETE_COMMAND_FORMAT \u003d DELETE_FORMAT + \" \" + DAY_OF_WEEK_1 + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DELETE_INDEX_1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_INDEX_TIMETABLE_DELETE_COMMAND_FORMAT \u003d DELETE_FORMAT + \" \" + DAY_OF_WEEK_2 + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DELETE_INDEX_2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static void setupUserMods() throws DuplicateModuleException, ModuleNotProvidedException, NusModsNotLoadedException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.tryLoadNusMods();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(MOD_CODE_1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupTimeTable() throws TimeTableInitialiseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.clearTimeTable();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.initialise(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void badTimeTableCommandFlag_IncorrectCommand_isReturned() throws InvalidMatchException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d TimeTableCommandParser.parseTimeTableCommand(WRONG_TIMETABLE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_Module_TimeTableAddCommand_Message_Module_Not_Found_isShown() throws InvalidMatchException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d TimeTableCommandParser.parseTimeTableCommand(WRONG_MOD_TIMETABLE_ADD_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult expectedCommandResult \u003d new IncorrectCommand(ExceptionMessage.MESSAGE_MODULE_NOT_FOUND).execute();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult actualCommandResult \u003d command.execute();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(expectedCommandResult.feedbackToUser, actualCommandResult.feedbackToUser);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_Lesson_Time_1_TimeTableAddCommand_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                () -\u003e TimeTableCommandParser.parseTimeTableCommand(WRONG_LESSON_TIME_1_TIMETABLE_ADD_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_Lesson_Time_2_TimeTableAddCommand_Message_Date_Time_Unknown_isShown() throws InvalidMatchException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                TimeTableCommandParser.parseTimeTableCommand(WRONG_LESSON_TIME_2_TIMETABLE_ADD_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                new IncorrectCommand(ExceptionMessage.MESSAGE_ADD_LESSON_DATE_TIME_UNKNOWN).execute();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult actualCommandResult \u003d command.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(expectedCommandResult.feedbackToUser, actualCommandResult.feedbackToUser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_DateTime_TimeTableAddCommand_IllegalArgumentException_isThrown() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                () -\u003e TimeTableCommandParser.parseTimeTableCommand(WRONG_DAY_TIMETABLE_ADD_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_DateTime_TimeTableDeleteCommand_IllegalArgumentException_isThrown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                () -\u003e TimeTableCommandParser.parseTimeTableCommand(WRONG_DAY_TIMETABLE_DELETE_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_Index_TimeTableDeleteCommand_Message_Lesson_Not_Found_isShown() throws InvalidMatchException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d TimeTableCommandParser.parseTimeTableCommand(WRONG_INDEX_TIMETABLE_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(MESSAGE_LESSON_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 119
    }
  }
]
