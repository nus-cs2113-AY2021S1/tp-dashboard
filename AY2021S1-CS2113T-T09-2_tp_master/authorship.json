[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "## Workflow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The workflow will go like this:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Synchronise your local repo with the team repo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Make a separate branch for your work session."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Commit and push your work to the corresponding branch on your remote repo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Make a pull request to merge your remote repo\u0027s work to the team repo and resolve merge conflicts."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Setting up for each work session"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "*  `git fetch upstream`, `git rebase upstream/master`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * The command means to fetch from the team repo (upstream) and then rebase master."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Your local master should be synchronised with the upstream master now."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* `git switch -c \u003cbranchname\u003e`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Make a new branch for your local work (to preserve master\u0027s functionality)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * `git checkout -b \u003cbranchname\u003e` does the same thing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Pushing and merging your work after each work session"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* First, `git add .` if you want to stage all files or `git add \u003cpath/to/file\u003e` if you want to add specific files."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* `git commit -m \u0027commit message here\u0027` followed by `git push origin \u003cbranchname\u003e`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Git will create the corresponding branch on your remote repo and push your commits there."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Merge your work into the team repo\u0027s master with a pull request over Github\u0027s interface."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Do not confirm merge! Let the rest of the team view the pull request first before we confirm that it can be merged."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Any merge conflicts should be resolved AFTER we okay the merge."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * After we all okay-ed the merge, the merge can continue and your work is complete."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Rolling back"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* First off, you can bookmark [this website](https://ohshitgit.com/) because you will need it at some point."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Undoing a local commit: Do `git revert HEAD`. `git revert` works by bringing your previous commit in as a new commit to undo what you did so far."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * `HEAD` refers to your current commit (which is the one you want to undo)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * If you want to revert back to __BEFORE__ a specific commit, use `git log` and find the commit hash (a long string of characters but you only need the first 6 or so) and do `git revert \u003chash\u003e`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Undoing a push to remote: Do `git push -f origin \u003chash\u003e:\u003cbranch\u003e`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * This forces a push of the `\u003chash\u003e` commit, which is the one you want to revert __to__, to the specified remote branch in `\u003cbranch\u003e`. Use `git log` to find the hash."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Alternatively, you can undo the local commit first (as in point 1), then `git push -f origin master:\u003cbranch\u003e` instead of finding a specific commit."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Hard reset:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * First, try doing `git fetch` then `git reset --hard origin/\u003cbranch\u003e`. This gets your remote\u0027s latest commits (which shouldn\u0027t include your mistakes) and then resets your working directory to match the latest commit on your remote. __ALL WORK ON LOCAL THAT IS NOT ALSO ON REMOTE IS LOST!__"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "   * If that doesn\u0027t work, delete everything in your repo except the .git folder, download from the Github repo page (green button on top right of file window), put everything in the same folder, then `git add *`, `git commit`."
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 15,
      "f0fz": 25,
      "-": 64
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.12\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "java {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 1,
      "wangqinNick": 7,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Jian Hui Tobias | [Github](https://github.com/tobiasceg) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![]() | Sim Jun You | [Github](https://github.com/f0fz) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Amalina | [Github](https://github.com/amalinasani) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Sean Lim | [Github](https://github.com/Aseanseen) | [Portfolio](docs/team/seanlim.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "![](https://www.google.com/url?sa\u003di\u0026url\u003dhttps%3A%2F%2Fwww.thoughtco.com%2Ffun-facts-about-ducks-4043231\u0026psig\u003dAOvVaw3goHQ59ZTgbn9-TVUa8Fx8\u0026ust\u003d1601603208625000\u0026source\u003dimages\u0026cd\u003dvfe\u0026ved\u003d0CAIQjRxqFwoTCMCr_oSjkuwCFQAAAAAdAAAAABAD?text\u003dPhoto) | Don Roe | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 1,
      "f0fz": 1,
      "wangqinNick": 1,
      "amalinasani": 1,
      "-": 5,
      "Aseanseen": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "# Developer Guide for raVI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Software Prerequisites"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. **JDK** 11"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. **IntelliJ** IDEA"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Setting up the work environment"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. **Fork** this repo onto your GitHub account. **Clone** it onto your computer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Open IntelliJ. Close any existing projects if you are not at the welcome page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. Ensure it is set to the correct JDK version."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    a. `Configure` \u003e `Project Structure for New Projects` \u003e Select Java 11 under Project SDK."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4. Click `Open or Import` to open the cloned repo."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "5. If necessary, locate the `build.gradle` file and select it. Click OK."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Verifying the setup"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. Run the program by selecting the `run` Gradle task at the top right and running it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Test the program by trying to run commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. Additionally, select the `test` Gradle task and run it. Check that all the tests pass."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Configure coding style"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "raVI\u0027s code is strictly styled using the Gradle Checkstyle plugin."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "It is advised to change [IntelliJ\u0027s built-in code style"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "options](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to match the requirements."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The checkstyle configurations is in `\u003cROOT\u003e/config/checkstyle/` by default. Here is some information on [how to use the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Checkstyle plugin with IntelliJ IDEA](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Top level classes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This is a class diagram of the top level of raVi."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The classes depicted here are those which are direct dependencies of the main class Duke."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The various dependencies of the classes depicted here are not shown to avoid cluttering, and are described in later sections."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The main class is called Duke (carried over from legacy codebase). The main loop is held within the main class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Most classes used by the main class are static in nature and do not need to be instantiated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Command and CommandResult objects are dependencies of Executor in addition to Duke. Executor can be"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "viewed as a simple layer of abstraction on top of Command and CommandResult to facilitate the execution of user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "commands. Command is a dependency of Parser as Parser creates Command objects to return to the main loop."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Main Class](/docs/diagrams/MainClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Command Family"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Command family of classes are nearly all derived from the abstract Command class, except for"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "CommandResult and PromptType. All Command classes belong to the command package."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Command classes carry information about the user\u0027s command. There is one class for each exact user command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The `execute()` function of the Command class generates a CommandResult, which holds the reply to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "PromptType indicates the functionality of the Command object. The most useful type is EDIT, which indicates to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "StateManager that there has been a change in state."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Command Family Classes](/docs/diagrams/CommandClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Data Family"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Data family of classes consists of all the abstracted data types required for our features, such as"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Tasks, Modules, and their respective Managers. All Data classes exist in the data package, and the classes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "in charge of saving and loading like InputOutputManager are in the storage subpackage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Lesson, Task, and Module are the base level abstractions, with their respective Managers containing the logic to store"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and manipulate instances of these objects in a meaningful way. InputOutputManager reads and writes information from the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "various Managers in order to save and load. State and StateManager are specifically for the undo and redo functionality."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "They do not interact directly with the rest of the Data family."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "LessonFilter is the only interface in the data package. It allows for flexible creation of filters for powerful user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "filtering of lessons via lambda functions. For example, the user can choose to filter only lectures on Mondays before 2PM."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Since there is no command to save or load, InputOutputManager is not a dependency of Command. All the other Managers,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "however, are dependencies of Command as there are commands for using/manipulating each one of them. InputOutputManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and Command are then dependencies of the main class Duke."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Data Family Classes](/docs/diagrams/DataClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Parser Family"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Parser family of classes consists of the main Parser class and the xCommandParser subclasses. The main Parser class"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "first determines the main command in the user command string. If it is one of the 5 commands with a xCommandParser"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "subclass, then Parser delegates the remaining work to the subclass due to the complicated logic involved. Otherwise, it"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "handles the logic itself."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "It will create a Command object, no matter whether the user command is valid or not (if it is not, then an"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "IncorrectCommand object is created). This Command object is then passed back to the main class Duke for execution."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Parser Family Classes](/docs/diagrams/ParserClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The target user profile for raVI is described by the following:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* A student of NUS (a freshman in particular)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Has a need to manage their school related tasks, classes and notes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Types fast"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "A common problem amongst freshmen is the inability to organise all the incoming information."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "NUS places a focus on taking responsibility for your own learning, so it might be a tough transition from tertiary education."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "A lot of students miss lessons, assignments, and even exams, just because they\u0027re struggling to adapt to the new"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "environment."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "raVI helps students to manage their school-related information in a compact, stripped-down interface that does not bombard them with too much information."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "When you receive your modules and lessons, simply enter them into raVI as they arrive. raVI will keep track of all of it"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "for you."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "You can create tasks, give them deadlines, and tag them to certain modules. You can see all of your tasks and deadlines at a glance."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "You can even write and save your notes in raVI, uncluttering your work environment even further."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "raVI is even integrated with NUSMods, bringing its comprehensive library of information to your fingertips."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "All of the above features are wrapped in a compact, no-frills command-line interface. No confusing menus and dropdowns"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "to distract you; only simple commands to give you what you want."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Add/Delete Feature"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This feature is facilitated by the TaskManager, ModuleManager classes."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Extending from the abstract Command class are the AddModule, AddTask Command classes. This feature implements the following operations:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* AddTask - Add a task to the task list through `TaskManager.add()`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* AddModule - Add a module to the module list through `ModuleManager.add()`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* DeleteTask - Deletes a task from the task list through `TaskManager.delete()`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* DeleteModule - Deletes a module from the module list through `ModuleManager.delete()`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![Sequence diagram for AddCommand Family Classes](/docs/diagrams/AddCommandSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "As seen from the sequence diagram above, this is the flow of an add command.\\"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "AddCommand is an abstract class, inheriting from it are AddTaskCommand and AddModuleComand.\\"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "The AddCommandParser decides to create either AddModuleCommand, AddTaskCommand or IncorrectCommand objects based on the user input.\\"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Each of these have an execute() function that creates a CommandResult object that shows the user the result of the command through TextUi, using `showOutputToUser()`\\"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below is an example usage scenario and how the add feature behaves at each step."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 2. The user inputs `add -m CS2101` into Ravi, as the user wants to note down a module named ‘CS2101’ and add it to their module list.\\"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This input is received by the Ui as a string. This string is parsed by the Parser, and thereafter the AddCommandParser, before creating an AddModuleCommand. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 3. The AddModuleCommand is executed, returning a `CommandResult` containing a success message if the module has been successfully added.\\"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Otherwise, an exception message will be shown explaining the exception to the user.\\"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Common reasons for failure include:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Wrong command format\\"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add --t task`\\"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add -t task --by 2-10-2020 1400`\\"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add -m Fake Mod`\\"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add -t task -by 2nd Jan`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Module already exists in module list\\"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `add -m CS1010` but the module list already contains `CS1010`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Cap Feature "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "This feature is faciliatated by ModuleManager and Module classes."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "It extends `Command` and runs through the `ModuleManager`, checking every `grade` and `moduleCredit`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `CapCommand#gradeConvert` - Takes the grade of a module and assigns it a value according to the NUS grading schematic"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `CapCommand#calculateCap` - Uses a formula to calculate the user\u0027s current cap, with the user\u0027s total Module Credit taken and current cap."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "![Sequence diagram for Cap Feature in Command class](/docs/diagrams/CapCommandSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "As seen from the sequence diagram above, this is the flow of a Cap command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "The CapCommandParser parses the user\u0027s input and assigns the relevant attributes in the Cap Command constructor, such as `totalMcTaken` and `currentCap`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "When Cap Command is being executed , a CommandResult object is created that calculates the user\u0027s current cap after taking into account the current `ModuleManager` modules and the past semester\u0027s total mc taken and current cap."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Given below is an example usage scenario and how the cap feature behaves at each step. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 1. The user launches the application for the first time. "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 2. The user inputs `add -m CS2101` into Ravi, as the user adds a module he\u0027s taking into the `ModuleManager`. The user keys in as many modules into Ravi as they are taking. "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 3. Once the user attains a grade for the modules keyed in, he inputs `grade CS2101 4 A-` and grades all the other modules he has taken."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 4. Once every module in the `ModuleManager` has been graded, he inputs `cap 46 4.24` to calculate his accumulative cap after attaining his new grades."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 5. The `CommandResult` returns the success message to show the user his current cap after attaining his grades."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Grade Feature "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "This feature is facilitated by ModuleManager and Module classes. "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "It extends `Command` and is stored internally inside `Module` as an `grade` and `moduleCredit`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `GradeCommand#testgrade(stringGrade)` - checks if the input grade is valid according to NUS grading schematic "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `GradeCommand#grade(moduleModule)` - assigns the specific module present in the module list, the grade and moduleCredit attributes."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "![Sequence diagram for Grade Feature in Command class](/docs/diagrams/GradeCommandSequenceDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "As seen from the sequence diagram above, this is the flow of a Grade command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "The GradeCommandParser parses the user\u0027s input, and assigns the relevant attributes in the Grade Command constructor, such as `moduleCredit` and `grade`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "When Grade Command is being executed,a CommandResult object is created that shows the user the result of the command through TextUi, using `showOutputToUser()`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Given below is an example usage scenario and how the grade feature behaves at each step."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 1. The user launches the application. The user inputs `add -m CS2101` into ra.VI, as the user wants to note down a module named ‘CS2101’ and add it to their module list. This input is received by the Ui ,which processes it into a string. The string is parsed by the parser and allocates it to the AddCommand where it is added to the list of modules. "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 2. The user inputs `grade CS2101 4 A+`. Where the user input is parsed and allocated to by the parser to GradeCommand. `GradeCommand#execute()` is called and moduleManager checks if such a module exists in the user’s module list, then checks if the input grade is valid according to the NUS grading schematic and finally assigns the specific module , the grade and module credits."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 3. The `CommandResult` returns the success message to show the user that their module has successfully been graded. Otherwise, an exception message will be shown regarding the exception caught."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Timetable Feature "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This feature is faciliatated by TimeTableManager and TimeTableCommand classes."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Extending from the abstract TimeTableCommand class are the TimeTableAddCommand, TimeTableDeleteCommand and TimeTableViewCommand classes. This feature implements the following operations:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* AddLesson - Add a Lesson to the timetable through `TimeTableManager.addLesson()`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* DeleteLesson - Delete all associated Lessons from the timetable through `TaskManager.deleteLesson()`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* ViewTimeTable - List all Lessons in the timetable through `TaskManager.getSpecificDayLessons()` or `TaskManager.getSpecifiedWeekLessons()`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![Class diagram for TimeTable Family Classes](/docs/diagrams/TimeTableClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "As seen from the class diagram above, these are the classes that are required for this feature.\\"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Upon the first start up of ra.VI, `TimeTableManager.initialise()` will be run. This will no longer run again as long as the user does not tamper with / delete the files in the created data folder.\\"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "The TimeTable is created based on the user\u0027s initial input, with an appropriate number of LessonManagers.\\"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "The point of entry for this feature will be at TimeTableCommandParser, which will decide which of the commands to return through `parseTimeTableAddCommand()`. "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Thereafter, if the TimeTableCommand is returned, the TimeTableManager will carry out the associated commands, adding, deleting or viewing the Lessons in the timetable."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Add lesson/s to timetable"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below is an example scenario to add a lesson to the timetable and how the timetable feature behaves at each step."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 1. The user launches the application for the first time. ra.VI asks for the current NUS week. This input is parsed and initialises the TimeTableManager. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 2. The user inputs `add -m CS2101`, as the user wants to note down a module named `CS2101` and add it to their module list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 3. The user inputs `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1`. This means the user wants to add a `CS2101 LECTURE` that occurs once a week on `TUESDAY 0800 1000`. This command will be parsed and eventually returns a TimeTableAddCommand."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 4. The TimeTableAddCommand is executed, returning a `CommandResult` containing a success message if the Lessons have been successfully added.\\"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Otherwise, an exception message will be shown explaining the exception to the user.\\"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Common reasons for failure include:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Wrong command format\\"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUE 0800 1000 LECTURE 1`\\"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUESDAY 8am 10am LECTURE 1`\\"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUESDAY 0800 1000 NONSENSE 1`\\"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 5`\\"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Module does not exist in module list\\"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1` but the module list does not contain `CS2101`. Available modules can be found by entering `list -m`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -add BAD TUESDAY 0800 1000 LECTURE 1` but the module list does not contain `BAD` and `BAD` is not a valid NUS module."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Delete lesson/s from timetable"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below is an example scenario to delete a lesson from the timetable and how the timetable feature behaves at each step."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 1. The user launches the application for the first time. ra.VI asks for the current NUS week. This input is parsed and initialises the TimeTableManager. "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 2. The user inputs `add -m CS2101`, as the user wants to note down a module named `CS2101` and add it to their module list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 3. The user inputs `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1`. This means the user wants to add a `CS2101 LECTURE` that occurs once a week on `TUESDAY 0800 1000`. This command will be parsed and eventually returns a TimeTableAddCommand."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 4. The user inputs `timetable -del TUESDAY 1`. This means the user wants to delete the `CS2101 TUESDAY 0800 1000 LECTURE` lessons. The `1` at the end reflects lessons on index `1` on `TUESDAY`. This command will be parsed and eventually returns a TimeTableDeleteCommand."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Step 4. The TimeTableDeleteCommand is executed, returning a `CommandResult` containing a success message if the Lessons have been successfully deleted.\\"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Otherwise, an exception message will be shown explaining the exception to the user.\\"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Common reasons for failure include:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Wrong command format\\"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -del TUE 1`\\"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Lesson does not exist in the timetable\\"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "e.g. `timetable -del TUESDAY 5` but the timetable does not contain a lesson/s on `TUESDAY` at index `5`. Current lessons can be found by entering `timetable -day` or `timetable -week`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|save and load my information|store all my school related data in the application|"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add tasks to the application|keep track of all my tasks|"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add deadlines for tasks to the application|keep track of when I need to complete the tasks|"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add modules to the application|keep track of them during the school term|"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|delete tasks from the application|keep track of new tasks|"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|delete modules from the application|keep track of new modules|"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v2.0|user|view my timetable quickly|be aware of my classes and prepare for them quickly|"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "f0fz"
        },
        "content": "|v2.0|user|view a summary of my tasks|be aware of my tasks and work on them as needed|"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "|v2.0|user|grade my modules|keep track of my grades for respective modules|"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "|v2.0|user|calculate my accumulative cap|keep track of my progress in university|"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Mainstream OS: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Adding a task w/ deadline"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Adding a task without deadline"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `add -t read a book`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Task `read a book` will be added to the task list. Details of the success of the added task will be shown."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    2. Test case: `add -t `"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: As there is no task to add, details of the associated error message will be shown."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. Adding a task with deadline"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `add -t read a book -by 20-10-2020 1800`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Task `read a book` will be added to the task list. Additionally, the deadline "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    will be added to the task."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Details of the added task is shown in the status message."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    2. Test case: `add -t read a book -by 20/20/2020`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Invalid deadline `20/20/2020` will not allow the task to be added to the task list. Details of the associated error message will be shown."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Adding a module"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Adding a module"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `add -m CS2113T`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Module `CS2113T` will be checked against the NUS module list. "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Since `CS2113T` is a valid module, it will be added to the module list. Details of the success of the added module will be shown."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    2. Test case: `add -m Fake Mod`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: As there is no such module `Fake Mod` in the NUS module list, it will not be added to the module list. Details of the associated error message will be shown."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Deleting a task"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Deleting a task"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `del -t 1` where `task` is index `0` in the task list"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: The DeleteCommandParser parses `1` and converts it to index `0` in the task list. As task `task` is the index `0` in the task list, `task` will be deleted from the task list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    2. Test case: `del -t 10` where there is no task of index `9` in the task list"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: The DeleteCommandParser parses `10` and converts it to index `9` in the task list. As there is no task of index `9` in the task list, the deletion will give an error. Details of the associated error message will be shown."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Deleting a module"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Deleting a module"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `del -m CS2113T` where `CS2113T` has been previously added to the module list"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: As module `CS2113T` is in the module list, `CS2113T` will be deleted from the module list. Details of the success of the deleted module will be shown."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    2. Test case: `del -m 0` where there is no module `0` in the module list"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: As there is no such module in the module list, the deletion will give an error. Details of the associated error message will be shown."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Adding a lesson to the timetable"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Marking a task as done / undone"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Editing a task"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Editing a module"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Viewing the timetable"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Calculating the Accumulated Cap after the current semester"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. Calculate the Cap:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    1. Test case: `cap 46 4.24`, where the modules in Module List has already been graded individually."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Excepted: Each module in `ModuleManager` will be checked for its `moduleCredit` and `grade`, it is accumulated in variables."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Using the accumulative cap formula and the user\u0027s most updated cap will be calculated and shown to user."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Grading an existing module in module list"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. Grade the module:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    1. Test case: `grade CS2101 4 A+` , where the module `CS2101` has been previously added to the module list"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Expected: Module `CS2101` will be checked if its inside ModuleManager."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Since `CS2101` exists then the attributes of `4` and `A+` which are module credit and grade,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    will be added to the Module.  "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Undo the previous command"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Redo the previous command"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. Add tasks and modules, then exit"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `add -t task 1`, `add -m CS1010`, `bye`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: `user_task_data.json` and `user_mod_data.json` should be created in `\u003cROOT\u003e/data/` with a JSON"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    representation of the task and module."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Loading tasks and modules"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: Run raVI again after the first test case, then run `list -t` and `list -m`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: `task 1` should be shown in the task list, and `CS1010` should be shown in the module list."
      }
    ],
    "authorContributionMap": {
      "f0fz": 118,
      "tobiasceg": 57,
      "-": 32,
      "Aseanseen": 161
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "# ra.VI User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Welcome to the ra.VI User Guide! Choose a section or sub-section from the table of contents below, get step-by-step instructions, and plan your day."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. **About-Introduction-Product Overview-Quick Start**  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1.1 About  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1.2 Introduction  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1.3 Product Overview  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1.4 Quick Start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. **Key Features**  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2.1 Key features  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "3. **Installation-Getting Started**  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "3.1 Installation  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "3.2 Getting started  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4. **Features**  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.1 Viewing help  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.2 Add an item  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.2.1 Add a task  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.2.2 Add a module  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.3 Edit an item  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.2.1 Edit a task description  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.2.2 Editing a module  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.4 Delete an item  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.2.1 Delete a task  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.2.2 Delete a module  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.4 List items  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.2.1 List tasks  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.2.2 List modules  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.5 Grade a module  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.6 Calculate CAP  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.7 Mark task as done  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.8 Undo previous command  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.9 Summary  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.10 Timetable  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.10.1 View timetable  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.10.2 Add a lesson  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "... 4.10.3 Delete a lesson  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "4.11 Exit  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 1.1 About"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This user guide provides in-depth documentation on the ra.VI installation process, system configuration and management. In addition, the quick start guide prvoides and end-to-end setup process to begin tracking your tasks and timetable with ra.VI."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 1.2 Introduction"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Repository Assistant with a Versatile Interface (ra.VI) is a desktop app for managing tasks, deadlines, and notes, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ra.VI can manage your tasks faster than traditional GUI apps.\\"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "ra.VI helps you to manage your tasks, and their corresponding deadlines with ease. It can also help you plan your timetable and being organised keeps you ahead of the curve."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**1.2.1 Tasks**\\"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "A task refers to something that you would like to get done. This refers to reading a book or doing an assignment. Tasks can be created with or without a deadline."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**1.2.2 Deadline**\\"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "A deadline refers to a date and time associated with a task. This is in the format d-M-YYYY Hmm, e.g. 23-12-2020 1400"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**1.2.3 Modules**\\"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "A module refers to a module taken under NUS. Entered modules will be checked against the list of NUS modules."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**1.2.4 CAP**\\"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "CAP refers to Cumulative Average Point, which is the grading system used by NUS. CAP will be calculated based on your modules."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**1.2.5 Done**\\"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "A task can be marked as done. This will signify completion of the task so that you can get an easy view of any remaining tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "**1.2.6 Timetable**\\"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "The timetable is specific to you. It allows you to add lessons to your timetable with respect to the modules that you are taking. After setting the timetable up the first time, you do not need to go through the set up again."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 1.3 Product Overview"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "ra.VI is targeted at the NUS freshman. As freshman, there are many documents and new procedures that you must get familiar with. This may be daunting for you but ra.VI will provide you with the assistance you need. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "By helping you keep track of your tasks and deadlines, you will be able to keep on top of deadlines. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Moreover, the timetable feature helps you to schedule your lessons, allowing you to be more prepared for lessons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Adding on, ra.VI also allows you to keep track of your CAP, so that you can keep tabs on how well you are doing, motivating you towards that elusive CAP 5.0."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### 1.4 Quick Start"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "{Give steps to get started quickly}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "2. Download the latest version of `ra.VI` from [here](https://github.com/AY2021S1-CS2113T-T09-2/tp/releases/tag/v1.0)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your scheduler. Double-click the file to start the app. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "4. Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will open the help window.  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -t`: Add a task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `list -t`: List all tasks"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `bye`: Exit the program read chapter 1`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "5. Refer to the Features below for details of each command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "{Give detailed description of each feature}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Shows a message with the list of available commands and functions."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Adding an item: `add \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Adding a task: `add -t [-by]`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Add a task to the scheduler.  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `add -t \u003ctask_name\u003e [-by \u003cdeadline\u003e]`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -t read chapter 1`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -t read chapter 1 -by 30-12-2020 1800`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Adding a module: `add -m`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Add a module to the scheduler.  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `add -m \u003cmodule_code\u003e`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `add -m CS1231`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Editing an item: `edit \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Editing a task description: `edit -t \u003ctask_index\u003e \u003ctask_name\u003e`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Edit a task description in the scheduler.  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `edit -t \u003ctask_index\u003e \u003ctask_name\u003e`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `edit -t 3 revise for CS2113`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Note: You can find the task indexes with `list -t`  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Editing a module: `edit -m \u003cmodule_code\u003e \u003cnew_module_code\u003e`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Edit a module code in the scheduler.  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `edit -m \u003cmodule_code\u003e \u003cnew_module_code\u003e`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `edit -m CS2113 CS2113T`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Deleting an item: `del \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Deleting a task: `del -t \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Remove a task from the scheduler.  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `del -t \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `del -t 1`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Deleting a module: `del -m \u003cmodule_code\u003e`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Remove a module from the scheduler.  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `del -m \u003cmodule_code\u003e`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `del -m CS1010`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Note: You can find the task indexes with `list -t`  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Listing all items: `list \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Listing all tasks: `list -t`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "List all tasks in the scheduler.   "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `list -t`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "#### Listing all modules: `list -m`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "List all modules in the scheduler.  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `list -m`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "#### Grade a existing module: `grade \u003cmodule code\u003e \u003cgrade\u003e`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Assign a grade to a module in the Scheduler."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Format: `grade \u003cmoduleCode\u003e \u003cgrade\u003e`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `grade CS2101 B+`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "#### Calculate your cap after the semester: `cap \u003ctotal module credit taken\u003e \u003ccurrent cap\u003e`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Calculate your new updated cap, accumulated from past semesters."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Format: `cap \u003ctotal module credit taken\u003e \u003ccurrent cap\u003e`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `cap 46 4.24`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Mark as done: `done \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Mark a task in the scheduler as done.  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `done \u003ctask_index\u003e`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "* `done 1`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Undo a command: `undo`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Takes the previous command and revert its changes.\\"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Requires the previous command to be undone, a command that affects the storage. e.g. add, del, edit, done"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. `add -m CS2113T`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. `undo`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Summary: `summary`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Gets an overall view of the tasks."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Format: `summary`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `summary`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### TimeTable: `timetable \u003copt\u003e \u003cargs\u003e`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### View the timetable: `timetable \u003cargs\u003e`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "View the timetable for the day or for the week.\\"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003cargs\u003e` : Must be one of the following : `-day` or `-week`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -day`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -week`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Add a lesson: `timetable -add \u003cmodule\u003e \u003cday\u003e \u003cstart time\u003e \u003cend time\u003e \u003clesson type\u003e \u003crepeat\u003e`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Adds a lesson to the timetable.\\"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003cmodule\u003e` : Must be added to the module list. See module list with `list -m`.\\"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003cday\u003e` : Must be one of the following : `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003cstart time\u003e` : Must be in 24h format"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003cend time\u003e` : Must be in 24h format and is after `\u003cstart time\u003e`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003clesson type\u003e` : Must be one of the following : `TUTORIAL`, `LECTURE`, `SEMINAR`, `LAB`, `RECITATION`, `SESSION`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003crepeat\u003e` : 0 : One time lesson ; 1 : Once a week ; 2 : Every even week ; 3 : Every odd week"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -add CS2101 TUESDAY 0800 1000 LECTURE 0`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -add CS2113T MONDAY 1300 1500 LAB 1`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "#### Delete a lesson: `timetable -del \u003cday\u003e \u003clesson index\u003e`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Deletes a lesson from the timetable.\\"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003cday\u003e` : Must be one of the following : `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "`\u003clesson index\u003e` : Index of the lesson to be deleted. See timetable and the indexes with `timetable -day` or `timetable -week`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* `timetable -del CS2101 1`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "### Exiting the program: `bye`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Exits ra.VI.\\"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: {your answer here}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Add task `add -t TASK_NAME DEADLINE`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Add module `add -m MODULE_NAME`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 12,
      "f0fz": 1,
      "amalinasani": 70,
      "-": 35,
      "Aseanseen": 109
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.StateManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TimeTableManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.TIMETABLE_NOT_INITIALISED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final DukeLogger logger \u003d new DukeLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param args arguments passed to the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws FileNotFoundException exception is thrown if the file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        new Duke().run(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Sets up the storage, loads up the data from the storage file and prints the welcome message.  */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void start(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.ui \u003d new TextUi(in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.start();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        StateManager.initialise();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        while (!TimeTableManager.isInitialised()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                ui.showTimeTableInitialisationMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                int currWeekNum \u003d TextUi.getCurrentWeekNum();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TimeTableManager.initialise(currWeekNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                ui.outputToUser(TIMETABLE_NOT_INITIALISED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Initialised scanner, UI, and IO\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Runs the program until termination.  */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void run(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"STARTING PROGRAM...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        start(args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.save();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        InputOutputManager.saveNusMods();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"PROGRAM TERMINATED SUCCESSFULLY\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Reads the user command and executes it, until the user issues the exit command.  */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"ENTERING COMMAND LOOP\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            String userInput \u003d TextUi.getUserCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (command.getPromptType() \u003d\u003d PromptType.EDIT) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                StateManager.saveState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            ui.showResultToUser(result);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult getResponse(String userInput) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return Executor.executeCommand(userInput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 10,
      "wangqinNick": 17,
      "-": 12,
      "Aseanseen": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.LogRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DukeLogger {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private Logger dukeLogger; // One logger for each instance"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // The following are shared across all DukeLogger instances"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static FileHandler logFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static String logFileName \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_PATH \u003d \"./logs/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_NAME \u003d \"session_\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_EXT \u003d \".log\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final Level LOGGING_LEVEL \u003d Level.INFO; // CHANGE LOGGING LEVEL HERE!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final SimpleFormatter FORMATTER \u003d new SimpleFormatter() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        private static final String formatE \u003d \"%1$s - %2$s:%n[%3$-7s] %4$s%n%5$s%n%n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        private static final String format \u003d \"%1$s - %2$s:%n[%3$-7s] %4$s%n%n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        public synchronized String format(LogRecord lr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (lr.getThrown() !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return String.format(formatE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceClassName(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceMethodName(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getLevel().getLocalizedName(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getMessage(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getThrown()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return String.format(format,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceClassName(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceMethodName(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getLevel().getLocalizedName(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getMessage()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public DukeLogger(String className) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dukeLogger \u003d Logger.getLogger(className);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (logFileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                globalSetup();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logFile \u003d new FileHandler(logFileName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dukeLogger.setUseParentHandlers(false); // Stop it from logging from console..."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dukeLogger.addHandler(logFile); // Make it log to file instead"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dukeLogger.setLevel(LOGGING_LEVEL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFile.setFormatter(FORMATTER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Logger getLogger() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return dukeLogger;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void globalSetup() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            preparePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFileName \u003d prepareFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void preparePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File logFolder \u003d new File(LOG_PATH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!logFolder.exists()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFolder.mkdir();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String prepareFile() throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int sessionNum \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String currentLogFileName \u003d LOG_PATH + LOG_NAME + sessionNum + LOG_EXT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File logFile \u003d new File(currentLogFileName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        while (logFile.exists()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            sessionNum++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentLogFileName \u003d LOG_PATH + LOG_NAME + sessionNum + LOG_EXT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFile \u003d new File(currentLogFileName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logFile.createNewFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return currentLogFileName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 89,
      "wangqinNick": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/Executor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param userInput The input from the user to be parsed and executed as a command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static CommandResult executeCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (command.getPromptType() \u003d\u003d PromptType.EDIT) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            StateManager.saveState();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.command.PromptType.NONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected PromptType promptType \u003d NONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public PromptType getPromptType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return promptType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setPromptType(PromptType promptType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.promptType \u003d promptType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return command instanceof ExitCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 2,
      "Aseanseen": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String feedbackToUser; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PromptType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Indicates the type of user commands and corresponding command results."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * WARNING: the command results a waring message"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * INFORMATIVE: the command results a help message"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * EDIT: the command is a EDIT command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * NONE: the command is a basic command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public enum PromptType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    WARNING,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    INFORMATIVE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    EDIT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 14,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_ADD_MODULE \u003d COMMAND_WORD + \" -m \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_ADD_TASK \u003d COMMAND_WORD + \" -t \u003ctask_name\u003e [-by \u003cdeadline\u003e]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d FORMAT_ADD_TASK + \"\\n\" + FORMAT_ADD_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d AddTaskCommand.HELP + AddModuleCommand.HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4,
      "amalinasani": 6,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/add/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_ADD_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddModuleCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" -m \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Add a module from NUSMods to the scheduler.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: add -m CS2113T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddModuleCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param module Module code to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddModuleCommand(String module) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.promptType \u003d PromptType.EDIT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Add the Module to the module list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param module Module code to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleManager.DuplicateModuleException if the module is already in the list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private void addModule(String module) throws ModuleManager.DuplicateModuleException,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Module newModule \u003d new Module(module);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(newModule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Executes the AddModuleCommand to add the module to the module list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the add module or messages from exceptions."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            addModule(module);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_ADD_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            message \u003d MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 5,
      "amalinasani": 4,
      "Aseanseen": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/add/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_ADD_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Parser.TypeOfEntries typeOfEntry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" -t \u003ctask_name\u003e [-by \u003cdeadline\u003e]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Add a task to the scheduler.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: add -t Read Book\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t               add -t Return Book -by 30-12-2020 1800\\n\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddTaskCommand without the deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the entry."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException If the deadline does not follow the DateTime format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddTaskCommand(String desc) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.promptType \u003d PromptType.EDIT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddTaskCommand and tests the format of the deadline."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param deadline Deadline of the task to be added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException If the deadline does not follow the DateTime format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddTaskCommand(String desc, String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (deadline !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            dateTimeOfDeadline \u003d testDeadline(deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.promptType \u003d PromptType.EDIT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Test if the deadline of the task follows the DateTimeFormatter."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param deadline LocalDateTime deadline."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException if the deadline does not follow format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime testDeadline(String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        dateTimeOfDeadline \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return dateTimeOfDeadline;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Add the Task with deadline to the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the task to be added."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param dateTimeOfDeadline LocalDateTime of the deadline."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void addTask(String desc, LocalDateTime dateTimeOfDeadline) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Option for user to input a deadline"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (dateTimeOfDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            newTask \u003d new Task(desc);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            newTask \u003d new Task(desc, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Executes the AddTaskCommand to add the task to the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the add task or messages from exceptions."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addTask(desc, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        message \u003d MESSAGE_ADD_TASK_SUCCESS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 5,
      "Aseanseen": 90
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/cap/CapCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.command.cap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CAP_DISPLAY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class CapCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private int totalMcTaken;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private double currentCap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cap\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ctotal_mc\u003e \u003ccurrent_cap\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Calculate your CAP.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: cap 20 4.5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static double Cap \u003d 0.0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CapCommand(int totalMcTaken,double currentCap) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.totalMcTaken \u003d totalMcTaken;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.currentCap \u003d currentCap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private enum GradeSchematic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        A_PLUS(\"A+\",5.0),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        A(\"A\",5.0),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        A_MINUS(\"A-\",4.5),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        B_PLUS(\"B+\",4.0),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        B(\"B\",3.5),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        B_MINUS(\"B-\",3.0),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        C_PLUS(\"C+\",2.5),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        C(\"C\",2.0),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        D_PLUS(\"D+\",1.5),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        D(\"D\",1.0),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        F(\"F\",0.0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        private String symbol;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        private final double value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeSchematic(String symbol, double value) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private double gradeConvert(String grade) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double score \u003d 0.0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (GradeSchematic g : GradeSchematic.values()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (grade.equals(g.symbol)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                score \u003d g.value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private double calculateCap() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        HashMap\u003cString, Module\u003e moduleList \u003d ModuleManager.getModulesMap();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double mcGrade;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double sumMcGrade \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double sumMc \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (String i : moduleList.keySet()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            sumMc +\u003d moduleList.get(i).getModuleCredit();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            mcGrade \u003d moduleList.get(i).getModuleCredit()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    * gradeConvert(moduleList.get(i).getModuleGrade());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            sumMcGrade +\u003d mcGrade;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Cap \u003d ((currentCap * totalMcTaken) + sumMcGrade) / (sumMc + totalMcTaken);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return Cap;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new CommandResult(String.format(\"%s%.2f\\n\",MESSAGE_CAP_DISPLAY,calculateCap()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 76,
      "amalinasani": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_DELETE_TASK \u003d DeleteCommand.COMMAND_WORD + \" -t\" + \" \u003ctask_index\u003e\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_DELETE_MODULE \u003d DeleteCommand.COMMAND_WORD + \" -m\" + \" \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d FORMAT_DELETE_TASK + \"\\n\" + FORMAT_DELETE_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d DeleteTaskCommand.HELP + DeleteModuleCommand.HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 3,
      "amalinasani": 6,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/delete/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteModuleCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d DeleteCommand.COMMAND_WORD + \" -m\" + \" \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Delete a module from the scheduler.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: del -m CS2113T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructor to delete module from module list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param moduleCode Module code to be deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the module from the module list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param moduleCode Module code to be deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException If the module is not found in the module list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void deleteModule(String moduleCode) throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.delete(moduleCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Executes the DeleteModuleCommand to delete the module from the module list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the delete or errors."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            deleteModule(moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 4,
      "Aseanseen": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/delete/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteTaskCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d DeleteCommand.COMMAND_WORD + \" -t\" + \" \u003ctask_index\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Delete a task from the scheduler.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                       + \"\\n\\tFormat: \" + FORMAT "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                       + \"\\n\\tExample usage: del -t 1\\n\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructor to delete task from task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId ID of the task to be deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteTaskCommand(int taskId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId ID of the task to be deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException If the task is not found in the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void deleteTask(int taskId) throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.delete(taskId);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Executes the DeleteTaskCommand to delete the task from the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the delete or errors."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            deleteTask(taskId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 4,
      "Aseanseen": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/done/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DONE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ctask_index\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Mark a task as done.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: done 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Marks the task from the task list as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId id of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException If the task is not found in the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private void doneTask(int taskId) throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.done(taskId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Marks the task from the task list as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing acknowledgement of marking task as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            doneTask(taskId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message \u003d MESSAGE_DONE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 47,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_EDIT_TASK \u003d COMMAND_WORD + \" -t\" + \" \u003ctask_index\u003e \u003ctask_name\u003e\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_EDIT_MODULE \u003d COMMAND_WORD + \" -m\" + \" \u003cmodule_code\u003e \u003cnew_module_code\u003e\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d FORMAT_EDIT_TASK + \"\\n\" + FORMAT_EDIT_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d EditTaskCommand.HELP + EditModuleCommand.HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 1,
      "wangqinNick": 6,
      "amalinasani": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d EditCommand.COMMAND_WORD + \" -m\" + \" \u003cmodule_code\u003e \u003cnew_module_code\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Edit a module code from the module list.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: edit -m CS2113 CS2113T\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"(?\u003cidentifier\u003e(edit)) -m(?\u003cmoduleCode\u003e(?:\\\\s+\\\\w\\\\S*))(?\u003cmoduleCode1\u003e(?:\\\\s+\\\\w\\\\S*))\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String oldModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String newModuleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the command to edit a module."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code of the module to be edited"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The new module code for the module if any"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditModuleCommand(String oldModuleCode, String newModuleCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.oldModuleCode \u003d oldModuleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.newModuleCode \u003d newModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Edits the module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleManager.DuplicateModuleException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the new module code is duplicated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the new module code is not a recognised NUS module"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected void edit(Module toEdit) throws ModuleManager.DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        toEdit.setModuleCode(newModuleCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.edit(toEdit, oldModuleCode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the \u003cb\u003eEdit Module Command\u003c/b\u003e to edit a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * from the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see ModuleManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module toEdit \u003d ModuleManager.getModule(oldModuleCode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            edit(toEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }  catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "wangqinNick": 72,
      "amalinasani": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class EditTaskCommand extends EditCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String newTaskDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d EditCommand.COMMAND_WORD + \" -t\" + \" \u003ctask_index\u003e \u003ctask_name\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Edit a task description from the task list.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: edit -t 1 Project meeting\\n\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the command to edit a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param taskID"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The ID of the task to be edited"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditTaskCommand(int taskID, String newTaskDescription) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.newTaskDescription \u003d newTaskDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.promptType \u003d PromptType.EDIT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected void edit() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.getTaskList().get(taskID).setName(newTaskDescription);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            edit();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_TASK_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(Message.MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 15,
      "wangqinNick": 28,
      "amalinasani": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/filter/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class FilterCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/grade/GradeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.command.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidGradeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_GRADE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_GRADE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class GradeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private String moduleGraded;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private int moduleCredit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private String grade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"grade\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cmodule_code\u003e \u003cmodular_credit\u003e \u003cgrade\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Grades and allocates the Module Credit to the Module.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: grade CS2113T 4 A+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Constructs GradeCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param moduleGraded"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Module to be graded."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Grade attained by user for the specific module."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public GradeCommand(String moduleGraded, int moduleCredit, String grade) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.moduleGraded \u003d moduleGraded;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Tests if the input grade by the user is valid grade."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * grade input by user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private boolean testGrade(String grade) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String[] validGrades \u003d {\"A+\",\"A\",\"A-\",\"B+\",\"B-\",\"B\",\"C+\",\"C\",\"D+\",\"D\",\"F\",\"SU\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (String i: validGrades) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (grade.equals(i)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Grades and allocates the Module Credit to the Module."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param moduleToBeGraded"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * The module to be graded by user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidGradeException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * If the grade isn\u0027t recognised by the NUS grading schematic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private void grade(Module moduleToBeGraded) throws InvalidGradeException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (testGrade(grade)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            ModuleManager.grade(moduleToBeGraded,grade,moduleCredit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidGradeException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Executes the Grade Module Command to grade a Module with the module code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * from the Module List."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return The Command Result of the execution"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Module moduleToBeGraded \u003d ModuleManager.getModule(moduleGraded);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            grade(moduleToBeGraded);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(MESSAGE_GRADE_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidGradeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID_GRADE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 84,
      "amalinasani": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/help/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.cap.CapCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.done.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.edit.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.list.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.summary.SummaryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.timetable.TimeTableCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private String commandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [\u003ccommand_word\u003e]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"View command information.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tExample usage: help\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\t               help add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public HelpCommand(String commandType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints help message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing help message for that command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d AddCommand.HELP;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d CapCommand.HELP;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d DeleteCommand.HELP;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d DoneCommand.HELP;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d EditCommand.HELP;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case GradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d GradeCommand.HELP;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d HelpCommand.HELP;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d ListCommand.HELP;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d UndoCommand.HELP;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case TimeTableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d TimeTableCommand.HELP;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d SummaryCommand.HELP;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d TextUi.getCommandList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return new CommandResult(output);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 5,
      "amalinasani": 73
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/list/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LIST_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_LIST_PRINTED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Parser.TypeOfEntries typeOfEntry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_TASK \u003d COMMAND_WORD + \" -t\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT_MODULE \u003d COMMAND_WORD + \" -m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d FORMAT_TASK + \"\\n\" + FORMAT_MODULE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"List all tasks in the task list.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT_TASK"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\nList all modules in the module list.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + FORMAT_MODULE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public ListCommand(Parser.TypeOfEntries typeOfEntry) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        setPromptType(PromptType.INFORMATIVE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Lists the tasks/modules from their respective lists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing list of tasks/modules"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        switch (typeOfEntry) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d TaskManager.list();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d ModuleManager.list();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (output \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_PRINTED + output);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 9,
      "amalinasani": 41,
      "Aseanseen": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/misc/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_UNDO_AT_BEGINNING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"Undo last action.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.promptType \u003d PromptType.INFORMATIVE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            StateManager.undo();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (EmptyStackException | IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_AT_BEGINNING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 30,
      "amalinasani": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/summary/SummaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LIST_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_SUMMARY_PRINTED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"View task summary.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                                        + \"\\n\\tFormat: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Lists the tasks from respective lists in summaryLists."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing task summary message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        output \u003d TaskManager.getSummary();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (output.equals(\"\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_SUMMARY_PRINTED + output);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/timetable/TimeTableAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TimeTableManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.RepeatFrequencyInvalidException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LESSON_INVALID_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_REPEAT_FREQUENCY_UNKNOWN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_ADD_LESSON_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableAddCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Lesson newLesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private int repeatFreq;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public TimeTableAddCommand(Lesson newLesson, int repeatFreq) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.newLesson \u003d newLesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.repeatFreq \u003d repeatFreq;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Method runs during execution. Adds the lesson to the timetable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonInvalidTimeException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the lesson overlaps with an existing lesson."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws RepeatFrequencyInvalidException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the repeat parameter given by the user is not from 0 - 3."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the module to be added to the timetable is not in the module list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void addLessonToTimeTable() throws LessonInvalidTimeException, RepeatFrequencyInvalidException,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (repeatFreq \u003c 0 || repeatFreq \u003e 3) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new RepeatFrequencyInvalidException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(newLesson, repeatFreq);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            addLessonToTimeTable();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            message \u003d MESSAGE_ADD_LESSON_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (LessonInvalidTimeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            message \u003d MESSAGE_LESSON_INVALID_TIME;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (RepeatFrequencyInvalidException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_REPEAT_FREQUENCY_UNKNOWN;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            message \u003d MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 13,
      "Aseanseen": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/timetable/TimeTableCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class TimeTableCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String TIMETABLE_DAY_VIEW_FORMAT \u003d COMMAND_WORD + \" -day\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String TIMETABLE_WEEK_VIEW_FORMAT \u003d COMMAND_WORD + \" -week\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String TIMETABLE_LESSON_PARAMETER_USER_FORMAT  \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \" -add \u003cmodule_code\u003e \u003cday\u003e \u003cstart_time\u003e \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"\u003cend_time\u003e \u003clesson_type\u003e \u003crepeat\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String TIMETABLE_LESSON_DELETE_USER_FORMAT  \u003d COMMAND_WORD + \" -del \u003cday\u003e \u003clesson_index\u003e\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d TIMETABLE_LESSON_PARAMETER_USER_FORMAT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"\\n\" + TIMETABLE_LESSON_DELETE_USER_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String HELP \u003d   \"View day\u0027s timetable\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\tFormat: \" + TIMETABLE_DAY_VIEW_FORMAT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\nView week\u0027s timetable\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\tFormat: \" + TIMETABLE_WEEK_VIEW_FORMAT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\nAdd a lesson to the timetable.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\tFormat: \" + TIMETABLE_LESSON_PARAMETER_USER_FORMAT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\t\u003crepeat\u003e 0: Once\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\t         1: Once a week\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\t         2: Even weeks\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\t         3: Odd weeks\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\tExample usage: timetable -add CS2101 TUESDAY 0800 1000 LECTURE 1\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\nRemove a lesson from the timetable.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\tFormat: \" + TIMETABLE_LESSON_DELETE_USER_FORMAT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "           + \"\\n\\tExample usage: timetable -del MONDAY 2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String PROMPT_HELP \u003d TextUi.getCommandHelpMessage(COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 25,
      "Aseanseen": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/timetable/TimeTableDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TimeTableManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LESSON_NOT_FOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DELETE_LESSON_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableDeleteCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private int lessonIndexToDelete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public TimeTableDeleteCommand(DayOfWeek dayOfWeek, int lessonIndexToDelete) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.lessonIndexToDelete \u003d lessonIndexToDelete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Method runs during execution. Deletes the lesson from the timetable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the index given by the user is out of bounds."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void removeLessonFromTimeTable() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(dayOfWeek, lessonIndexToDelete);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            removeLessonFromTimeTable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            message \u003d MESSAGE_DELETE_LESSON_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_LESSON_NOT_FOUND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4,
      "Aseanseen": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/timetable/TimeTableFilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableFilterCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/timetable/TimeTableViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static seedu.duke.data.TimeTableManager.getCurrWeekNum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.data.TimeTableManager.getSpecificDayLessons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.data.TimeTableManager.getSpecifiedWeekLessons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableViewCommand extends TimeTableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private int numOfDays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public TimeTableViewCommand(int numOfDays) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.numOfDays \u003d numOfDays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String generateDayTimeTable() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cLesson\u003e lessonList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DayOfWeek day \u003d now.getDayOfWeek();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        lessonList \u003d getSpecificDayLessons(day);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return TextUi.printDayTimetable(day, lessonList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String generateWeekTimeTable() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        int currentWeek \u003d getCurrWeekNum();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        int dayVal \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cArrayList\u003cLesson\u003e\u003e weekLessons \u003d getSpecifiedWeekLessons(currentWeek);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        StringBuilder out \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        for (ArrayList\u003cLesson\u003e dayLesson : weekLessons) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            DayOfWeek day \u003d DayOfWeek.of(dayVal);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            out.append(TextUi.printDayTimetable(day, dayLesson));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            dayVal++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return out.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (numOfDays \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(generateDayTimeTable());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new CommandResult(generateWeekTimeTable());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 10,
      "amalinasani": 18,
      "Aseanseen": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LessonType lessonType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String hiddenId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Lesson(String moduleCode, LessonType lessonType, DayOfWeek day, LocalTime startTime, LocalTime endTime)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (startTime.isAfter(endTime) || startTime.equals(endTime)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonInvalidTimeException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LessonType getLessonType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Generates the unique hiddenId for each instance of this Lesson class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * No two instances of Lesson class should share a hiddenId."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void generateHiddenId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        hiddenId \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getHiddenId() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return hiddenId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks if \u0027this\u0027 lesson is after otherLesson."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param otherLesson"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The other lesson object to check against"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether \u0027this\u0027 lesson is after otherLesson"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isAfter(Lesson otherLesson) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return otherLesson.getEndTime().isBefore(startTime) || otherLesson.getEndTime().equals(startTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks if \u0027this\u0027 lesson is before otherLesson."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param otherLesson"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The other lesson object to check against"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether \u0027this\u0027 lesson is before otherLesson"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isBefore(Lesson otherLesson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return otherLesson.getStartTime().isAfter(endTime) || otherLesson.getStartTime().equals(endTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks for time period overlap with the specified Lesson."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param otherLesson"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified lesson"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether their start and end times overlap"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean checkOverlap(Lesson otherLesson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (otherLesson.getDay() !\u003d day) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // lessons are constructed with valid start-end times"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // for NO OVERLAP, (isAfter ^ isBefore) is true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so OVERLAP is just (isAfter \u003d\u003d isBefore)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return isAfter(otherLesson) \u003d\u003d isBefore(otherLesson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Generates string based on lesson type."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  String of lesson type"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public String getLessonTypeString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        switch (lessonType) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case LECTURE:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Lecture\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case TUTORIAL:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Tutorial\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case LAB:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Lab\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case SEMINAR:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Seminar\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case RECITATION:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Recitation\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Session\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Creates string representation of lesson."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * e.g. CS1010 Lecture: MONDAY 1400-1500"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  String representation of lesson"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        DateTimeFormatter time \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return String.format(\"%s %s: %s %s-%s\", moduleCode, getLessonTypeString(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                day.toString(), startTime.format(time), endTime.format(time));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // vvv Required for fastJSON, not used otherwise vvv"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Lesson() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setLessonType(LessonType lessonType) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setHiddenId(String hiddenId) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.hiddenId \u003d hiddenId;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // ^^^ Required for fastJSON, not used otherwise ^^^"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 167,
      "amalinasani": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/LessonFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public interface LessonFilter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    boolean filter(Lesson l);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/LessonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.DukeLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private HashMap\u003cDayOfWeek, ArrayList\u003cLesson\u003e\u003e lessonMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final DukeLogger logger \u003d new DukeLogger(LessonManager.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Initialise the lessonMap upon construction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LessonManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.put(eachDay, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Inserts a Lesson object in the correct position in the correct ArrayList in lessonMap, based on its day and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newLesson"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new Lesson object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void addLesson(Lesson newLesson) throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        DayOfWeek lessonDay \u003d newLesson.getDay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Trying to add lesson: \" + newLesson.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // if lessonMap is not initialised yet..."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (lessonMap.keySet().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Adding to uninitialised lessonMap\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(newLesson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int indexToInsertNewLesson \u003d -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c lessonMap.get(lessonDay).size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Lesson eachLesson \u003d lessonMap.get(lessonDay).get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (newLesson.checkOverlap(eachLesson)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().warning(\"New lesson overlaps with the lesson: \" + eachLesson.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                throw new LessonInvalidTimeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // insert before the lesson which starts right after newLesson"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // each day ArrayList in lessonMap is hence always sorted due to addLesson\u0027s logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachLesson.isAfter(newLesson)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Lesson inserted at index \" + i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                indexToInsertNewLesson \u003d i;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (indexToInsertNewLesson \u003d\u003d -1) { // lesson is the latest lesson in the day"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Lesson inserted at index \" + lessonMap.get(lessonDay).size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(newLesson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Lesson inserted at index \" + indexToInsertNewLesson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(indexToInsertNewLesson, newLesson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void addLesson(DayOfWeek day, Lesson lesson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lessonMap.get(day).add(lesson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes the lesson at lessonIndex on the given day."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param lessonIndex"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the lesson to be removed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void removeLesson(DayOfWeek day, int lessonIndex) throws LessonNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!lessonMap.containsKey(day)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"lessonMap does not contain day: \" + day);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (lessonIndex \u003c 0 || lessonIndex \u003e\u003d lessonMap.get(day).size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"The lesson index is out of bounds; size is: \" + lessonMap.get(day).size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lessonMap.get(day).remove(lessonIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes the lesson at lessonIndex on the given day."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The hiddenId of the lesson to be removed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void removeLessonById(DayOfWeek day, String id) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!lessonMap.containsKey(day)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"lessonMap does not contain day: \" + day);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c lessonMap.get(day).size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (lessonMap.get(day).get(i).getHiddenId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                lessonMap.get(day).remove(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Lesson removed at index: \" + i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns the ArrayList of lessons on the given day."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList of lessons on that day"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws LessonNotFoundException"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If there are no lessons on that day"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public ArrayList\u003cLesson\u003e getDayLessonList(DayOfWeek day) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonMap.get(day);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getLessonCountOnDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonMap.get(day).size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns an ArrayList with lessons by filtering all lessons in lessonMap through the given LessonFilter."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param currentFilter"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The current LessonFilter in use"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The filtered ArrayList of lessons generated from lessonMap"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public ArrayList\u003cLesson\u003e filterLessons(LessonFilter currentFilter) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cLesson\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ArrayList\u003cLesson\u003e currentDay \u003d lessonMap.get(eachDay);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (Lesson eachLesson : currentDay) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (currentFilter.filter(eachLesson)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    outputList.add(eachLesson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int countTotalLessons() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int numLessons \u003d 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (ArrayList\u003cLesson\u003e eachDay : lessonMap.values()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            numLessons +\u003d eachDay.size();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return numLessons;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Resets lessonMap to blank state."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void clearAllLessons() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.put(eachDay, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public HashMap\u003cDayOfWeek, ArrayList\u003cLesson\u003e\u003e getLessonMap() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonMap;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setLessonMap(HashMap\u003cDayOfWeek, ArrayList\u003cLesson\u003e\u003e lessonMap) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.lessonMap \u003d lessonMap;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 179
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/LessonType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public enum LessonType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    TUTORIAL,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    LECTURE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    SEMINAR,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    LAB,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    RECITATION,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    SESSION"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 9,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Module extends Directory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private String grade;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private int moduleCredit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Module(String moduleCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public String getModuleGrade() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public void setModuleGrade(String grade) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public double getModuleCredit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public void setModuleCredit(int moduleCredit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isSameModule(Module checkModule) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String moduleCode \u003d checkModule.getModuleCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String moduleTitle \u003d checkModule.getTitle();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return this.moduleCode.equalsIgnoreCase(moduleCode) \u0026\u0026 this.title.equalsIgnoreCase(moduleTitle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return getModuleCode() + \": \" + getTitle() + \": \" + getModuleGrade();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//public class Module extends Directory {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    public Directory getParent() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 14,
      "tobiasceg": 19,
      "wangqinNick": 50,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/ModuleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.DukeLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final DukeLogger logger \u003d new DukeLogger(ModuleManager.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static HashMap\u003cString, Module\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // modulesMap is the main module list. Maps module code to module object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static HashMap\u003cString, Module\u003e nusModsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // nusModsMap is the module list containing the Module objects created from NUSMods\u0027 JSON file of modules."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  Finds a module with the specified module code in the Module List."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Module getModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Retrieving module with code: \" + moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : modulesMap.values()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().warning(\"Can\u0027t retrieve module because it doesn\u0027t exist!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a module in the Module List by replacing the old module object with a new one."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new module that replaces the old one."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to be edited."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If there is no module with the new module code offered by NUS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws DuplicateModuleException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If there are duplicate modules with the same module code as the new module code in the Module List"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void edit(Module newModule, String oldModuleCode)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throws ModuleNotProvidedException, DuplicateModuleException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Editing module at old module code: \" + oldModuleCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //modulesMap.get(module.getCode()).setTitle(moduleDescription);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module oldModule \u003d modulesMap.get(oldModuleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!modulesMap.containsKey(oldModuleCode)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"Old module code not found!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (oldModule.isSameModule(newModule)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"Can\u0027t edit to new mod code because it exists!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.remove(oldModuleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.put(newModule.getModuleCode(), newModule);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks if the module to be graded is in the moduleMap and assigns the grade to the module."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * module to be graded"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param grade"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the grade to be assigned"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * if there is no such module in the module list input by the user"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void grade(Module module, String grade, int moduleCredit) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (contains(moduleCode)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            modulesMap.get(moduleCode).setModuleGrade(grade);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            modulesMap.get(moduleCode).setModuleCredit(moduleCredit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks for duplicates of the same module code in the Module List."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code to check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static boolean contains(String moduleCode) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachCode : modulesMap.keySet()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachCode.equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a module to the Module List."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module object to add to the module list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void add(Module newModule) throws DuplicateModuleException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Adding module with code: \" + newModule.getModuleCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (contains(newModule.getModuleCode())) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"Can\u0027t add module because it already exists!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module verifiedNusMod \u003d getNusModule(newModule.getModuleCode());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        newModule.setTitle(verifiedNusMod.getTitle());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.put(newModule.getModuleCode(), newModule);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes a module from the Module List using the module code."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to remove from the module list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Deleting module with code: \" + moduleCode);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!contains(moduleCode)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"Can\u0027t delete module because it doesn\u0027t exist!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.remove(moduleCode);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Finds a module with the specified module code in the NUSMods Module List."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Module getNusModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : nusModsMap.values()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String[] getModCodeList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return modulesMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String[] getNusModCodeList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return nusModsMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * List modules in the module map."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The formatted module list from TextUi or null if list is empty"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String list() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (modulesMap.size() \u003e 0) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return TextUi.getIndexModuleList(modulesMap);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded module map into ModuleManager\u0027s own module map."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedModulesMap the loaded module map from file"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadMods(HashMap\u003cString, Module\u003e loadedModulesMap) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap \u003d loadedModulesMap;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded module map into ModuleManager\u0027s own module map."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedModulesMap the loaded module map from file"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadNusMods(HashMap\u003cString, Module\u003e loadedModulesMap) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        nusModsMap \u003d loadedModulesMap;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears all modules in modulesMap."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clearModules() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the modules in the system."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return modulesMap"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e getModulesMap() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static class ModuleNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static class DuplicateModuleException extends DuplicateDataException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 117,
      "tobiasceg": 20,
      "wangqinNick": 71,
      "amalinasani": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/State.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String encodedSavedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String encodedSavedMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public State(String encodedSavedList, String encodedSavedMap) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.encodedSavedList \u003d encodedSavedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.encodedSavedMap \u003d encodedSavedMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getEncodedSavedList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return encodedSavedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getEncodedSavedMap() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return encodedSavedMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/StateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class StateManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static Stack\u003cState\u003e undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static Stack\u003cState\u003e redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Initialises the screen shot manager with its first screen shot of the starting list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void initialise() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //for Junit Test only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var gson \u003d new GsonBuilder().create();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d gson.toJson(TaskManager.getTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d gson.toJson(ModuleManager.getModulesMap());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var screenShot \u003d new State(encodedSavedList, encodedSavedMap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assert undoStack.isEmpty() : \"Undo stack should be empty!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assert redoStack.isEmpty() : \"Redo stack should be empty!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack.push(screenShot);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns and pops the top state."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the last state."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws EmptyStackException stack is empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static State popPreviousScreenShot() throws EmptyStackException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // There should be at least 2 screen shots to allow undo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (undoStack.size() \u003c 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new EmptyStackException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var currentState \u003d undoStack.pop();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        redoStack.push(currentState);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the last state without pop it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the last state."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static State peekPreviousScreenShot() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Reverts to the previous changed state of the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws IOException exception is thrown when error occurred during IO operation."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws EmptyStackException exception is thrown when user trying to undo at the initial state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void undo() throws IOException, EmptyStackException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousState \u003d popPreviousScreenShot();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d previousState.getEncodedSavedList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d previousState.getEncodedSavedMap();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var stream1 \u003d new ByteArrayInputStream(encodedSavedList.getBytes());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var bufferedReader1 \u003d new BufferedReader(new InputStreamReader(stream1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var stream2 \u003d new ByteArrayInputStream(encodedSavedMap.getBytes());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var bufferedReader2 \u003d new BufferedReader(new InputStreamReader(stream2));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task[] readList1 \u003d new Gson().fromJson(bufferedReader1, Task[].class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.loadTasks(getDecodedTaskList(readList1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Type type \u003d new TypeToken\u003cHashMap\u003cString, Module\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e map \u003d new Gson().fromJson(bufferedReader2, type);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ModuleManager.loadMods(map);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        bufferedReader1.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        bufferedReader2.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Saves the moduleList as a string if it was changed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void saveState() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var gson \u003d new GsonBuilder().create();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d gson.toJson(TaskManager.getTaskList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d gson.toJson(ModuleManager.getModulesMap());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var screenShot \u003d new State(encodedSavedList, encodedSavedMap);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack.push(screenShot);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (getUndoStackSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousScreenShot \u003d peekPreviousScreenShot();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousEncodedSavedList \u003d previousScreenShot.getEncodedSavedList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!previousEncodedSavedList.equals(encodedSavedList)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (!redoStack.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                redoStack.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the task list read from Json file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param readList the task array read from Json file"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list parsed from readList array"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cTask\u003e getDecodedTaskList(Task[] readList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cTask\u003e tempTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Task task : readList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            tempTaskList.add(new Task(task.getName(), task.getDeadline(), task.getStatus()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return tempTaskList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the number of states store in th stack."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the stack size"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static int getUndoStackSize() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the task list read from Json file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param readList the module map read from Json file"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list parsed from readList array"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cModule\u003e getDecodedModuleList(Module[] readList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cModule\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module module : readList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            temp.add(new Module(module.getModuleCode()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parse map to list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return module list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cModule\u003e parseModuleList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cModule\u003e moduleArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Iterator\u003cString\u003e it \u003d ModuleManager.getModulesMap().keySet().iterator();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            String key \u003d it.next();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            moduleArrayList.add(ModuleManager.getModulesMap().get(key));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleArrayList;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parse list to map."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleArrayList module list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return module map"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e parseModuleMap(ArrayList\u003cModule\u003e moduleArrayList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module module: moduleArrayList"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            map.put(module.getModuleCode(), module);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 187
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalDateTime deadline \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task(String name, LocalDateTime dateTimeOfDeadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.deadline \u003d dateTimeOfDeadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task(String name, LocalDateTime dateTimeOfDeadline, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.deadline \u003d dateTimeOfDeadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void setDeadline(LocalDateTime deadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public void setStatus() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return Message.ICON_DONE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return Message.ICON_NOT_DONE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return getName() + \" [\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return getName() + \" by \" + getDeadline().toString() + \" [\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//public class Task extends Directory {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    public Directory getParent() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 52,
      "wangqinNick": 7,
      "amalinasani": 19,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/TaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e(); // Main task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Finds a task with the specified task index (id) in the Task List."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task to be found"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The found task with the specified task index"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the task is not found in the Task List"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Task getTask(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.get(taskId);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a task in the Task List."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param editedTask"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The edited task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task in the Task List."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void edit(Task editedTask, int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        tasksList.set(taskId, editedTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a task to the Task List."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newTask"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The task object to add to the task list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void add(Task newTask) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.add(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes a task from the Task List using the task index (id)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task to be deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void delete(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.remove(taskId);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static void done(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        task \u003d getTask(taskId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        task.setStatus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Generate an ordered ArrayList of ArrayLists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * First ArrayList contains a list of uncompleted tasks with deadlines, sorted by deadlines."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Second ArrayList contains a list of uncompleted tasks without deadlines."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Last ArrayList contains a list of completed tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList of ArrayLists mentioned above."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cTask\u003e\u003e summary() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cArrayList\u003cTask\u003e\u003e summaryLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteTasksDated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteTasksUndated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e completedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Task eachTask : tasksList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachTask.getStatus()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                completedTasks.add(eachTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (eachTask.getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                incompleteTasksUndated.add(eachTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                incompleteTasksDated.add(eachTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Comparator\u003cTask\u003e compareByDeadline \u003d Comparator.comparing(Task::getDeadline);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        incompleteTasksDated.sort(compareByDeadline);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Do not change the adding order!"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(incompleteTasksDated);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(incompleteTasksUndated);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(completedTasks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return summaryLists;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Gets Task summary."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *  The message containing the task summary"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String getSummary() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cArrayList\u003cTask\u003e\u003e summaryLists \u003d summary();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String message \u003d TextUi.getSummaryList(summaryLists);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Gets Task List."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return tasksList"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return tasksList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints all tasks in task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The formatted task list from TextUi or null if list is empty"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String list() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (getTaskList().size() \u003e 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return TextUi.getIndexTaskList(tasksList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded task list into TaskManager\u0027s own task list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedTasksList the loaded task list from file"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadTasks(ArrayList\u003cTask\u003e loadedTasksList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList \u003d loadedTasksList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns the number of tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the number of tasks"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getTaskCount() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.size();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears the current task list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clear() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static class TaskNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 122,
      "wangqinNick": 9,
      "amalinasani": 39,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/TimeTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private HashMap\u003cInteger, LessonManager\u003e semesterMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int semStartWeekNum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int semEndWeekNum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int semRecessWeekNum;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public TimeTable() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void initWeek(int weekNum) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        semesterMap.put(weekNum, new LessonManager());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getSemEndWeekNum() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semEndWeekNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getSemRecessWeekNum() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semRecessWeekNum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int getSemStartWeekNum() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semStartWeekNum;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int countLessonManagers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semesterMap.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LessonManager getLessonManagerOfWeek(int weekNum) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semesterMap.get(weekNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void deleteLessonById(DayOfWeek dayOfWeek, String id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (LessonManager eachWeek : semesterMap.values()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            eachWeek.removeLessonById(dayOfWeek, id);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int countWeekLessons(int week) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semesterMap.get(week).countTotalLessons();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public int countTimetableLessons() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int totalLessonNum \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (LessonManager eachWeek : semesterMap.values()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            totalLessonNum +\u003d eachWeek.countTotalLessons();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return totalLessonNum;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public HashMap\u003cInteger, LessonManager\u003e getSemesterMap() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semesterMap;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // required for fastJSON, not used otherwise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setSemesterMap(HashMap\u003cInteger, LessonManager\u003e semesterMap) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.semesterMap \u003d semesterMap;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setSemEndWeekNum(int semEndWeekNum) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.semEndWeekNum \u003d semEndWeekNum;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setSemRecessWeekNum(int semRecessWeekNum) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.semRecessWeekNum \u003d semRecessWeekNum;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setSemStartWeekNum(int semStartWeekNum) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.semStartWeekNum \u003d semStartWeekNum;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 78,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/TimeTableManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager.ModuleNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class TimeTableManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static TimeTable timetable \u003d new TimeTable();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final DukeLogger logger \u003d new DukeLogger(TimeTableManager.class.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Initialise the semesterMap when it is empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Takes in the current week number in order to initialise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param userCurrWeekNum"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The current nus week number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws TimeTableInitialiseException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  when the userCurrWeekNum is not accepted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void initialise(int userCurrWeekNum) throws TimeTableInitialiseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Initialising timetable with user input: \" + userCurrWeekNum);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // One sem has 13 weeks of lessons"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (userCurrWeekNum \u003e 0 \u0026\u0026 userCurrWeekNum \u003c 15) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // e.g. Current week is 45, NUS week 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // semStartWeekNum is NUS week 1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // therefore, semStartWeekNum \u003d 45 - (2 - 1) \u003d 44"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            timetable.setSemStartWeekNum(now.get(ChronoField.ALIGNED_WEEK_OF_YEAR) - (userCurrWeekNum - 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"User input week num is invalid!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new TimeTableInitialiseException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        timetable.setSemEndWeekNum(timetable.getSemStartWeekNum() + 14);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        timetable.setSemRecessWeekNum(timetable.getSemStartWeekNum() + 6);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // e.g. semStartWeekNum is 44, NUS week 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Current week is NUS week 2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // therefore, userCurrWeekNum \u003d 44 + 2 - 1 \u003d 45"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        userCurrWeekNum \u003d timetable.getSemStartWeekNum() + userCurrWeekNum - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(String.format(\"Current, Start, Recess, End: %d, %d, %d, %d\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                now.get(ChronoField.ALIGNED_WEEK_OF_YEAR), timetable.getSemStartWeekNum(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                timetable.getSemRecessWeekNum(), timetable.getSemEndWeekNum()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Filling semesterMap with empty LessonManagers\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int weekNum \u003d userCurrWeekNum; weekNum \u003c timetable.getSemEndWeekNum(); weekNum++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            timetable.initWeek(weekNum);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Initialisation of timetable complete\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks if semesterMap is initialised."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Boolean of whether it is initialised"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean isInitialised() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return !(timetable.countLessonManagers() \u003d\u003d 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds the lesson to semesterMap based on the repeat parameter. E.g. add to every week, every other week, etc."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Does not add to recess week (week 7) or reading week (week 15)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * The repeat parameter where"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * 0: Current week only."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * 1: Every week."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * 2: Every even week."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * 3: Every odd week."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param lesson The lesson object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param repeat The repeat parameter"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws LessonInvalidTimeException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  when the lesson to be added overlaps with an existing lesson"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void addLesson(Lesson lesson, int repeat) throws LessonInvalidTimeException, ModuleNotFoundException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Adding lesson: \" + lesson.toString() + \" with repeat: \" + repeat);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!ModuleManager.contains(lesson.getModuleCode())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().warning(\"Could not add lesson as module not in user module list!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int currWeek \u003d getCurrWeekNum();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Current week num is: \" + currWeek);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson.generateHiddenId(); // tag lesson with unique ID for identifying when removing"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"The lesson\u0027s hiddenId is: \" + lesson.getHiddenId());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // add for current week"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (repeat \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            lessonManager.addLesson(lesson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // add for every week, or alternate weeks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (; currWeek \u003c timetable.getSemEndWeekNum(); currWeek++) { // don\u0027t add for reading week"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (currWeek \u003d\u003d timetable.getSemRecessWeekNum()) { // don\u0027t add for recess week"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (repeat \u003d\u003d 1) { // if repeat every week"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                lessonManager.addLesson(lesson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (isEvenWeek(currWeek) \u0026\u0026 repeat \u003d\u003d 2) { // if repeat every even week"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                lessonManager.addLesson(lesson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (isOddWeek(currWeek) \u0026\u0026 repeat \u003d\u003d 3) { // if repeat every odd week"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                lessonManager.addLesson(lesson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes lesson by identifying the unique lesson from the current week, dayOfWeek, and lessonIndex."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Using the params, the lesson is found and the unique hiddenId is obtained."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Uses the removeLessonById method of LessonManager to delete all lessons with this hiddenId."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dayOfWeek"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The day of week."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param lessonIndex"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The lesson index."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  When the lesson index is out of bounds."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void deleteLesson(DayOfWeek dayOfWeek, int lessonIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Deleting lesson with index \" + lessonIndex + \" on \" + dayOfWeek"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                + \" (failed if no successful deletion log below)\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int currWeek \u003d getCurrWeekNum();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // retrieve the unique ID, as index does not stay constant over different weeks"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson lesson \u003d lessonManager.getDayLessonList(dayOfWeek).get(lessonIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String id \u003d lesson.getHiddenId();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // remove by ID"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        timetable.deleteLessonById(dayOfWeek, id);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        logger.getLogger().info(\"Successful deletion of lesson with hiddenId \" + id);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Get an ArrayList of lessons happening on a certain day."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dayOfWeek"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The specific day of week."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The ArrayList of lessons."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cLesson\u003e getSpecificDayLessons(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int currWeek \u003d getCurrWeekNum();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return lessonManager.getDayLessonList(dayOfWeek);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Get an ArrayList of ArrayLists of lessons happening in the specified week."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Outer ArrayList: Holds one ArrayList for each day of week, starting from Monday."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Inner ArrayList: Holds lessons happening on that day of week."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param currWeek"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The current week."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The ArrayList of ArrayList of lessons."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cLesson\u003e\u003e getSpecifiedWeekLessons(int currWeek) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cArrayList\u003cLesson\u003e\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager lessonManager \u003d timetable.getLessonManagerOfWeek(currWeek);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            outputList.add(lessonManager.getDayLessonList(eachDay));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Get the current week number (of the year)."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The current week number."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getCurrWeekNum() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return now.get(ChronoField.ALIGNED_WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks whether the current NUS week is odd."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param week"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *  The week number to check."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether current NUS week is odd."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean isOddWeek(int week) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int recessWeek \u003d timetable.getSemRecessWeekNum();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int startWeek \u003d timetable.getSemStartWeekNum();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (week \u003c recessWeek) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return (week - startWeek + 1) % 2 \u003d\u003d 1; // check if the NUS week is even"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else if (week \u003d\u003d recessWeek) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return (week - startWeek + 1) % 2 \u003d\u003d 0; // check if the NUS week is even (accounting for recess week)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks whether the current NUS week is even."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether current NUS week is even."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean isEvenWeek(int week) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int recessWeek \u003d timetable.getSemRecessWeekNum();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int startWeek \u003d timetable.getSemStartWeekNum();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (week \u003c recessWeek) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return (week - startWeek + 1) % 2 \u003d\u003d 0; // check if the NUS week is even"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else if (week \u003d\u003d recessWeek) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return (week - startWeek + 1) % 2 \u003d\u003d 1; // check if the NUS week is even (accounting for recess week)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getWeekLessonCount(int week) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return timetable.countWeekLessons(week);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getTimetableLessonCount() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return timetable.countTimetableLessons();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadTimeTable(TimeTable loadedTimeTable) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        timetable \u003d loadedTimeTable;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clearTimeTable() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        timetable \u003d new TimeTable();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getSemEndWeekNum() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return semEndWeekNum;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getSemStartWeekNum() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return semStartWeekNum;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getSemRecessWeekNum() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return semRecessWeekNum;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean isSemRecessWeek(int week) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return week \u003d\u003d semRecessWeekNum;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 180,
      "Aseanseen": 78
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/Decoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TimeTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all outputs from files, and the conversion from String in file to Object in memory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Throws exceptions to InputOutputManager and handles none."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Wang Qin"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Decoder {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static TimeTable loadTimeTable(String dataFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTable timetable \u003d JSON.parseObject(jsonStr, TimeTable.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads a HashMap of Module objects from the specified file. Used for both user and NUS modules."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The file to load from"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The HashMap of Module objects"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e loadModules(String dataFileName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // FastJSON doesn\u0027t write the square brackets for some reason when we save, so we add it in here"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so that parseArray works as it should"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr \u003d \"[\" + jsonStr + \"]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (moduleList !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (Module eachModule : moduleList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                modulesMap.put(eachModule.getModuleCode(), eachModule);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Parses the specified save file to return an ArrayList of Task objects."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to read from"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList tasksList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the file does not exist"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cTask\u003e loadTasks(String dataFileName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // FastJSON doesn\u0027t write the square brackets for some reason when we save, so we add it in here"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so that parseArray works as it should"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr \u003d \"[\" + jsonStr + \"]\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cTask\u003e tasksList \u003d JSON.parseArray(jsonStr, Task.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return new ArrayList\u003c\u003e(tasksList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Pulls JSON from the NUSMods API, parses it, and returns the HashMap of Module objects."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The HashMap of Module objects (from NUSMods)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static HashMap\u003cString, Module\u003e generateNusModsList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e retrievedNusModsList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String retrievedJson;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        retrievedJson \u003d requestNusModsJsonString(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // This JSON string comes with the square brackets, so no need to add"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cModule\u003e modulesList \u003d JSON.parseArray(retrievedJson, Module.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module eachModule : modulesList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            retrievedNusModsList.put(eachModule.getModuleCode(), eachModule);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return retrievedNusModsList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Reads a string from a file (doesn\u0027t necessarily have to be JSON)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified file"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string read from file"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        byte[] fileContent \u003d new byte[(int) fileLength];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            in.read(fileContent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Uses the NUSMods API to get a JSON string with the information of all available mods."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The endpoint for the NUSMods API."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The JSON string with information of all currently available mods in NUS."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static String requestNusModsJsonString(String filePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int httpResult; // the status from the server response"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            URL url \u003d new URL(filePath); // create URL"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            URLConnection urlConn \u003d url.openConnection(); // try to connect and get the status code"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            urlConn.connect();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            HttpURLConnection httpConn \u003d (HttpURLConnection) urlConn;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            httpResult \u003d httpConn.getResponseCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (httpResult !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                System.out.print(\"cannot connect!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                int fileSize \u003d urlConn.getContentLength(); // get the length of the data"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                InputStreamReader isReader \u003d new InputStreamReader(urlConn.getInputStream(), \"UTF-8\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(isReader);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                String line; // to save the content of every line"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                line \u003d reader.readLine(); // read the first line"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                while (line !\u003d null) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    buffer.append(line); // append to the buffer"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    buffer.append(\" \"); // add new line"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    line \u003d reader.readLine(); // read the next line"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                //System.out.print(buffer.toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                content \u003d buffer.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 102,
      "wangqinNick": 2,
      "Aseanseen": 77
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/Encoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TimeTableManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all inputs to files, and the conversion from Object in memory to String in file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Throws exceptions to InputOutputManager and handles none."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Encoder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves timetable to file path/name specified."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When there is an error preparing the save file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveTimetable(String dataFileName) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        writeToFile(mySaveFile, JSON.toJSONString(TimeTableManager.getTimeTable()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all tasks to file path/name specified."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When there is an error preparing the save file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If index out of range (should never happen)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveTasks(String dataFileName) throws IOException, TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int taskCount \u003d TaskManager.getTaskCount();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task currentTask;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentTask \u003d TaskManager.getTask(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentTask));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all modules to file path/name specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When there is an error preparing the save file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If module not found (should never happen)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveModules(String dataFileName) throws IOException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module currentModule;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachModCode : ModuleManager.getModCodeList()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentModule \u003d ModuleManager.getModule(eachModCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentModule));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all NUS modules to file path/name specified."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When there is an error preparing the save file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If module not found (should never happen)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveNusModules(String dataFileName) throws IOException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module currentModule;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachModCode : ModuleManager.getNusModCodeList()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentModule \u003d ModuleManager.getNusModule(eachModCode);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentModule));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prepares the specified save file (and dir) by creating it or deleting then creating it (if the file exists)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The File object to prepare the actual file for"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If createNewFile does not work as expected"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void prepareSaveFile(File saveFile) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (saveFile.exists()) { // overwrite by deleting first"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveFile.delete();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        saveFile.createNewFile();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Appends the specified string to the specified File object."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The File object to write to"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param textToAdd"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string to write"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If FileWriter cannot write or close the file"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void writeToFile(File saveFile, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        FileWriter fw \u003d new FileWriter(saveFile, true); // true to append data instead of overwrite"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.write(textToAdd + \"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 122,
      "Aseanseen": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/InputOutputManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TimeTableManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.util.FileName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.DukeLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all inputs and outputs (to and from files)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Encoder and Decoder are only used by InputOutputManager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * InputOutputManager also handles exceptions thrown by Encoder and Decoder. No exceptions are thrown from here."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class InputOutputManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static String root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static java.nio.file.Path dirPath \u003d java.nio.file.Paths.get(root, \"data\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String userModuleFileName \u003d FileName.MOD_SAVE_FILE_NAME + FileName.FILE_EXT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String userTaskFileName \u003d FileName.TASK_SAVE_FILE_NAME + FileName.FILE_EXT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String nusModuleFileName \u003d FileName.NUSMOD_SAVE_FILE_NAME + FileName.FILE_EXT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String timetableFileName \u003d FileName.TIMETABLE_SAVE_FILE_NAME + FileName.FILE_EXT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path userModuleFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), userModuleFileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path userTaskFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), userTaskFileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path nusModuleFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), nusModuleFileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path timetableFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), timetableFileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final DukeLogger logger \u003d new DukeLogger(InputOutputManager.class.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Creates the save directory if it has not been created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the user\u0027s module and task saves into memory."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void start() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Starting InputOutputManager\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        java.io.File saveFolder \u003d dirPath.toFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!saveFolder.exists()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Save folder does not exist, creating now\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveFolder.mkdir();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (Files.exists(userModuleFile)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading user module saves from \" + userModuleFileName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                ModuleManager.loadMods(Decoder.loadModules(userModuleFile.toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Skipping user module save; file does not exist: \" + userModuleFileName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (Files.exists(userTaskFile)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading user task saves from \" + userTaskFileName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TaskManager.loadTasks(Decoder.loadTasks(userTaskFile.toString()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Skipping user task save; file does not exist: \" + userTaskFileName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (Files.exists(timetableFile)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading timetable save from \" + timetableFile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TimeTableManager.loadTimeTable(Decoder.loadTimeTable(timetableFile.toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Skipping timetable save; file does not exist: \" + timetableFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            loadNusModSave(); // will load from NUSMods API if file not found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads NUS Modules from the given file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadNusModSave() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Loading NUS modules from \" + nusModuleFileName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!Files.exists(nusModuleFile)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.loadNusMods(Decoder.generateNusModsList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.loadNusMods(Decoder.loadModules(nusModuleFile.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Updates the user\u0027s save files. Does not save NUS Modules."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void save() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Saving user modules and tasks into \" + userModuleFileName"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                + \" and \" + userTaskFileName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (ModuleManager.getModCodeList().length !\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveModules(userModuleFile.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TaskManager.getTaskCount() !\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveTasks(userTaskFile.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TimeTableManager.getTimetableLessonCount() !\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveTimetable(timetableFile.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // print module not found"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // print task not found"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Updates the user\u0027s NUS Modules save file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveNusMods() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Saving NUS modules into \" + nusModuleFileName);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Encoder.saveNusModules(nusModuleFile.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException | IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 105,
      "wangqinNick": 9,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/Directory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Directory parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the Directory without a parent."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.parent \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the Directory that has a parent."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param parent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory(Directory parent) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the parent of the class in the Directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract Directory getParent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the corresponding level of the Directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The level of the Directory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract DirectoryLevel getLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/DirectoryLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public enum DirectoryLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    ROOT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    MODULE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    TAG {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        public DirectoryLevel next() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel next() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return values()[ordinal() + 1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/Root.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Root extends Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Root() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return DirectoryLevel.ROOT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DataNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class DataNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DuplicateDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidGradeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class InvalidGradeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidMatchException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class InvalidMatchException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public InvalidMatchException(String parameters,String format,String helpPrompt) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        super(String.format(\"%s%s\\n\\n%s%s\\n\\n%s\\n\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, format,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                helpPrompt));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/LessonInvalidTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonInvalidTimeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonNotFoundException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/ModuleNotProvidedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleNotProvidedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/RepeatFrequencyInvalidException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class RepeatFrequencyInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TimeTableInitialiseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableInitialiseException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_ADD_MODULE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_ADD_TASK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    protected static final String DESC_GROUP \u003d \"desc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String DEADLINE_GROUP \u003d \"deadline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String BY_GROUP \u003d \"by\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern ADD_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e-\\\\S+)\" + \"(?\u003cdesc\u003e[^-]*)\" + \"((?\u003cby\u003e-by)?)\" + \"((?\u003cdeadline\u003e.*)?)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for AddCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * AddCommand with the relevant parameters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When an invalid parameter is given by the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a method has been invoked at an illegal time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareAddCommand(String parameters)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, IllegalStateException, InvalidMatchException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d ADD_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, AddCommand.FORMAT, AddCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String addedTask \u003d matcher.group(DESC_GROUP).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String taskDeadline \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // Checks for presence of -by"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String dashBy \u003d matcher.group(BY_GROUP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (dashBy !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            taskDeadline \u003d matcher.group(DEADLINE_GROUP).trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (taskDeadline.isEmpty()) { // -by is present but empty deadline"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\\n%s\\n\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                        AddTaskCommand.FORMAT, AddCommand.PROMPT_HELP));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // no task input by user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (Parser.isEmptyParse(addedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return (commandFlag.equals(MODULE_PREFIX))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? new IncorrectCommand(MESSAGE_NO_ADD_MODULE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    : new IncorrectCommand(MESSAGE_NO_ADD_TASK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return getAddCommand(commandFlag, addedTask, taskDeadline);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks the prefix of the user\u0027s input and calls the respective Add command according to it."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param commandFlag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * The command flag which is either \u0027-t\u0027 for task or \u0027-m\u0027 for module"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param addedTask"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Task or module to be added"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param taskDeadline"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * The deadline, if given , assigned to the task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the respective Add command for either task or module"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static AddCommand getAddCommand(String commandFlag, String addedTask, String taskDeadline) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new AddModuleCommand(addedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new AddTaskCommand(addedTask, taskDeadline);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 80,
      "amalinasani": 5,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/CapCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.cap.CapCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class CapCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String TOTAL_MC_GROUP \u003d \"totalMc\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String CAP_GROUP \u003d \"cap\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern CUMULATIVE_CAP_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ctotalMc\u003e\\\\d+)\" + \"(?\u003ccap\u003e.*)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for CapCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * CapCommand with the relevant parameters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a string is parsed as an integer/double"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NullPointerException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * referenced object is accessed by its a null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Cap Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareCapCommand(String parameters)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws NumberFormatException, NullPointerException, InvalidMatchException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d CUMULATIVE_CAP_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher,parameters, CapCommand.FORMAT, CapCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String mc \u003d Parser.isMatcherNull(matcher.group(TOTAL_MC_GROUP))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(TOTAL_MC_GROUP).trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String cap \u003d Parser.isMatcherNull(matcher.group(CAP_GROUP))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(CAP_GROUP).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int totalMcTaken \u003d Integer.parseInt(mc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        double currentCap \u003d Double.parseDouble(cap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new CapCommand(totalMcTaken,currentCap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 45,
      "amalinasani": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.delete.DeleteModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String TASK_MODULE_GROUP \u003d \"taskModule\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String INVALID_GROUP \u003d \"invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern DELETE_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"((?\u003ccommandFlag\u003e.*-\\\\S+)?)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    + \"(?\u003ctaskModule\u003e\\\\s\\\\S+)\" + \"((?\u003cinvalid\u003e.*)?)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for Delete Command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Delete command with relevant arguments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a string is parsed as an integer/double"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Delete Command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getDeleteCommand(String parameters) throws NumberFormatException, InvalidMatchException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d DELETE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, DeleteCommand.FORMAT, DeleteCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(Parser.COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(Parser.COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String stringTaskIndex \u003d matcher.group(TASK_MODULE_GROUP).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // Checks for any string after the module or index given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\\n%s\\n\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    DeleteCommand.FORMAT, DeleteCommand.PROMPT_HELP));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new DeleteModuleCommand(stringTaskIndex); //parameter is module code"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new DeleteTaskCommand(Integer.parseInt(stringTaskIndex) - 1);//parameters is the index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 58,
      "amalinasani": 4,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.done.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class DoneCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String NUMBER_GROUP \u003d \"digit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern DONE_FORMAT \u003d Pattern.compile(\"(?\u003cdigit\u003e\\\\S+)\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for Done Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Done Command with relevant arguments"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a string is parsed as an integer/double"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Parameters entered by the user is invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Done Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareDoneCommand(String parameters)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws NumberFormatException, InvalidParameterException, InvalidMatchException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d DONE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, DoneCommand.FORMAT, DoneCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String digit \u003d Parser.isMatcherNull(matcher.group(NUMBER_GROUP))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(NUMBER_GROUP).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (digit \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int intDigit \u003d Integer.parseInt(digit) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new DoneCommand(intDigit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 46,
      "amalinasani": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.edit.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_EDIT_MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String ARGUMENT_IDENTIFIER_GROUP \u003d \"argument\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String FIRST_ARGUMENT_IDENTIFIER_GROUP \u003d \"firstArg\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String SECOND_ARGUMENT_IDENTIFIER_GROUP \u003d \"secondArg\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern EDIT_PREFIX_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e-\\\\S+)\" + \"(?\u003cargument\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern EDIT_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003cfirstArg\u003e\\\\S+)\" + \"(?\u003csecondArg\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Splits the user\u0027s input, based on the prefix and parse it into the respective prepare methods."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The parameters given by the user, but unknown if its module or task yet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The command to prepare the respective module or task command for edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getEditCommand(String parameters) throws InvalidMatchException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_PREFIX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, EditModuleCommand.FORMAT + \"\\n\" + EditTaskCommand.FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                EditCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String argument \u003d Parser.isMatcherNull(matcher.group(ARGUMENT_IDENTIFIER_GROUP))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(ARGUMENT_IDENTIFIER_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareEditModuleCommand(argument.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareEditTaskCommand(argument.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Prepares the command to edit a module."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The command to edit a module"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareEditModuleCommand(String parameters)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, InvalidMatchException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, EditTaskCommand.FORMAT, EditCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String oldModuleCode \u003d matcher.group(FIRST_ARGUMENT_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newModuleCode \u003d matcher.group(SECOND_ARGUMENT_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (Parser.isEmptyParse(oldModuleCode) || Parser.isEmptyParse(newModuleCode)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new EditModuleCommand(oldModuleCode, newModuleCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Prepares the command to edit a task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The parameters given by user"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The command to edit a task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareEditTaskCommand(String parameters)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, NumberFormatException, InvalidMatchException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, EditModuleCommand.FORMAT, EditCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String stringTaskIndex \u003d matcher.group(FIRST_ARGUMENT_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(stringTaskIndex) - 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newTaskDescription \u003d matcher.group(SECOND_ARGUMENT_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (Parser.isEmptyParse(newTaskDescription)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new EditTaskCommand(taskIndex,newTaskDescription);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 102,
      "amalinasani": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/GradeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class GradeCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String MODULE_GROUP \u003d \"module\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String GRADE_GROUP \u003d \"grade\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String MC_GROUP \u003d \"mc\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern GRADE_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003cmodule\u003e[a-zA-Z0-9]+)\" + \"(?\u003cmc\u003e\\\\s\\\\S+)\" + \"(?\u003cgrade\u003e\\\\s\\\\S+)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for Grade Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Grade Command with relevant arguments"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When a string is parsed as an integer/double"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Grade Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareGradeCommand(String parameters)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws NumberFormatException, InvalidMatchException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d GRADE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, GradeCommand.FORMAT, GradeCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String module \u003d Parser.isMatcherNull(matcher.group(MODULE_GROUP))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(MODULE_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String mc \u003d Parser.isMatcherNull(matcher.group(MC_GROUP))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(MC_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String grade \u003d Parser.isMatcherNull(matcher.group(GRADE_GROUP))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(GRADE_GROUP).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int intMc \u003d Integer.parseInt(mc);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new GradeCommand(module,intMc,grade);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 46,
      "amalinasani": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.help.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class HelpCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String HCW_GROUP \u003d \"helpCommandWord\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern HELP_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"((?\u003chelpCommandWord\u003e\\\\S+)?)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for Help Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Help Command with relevant arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user inputs parameters that arent accepted by the commands format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the Help Command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareHelpCommand(String parameters)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, InvalidMatchException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d HELP_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, HelpCommand.FORMAT,HelpCommand.HELP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String helpCommandWord \u003d Parser.isMatcherNull(matcher.group(HCW_GROUP))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? \"genericHelp\" : matcher.group(HCW_GROUP).trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new HelpCommand(helpCommandWord);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/LessonParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Lesson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.LessonType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.parser.TimeTableCommandParser.DAY_GROUP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.parser.TimeTableCommandParser.END_TIME_GROUP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.parser.TimeTableCommandParser.LESSON_TYPE_GROUP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.parser.TimeTableCommandParser.MODULE_GROUP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.parser.TimeTableCommandParser.START_TIME_GROUP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class LessonParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the user input for the Lesson parameters, to create a Lesson."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param lessonMatcher Matcher for the parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return Lesson created from the Lesson parameters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException When the module is not found in the module list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonInvalidTimeException When the start is greater than or equal to end time of the Lesson."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException When the time of either the start or end is in the wrong format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Lesson parseLesson(Matcher lessonMatcher) throws"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            ModuleManager.ModuleNotFoundException, LessonInvalidTimeException, DateTimeParseException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            IllegalArgumentException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String modString \u003d lessonMatcher.group(MODULE_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String dayString \u003d lessonMatcher.group(DAY_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String startTimeString \u003d lessonMatcher.group(START_TIME_GROUP).trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String endTimeString \u003d lessonMatcher.group(END_TIME_GROUP).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String lessonTypeString \u003d lessonMatcher.group(LESSON_TYPE_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Check if modString is in module list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (!ModuleManager.contains(modString)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            throw new ModuleManager.ModuleNotFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Convert dayString to DayOfWeek"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(dayString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Convert start, end strings to LocalTime"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DateTimeFormatter time \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalTime startTime \u003d LocalTime.parse(startTimeString, time);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalTime endTime \u003d LocalTime.parse(endTimeString, time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Convert lessonTypeString to lessonType"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LessonType lessonType \u003d LessonType.valueOf(lessonTypeString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Create the Lesson object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Lesson newLesson \u003d new Lesson(modString, lessonType, dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return newLesson;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.list.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern LIST_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e.*-\\\\S+)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s input and parses it into the respective arguments for List Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user\u0027s input without the command word"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * List Command with relevant arguments"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @throws InvalidMatchException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * When the user input doesn\u0027t match the REGEX format for the List Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getListCommand(String parameters) throws InvalidMatchException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d LIST_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, ListCommand.FORMAT, ListCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(Parser.COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(Parser.COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new ListCommand(Parser.TypeOfEntries.MODULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new ListCommand(Parser.TypeOfEntries.TASK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 42,
      "amalinasani": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.cap.CapCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.done.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.help.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.list.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.summary.SummaryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.timetable.TimeTableCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_STRING_IN_NUMBER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EMPTY_INPUT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public enum TypeOfEntries {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TASK, MODULE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String COMMAND_WORD_GROUP \u003d \"commandWord\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String PARAMETERS_GROUP \u003d \"parameters\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)\" + \"((?\u003cparameters\u003e.*)?)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //(?\u003cidentifier\u003e(?:\\s+\\w\\S*)*)+ -m+ (?\u003cmoduleCode\u003e(?:\\\\s+\" + \"(?:\\\\s+\\\\w\\\\S*)+)?)(?\u003cinvalid\u003e.*)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Takes the user\u0027s full input and parses it, checking for the command word and assigning it to the relevant"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * prepare command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * User\u0027s full input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Relevant prepare command from the respective commands\u0027 parsers"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public Command parseCommand(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(MESSAGE_EMPTY_INPUT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            // Checks if the matched groups are null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String commandWord \u003d isMatcherNull(matcher.group(COMMAND_WORD_GROUP))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(COMMAND_WORD_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String parameters \u003d isMatcherNull(matcher.group(PARAMETERS_GROUP))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(PARAMETERS_GROUP).trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return CapCommandParser.prepareCapCommand(parameters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case GradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return GradeCommandParser.prepareGradeCommand(parameters);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return EditCommandParser.getEditCommand(parameters);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return AddCommandParser.prepareAddCommand(parameters);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return DeleteCommandParser.getDeleteCommand(parameters);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return DoneCommandParser.prepareDoneCommand(parameters);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return ListCommandParser.getListCommand(parameters); //command flag is the -t or -m"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                return new SummaryCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case TimeTableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                return TimeTableCommandParser.parseTimeTableCommand(parameters);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return HelpCommandParser.prepareHelpCommand(parameters);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_STRING_IN_NUMBER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IllegalStateException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidMatchException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static boolean isMatcherNull(String matcherTest) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return (matcherTest \u003d\u003d null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks the input given by the user is empty."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param attributes"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The input from the user"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if the input is empty, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static boolean isEmptyParse(String... attributes) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (String attribute : attributes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (!attribute.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks if the user input matches the REGEX format of the parser."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the format to follow"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the user input"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param format"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * the actual correct format if user input doesn\u0027t match"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static void matcherMatches(Matcher matcher, String parameters, String format, String helpPrompt)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidMatchException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidMatchException(parameters,format,helpPrompt);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 87,
      "wangqinNick": 47,
      "amalinasani": 3,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/TimeTableCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.timetable.TimeTableAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.timetable.TimeTableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.timetable.TimeTableDeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.timetable.TimeTableViewCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.command.timetable.TimeTableCommand.TIMETABLE_LESSON_DELETE_USER_FORMAT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.command.timetable.TimeTableCommand.TIMETABLE_LESSON_PARAMETER_USER_FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_DATE_TIME_UNKNOWN;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LESSON_INVALID_TIME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class TimeTableCommandParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String REPEAT_GROUP \u003d \"repeat\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String TIMETABLE_GROUP \u003d \"timeTableParams\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String INDEX_GROUP \u003d \"index\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MODULE_GROUP \u003d \"module\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String DAY_GROUP \u003d \"day\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String START_TIME_GROUP \u003d \"start\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String END_TIME_GROUP \u003d \"end\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String LESSON_TYPE_GROUP \u003d \"type\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String ADD_FORMAT \u003d \"-add\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String DELETE_FORMAT \u003d \"-del\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FILTER_FORMAT \u003d \"-filter\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String VIEW_DAY_FORMAT \u003d \"-day\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String VIEW_WEEK_FORMAT \u003d \"-week\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final Pattern TIMETABLE_FORMAT \u003d Pattern.compile(\"(?\u003ccommandFlag\u003e-[a-zA-Z]+)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"(?\u003ctimeTableParams\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final Pattern TIMETABLE_LESSON_PARAMETER_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Pattern.compile(\"(?\u003cmodule\u003e[a-zA-Z0-9]+\\\\s+)(?\u003cday\u003e[a-zA-Z]+\\\\s+)(?\u003cstart\u003e[0-9]+\\\\s+)(?\u003cend\u003e[0-9]+\\\\s+)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"(?\u003ctype\u003e[a-zA-Z]+\\\\s+)(?\u003crepeat\u003e[0-9]+\\\\s*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private static final Pattern TIMETABLE_DELETE_PARAMETER_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Pattern.compile(\"(?\u003cday\u003e[a-zA-Z]+\\\\s+)(?\u003cindex\u003e[0-9]+\\\\s*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses all timetable related commands into their respective parsers."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Able to Add, Delete, View."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param parameters User input after determining it is a timetable related command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return IncorrectCommand or any of the timetable commands."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws NumberFormatException When the timetable view command is not given DAY, WEEK or a number."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static Command parseTimeTableCommand(String parameters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws NumberFormatException, InvalidMatchException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Matcher matcher \u003d TIMETABLE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(matcher, parameters, TimeTableCommand.FORMAT, TimeTableCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String commandFlag \u003d matcher.group(Parser.COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String timeTableParams \u003d matcher.group(TIMETABLE_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            switch (commandFlag) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case ADD_FORMAT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableAddCommand(timeTableParams);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case DELETE_FORMAT:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableDeleteCommand(timeTableParams);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case FILTER_FORMAT:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableFilterCommand(timeTableParams);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            default: // Check if it is a view command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                command \u003d parseTimeTableViewCommand(commandFlag, timeTableParams);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (LessonInvalidTimeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return new IncorrectCommand(MESSAGE_LESSON_INVALID_TIME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new IncorrectCommand(MESSAGE_DATE_TIME_UNKNOWN);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the timetable view command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Accepted commands will be:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * timetable -day"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * timetable -week"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param commandFlag User input determining if it is day, week or custom view."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param timeTableParams Remaining user input."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return TimeTableViewCommand or IncorrectCommand."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Command parseTimeTableViewCommand(String commandFlag, String timeTableParams) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int daysToView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (!timeTableParams.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            commandFlag \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        switch (commandFlag) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case VIEW_DAY_FORMAT:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            daysToView \u003d 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        case VIEW_WEEK_FORMAT:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            daysToView \u003d 7;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, commandFlag,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    MESSAGE_CHECK_COMMAND_FORMAT, TimeTableCommand.FORMAT));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return new TimeTableViewCommand(daysToView);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the timetable add command. For the adding of Lessons into the timetable."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Accepted commands will be in the format: timetable -add module day start end type repeat"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * e.g. timetable -add CS2101 FRIDAY 1400 1600 LECTURE 1"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return TimeTableAddCommand or IncorrectCommand"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException When the module is not found in the module list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws LessonInvalidTimeException When the start is greater than or equal to end time of the Lesson."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException When the time of either the start or end is in the wrong format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws InvalidMatchException When the lessonParams do not match the TimeTableAddCommand regex."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Command parseTimeTableAddCommand(String lessonParams)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws ModuleManager.ModuleNotFoundException, LessonInvalidTimeException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            DateTimeParseException, InvalidMatchException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Matcher lessonMatcher \u003d TIMETABLE_LESSON_PARAMETER_FORMAT.matcher(lessonParams);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(lessonMatcher, lessonParams, TIMETABLE_LESSON_PARAMETER_USER_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                TimeTableCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Lesson newLesson \u003d LessonParser.parseLesson(lessonMatcher);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Convert repeatString to int"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String repeatString \u003d lessonMatcher.group(REPEAT_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int repeatFreq \u003d Integer.parseInt(repeatString);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return new TimeTableAddCommand(newLesson, repeatFreq);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Parses the timetable delete command. For the deleting of Lessons from the timetable."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Accepted commands will be in the format: timetable -del day index"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * e.g. timetable -del MONDAY 2"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * index can be found through timetable -week"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return TimeTableDeleteCommand or IncorrectCommand"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws InvalidMatchException When the lessonParams do not match the TimeTableDeleteCommand regex."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static Command parseTimeTableDeleteCommand(String deleteParams) throws InvalidMatchException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Matcher lessonMatcher \u003d TIMETABLE_DELETE_PARAMETER_FORMAT.matcher(deleteParams);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Parser.matcherMatches(lessonMatcher, deleteParams, TIMETABLE_LESSON_DELETE_USER_FORMAT,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                TimeTableCommand.PROMPT_HELP);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String dayString \u003d lessonMatcher.group(DAY_GROUP).toUpperCase().trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(dayString);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Must account for the user input vs the week of year number"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int indexToBeDeleted \u003d Integer.parseInt(lessonMatcher.group(INDEX_GROUP)) - 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return new TimeTableDeleteCommand(dayOfWeek, indexToBeDeleted);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static Command parseTimeTableFilterCommand(String filterParams) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 10,
      "f0fz": 9,
      "amalinasani": 5,
      "Aseanseen": 145
    }
  },
  {
    "path": "src/main/java/seedu/duke/system/SystemSetting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class SystemSetting {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/TextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LIST_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_COMMAND_LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_COMPLETED_TASKLIST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INCOMPLETE_DATED_TASKLIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INCOMPLETE_UNDATED_TASKLIST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_LESSONS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_TIMETABLE_HEADER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_TIMETABLE_INIT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_TIMETABLE_FOOTER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static Scanner in;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //Offset required to convert between 1-indexing and 0-indexing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final int DISPLAY_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String DIVIDER_LINE \u003d \"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //%1$ catches the furthest left arg, %2$ catches the 2nd arg"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String MESSAGE_INDEX_LIST_FORMAT \u003d \"\\n%1$d. %2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public TextUi() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public TextUi(Scanner in) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.in \u003d in;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void showGoodByeMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                Message.MESSAGE_GOODBYE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void showWelcomeMessage()     {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                Message.MESSAGE_WELCOME,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void outputToUser(String... output) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (String o : output) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            System.out.println(o);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Formats an Arraylist of type Task with their Index."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param taskList the list to be formatted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAY_INDEX_OFFSET;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            stringFormat.append(getIndexListFormat(displayIndex, t.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        stringFormat.append(\"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return stringFormat.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Formats the HashMap to string with their index."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param modulesMap the HashMap to be formatted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexModuleList(HashMap\u003cString, Module\u003e modulesMap) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAY_INDEX_OFFSET;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        for (Module module : modulesMap.values()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            stringFormat.append(getIndexListFormat(displayIndex, module.toString()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return stringFormat.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Formats the lists in summaryLists to string with their index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @param summaryLists the list of ArrayLists to be formatted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String getSummaryList(ArrayList\u003cArrayList\u003cTask\u003e\u003e summaryLists) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        final StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteDatedList \u003d summaryLists.get(0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        message.append(MESSAGE_INCOMPLETE_DATED_TASKLIST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (incompleteDatedList.size() \u003e 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(TextUi.getIndexTaskList(incompleteDatedList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteUndatedList \u003d summaryLists.get(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        message.append(MESSAGE_INCOMPLETE_UNDATED_TASKLIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (incompleteUndatedList.size() \u003e 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(TextUi.getIndexTaskList(incompleteUndatedList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        ArrayList\u003cTask\u003e completeList \u003d summaryLists.get(2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        message.append(MESSAGE_COMPLETED_TASKLIST);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (completeList.size() \u003e 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(TextUi.getIndexTaskList(completeList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message.append(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  Formats a string with its index in the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param listIndex task/module index"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param listItem task/module name or description"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexListFormat(int listIndex, String listItem) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return String.format(MESSAGE_INDEX_LIST_FORMAT, listIndex, listItem);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Trims spacing and checks if input is empty."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param rawInputLine full input from user"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return true if inputline is a legit command"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static boolean isEmptyCheck(String rawInputLine) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return rawInputLine.trim().isEmpty();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * gets the User\u0027s input command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return the trimmed command input"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getUserCommand() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        System.out.println(\"Enter Command: \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        while (isEmptyCheck(userInput)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static int getCurrentWeekNum() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String userInput \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Shows the result of a command execution to the user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param result the relevant message shown to user"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                result.feedbackToUser,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Gets command list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the list of available commands"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String getCommandList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return MESSAGE_COMMAND_LIST;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Gets Help Message prompt."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the list of available commands"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String getCommandHelpMessage(String commandWord) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return String.format(\"For more information on %s, type `help %s`\", commandWord, commandWord);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void showTimeTableInitialisationMessage() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            DIVIDER_LINE,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            MESSAGE_TIMETABLE_INIT,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            DIVIDER_LINE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints day timetable."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the String of the day\u0027s timetable"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String printDayTimetable(DayOfWeek day, ArrayList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (lessonList.size() \u003e 0) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output.append(System.lineSeparator())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    .append(day)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    .append(System.lineSeparator())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    .append(MESSAGE_TIMETABLE_HEADER);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            for (Lesson lesson : lessonList) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                int lessonNumber \u003d lessonList.indexOf(lesson) + 1;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                output.append(printLessonBlock(lesson, lessonNumber));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d new StringBuilder(MESSAGE_NO_LESSONS + day + \"\\n\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints a timetable block for a particular lesson."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the timetable block containing lesson time, number and name"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String printLessonBlock(Lesson lesson, int lessonIndex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DateTimeFormatter time \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String startTime \u003d lesson.getStartTime().format(time);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String endTime \u003d lesson.getEndTime().format(time);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String lessonNumber \u003d String.format(\"%02d\", lessonIndex);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        message +\u003d \" | \" + startTime + \"-\" + endTime"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                + \" | \" + lessonNumber"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                + \" | \" + lesson.getModuleCode() + \" \" + lesson.getLessonTypeString() + \" |\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                + MESSAGE_TIMETABLE_FOOTER;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "tobiasceg": 102,
      "wangqinNick": 4,
      "amalinasani": 120,
      "Aseanseen": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/DummyModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/ExceptionMessage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MISSING_DIRECTORY_NAME \u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Please include the name of the directory you want to move to.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Alternatively, enter .. to move to the parent directory instead.\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Sorry, the module is not in your module list.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_PROVIDED \u003d \"Sorry, the module is not provided by NUS currently.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Sorry, the module already exists in your list.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_CATEGORY_NOT_FOUND \u003d \"Sorry, the category is not found.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"Sorry, the category already exists.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"Sorry, the task is not found.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Sorry, the task already exists.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TASK_FILE_NOT_FOUND \u003d \"Sorry, the file is not found.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK_FILE \u003d \"Sorry, the file already exists.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_IMPLICIT_FILE_EXCEED_LIMIT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the name of the file you are adding exceeds 30 characters.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Please enter a new file name.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"Sorry, some parameters seem to be missing.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIORITY \u003d \"Alert! Priority should be a number between 0 and 20.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Sorry, the deadline you entered is not in a recognised datetime format.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"Please make sure to follow the datetime format as such:\\n\\t\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DateTime.FORMAT + \"\\nExample: 06/06/2020 12:00am\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Sorry, the date you entered is not in a recognised date format.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"Please make sure to follow the date format as such:\\n\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DateTime.DATE_FORMAT + \"\\nExample: 07/07/2020\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_LIST_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"The List number is not found on the list! Deletion is aborted.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TRAVERSE_ERROR \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"There seems to be an error when traversing. Moving back to Root...\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FAILED_DIRECTORY_TRAVERSAL \u003d \"Unable to traverse further.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DIRECTORY_NOT_FOUND \u003d \"Sorry, the next directory could not be found.\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DIRECTORY_LEVEL \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, unable to execute the command at the current directory level.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Either move to the appropriate directory level, or enter the full directory path.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETERS \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Oh no! It seems that some invalid or missing parameters were found!\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIX_FOUND \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"There seems to be duplicate prefix(es) in your input...\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_IO_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_SYSTEM_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file. \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Please check that your file is not currently running.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Sorry, the file path entered is invalid.\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_ADD_FILE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the file does not exists. Please check the file path again.\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_SECURITY_EXCEPTION \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Oh no! File access was denied by device\u0027s security program.\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_OPEN \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"The following file(s) could not be opened as they cannot be found:\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_DELETE \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Deletion completed.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"However, note that the following file(s) could not be deleted completely from Nuke as they \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"could not be found:\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_LIST_EMPTY \u003d \"\\nYour list is empty.\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_STRING_IN_NUMBER \u003d \"There seems to be a string in the place of a number \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"Please your command\u0027s format again. \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            \"It seems you have input an incorrect command word. \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"Please key in help to see our list of commands. \\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_INVALID_GRADE \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            \"The grade input is not recognised by the NUS grading schematic. \\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_LESSON_INVALID_TIME \u003d \"Sorry, the lesson you have attempted to add \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            + \"either overlaps with other lessons or has an invalid start time.\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_LESSON_NOT_FOUND \u003d \"Sorry, the lesson you have attempted to delete \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"does not exist.\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_REPEAT_FREQUENCY_UNKNOWN \u003d \"Sorry, the lesson you have attempted to add does \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"not have the correct repeatability.\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String TIMETABLE_NOT_INITIALISED \u003d \"Please enter a proper week number.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_DATE_TIME_UNKNOWN \u003d \"Please enter the date and time properly.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4,
      "tobiasceg": 7,
      "wangqinNick": 58,
      "amalinasani": 1,
      "Aseanseen": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/FileName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class FileName {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String FILE_EXT          \u003d \".json\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String TASK_SAVE_FILE_NAME      \u003d \"task_data\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MOD_SAVE_FILE_NAME       \u003d \"mod_data\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String NUSMOD_SAVE_FILE_NAME    \u003d \"nus_mod_data\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String TIMETABLE_SAVE_FILE_NAME \u003d \"timetable_data\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/Message.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d \"SUCCESS!! The task has been added.\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been added.\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_ADD_LESSON_SUCCESS \u003d \"SUCCESS!! The lesson has been added.\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"SUCCESS!! The task has been deleted.\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been deleted.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"SUCCESS!! The lesson has been deleted.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been updated.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"SUCCESS!! The task has been updated.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"Please enter a command.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the command entered contains some unrecognised parameters starting from here:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_CHECK_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Please check to make sure to follow the command format as such:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_MODULE \u003d \"Please enter a new module code to edit.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_TASK \u003d \"Please enter a new task index to edit.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_NO_ADD_MODULE \u003d \"Please enter a new module code to add.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_NO_ADD_TASK \u003d \"Please enter a new task to add.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Good bye!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to RAVI\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"SUCCESS!! The task has been marked as done.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String ICON_DONE \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String ICON_NOT_DONE \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_LIST_PRINTED \u003d \"List:\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undo successfully!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_UNDO_UNSUCCESSFUL \u003d \"Sorry, there was an IO error when undoing the state.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_UNDO_AT_BEGINNING \u003d \"You are already at the initial state!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_GRADE_MODULE_SUCCESS \u003d \"Module graded successfully! \\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_CAP_DISPLAY \u003d \"Your current CAP is \\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_COMPLETED_TASKLIST \u003d \"\\nCompleted tasks:\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_UNDATED_TASKLIST \u003d \"\\nIncomplete undated tasks:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_DATED_TASKLIST \u003d \"\\nIncomplete dated tasks:\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_SUMMARY_PRINTED \u003d \"Your Task Summary\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_COMMAND_LIST \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            \"Command                                        Function\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"help ----------------------------------------- View command list\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"help [\u003ccommand_word\u003e] ------------------------ View command information\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -t \u003ctask_name\u003e [-by \u003cdeadline\u003e] ---------- Add task to the scheduler\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -m \u003cmodule_code\u003e ------------------------- Add a module from NUSMods to the scheduler\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"cap \u003ctotal_mc\u003e \u003ccurrent_cap\u003e ----------------- Calculate your CAP\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -t \u003ctask_index\u003e -------------------------- Delete a task from the scheduler\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -m \u003cmodule_code\u003e ------------------------- Delete a module from the scheduler\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"done \u003ctask_index\u003e ---------------------------- Mark a task as done\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -t \u003ctask_index\u003e \u003ctask_name\u003e ------------- Edit a task\u0027s description from the task list\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -m \u003cmodule_code\u003e \u003cnew_module_code\u003e ------ Edit a module code from the module list\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"grade \u003cmodule_code\u003e \u003cgrade\u003e ------------------ Grades and allocates the Module Credit to the Module\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -t -------------------------------------- List all tasks in the task list\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -m -------------------------------------- List all modules in the module list\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"undo ----------------------------------------- Undo previous action\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"summary -------------------------------------- View task summary\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"timetable -day ------------------------------- View the timetable for today\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"timetable -week ------------------------------ View the timetable for the week\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"timetable -add \u003cmodule_code\u003e \u003cday\u003e \u003cstart_time\u003e\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"\u003cend time\u003e \u003clesson type\u003e \u003crepeat\u003e ------------ Add a lesson to the timetable\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"timetable -del \u003cday\u003e \u003clesson_index\u003e ---------- Delete a lesson from the timetable\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"bye ------------------------------------------ Exit RaVi\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_INIT \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            \"Please enter the current week num e.g. 1 - 14\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    + \" where 7 is recess week.\\n\" + \"In here, NUS week 7 onwards is week 8 onwards.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_HEADER \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            \"  _________________________________\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    + \" |   Time    | ID |     Lesson     |\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "                    + \" |___________|____|________________|\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_FOOTER \u003d \"\\n |___________|____|________________|\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_NO_LESSONS \u003d \"\\nNo lessons on \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "tobiasceg": 6,
      "wangqinNick": 15,
      "amalinasani": 41,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/add/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String TASK \u003d \"test task\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String BAD_DEADLINE \u003d \"bad_deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String EMPTY_DEADLINE \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String SPACES_DEADLINE \u003d \"        \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        InputOutputManager.loadNusModSave();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addModule_duplicateModuleMessage_isShown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addMod \u003d new AddModuleCommand(MOD_CODE_1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addDupMod \u003d new AddModuleCommand(MOD_CODE_1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addMod.execute();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d addDupMod.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_DUPLICATE_MODULE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_badDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddTaskCommand(TASK, BAD_DEADLINE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_emptyDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddTaskCommand(TASK, EMPTY_DEADLINE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_blankDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddTaskCommand(TASK, SPACES_DEADLINE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 8,
      "Aseanseen": 45
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/cap/CapCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.command.cap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CAP_DISPLAY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class CapCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String MODULE_CODE \u003d \"CS1231\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final double CAP \u003d 4.37;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void setupModManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        AddCommand addModule \u003d new AddModuleCommand(MODULE_CODE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(MODULE_CODE,4,\"A+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        gradeCommand.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void capCommand_MessageCapDisplayWithCap_isShown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CapCommand capCommand \u003d new CapCommand(20,4.24);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult commandResult \u003d capCommand.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(String.format(\"%s%.2f\\n\",MESSAGE_CAP_DISPLAY,CAP), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/delete/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_MISSING \u003d \"CS2040\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String TASK \u003d \"test task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int TASK_ID_MISSING \u003d 10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addModule \u003d new AddModuleCommand(MOD_CODE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupTaskObjects() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addModule \u003d new AddTaskCommand(TASK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteMissingModuleMessage_isShown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DeleteCommand deleteMissingModuleTest \u003d new DeleteModuleCommand(MOD_CODE_MISSING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d deleteMissingModuleTest.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteMissingTaskMessage_isShown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DeleteCommand deleteMissingTaskTest \u003d new DeleteTaskCommand(TASK_ID_MISSING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d deleteMissingTaskTest.execute();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 49
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/done/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void setupTaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Task newTask \u003d new Task(\"read a book\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void doneTask_validIndex_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DoneCommand doneValidTask \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d doneValidTask.execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(Message.MESSAGE_DONE_TASK_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void doneTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DoneCommand doneInvalidTask \u003d new DoneCommand(2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d doneInvalidTask.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_TASK_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 35
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/edit/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.storage.Decoder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class EditModuleCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void execute() throws ModuleManager.DuplicateModuleException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e modulesMap \u003d Decoder.loadModules(\"data/\" + \"moduleList.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //ModuleManager.add(new Module(\"CS1231\", \"AAA\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //base case"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -m cs1231 CS3224\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/edit/EditTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.Executor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditTaskCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task newTask \u003d new Task(\"read a book\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //base case"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -t 1 return a book\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //invalid parameters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"edit -t 0 return a book\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result2.feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"edit -t 2 return a book\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result3.feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/grade/GradeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.command.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class GradeCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String MODULE_CODE \u003d \"CG2271\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String NON_EXISTENT_MODULE_CODE \u003d \"CS2101\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        InputOutputManager.loadNusModSave();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        AddCommand addModule \u003d new AddModuleCommand(MODULE_CODE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void gradeCommand_MessageGradeSuccessful_isShown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(MODULE_CODE,4,\"A+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult commandResult \u003d gradeCommand.execute();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(Message.MESSAGE_GRADE_MODULE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void gradeCommand_MessageModuleNotFound_isShown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(NON_EXISTENT_MODULE_CODE, 4, \"A+\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult commandResult \u003d gradeCommand.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_MODULE_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void gradeCommand_MessageInvalidGrade_isShown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(MODULE_CODE, 4, \"SU bah\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        CommandResult commandResult \u003d gradeCommand.execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_INVALID_GRADE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 52
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/help/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    static final String HELP_MESSAGE \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            \"Command                                        Function\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"help ----------------------------------------- View command list\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"help [\u003ccommand_word\u003e] ------------------------ View command information\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -t \u003ctask_name\u003e [-by \u003cdeadline\u003e] ---------- Add task to the scheduler\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -m \u003cmodule_code\u003e ------------------------- Add a module from NUSMods to the scheduler\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"cap \u003ctotal_mc\u003e \u003ccurrent_cap\u003e ----------------- Calculate your CAP\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -t \u003ctask_index\u003e -------------------------- Delete a task from the scheduler\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -m \u003cmodule_code\u003e ------------------------- Delete a module from the scheduler\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"done \u003ctask_index\u003e ---------------------------- Mark a task as done\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -t \u003ctask_index\u003e \u003ctask_name\u003e ------------- Edit a task\u0027s description from the task list\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -m \u003cmodule_code\u003e \u003cnew_module_code\u003e ------ Edit a module code from the module list\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"grade \u003cmodule_code\u003e \u003cgrade\u003e ------------------ Grades and allocates the Module Credit to the Module\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -t -------------------------------------- List all tasks in the task list\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -m -------------------------------------- List all modules in the module list\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"undo ----------------------------------------- Undo previous action\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"summary -------------------------------------- View task summary\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"timetable -day ------------------------------- View the timetable for today\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"timetable -week ------------------------------ View the timetable for the week\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"timetable -add \u003cmodule_code\u003e \u003cday\u003e \u003cstart_time\u003e\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"\u003cend time\u003e \u003clesson type\u003e \u003crepeat\u003e ------------ Add a lesson to the timetable\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"timetable -del \u003cday\u003e \u003clesson_index\u003e ---------- Delete a lesson from the timetable\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"bye ------------------------------------------ Exit RaVi\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void testHelpCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d helpCommand.execute();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(HELP_MESSAGE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 8,
      "amalinasani": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/misc/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.Executor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        InputOutputManager.loadNusModSave();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        StateManager.initialise();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void undo_addModule_Success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"add -m cs3235\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"add -m cs3230\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new UndoCommand().execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"add -m cs1010\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void undo_deleteModule_Success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"add -m cs3235\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"add -m cs3230\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new UndoCommand().execute();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"add -m cs1010\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //CommandResult result4 \u003d Executor.executeCommand(\"del -m cs1010\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //new UndoCommand().execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4,
      "wangqinNick": 55
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/timetable/TimeTableCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.LessonType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TimeTableManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.TimeTableCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int BAD_REPEAT_FREQ \u003d 4;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int REPEAT_FREQ_WEEKLY \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int BAD_LESSON_INDEX \u003d 5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static Lesson LESSON_1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static Lesson LESSON_1_OVERLAP;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static Lesson LESSON_2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_3 \u003d \"MA1511\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String BAD_VIEW_FORMAT \u003d \"-no\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final DayOfWeek DAY_OF_WEEK \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LocalTime LESSON_1_START_TIME \u003d LocalTime.of(14,0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LocalTime LESSON_1_END_TIME \u003d LocalTime.of(16,0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LocalTime OTHER_LESSON_START \u003d LocalTime.of(9,0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LocalTime OTHER_LESSON_END \u003d LocalTime.of(10,0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final LessonType LESSON_TYPE \u003d LessonType.LECTURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static void setupUserMods() throws ModuleManager.DuplicateModuleException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(new Module(MOD_CODE_1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(new Module(MOD_CODE_2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(new Module(MOD_CODE_3));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupTimeTable_andLessons() throws LessonInvalidTimeException, TimeTableInitialiseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LESSON_1 \u003d new Lesson(MOD_CODE_1, LESSON_TYPE, DAY_OF_WEEK, LESSON_1_START_TIME, LESSON_1_END_TIME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LESSON_2 \u003d new Lesson(MOD_CODE_2, LESSON_TYPE, DAY_OF_WEEK, OTHER_LESSON_START, OTHER_LESSON_END);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.clearTimeTable();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.initialise(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableAddCommand timeTableAddCommand \u003d new TimeTableAddCommand(LESSON_1, REPEAT_FREQ_WEEKLY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        timeTableAddCommand.execute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addLesson_badRepeatFreq_RepeatFrequencyMessage_isShown() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableAddCommand timeTableAddCommand \u003d new TimeTableAddCommand(LESSON_2, BAD_REPEAT_FREQ);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d timeTableAddCommand.execute();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_REPEAT_FREQUENCY_UNKNOWN, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addLesson_overlapLessonTime_LessonOverlapMessage_isShown() throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LESSON_1_OVERLAP \u003d new Lesson(MOD_CODE_2, LESSON_TYPE, DAY_OF_WEEK, LESSON_1_START_TIME, LESSON_1_END_TIME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableAddCommand timeTableAddCommand \u003d new TimeTableAddCommand(LESSON_1_OVERLAP, REPEAT_FREQ_WEEKLY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d timeTableAddCommand.execute();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_LESSON_INVALID_TIME, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteLesson_lessonNotFound_LessonNotFoundMessage_isShown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableDeleteCommand timeTableDeleteCommand \u003d new TimeTableDeleteCommand(DAY_OF_WEEK, BAD_LESSON_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d timeTableDeleteCommand.execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_LESSON_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void viewTimeTable_badViewFormat_IncorrectCommand_isReturned() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command timeTableviewCommand \u003d TimeTableCommandParser.parseTimeTableViewCommand(BAD_VIEW_FORMAT, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertTrue(timeTableviewCommand instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 91
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static LessonManager manager \u003d new LessonManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_3 \u003d \"MA1511\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_12 \u003d LocalTime.of(12,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_13 \u003d LocalTime.of(13,0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_14 \u003d LocalTime.of(14,0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_15 \u003d LocalTime.of(15,0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupLessonObjects() throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson1 \u003d new Lesson(MOD_CODE_1, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_13);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson2 \u003d new Lesson(MOD_CODE_2, LessonType.LECTURE, DayOfWeek.MONDAY, time_14, time_15);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.clearAllLessons();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.addLesson(lesson1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.addLesson(lesson2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getOverlapException_addLesson() throws LessonInvalidTimeException, LessonNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson1 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_13);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e manager.addLesson(testLesson1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson2 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_14);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e manager.addLesson(testLesson2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson3 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_13, time_15);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e manager.addLesson(testLesson3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_LessonNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e manager.removeLesson(DayOfWeek.TUESDAY, 0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e manager.removeLesson(DayOfWeek.MONDAY, -1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e manager.removeLesson(DayOfWeek.MONDAY, 2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_sortsLessons() throws LessonNotFoundException, LessonInvalidTimeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_1, manager.getDayLessonList(DayOfWeek.MONDAY).get(0).getModuleCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_2, manager.getDayLessonList(DayOfWeek.MONDAY).get(1).getModuleCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String testCode \u003d \"Test Code\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson \u003d new Lesson(testCode, LessonType.LECTURE, DayOfWeek.MONDAY, time_13, time_14);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.addLesson(testLesson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_1, manager.getDayLessonList(DayOfWeek.MONDAY).get(0).getModuleCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(testCode, manager.getDayLessonList(DayOfWeek.MONDAY).get(1).getModuleCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_2, manager.getDayLessonList(DayOfWeek.MONDAY).get(2).getModuleCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verifyLessonCount_afterDeletingLessons() throws LessonNotFoundException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, manager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.removeLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, manager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        manager.removeLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, manager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verifyException_lessonConstruction_withInvalidTime() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            () -\u003e new Lesson(MOD_CODE_1, LessonType.LAB, DayOfWeek.TUESDAY, time_13, time_12));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            () -\u003e new Lesson(MOD_CODE_1, LessonType.LAB, DayOfWeek.TUESDAY, time_12, time_12));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verifyLessonFilter_isWorking() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonFilter filterTuesday \u003d (l) -\u003e l.getDay().equals(DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, manager.filterLessons(filterTuesday).size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonFilter filterMonday \u003d (l) -\u003e l.getDay().equals(DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, manager.filterLessons(filterMonday).size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonFilter filterMonBefore2 \u003d (l) -\u003e l.getDay().equals(DayOfWeek.MONDAY) \u0026\u0026 l.getEndTime().isBefore(time_14);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, manager.filterLessons(filterMonBefore2).size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String testCode \u003d MOD_CODE_1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonFilter filterVariableModCode \u003d (l) -\u003e l.getModuleCode().equalsIgnoreCase(testCode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, manager.filterLessons(filterVariableModCode).size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 98,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Module normalMod1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Module normalMod2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupModObjects() throws ModuleManager.DuplicateModuleException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod1 \u003d new Module(MOD_CODE_1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod1.setTitle(\"Test\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod2 \u003d new Module(MOD_CODE_2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod2.setTitle(\"Test 2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(normalMod1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(normalMod2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getModuleCount_isEquals2() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getModule_isCorrect() throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod1.getTitle(), ModuleManager.getModule(MOD_CODE_1).getTitle());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod1.getModuleCode(), ModuleManager.getModule(MOD_CODE_1).getModuleCode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod2.getTitle(), ModuleManager.getModule(MOD_CODE_2).getTitle());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod2.getModuleCode(), ModuleManager.getModule(MOD_CODE_2).getModuleCode());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void check_moduleNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(ModuleManager.ModuleNotFoundException.class,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            () -\u003e ModuleManager.getModule(\"WHAT1010\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void editMod_getTitle_equalsNewTitle()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throws ModuleManager.DuplicateModuleException, ModuleNotProvidedException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newTitle \u003d \"NEW\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newCode \u003d \"CODE1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module editedMod \u003d new Module(newCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        editedMod.setTitle(newTitle);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.edit(editedMod, MOD_CODE_1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newTitle, ModuleManager.getModule(newCode).getTitle());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void deleteTask_getTaskCount_isEquals0() throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.delete(MOD_CODE_1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.delete(MOD_CODE_2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(ModuleManager.ModuleNotFoundException.class, () -\u003e ModuleManager.getModule(MOD_CODE_1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 67
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Task normalTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Task datedTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupTaskObjects() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalTask \u003d new Task(\"ABC\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime myDate \u003d LocalDateTime.of(2020, 10, 1, 0, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        datedTask \u003d new Task(\"DEF\", myDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(normalTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(datedTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getTaskCount_isEquals2() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TaskManager.getTaskCount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void check_taskNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(TaskManager.TaskNotFoundException.class, () -\u003e TaskManager.getTask(2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void editTask_getName_equalsNewName() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newName1 \u003d \"NEW\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newName2 \u003d \"NAME\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalTask.setName(newName1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        datedTask.setName(newName2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.edit(normalTask, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.edit(datedTask, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newName1, TaskManager.getTask(0).getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newName2, TaskManager.getTask(1).getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void deleteTask_geTaskCount_isEquals0() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.delete(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.delete(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TaskManager.getTaskCount());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(TaskManager.TaskNotFoundException.class, () -\u003e TaskManager.getTask(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkTaskOrder_isCorrect() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime myDate \u003d LocalDateTime.of(2020, 10, 1, 1, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task laterDatedTask \u003d new Task(\"LATER\", myDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(laterDatedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTaskWithDeadlines \u003d TaskManager.summary().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task earlierTask \u003d sortedTaskWithDeadlines.get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task laterTask \u003d sortedTaskWithDeadlines.get(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Assert that laterTask actually has a later deadline than earlierTask"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(laterTask.getDeadline().compareTo(earlierTask.getDeadline()) \u003e 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, sortedTaskWithDeadlines.size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkNoDeadlineList_isCorrect() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTasksWithoutDeadlines \u003d TaskManager.summary().get(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task taskWithoutDeadline \u003d sortedTasksWithoutDeadlines.get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(taskWithoutDeadline.getDeadline() \u003d\u003d null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, sortedTasksWithoutDeadlines.size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkCompletedList_isCorrect() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.done(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.done(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e completedTasks \u003d TaskManager.summary().get(2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(completedTasks.get(0).getStatus());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, completedTasks.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 90
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/TimeTableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class TimeTableTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_3 \u003d \"MA1511\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_12 \u003d LocalTime.of(12,0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_13 \u003d LocalTime.of(13,0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_14 \u003d LocalTime.of(14,0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_15 \u003d LocalTime.of(15,0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_16 \u003d LocalTime.of(16,0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_17 \u003d LocalTime.of(17,0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final int CURR_WEEK \u003d now.get(ChronoField.ALIGNED_WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static void setupUserMods() throws ModuleManager.DuplicateModuleException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.loadNusModSave();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(new Module(MOD_CODE_1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(new Module(MOD_CODE_2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.add(new Module(MOD_CODE_3));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupTimeTable_andLessons() throws LessonInvalidTimeException, TimeTableInitialiseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson1 \u003d new Lesson(MOD_CODE_1, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_13);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson2 \u003d new Lesson(MOD_CODE_2, LessonType.LECTURE, DayOfWeek.MONDAY, time_14, time_15);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson3 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_16, time_17);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.clearTimeTable();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.initialise(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_repeat1() throws LessonInvalidTimeException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d CURR_WEEK; i \u003c CURR_WEEK + 14; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TimeTableManager.isEvenWeek(i)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(1, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (TimeTableManager.isOddWeek(i)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(1, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_repeat2() throws LessonInvalidTimeException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d CURR_WEEK; i \u003c CURR_WEEK + 14; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TimeTableManager.isEvenWeek(i)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(1, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (TimeTableManager.isOddWeek(i)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_repeat3() throws LessonInvalidTimeException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d CURR_WEEK; i \u003c CURR_WEEK + 14; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TimeTableManager.isEvenWeek(i)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (TimeTableManager.isOddWeek(i)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(1, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                assertEquals(0, TimeTableManager.getWeekLessonCount(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_removeLesson_inSingleWeek() throws LessonInvalidTimeException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson2, 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson3, 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(3, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_removeLesson_overMultipleWeeks() throws LessonInvalidTimeException,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson1, 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson2, 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TimeTableManager.addLesson(lesson3, 3);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TimeTableManager.getWeekLessonCount(CURR_WEEK + 1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TimeTableManager.getWeekLessonCount(CURR_WEEK + 2));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0); // remove \u0027repeat 1\u0027 lesson"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK + 1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK + 2));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 0); // remove \u0027repeat 3\u0027 lesson"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TimeTableManager.getWeekLessonCount(CURR_WEEK));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, TimeTableManager.getWeekLessonCount(CURR_WEEK + 1));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TimeTableManager.getWeekLessonCount(CURR_WEEK + 2));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_removeLesson_throwsOutOfBounds() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e TimeTableManager.deleteLesson(DayOfWeek.MONDAY, 1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 135,
      "Aseanseen": 8
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class AddCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_ADD_WITH_DEADLINE \u003d \"-t project work -by 2-2-2020 1800\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_ADD_WITHOUT_DEADLINE \u003d \"-t do quiz\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_TASK_TO_ADD \u003d \"-t do quiz -by \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareAddCommandTest_returnsAddCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(TASK_TO_ADD_WITH_DEADLINE)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof AddCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(TASK_TO_ADD_WITHOUT_DEADLINE)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof AddCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareAddCommandTest_returnsIncorrectCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(BAD_TASK_TO_ADD)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/CapCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.cap.CapCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class CapCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String PROPER_CAP_INPUT \u003d \"45 4.24\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_CAP_INPUT_CAP_IS_STRING \u003d \"20 FIVE\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareCapCommand_returnsCapCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new CapCommandParser().prepareCapCommand(PROPER_CAP_INPUT)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof CapCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareCapCommand_NumberFormatException_isThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e new CapCommandParser().prepareCapCommand(BAD_CAP_INPUT_CAP_IS_STRING));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.delete.DeleteModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_DELETE_TASK_INPUT \u003d \"-t 3\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_DELETE_MODULE_INPUT \u003d \"-m CG2271\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_DELETE_MODULE_INPUT \u003d \"-t 3 or 5 also can\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_DELETE_TASK_INPUT \u003d \"-m CG2271 or CS2101\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getDeleteCommand_returnsDeleteModuleCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DeleteCommandParser.getDeleteCommand(VALID_DELETE_MODULE_INPUT)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof DeleteModuleCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getDeleteCommand_returnsDeleteTaskCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DeleteCommandParser.getDeleteCommand(VALID_DELETE_TASK_INPUT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof DeleteTaskCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getDeleteCommand_returnsInvalidCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DeleteCommandParser.getDeleteCommand(INVALID_DELETE_TASK_INPUT)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DeleteCommandParser.getDeleteCommand(INVALID_DELETE_MODULE_INPUT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 36
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.done.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_DONE_INPUT \u003d \"5\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_DONE_INPUT_STRING \u003d \"Five\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_DONE_INPUT_EXCESS \u003d \"5 or 10\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareDoneCommand_returnsDoneCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(DoneCommandParser.prepareDoneCommand(VALID_DONE_INPUT)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            instanceof DoneCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareDoneCommand_NumberFormatException_isThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e DoneCommandParser.prepareDoneCommand(INVALID_DONE_INPUT_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareDoneCommand_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e DoneCommandParser.prepareDoneCommand(INVALID_DONE_INPUT_EXCESS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class EditCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_EDIT \u003d \"3 read a book\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_TASK_TO_EDIT \u003d \"read a book\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String MODULE_TO_EDIT \u003d \"cs2113 cs3224\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditModuleCommandTest_returnsEditModuleCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new EditCommandParser().prepareEditModuleCommand(MODULE_TO_EDIT)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof EditModuleCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditTaskCommandTest_returnsEditTaskCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new EditCommandParser().prepareEditTaskCommand(TASK_TO_EDIT)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof EditTaskCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditTaskCommandTest_NumberFormatException_isThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e new EditCommandParser().prepareEditTaskCommand(BAD_TASK_TO_EDIT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/GradeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class GradeCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_GRADE_INPUT \u003d \"CG2271 4 A+\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_GRADE_INPUT_STRING_SWAP \u003d \"CG2271 B+ 4\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_GRADE_INPUT_STRING \u003d \"CG2271 four B+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_GRADE_INPUT_EXCESS \u003d \"CG2271 4 A+ or B+ anything tbh\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareGradeCommand_returnsGradeCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(GradeCommandParser.prepareGradeCommand(VALID_GRADE_INPUT)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            instanceof GradeCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareGradeCommand_NumberFormatException_isThrown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e GradeCommandParser.prepareGradeCommand(INVALID_GRADE_INPUT_STRING_SWAP));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e GradeCommandParser.prepareGradeCommand(INVALID_GRADE_INPUT_STRING));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareGradeCommand_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e GradeCommandParser.prepareGradeCommand(INVALID_GRADE_INPUT_EXCESS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 35
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/HelpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.grade.GradeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.help.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class HelpCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_HELP_INPUT_GENERIC \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_HELP_INPUT_SPECIFIC \u003d \"edit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareHelpCommand_returnHelpCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(HelpCommandParser.prepareHelpCommand(VALID_HELP_INPUT_GENERIC)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(HelpCommandParser.prepareHelpCommand(VALID_HELP_INPUT_SPECIFIC)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.help.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.list.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_LIST_TASK_INPUT \u003d \"-t\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String VALID_LIST_MODULE_INPUT \u003d \"-m\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_LIST_PREFIX \u003d \"-by\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String INVALID_LIST_TASK_INPUT_EXCESS \u003d \"-t now\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getListCommand_returnListCommand() throws InvalidMatchException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(ListCommandParser.getListCommand(VALID_LIST_MODULE_INPUT)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof ListCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(ListCommandParser.getListCommand(VALID_LIST_TASK_INPUT)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof ListCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getListCommand_InvalidMatcherException_isThrown() throws InvalidMatchException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e ListCommandParser.getListCommand(INVALID_LIST_TASK_INPUT_EXCESS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void getListCommand_InvalidParameterException_isThrown() throws InvalidMatchException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e ListCommandParser.getListCommand(INVALID_LIST_PREFIX));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final Pattern TEST_FORMAT \u003d Pattern.compile(\"(?\u003cfirstArg\u003e\\\\S+)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void isEmptyParse_emptyString_returnsTrue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().isEmptyParse(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().isEmptyParse(\"\", \"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().isEmptyParse(\"\", \"\", \"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void isEmptyParse_nonemptyString_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertFalse(new Parser().isEmptyParse(\" \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertFalse(new Parser().isEmptyParse(\" \", \"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertFalse(new Parser().isEmptyParse(\"\", \"b\", \"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void matcherMatches_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String userInput \u003d \"this mod is time consuming\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d TEST_FORMAT.matcher(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e Parser.matcherMatches(matcher,userInput,\"\",\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 23,
      "wangqinNick": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/TimeTableCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TimeTableManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.InvalidMatchException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.exception.TimeTableInitialiseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.parser.TimeTableCommandParser.ADD_FORMAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.parser.TimeTableCommandParser.DELETE_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LESSON_NOT_FOUND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class TimeTableCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String REPEAT_FREQ \u003d \"1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String DELETE_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String DELETE_INDEX_2 \u003d \"5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_TIMETABLE_COMMAND_FORMAT \u003d \"-no\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CS111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_START_TIME_1 \u003d \"2pm\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_START_TIME_2 \u003d \"10\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_START_TIME_3 \u003d \"1400\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_END_TIME_1 \u003d \"1500\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String DAY_OF_WEEK_1 \u003d \"mon\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String DAY_OF_WEEK_2 \u003d \"MONDAY\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String LESSON_TYPE \u003d \"LECTURE\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_MOD_TIMETABLE_ADD_COMMAND_FORMAT \u003d MOD_CODE_2 + \" \" + DAY_OF_WEEK_1 + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + LESSON_START_TIME_3 + \" \" + LESSON_END_TIME_1 + \" \" + LESSON_TYPE + \" \" + REPEAT_FREQ;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_LESSON_TIME_1_TIMETABLE_ADD_COMMAND_FORMAT \u003d MOD_CODE_1 + \" \" + DAY_OF_WEEK_1 + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + LESSON_START_TIME_1 + \" \" + LESSON_END_TIME_1 + \" \" + LESSON_TYPE + \" \" + REPEAT_FREQ;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_LESSON_TIME_2_TIMETABLE_ADD_COMMAND_FORMAT \u003d MOD_CODE_1 + \" \" + DAY_OF_WEEK_2 + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + LESSON_START_TIME_2 + \" \" + LESSON_END_TIME_1 + \" \" + LESSON_TYPE + \" \" + REPEAT_FREQ;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_DAY_TIMETABLE_ADD_COMMAND_FORMAT \u003d ADD_FORMAT + \" \" + MOD_CODE_1 + \" \" + DAY_OF_WEEK_1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \" \" + LESSON_START_TIME_3 + \" \" + LESSON_END_TIME_1 + \" \" + LESSON_TYPE + \" \" + REPEAT_FREQ;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_DAY_TIMETABLE_DELETE_COMMAND_FORMAT \u003d DELETE_FORMAT + \" \" + DAY_OF_WEEK_1 + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DELETE_INDEX_1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String WRONG_INDEX_TIMETABLE_DELETE_COMMAND_FORMAT \u003d DELETE_FORMAT + \" \" + DAY_OF_WEEK_2 + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DELETE_INDEX_2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static void setupUserMods() throws ModuleManager.DuplicateModuleException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.loadNusModSave();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(new Module(MOD_CODE_1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupTimeTable() throws TimeTableInitialiseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.clearTimeTable();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TimeTableManager.initialise(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void badTimeTableCommandFlag_IncorrectCommand_isReturned() throws InvalidMatchException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d TimeTableCommandParser.parseTimeTableCommand(WRONG_TIMETABLE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_Module_TimeTableAddCommand_ModuleNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(ModuleManager.ModuleNotFoundException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e TimeTableCommandParser.parseTimeTableAddCommand(WRONG_MOD_TIMETABLE_ADD_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_Lesson_Time_1_TimeTableAddCommand_InvalidMatchException_isThrown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(InvalidMatchException.class,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e TimeTableCommandParser.parseTimeTableAddCommand(WRONG_LESSON_TIME_1_TIMETABLE_ADD_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_Lesson_Time_2_TimeTableAddCommand_DateTimeParseException_isThrown() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e TimeTableCommandParser.parseTimeTableAddCommand(WRONG_LESSON_TIME_2_TIMETABLE_ADD_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_DateTime_TimeTableAddCommand_IllegalArgumentException_isThrown() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e TimeTableCommandParser.parseTimeTableCommand(WRONG_DAY_TIMETABLE_ADD_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_DateTime_TimeTableDeleteCommand_IllegalArgumentException_isThrown() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e TimeTableCommandParser.parseTimeTableCommand(WRONG_DAY_TIMETABLE_DELETE_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void bad_Index_TimeTableDeleteCommand_Message_Lesson_Not_Found_isShown() throws InvalidMatchException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command \u003d TimeTableCommandParser.parseTimeTableCommand(WRONG_INDEX_TIMETABLE_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(MESSAGE_LESSON_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 108
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 2
    }
  }
]
