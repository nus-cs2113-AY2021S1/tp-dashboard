[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "## Workflow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The workflow will go like this:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Synchronise your local repo with the team repo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Make a separate branch for your work session."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Commit and push your work to the corresponding branch on your remote repo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Make a pull request to merge your remote repo\u0027s work to the team repo and resolve merge conflicts."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Setting up for each work session"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "*  `git fetch upstream`, `git rebase upstream/master`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * The command means to fetch from the team repo (upstream) and then rebase master."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Your local master should be synchronised with the upstream master now."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* `git switch -c \u003cbranchname\u003e`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Make a new branch for your local work (to preserve master\u0027s functionality)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * `git checkout -b \u003cbranchname\u003e` does the same thing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Pushing and merging your work after each work session"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* First, `git add .` if you want to stage all files or `git add \u003cpath/to/file\u003e` if you want to add specific files."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* `git commit -m \u0027commit message here\u0027` followed by `git push origin \u003cbranchname\u003e`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Git will create the corresponding branch on your remote repo and push your commits there."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Merge your work into the team repo\u0027s master with a pull request over Github\u0027s interface."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Do not confirm merge! Let the rest of the team view the pull request first before we confirm that it can be merged."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Any merge conflicts should be resolved AFTER we okay the merge."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * After we all okay-ed the merge, the merge can continue and your work is complete."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Rolling back"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* First off, you can bookmark [this website](https://ohshitgit.com/) because you will need it at some point."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Undoing a local commit: Do `git revert HEAD`. `git revert` works by bringing your previous commit in as a new commit to undo what you did so far."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * `HEAD` refers to your current commit (which is the one you want to undo)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * If you want to revert back to __BEFORE__ a specific commit, use `git log` and find the commit hash (a long string of characters but you only need the first 6 or so) and do `git revert \u003chash\u003e`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Undoing a push to remote: Do `git push -f origin \u003chash\u003e:\u003cbranch\u003e`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * This forces a push of the `\u003chash\u003e` commit, which is the one you want to revert __to__, to the specified remote branch in `\u003cbranch\u003e`. Use `git log` to find the hash."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Alternatively, you can undo the local commit first (as in point 1), then `git push -f origin master:\u003cbranch\u003e` instead of finding a specific commit."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Hard reset:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * First, try doing `git fetch` then `git reset --hard origin/\u003cbranch\u003e`. This gets your remote\u0027s latest commits (which shouldn\u0027t include your mistakes) and then resets your working directory to match the latest commit on your remote. __ALL WORK ON LOCAL THAT IS NOT ALSO ON REMOTE IS LOST!__"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "   * If that doesn\u0027t work, delete everything in your repo except the .git folder, download from the Github repo page (green button on top right of file window), put everything in the same folder, then `git add *`, `git commit`."
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 15,
      "f0fz": 25,
      "-": 64
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.12\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "java {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 6,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Jian Hui Tobias | [Github](https://github.com/tobiasceg) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![]() | Sim Jun You | [Github](https://github.com/f0fz) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Amalina | [Github](https://github.com/amalinasani) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Sean Lim | [Github](https://github.com/Aseanseen) | [Portfolio](docs/team/seanlim.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "![](https://www.google.com/url?sa\u003di\u0026url\u003dhttps%3A%2F%2Fwww.thoughtco.com%2Ffun-facts-about-ducks-4043231\u0026psig\u003dAOvVaw3goHQ59ZTgbn9-TVUa8Fx8\u0026ust\u003d1601603208625000\u0026source\u003dimages\u0026cd\u003dvfe\u0026ved\u003d0CAIQjRxqFwoTCMCr_oSjkuwCFQAAAAAdAAAAABAD?text\u003dPhoto) | Don Roe | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 1,
      "f0fz": 1,
      "wangqinNick": 1,
      "amalinasani": 1,
      "-": 5,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param args arguments passed to the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws FileNotFoundException exception is thrown if the file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        new Duke().run(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Sets up the storage, loads up the data from the storage file and prints the welcome message.  */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void start(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.ui \u003d new TextUi(in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // todo add code to the following functions in InputOutputManager, TextUi"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.start();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Runs the program until termination.  */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void run(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        start(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.save();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Reads the user command and executes it, until the user issues the exit command.  */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            String userInput \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // todo add code to the following function in TextUi"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            ui.showResultToUser(result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // todo add Exit to the Parser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult getResponse(String userInput) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return Executor.executeCommand(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 10,
      "-": 12,
      "Aseanseen": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//import seedu.duke.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DukeLogger {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//    private static Logger logger \u003d Logger.getLogger(AddModuleCommand.class.getName());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//    public static Logger getLogger() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//        return logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7,
      "Aseanseen": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/Executor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param userInput The input from the user to be parsed and executed as a command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static CommandResult executeCommand(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return command.execute();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return command instanceof ExitCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 2,
      "Aseanseen": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String feedbackToUser; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PromptType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Indicates the type of user commands and corresponding command results."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * WARNING: the command results a waring message"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * INFORMATIVE: the command results a help message"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * EDIT: the command is a EDIT command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * NONE: the command is a basic command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public enum PromptType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    WARNING,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    INFORMATIVE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    EDIT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 14,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager.DuplicateModuleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_ADD_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_ADD_TASK_SUCCESS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Parser.TypeOfEntries typeOfEntry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003copt\u003e \u003cargs\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddCommand and tests the format of the deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param typeOfEntry Type of entry that the user wants to add."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the entry."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param deadline Deadline of the task to be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException If the deadline does not follow the DateTime format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddCommand(Parser.TypeOfEntries typeOfEntry, String desc, String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (typeOfEntry.equals(Parser.TypeOfEntries.TASK) \u0026\u0026 (deadline !\u003d null)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            dateTimeOfDeadline \u003d testDeadline(deadline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Test if the deadline of the task follows the DateTimeFormatter."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param deadline Details of the deadline."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException if the deadline does not follow format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime testDeadline(String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        dateTimeOfDeadline \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return dateTimeOfDeadline;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Add the Task with deadline to the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the task to be added."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param dateTimeOfDeadline LocalDateTime of the deadline."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void addTask(String desc, LocalDateTime dateTimeOfDeadline) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Option for user to input a deadline"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (dateTimeOfDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            newTask \u003d new Task(desc);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            newTask \u003d new Task(desc, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Add the Module to the module list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the module to be added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DuplicateModuleException if the module is already in the list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void addModule(String desc) throws DuplicateModuleException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Module newModule \u003d new Module(desc);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(newModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Adds the task to their respective lists."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the add or messages from exceptions."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            switch (typeOfEntry) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case TASK:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                addTask(desc, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                message \u003d MESSAGE_ADD_TASK_SUCCESS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case MODULE:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                addModule(desc);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                message \u003d MESSAGE_ADD_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                message \u003d MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4,
      "Aseanseen": 107
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Parser.TypeOfEntries typeOfEntry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003copt\u003e \u003cargs\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructor to delete task from task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param typeOfEntry Type of entry that the user wants to delete."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId ID of the task to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteCommand(Parser.TypeOfEntries typeOfEntry, int taskId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructor to delete module from module list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param typeOfEntry Type of entry that the user wants to delete."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param moduleCode Module code to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteCommand(Parser.TypeOfEntries typeOfEntry, String moduleCode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId ID of the task to be deleted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException If the task is not found in the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void deleteTask(int taskId) throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.delete(taskId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the module from the module list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param moduleCode Module code to be deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException If the module is not found in the module list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void deleteModule(String moduleCode) throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.delete(moduleCode);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the task from their respective lists."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the delete."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            switch (typeOfEntry) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case TASK:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                deleteTask(taskId);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                message \u003d MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            case MODULE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                deleteModule(moduleCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                message \u003d MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                message \u003d MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 5,
      "Aseanseen": 88
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/done/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DONE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003copt\u003e \u003cargs\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Marks the task from the task list as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId id of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException If the task is not found in the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private void doneTask(int taskId) throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.done(taskId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Marks the task from the task list as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing acknowledgement of marking task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            doneTask(taskId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message \u003d MESSAGE_DONE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 41,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String FORMAT \u003d Parser.COMMAND_WORD_EDIT + \"-m\" + \" \u003cmodule code\u003e \u003cnew module code\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"(?\u003cidentifier\u003e(edit)) -m(?\u003cmoduleCode\u003e(?:\\\\s+\\\\w\\\\S*))(?\u003cmoduleCode1\u003e(?:\\\\s+\\\\w\\\\S*))\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String oldModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String newModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the command to edit a module."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code of the module to be edited"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The new module code for the module if any"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditModuleCommand(String oldModuleCode, String newModuleCode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.oldModuleCode \u003d oldModuleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.newModuleCode \u003d newModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Edits the module."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleManager.DuplicateModuleException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the new module code is duplicated"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the new module code is not a recognised NUS module"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected void edit(Module toEdit) throws ModuleManager.DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        toEdit.setCode(newModuleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.edit(toEdit, oldModuleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the \u003cb\u003eEdit Module Command\u003c/b\u003e to edit a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * from the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see ModuleManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module toEdit \u003d ModuleManager.getModule(oldModuleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            edit(toEdit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }  catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 2,
      "wangqinNick": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class EditTaskCommand extends EditCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String newTaskDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d Parser.COMMAND_WORD_EDIT + \"-t\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String FORMAT \u003d Parser.COMMAND_WORD_EDIT + \"-t\" + \" \u003ctask ID\u003e \u003cnew task description\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the command to edit a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param taskID"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The ID of the task to be edited"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditTaskCommand(int taskID, String newTaskDescription) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.newTaskDescription \u003d newTaskDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected void edit() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.getTaskList().get(taskID).setName(newTaskDescription);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            edit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_TASK_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(Message.MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 15,
      "wangqinNick": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/filter/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class FilterCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/help/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints help message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing list of available commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String message \u003d TextUi.getHelpMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/list/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LIST_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_LIST_PRINTED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Parser.TypeOfEntries typeOfEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003copt\u003e \u003cargs\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public ListCommand(Parser.TypeOfEntries typeOfEntry) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Lists the tasks/modules from their respective lists."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing list of tasks/modules"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        switch (typeOfEntry) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d TaskManager.list();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d ModuleManager.list();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (output \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_PRINTED + output);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7,
      "amalinasani": 31,
      "Aseanseen": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/misc/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class UndoCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Constant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Constant {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String FILE_EXT          \u003d \".json\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String TASK_SAVE_FILE_NAME    \u003d \"task_data\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MOD_SAVE_FILE_NAME     \u003d \"mod_data\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String NUSMOD_SAVE_FILE_NAME  \u003d \"nus_mod_data\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 5,
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Module extends Directory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module(String code) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setCode(String code) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isSameModule(Module checkModule) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String moduleCode \u003d checkModule.getCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String moduleTitle \u003d checkModule.getTitle();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return this.code.equalsIgnoreCase(moduleCode) \u0026\u0026 this.title.equalsIgnoreCase(moduleTitle);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return getCode() + \": \" + getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//public class Module extends Directory {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    public Directory getParent() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 8,
      "wangqinNick": 57,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/ModuleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static HashMap\u003cString, Module\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // modulesMap is the main module list. Maps module code to module object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private static final HashMap\u003cString, Module\u003e nusModsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // nusModsMap is the module list containing the Module objects created from NUSMods\u0027 JSON file of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  Finds a module with the specified module code in the Module List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Module getModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : modulesMap.values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (module.getCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a module in the Module List by replacing the old module object with a new one."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new module that replaces the old one."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to be edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If there is no module with the new module code offered by NUS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws DuplicateModuleException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If there are duplicate modules with the same module code as the new module code in the Module List"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void edit(Module newModule, String oldModuleCode)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throws ModuleNotProvidedException, DuplicateModuleException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //modulesMap.get(module.getCode()).setTitle(moduleDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module oldModule \u003d modulesMap.get(oldModuleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!modulesMap.containsKey(oldModuleCode)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (oldModule.isSameModule(newModule)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.remove(oldModuleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.put(newModule.getCode(), newModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks for duplicates of the same module code in the Module List."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code to check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static boolean contains(String moduleCode) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachCode : modulesMap.keySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachCode.equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a module to the Module List."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module object to add to the module list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void add(Module newModule) throws DuplicateModuleException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (contains(newModule.getCode())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.put(newModule.getCode(), newModule);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes a module from the Module List using the module code."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to remove from the module list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!contains(moduleCode)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.remove(moduleCode);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a module to the NUSMods Module List."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module object to add to the module list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void addNusMod(Module newModule) throws DuplicateModuleException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (contains(newModule.getCode())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        nusModsMap.put(newModule.getCode(), newModule);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Finds a module with the specified module code in the NUSMods Module List."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Module getNusModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : nusModsMap.values()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (module.getCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String[] getModCodeList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] outputArray \u003d modulesMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return outputArray;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String[] getNusModCodeList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] outputArray \u003d nusModsMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return outputArray;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * List modules in the module map."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The formatted module list from TextUi or null if list is empty"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String list() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (modulesMap.size() \u003e 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return TextUi.getIndexModuleList(modulesMap);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded module map into ModuleManager\u0027s own module map."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedModulesMap the loaded module map from file"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void load(HashMap\u003cString, Module\u003e loadedModulesMap) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap \u003d loadedModulesMap;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears all modules in modulesMap."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clearModules() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap \u003d new HashMap\u003cString, Module\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static class ModuleNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static class DuplicateModuleException extends DuplicateDataException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 105,
      "wangqinNick": 63,
      "amalinasani": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalDateTime deadline \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task(String name, LocalDateTime dateTimeOfDeadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.deadline \u003d dateTimeOfDeadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void setDeadline(LocalDateTime deadline) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public void setStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return Message.ICON_DONE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return Message.ICON_NOT_DONE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return getName() + \" [\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return getName() + \" by \" + getDeadline().toString() + \" [\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//public class Task extends Directory {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    public Directory getParent() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 52,
      "wangqinNick": 1,
      "amalinasani": 19,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/TaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e(); // Main task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Finds a task with the specified task index (id) in the Task List."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task to be found"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The found task with the specified task index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the task is not found in the Task List"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Task getTask(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.get(taskId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a task in the Task List."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param editedTask"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The edited task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task in the Task List."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void edit(Task editedTask, int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        tasksList.set(taskId, editedTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a task to the Task List."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newTask"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The task object to add to the task list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void add(Task newTask) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.add(newTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes a task from the Task List using the task index (id)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task to be deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void delete(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.remove(taskId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static void done(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        task \u003d getTask(taskId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        task.setStatus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Gets Task List."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return tasksList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return tasksList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints all tasks in task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The formatted task list from TextUi or null if list is empty"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String list() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (getTaskList().size() \u003e 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return TextUi.getIndexTaskList(tasksList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded task list into TaskManager\u0027s own task list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedTasksList the loaded task list from file"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void load(ArrayList\u003cTask\u003e loadedTasksList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList \u003d loadedTasksList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns the number of tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the number of tasks"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getTaskCount() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears the current task list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clear() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static class TaskNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 86,
      "wangqinNick": 9,
      "amalinasani": 27,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/Decoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all outputs from files, and the conversion from String in file to Object in memory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Throws exceptions to InputOutputManager and handles none."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Wang Qin"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Decoder {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e loadModules(String dataFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TextUi.outputToUser(dataFileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // FastJSON doesn\u0027t write the square brackets for some reason, so we add it in here"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so that parseArray works as it should"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr \u003d \"[\" + jsonStr + \"]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (moduleList !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (Module eachModule : moduleList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                modulesMap.put(eachModule.getCode(), eachModule);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Parses the specified save file to return an ArrayList of Task objects."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to read from"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList tasksList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the file does not exist"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cTask\u003e loadTasks(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // FastJSON doesn\u0027t write the square brackets for some reason, so we add it in here"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so that parseArray works as it should"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr \u003d \"[\" + jsonStr + \"]\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cTask\u003e tasksList \u003d JSON.parseArray(jsonStr, Task.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return new ArrayList\u003c\u003e(tasksList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        byte[] fileContent \u003d new byte[(int) fileLength];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            in.read(fileContent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            // System.out.println(\"Retrieving the module list from nusmods...\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // return requestNusModsJsonString(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Uses the NUSMods API to get a JSON string with the information of all available mods."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The endpoint for the NUSMods API."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The JSON string with information of all currently available mods in NUS."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static String requestNusModsJsonString(String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int httpResult; // the status from the server response"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            URL url \u003d new URL(filePath); // create URL"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            URLConnection urlConn \u003d url.openConnection(); // try to connect and get the status code"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            urlConn.connect();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            HttpURLConnection httpConn \u003d (HttpURLConnection) urlConn;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            httpResult \u003d httpConn.getResponseCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (httpResult !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                System.out.print(\"cannot connect!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                int fileSize \u003d urlConn.getContentLength(); // get the length of the data"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                InputStreamReader isReader \u003d new InputStreamReader(urlConn.getInputStream(), \"UTF-8\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(isReader);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                String line; // to save the content of every line"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                line \u003d reader.readLine(); // read the first line"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                while (line !\u003d null) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    buffer.append(line); // append to the buffer"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    buffer.append(\" \"); // add new line"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    line \u003d reader.readLine(); // read the next line"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                //System.out.print(buffer.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                content \u003d buffer.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 60,
      "wangqinNick": 3,
      "Aseanseen": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/Encoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all inputs to files, and the conversion from Object in memory to String in file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Throws exceptions to InputOutputManager and handles none."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Encoder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all tasks to file path/name specified."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveTasks(String dataFileName) throws IOException, TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int taskCount \u003d TaskManager.getTaskCount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task currentTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentTask \u003d TaskManager.getTask(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentTask));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all modules to file path/name specified."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveModules(String dataFileName) throws IOException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module currentModule;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachModCode : ModuleManager.getModCodeList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentModule \u003d ModuleManager.getModule(eachModCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentModule));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all NUS modules to file path/name specified."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveNusModules(String dataFileName) throws IOException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module currentModule;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachModCode : ModuleManager.getNusModCodeList()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentModule \u003d ModuleManager.getNusModule(eachModCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentModule));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prepares the specified save file (and dir) by creating it or deleting then creating it (if the file exists)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The File object to prepare the actual file for"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If createNewFile does not work as expected"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void prepareSaveFile(File saveFile) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (saveFile.exists()) { // overwrite by deleting first"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveFile.delete();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        saveFile.createNewFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Appends the specified string to the specified File object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The File object to write to"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param textToAdd"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string to write"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If FileWriter cannot write or close the file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void writeToFile(File saveFile, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        FileWriter fw \u003d new FileWriter(saveFile, true); // true to append data instead of overwrite"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.write(textToAdd + \"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 94,
      "Aseanseen": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/InputOutputManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.common.Constant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all inputs and outputs (to and from files)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Encoder and Decoder are only used by InputOutputManager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * InputOutputManager also handles exceptions thrown by Encoder and Decoder. No exceptions are thrown from here."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class InputOutputManager {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static ArrayList\u003cTask\u003e loadedTasksList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static HashMap\u003cString, Module\u003e loadedModulesMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static HashMap\u003cString, Module\u003e loadedNusModulesMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static String root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static java.nio.file.Path dirPath \u003d java.nio.file.Paths.get(root, \"data\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String userModuleFileName \u003d Constant.MOD_SAVE_FILE_NAME + Constant.FILE_EXT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String userTaskFileName \u003d Constant.TASK_SAVE_FILE_NAME + Constant.FILE_EXT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String nusModuleFileName \u003d Constant.NUSMOD_SAVE_FILE_NAME + Constant.FILE_EXT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path userModuleFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), userModuleFileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path userTaskFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), userTaskFileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path nusModuleFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), nusModuleFileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Creates the save directory if it has not been created."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the user\u0027s module and task saves into memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void start() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File saveFolder \u003d dirPath.toFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!saveFolder.exists()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveFolder.mkdir();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            loadUserSaves();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads user saves (modules, tasks) from the given files."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadUserSaves() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.load(Decoder.loadModules(userModuleFile.toString()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            TaskManager.load(Decoder.loadTasks(userTaskFile.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads NUS Modules from the given file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadNusModSave() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        loadedNusModulesMap \u003d Decoder.loadModules(nusModuleFileName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Updates the user\u0027s save files. Does not save NUS Modules."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void save() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Encoder.saveModules(userModuleFile.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Encoder.saveTasks(userTaskFile.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // print module not found"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // print task not found"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Updates the user\u0027s NUS Modules save file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveNusMods() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Encoder.saveNusModules(nusModuleFile.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // print module not found"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 76,
      "wangqinNick": 11,
      "Aseanseen": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/Directory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Directory parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the Directory without a parent."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.parent \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the Directory that has a parent."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param parent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory(Directory parent) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the parent of the class in the Directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract Directory getParent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the corresponding level of the Directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The level of the Directory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract DirectoryLevel getLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/DirectoryLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public enum DirectoryLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    ROOT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    MODULE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    TAG {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        public DirectoryLevel next() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel next() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return values()[ordinal() + 1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/Root.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Root extends Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Root() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return DirectoryLevel.ROOT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DataNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class DataNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DuplicateDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/ModuleNotProvidedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleNotProvidedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.done.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.edit.EditModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.help.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.list.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EMPTY_INPUT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_ADD_MODULE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_ADD_TASK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_EDIT_MODULE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public enum TypeOfEntries {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TASK, MODULE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)\" + \"((?\u003cdigit\u003e\\\\s+\\\\d+)?)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    + \"((?\u003ccommandFlag\u003e.*-\\\\S+)?)\"  + \"((?\u003cparameters\u003e.*)?)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String COMMAND_WORD_GROUP \u003d \"commandWord\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String PARAMETERS_GROUP \u003d \"parameters\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String NUMBER_GROUP \u003d \"digit\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String TASK_NAME_GROUP \u003d \"taskName\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String MODULE_GROUP \u003d \"moduleCode\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String DATE_IDENTIFIER_GROUP \u003d \"by\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String DUE_DATE \u003d \"dueDate\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String NONE \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String INVALID_GROUP \u003d \"invalid\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String BY_PREFIX \u003d \"-by\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final Pattern TASK_DEADLINE_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ctaskName\u003e\\\\S+)((?\u003cby\u003e.*\" + BY_PREFIX + \")?)((?\u003cdueDate\u003e.*)?)\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //(?\u003cidentifier\u003e(?:\\s+\\w\\S*)*)+ -m+ (?\u003cmoduleCode\u003e(?:\\\\s+\" + \"(?:\\\\s+\\\\w\\\\S*)+)?)(?\u003cinvalid\u003e.*)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parses the input string read by the \u003cb\u003eUI\u003c/b\u003e and converts the string into a specific \u003cb\u003eCommand\u003c/b\u003e, which is"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * to be executed by the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The user input has to start with a certain keyword (i.e. \u003ci\u003ecommand word\u003c/i\u003e), otherwise an"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * \u003ci\u003eInvalid Command Exception\u003c/i\u003e will be thrown."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param input The user input read by the \u003cb\u003eUI\u003c/b\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003ecorresponding\u003c/b\u003e command to be executed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public Command parseCommand(String input) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(MESSAGE_EMPTY_INPUT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            // Checks if the matched groups are null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String commandWord \u003d isMatcherNull(matcher.group(COMMAND_WORD_GROUP))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(COMMAND_WORD_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String digit \u003d isMatcherNull(matcher.group(NUMBER_GROUP))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(NUMBER_GROUP).trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String commandFlag \u003d isMatcherNull(matcher.group(COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String parameters \u003d isMatcherNull(matcher.group(PARAMETERS_GROUP))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(PARAMETERS_GROUP).trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (commandWord.equals(COMMAND_WORD_BYE)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            } else if (commandWord.equals(COMMAND_WORD_HELP)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                switch (commandWord) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case COMMAND_WORD_EDIT:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return getEditCommand(commandFlag, parameters);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case COMMAND_WORD_ADD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return getAddCommand(commandFlag, parameters);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case COMMAND_WORD_DELETE:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return getDeleteCommand(commandFlag, parameters);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case COMMAND_WORD_DONE:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return new DoneCommand(Integer.parseInt(digit));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case COMMAND_WORD_LIST:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return getListCommand(commandFlag); //command flag is the -t or -m"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return new HelpCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidParameterException | NumberFormatException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private boolean isMatcherNull(String matcherTest) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return (matcherTest \u003d\u003d null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private Command getListCommand(String commandFlag) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new ListCommand(TypeOfEntries.MODULE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new ListCommand(TypeOfEntries.TASK);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private DeleteCommand getDeleteCommand(String commandFlag, String parameters) throws NumberFormatException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new DeleteCommand(TypeOfEntries.MODULE, parameters); //parameter is module code"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new DeleteCommand(TypeOfEntries.TASK, Integer.parseInt(parameters));//parameters is the index"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private Command getAddCommand(String commandFlag, String parameters) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareAddCommand(parameters, TypeOfEntries.MODULE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareAddCommand(parameters, TypeOfEntries.TASK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private Command getEditCommand(String commandFlag, String parameters) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareEditModuleCommand(parameters);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareEditTaskCommand(parameters);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Prepares the command to edit a module."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The command to edit a module"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected Command prepareEditModuleCommand(String parameters) throws InvalidParameterException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d TASK_DEADLINE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    EditModuleCommand.FORMAT));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String oldModuleCode \u003d matcher.group(TASK_NAME_GROUP).trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newModuleCode \u003d matcher.group(DUE_DATE).trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new EditModuleCommand(oldModuleCode, newModuleCode);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected Command prepareEditTaskCommand(String parameters) throws InvalidParameterException,NumberFormatException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d TASK_DEADLINE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    EditModuleCommand.FORMAT));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String stringTaskIndex \u003d matcher.group(TASK_NAME_GROUP).trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(stringTaskIndex) - 1;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newTaskDescription \u003d matcher.group(DUE_DATE).trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (isNothingToEdit(newTaskDescription)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new EditTaskCommand(taskIndex,newTaskDescription);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected Command prepareAddCommand(String parameters,TypeOfEntries typeOfTask) throws InvalidParameterException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d TASK_DEADLINE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, AddCommand.FORMAT));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String addedTask \u003d matcher.group(TASK_NAME_GROUP).trim();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String taskDeadline \u003d null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // Checks for presence of -by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String dashBy \u003d matcher.group(DATE_IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (dashBy !\u003d null) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            taskDeadline \u003d matcher.group(DUE_DATE).trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (taskDeadline.isEmpty()) { // -by is present but empty deadline"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                        MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, AddCommand.FORMAT));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // without -by means its fully a task"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (dashBy \u003d\u003d null) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            addedTask \u003d matcher.group(0).trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // no task input by user"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (isNothingToEdit(addedTask)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return (typeOfTask \u003d\u003d TypeOfEntries.MODULE)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? new IncorrectCommand(MESSAGE_NO_ADD_MODULE)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    : new IncorrectCommand(MESSAGE_NO_ADD_TASK);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new AddCommand(typeOfTask, addedTask, taskDeadline);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks if there is anything to edit from the input given by the user."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param attributes"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The attributes to be edited"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there is nothing to edit, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected boolean isNothingToEdit(String... attributes) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (String attribute : attributes) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (!attribute.isEmpty()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 171,
      "f0fz": 2,
      "wangqinNick": 81,
      "Aseanseen": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/system/SystemSetting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class SystemSetting {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/TextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static Scanner in;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //Offset required to convert between 1-indexing and 0-indexing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final int DISPLAY_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String DIVIDER_LINE \u003d \"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //%1$ catches the furthest left arg, %2$ catches the 2nd arg"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String MESSAGE_INDEX_LIST_FORMAT \u003d \"\\n%1$d. %2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public TextUi() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public TextUi(Scanner in) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.in \u003d in;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void showGoodByeMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                Message.MESSAGE_GOODBYE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void showWelcomeMessage()     {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                Message.MESSAGE_WELCOME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void outputToUser(String... output) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (String o : output) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            System.out.println(o);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Formats an Arraylist of type Task with their Index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param taskList the list to be formatted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAY_INDEX_OFFSET;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            stringFormat.append(getIndexListFormat(displayIndex, t.toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return stringFormat.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Formats the HashMap to string with their index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param modulesMap the HashMap to be formatted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexModuleList(HashMap\u003cString, Module\u003e modulesMap) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAY_INDEX_OFFSET;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        for (Module module : modulesMap.values()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            stringFormat.append(getIndexListFormat(displayIndex, module.toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return stringFormat.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  Formats a string with its index in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param listIndex task/module index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param listItem task/module name or description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexListFormat(int listIndex, String listItem) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return String.format(MESSAGE_INDEX_LIST_FORMAT, listIndex, listItem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Trims spacing and checks if input is empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param rawInputLine full input from user"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return true if inputline is a legit command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static boolean isEmptyCheck(String rawInputLine) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return rawInputLine.trim().isEmpty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * gets the User\u0027s input command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return the trimmed command input"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getUserCommand() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        System.out.println(\"Enter Command: \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        while (isEmptyCheck(userInput)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Shows the result of a command execution to the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param result the relevant message shown to user"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                result.feedbackToUser,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * gets Help Message."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the list of available commands"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String getHelpMessage() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return MESSAGE_HELP;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 104,
      "wangqinNick": 4,
      "amalinasani": 22,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/DummyModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/ExceptionMessage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MISSING_DIRECTORY_NAME \u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Please include the name of the directory you want to move to.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Alternatively, enter .. to move to the parent directory instead.\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Sorry, the module is not found.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_PROVIDED \u003d \"Sorry, the module is not provided by NUS currently.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Sorry, the module already exists.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_CATEGORY_NOT_FOUND \u003d \"Sorry, the category is not found.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"Sorry, the category already exists.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"Sorry, the task is not found.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Sorry, the task already exists.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TASK_FILE_NOT_FOUND \u003d \"Sorry, the file is not found.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK_FILE \u003d \"Sorry, the file already exists.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_IMPLICIT_FILE_EXCEED_LIMIT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the name of the file you are adding exceeds 30 characters.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Please enter a new file name.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"Sorry, some parameters seem to be missing.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIORITY \u003d \"Alert! Priority should be a number between 0 and 20.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Sorry, the deadline you entered is not in a recognised datetime format.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"Please make sure to follow the datetime format as such:\\n\\t\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DateTime.FORMAT + \"\\nExample: 06/06/2020 12:00am\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Sorry, the date you entered is not in a recognised date format.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"Please make sure to follow the date format as such:\\n\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DateTime.DATE_FORMAT + \"\\nExample: 07/07/2020\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_LIST_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"The List number is not found on the list! Deletion is aborted.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TRAVERSE_ERROR \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"There seems to be an error when traversing. Moving back to Root...\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FAILED_DIRECTORY_TRAVERSAL \u003d \"Unable to traverse further.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DIRECTORY_NOT_FOUND \u003d \"Sorry, the next directory could not be found.\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DIRECTORY_LEVEL \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, unable to execute the command at the current directory level.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Either move to the appropriate directory level, or enter the full directory path.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETERS \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Oh no! It seems that some invalid or missing parameters were found!\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIX_FOUND \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"There seems to be duplicate prefix(es) in your input...\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_IO_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_SYSTEM_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file. \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Please check that your file is not currently running.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Sorry, the file path entered is invalid.\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_ADD_FILE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the file does not exists. Please check the file path again.\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_SECURITY_EXCEPTION \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Oh no! File access was denied by device\u0027s security program.\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_OPEN \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"The following file(s) could not be opened as they cannot be found:\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_DELETE \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Deletion completed.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"However, note that the following file(s) could not be deleted completely from Nuke as they \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"could not be found:\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_LIST_EMPTY \u003d \"Your list is empty.\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            \"It seems you have input an incorrect command word. \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"Please key in help to see our list of commands. \\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 3,
      "wangqinNick": 60,
      "amalinasani": 1,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/Message.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d \"SUCCESS!! The task has been added.\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been added.\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"SUCCESS!! The task has been deleted.\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been deleted.\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been updated.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"SUCCESS!! The task has been updated.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"Please enter a command.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the command entered contains some unrecognised parameters starting from here:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_CHECK_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Please check to make sure to follow the command format as such:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_MODULE \u003d \"Please enter a new module code to edit.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_TASK \u003d \"Please enter a new task index to edit.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_NO_ADD_MODULE \u003d \"Please enter a new module code to add.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_NO_ADD_TASK \u003d \"Please enter a new task index to add.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Good bye!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to RAVI\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"SUCCESS!! The task has been marked as done.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String ICON_DONE \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String ICON_NOT_DONE \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_LIST_PRINTED \u003d \"List:\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_HELP \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "              \"Command                                     Function\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"help -------------------------------------- View command list\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -t \u003ctask desc.\u003e [-by] ----------------- Add task\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -m \u003cmodule\u003e --------------------------- Add module\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -t \u003ctask index\u003e \u003cnew task desc.\u003e ----- Edit a task\u0027s description\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -m \u003cmodule code\u003e \u003cnew module code\u003e --- Edit a module\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -t \u003ctask index\u003e ----------------------- Delete a task\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -m \u003cmodule index\u003e --------------------- Delete a module\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -t ----------------------------------- List all tasks\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -m ----------------------------------- List all modules\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"done -t \u003ctask index\u003e ---------------------- Mark task as done\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"bye --------------------------------------- Exit RaVi\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 5,
      "wangqinNick": 12,
      "amalinasani": 17,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/add/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String TASK \u003d \"test task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String BAD_DEADLINE \u003d \"bad_deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String EMPTY_DEADLINE \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String SPACES_DEADLINE \u003d \"        \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addModule_duplicateModuleMessage_isShown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.TypeOfEntries typeOfEntry \u003d Parser.TypeOfEntries.MODULE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addMod \u003d new AddCommand(typeOfEntry, MOD_CODE_1, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addDupMod \u003d new AddCommand(typeOfEntry, MOD_CODE_1, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addMod.execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d addDupMod.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_DUPLICATE_MODULE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_badDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.TypeOfEntries typeOfEntry \u003d Parser.TypeOfEntries.TASK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddCommand(typeOfEntry, TASK, BAD_DEADLINE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_emptyDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.TypeOfEntries typeOfEntry \u003d Parser.TypeOfEntries.TASK;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddCommand(typeOfEntry, TASK, EMPTY_DEADLINE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_blankDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.TypeOfEntries typeOfEntry \u003d Parser.TypeOfEntries.TASK;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddCommand(typeOfEntry, TASK, SPACES_DEADLINE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 50
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/delete/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_MISSING \u003d \"CS2040\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String TASK \u003d \"test task\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int TASK_ID_MISSING \u003d 10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.TypeOfEntries typeOfEntry \u003d Parser.TypeOfEntries.MODULE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addModule \u003d new AddCommand(typeOfEntry, MOD_CODE, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupTaskObjects() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.TypeOfEntries typeOfEntry \u003d Parser.TypeOfEntries.TASK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addModule \u003d new AddCommand(typeOfEntry, TASK, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteMissingModuleMessage_isShown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.TypeOfEntries typeOfEntry \u003d Parser.TypeOfEntries.MODULE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DeleteCommand deleteMissingModuleTest \u003d new DeleteCommand(typeOfEntry, MOD_CODE_MISSING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d deleteMissingModuleTest.execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_MODULE_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteMissingTaskMessage_isShown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Parser.TypeOfEntries typeOfEntry \u003d Parser.TypeOfEntries.TASK;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DeleteCommand deleteMissingTaskTest \u003d new DeleteCommand(typeOfEntry, TASK_ID_MISSING);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d deleteMissingTaskTest.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_TASK_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 51
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/edit/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.storage.Decoder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class EditModuleCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void execute() throws ModuleManager.DuplicateModuleException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e modulesMap \u003d Decoder.loadModules(\"data/\" + \"moduleList.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //ModuleManager.add(new Module(\"CS1231\", \"AAA\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //base case"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -m cs1231 CS3224\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/edit/EditTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.Executor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditTaskCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task newTask \u003d new Task(\"read a book\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //base case"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -t 1 return a book\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //invalid parameters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"edit -t 0 return a book\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result2.feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"edit -t 2 return a book\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result3.feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Module normalMod1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Module normalMod2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod1 \u003d new Module(MOD_CODE_1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod1.setTitle(\"Test\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod2 \u003d new Module(MOD_CODE_2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod1.setTitle(\"Test 2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.clearModules();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.add(normalMod1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.add(normalMod2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getModuleCount_isEquals2() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getModule_isCorrect() throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod1.getTitle(), ModuleManager.getModule(MOD_CODE_1).getTitle());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod1.getCode(), ModuleManager.getModule(MOD_CODE_1).getCode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod2.getTitle(), ModuleManager.getModule(MOD_CODE_2).getTitle());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod2.getCode(), ModuleManager.getModule(MOD_CODE_2).getCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void check_moduleNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(ModuleManager.ModuleNotFoundException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            () -\u003e ModuleManager.getModule(\"WHAT1010\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void editMod_getTitle_equalsNewTitle()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throws ModuleManager.DuplicateModuleException, ModuleNotProvidedException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newTitle \u003d \"NEW\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newCode \u003d \"CODE1\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module editedMod \u003d new Module(newCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        editedMod.setTitle(newTitle);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.edit(editedMod, MOD_CODE_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newTitle, ModuleManager.getModule(newCode).getTitle());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void deleteTask_getTaskCount_isEquals0() throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.delete(MOD_CODE_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.delete(MOD_CODE_2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(ModuleManager.ModuleNotFoundException.class, () -\u003e ModuleManager.getModule(MOD_CODE_1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 71
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Task normalTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Task datedTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupTaskObjects() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalTask \u003d new Task(\"ABC\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime myDate \u003d LocalDateTime.of(2020, 10, 1, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        datedTask \u003d new Task(\"DEF\", myDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(normalTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(datedTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getTaskCount_isEquals2() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TaskManager.getTaskCount());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void check_taskNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(TaskManager.TaskNotFoundException.class, () -\u003e TaskManager.getTask(2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void editTask_getName_equalsNewName() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newName1 \u003d \"NEW\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newName2 \u003d \"NAME\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalTask.setName(newName1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        datedTask.setName(newName2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.edit(normalTask, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.edit(datedTask, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newName1, TaskManager.getTask(0).getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newName2, TaskManager.getTask(1).getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void deleteTask_geTaskCount_isEquals0() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.delete(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.delete(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TaskManager.getTaskCount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(TaskManager.TaskNotFoundException.class, () -\u003e TaskManager.getTask(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 56
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.edit.EditModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_EDIT \u003d \"3 read a book\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_TASK_TO_EDIT \u003d \"read a book\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_ADD_WITH_DEADLINE \u003d \"project work -by 2-2-2020 1800\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_ADD_WITHOUT_DEADLINE \u003d \"do quiz\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_TASK_TO_ADD \u003d \"do quiz -by \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void isNothingToEdit_emptyString_returnsTrue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertTrue(new Parser().isNothingToEdit(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertTrue(new Parser().isNothingToEdit(\"\", \"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertTrue(new Parser().isNothingToEdit(\"\", \"\", \"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void isNothingToEdit_nonemptyString_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertFalse(new Parser().isNothingToEdit(\" \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertFalse(new Parser().isNothingToEdit(\" \", \"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertFalse(new Parser().isNothingToEdit(\"\", \"b\", \"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void prepareEditModuleCommandTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().prepareEditModuleCommand(\"-m cs2113 cs3224\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                instanceof EditModuleCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertTrue(new Parser().prepareEditModuleCommand(\" cs2113 cs3224\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditTaskCommandTest_returnsEditTaskCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().prepareEditTaskCommand(TASK_TO_EDIT)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof EditTaskCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditTaskCommandTest_badTaskToEdit_isThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e new Parser().prepareEditTaskCommand(BAD_TASK_TO_EDIT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareAddCommandTest_returnsAddCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().prepareAddCommand(TASK_TO_ADD_WITH_DEADLINE, Parser.TypeOfEntries.TASK)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof AddCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().prepareAddCommand(TASK_TO_ADD_WITHOUT_DEADLINE, Parser.TypeOfEntries.TASK)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof AddCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareAddCommandTest_returnsIncorrectCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().prepareAddCommand(BAD_TASK_TO_ADD, Parser.TypeOfEntries.TASK)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 39,
      "wangqinNick": 31,
      "Aseanseen": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 1
    }
  }
]
