[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "## Workflow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The workflow will go like this:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Synchronise your local repo with the team repo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Make a separate branch for your work session."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Commit and push your work to the corresponding branch on your remote repo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Make a pull request to merge your remote repo\u0027s work to the team repo and resolve merge conflicts."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Setting up for each work session"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "*  `git fetch upstream`, `git rebase upstream/master`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * The command means to fetch from the team repo (upstream) and then rebase master."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Your local master should be synchronised with the upstream master now."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* `git switch -c \u003cbranchname\u003e`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Make a new branch for your local work (to preserve master\u0027s functionality)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * `git checkout -b \u003cbranchname\u003e` does the same thing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Pushing and merging your work after each work session"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* First, `git add .` if you want to stage all files or `git add \u003cpath/to/file\u003e` if you want to add specific files."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* `git commit -m \u0027commit message here\u0027` followed by `git push origin \u003cbranchname\u003e`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Git will create the corresponding branch on your remote repo and push your commits there."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Merge your work into the team repo\u0027s master with a pull request over Github\u0027s interface."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Do not confirm merge! Let the rest of the team view the pull request first before we confirm that it can be merged."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Any merge conflicts should be resolved AFTER we okay the merge."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * After we all okay-ed the merge, the merge can continue and your work is complete."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Rolling back"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* First off, you can bookmark [this website](https://ohshitgit.com/) because you will need it at some point."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Undoing a local commit: Do `git revert HEAD`. `git revert` works by bringing your previous commit in as a new commit to undo what you did so far."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * `HEAD` refers to your current commit (which is the one you want to undo)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * If you want to revert back to __BEFORE__ a specific commit, use `git log` and find the commit hash (a long string of characters but you only need the first 6 or so) and do `git revert \u003chash\u003e`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Undoing a push to remote: Do `git push -f origin \u003chash\u003e:\u003cbranch\u003e`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * This forces a push of the `\u003chash\u003e` commit, which is the one you want to revert __to__, to the specified remote branch in `\u003cbranch\u003e`. Use `git log` to find the hash."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * Alternatively, you can undo the local commit first (as in point 1), then `git push -f origin master:\u003cbranch\u003e` instead of finding a specific commit."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* Hard reset:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "   * First, try doing `git fetch` then `git reset --hard origin/\u003cbranch\u003e`. This gets your remote\u0027s latest commits (which shouldn\u0027t include your mistakes) and then resets your working directory to match the latest commit on your remote. __ALL WORK ON LOCAL THAT IS NOT ALSO ON REMOTE IS LOST!__"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "   * If that doesn\u0027t work, delete everything in your repo except the .git folder, download from the Github repo page (green button on top right of file window), put everything in the same folder, then `git add *`, `git commit`."
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 15,
      "f0fz": 25,
      "-": 64
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.12\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "java {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Jian Hui Tobias | [Github](https://github.com/tobiasceg) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![]() | Sim Jun You | [Github](https://github.com/f0fz) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Amalina | [Github](https://github.com/amalinasani) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Sean Lim | [Github](https://github.com/Aseanseen) | [Portfolio](docs/team/seanlim.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "![](https://www.google.com/url?sa\u003di\u0026url\u003dhttps%3A%2F%2Fwww.thoughtco.com%2Ffun-facts-about-ducks-4043231\u0026psig\u003dAOvVaw3goHQ59ZTgbn9-TVUa8Fx8\u0026ust\u003d1601603208625000\u0026source\u003dimages\u0026cd\u003dvfe\u0026ved\u003d0CAIQjRxqFwoTCMCr_oSjkuwCFQAAAAAdAAAAABAD?text\u003dPhoto) | Don Roe | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 1,
      "f0fz": 1,
      "wangqinNick": 1,
      "amalinasani": 1,
      "-": 5,
      "Aseanseen": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "# Developer Guide for raVI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Software Prerequisites"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. **JDK** 11"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. **IntelliJ** IDEA"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Setting up the work environment"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. **Fork** this repo onto your GitHub account. **Clone** it onto your computer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Open IntelliJ. Close any existing projects if you are not at the welcome page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. Ensure it is set to the correct JDK version."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    a. `Configure` \u003e `Project Structure for New Projects` \u003e Select Java 11 under Project SDK."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "4. Click `Open or Import` to open the cloned repo."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "5. If necessary, locate the `build.gradle` file and select it. Click OK."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Verifying the setup"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. Run the program by selecting the `run` Gradle task at the top right and running it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Test the program by trying to run commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "3. Additionally, select the `test` Gradle task and run it. Check that all the tests pass."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Configure coding style"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "raVI\u0027s code is strictly styled using the Gradle Checkstyle plugin."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "It is advised to change [IntelliJ\u0027s built-in code style"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "options](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to match the requirements."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The checkstyle configurations is in `\u003cROOT\u003e/config/checkstyle/` by default. Here is some information on [how to use the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Checkstyle plugin with IntelliJ IDEA](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Top level classes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "This is a class diagram of the top level of raVi."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The classes depicted here are those which are direct dependencies of the main class Duke."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The various dependencies of the classes depicted here are not shown to avoid cluttering, and are described in later sections."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The main class is called Duke (carried over from legacy codebase). The main loop is held within the main class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Most classes used by the main class are static in nature and do not need to be instantiated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Command and CommandResult objects are dependencies of Executor in addition to Duke. Executor can be"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "viewed as a simple layer of abstraction on top of Command and CommandResult to facilitate the execution of user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "commands. Command is a dependency of Parser as Parser creates Command objects to return to the main loop."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Main Class](/docs/diagrams/MainClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Command Family"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Command family of classes are nearly all derived from the abstract Command class, except for"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "CommandResult and PromptType. All Command classes belong to the command package."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Command classes carry information about the user\u0027s command. There is one class for each exact user command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The `execute()` function of the Command class generates a CommandResult, which holds the reply to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "PromptType indicates the functionality of the Command object. The most useful type is EDIT, which indicates to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "StateManager that there has been a change in state."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Command Family Classes](/docs/diagrams/CommandClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Data Family"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Data family of classes consists of all the abstracted data types required for our features, such as"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Tasks, Modules, and their respective Managers. All Data classes exist in the data package, and the classes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "in charge of saving and loading like InputOutputManager are in the storage subpackage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Lesson, Task, and Module are the base level abstractions, with their respective Managers containing the logic to store"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and manipulate instances of these objects in a meaningful way. InputOutputManager reads and writes information from the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "various Managers in order to save and load. State and StateManager are specifically for the undo and redo functionality."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "They do not interact directly with the rest of the Data family."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "LessonFilter is the only interface in the data package. It allows for flexible creation of filters for powerful user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "filtering of lessons via lambda functions. For example, the user can choose to filter only lectures on Mondays before 2PM."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "Since there is no command to save or load, InputOutputManager is not a dependency of Command. All the other Managers,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "however, are dependencies of Command as there are commands for using/manipulating each one of them. InputOutputManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "and Command are then dependencies of the main class Duke."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Data Family Classes](/docs/diagrams/DataClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "### Parser Family"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The Parser family of classes consists of the main Parser class and the xCommandParser subclasses. The main Parser class"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "first determines the main command in the user command string. If it is one of the 5 commands with a xCommandParser"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "subclass, then Parser delegates the remaining work to the subclass due to the complicated logic involved. Otherwise, it"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "handles the logic itself."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "It will create a Command object, no matter whether the user command is valid or not (if it is not, then an"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "IncorrectCommand object is created). This Command object is then passed back to the main class Duke for execution."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "![UML class diagram for Parser Family Classes](/docs/diagrams/ParserClassDiagram.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "The target user profile for raVI is described by the following:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* A student of NUS (a freshman in particular)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Has a need to manage their school related tasks, classes and notes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Types fast"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "* Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "A common problem amongst freshmen is the inability to organise all the incoming information."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "NUS places a focus on taking responsibility for your own learning, so it might be a tough transition from tertiary education."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "A lot of students miss lessons, assignments, and even exams, just because they\u0027re struggling to adapt to the new"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "environment."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "raVI helps students to manage their school-related information in a compact, stripped-down interface that does not bombard them with too much information."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "When you receive your modules and lessons, simply enter them into raVI as they arrive. raVI will keep track of all of it"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "for you."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "You can create tasks, give them deadlines, and tag them to certain modules. You can see all of your tasks and deadlines at a glance."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "You can even write and save your notes in raVI, uncluttering your work environment even further."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "raVI is even integrated with NUSMods, bringing its comprehensive library of information to your fingertips."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "All of the above features are wrapped in a compact, no-frills command-line interface. No confusing menus and dropdowns"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "to distract you; only simple commands to give you what you want."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Add/Delete Feature"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "This feature is facilitated by the TaskManager, ModuleManager and proposed NoteManager classes."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Extending from the Command classes are the AddModule, AddTask and proposed AddNotes Command classes. It implements the following operations:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* AddTask#addTask() - Add a task to the task list through TaskManager.add()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* AddModule#addModule() - Add a module to the module list through ModuleManager.add()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* DeleteTask#deleteTask() - Deletes a task from the task list through TaskManager.delete()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* DeleteModule#deleteModule() - Deletes a module from the module list through ModuleManager.delete()\\"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "To add on, each Command class has a execute() which will run in the main loop. This returns a CommandResult object which will print a message to the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### [proposed] Grade Feature "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "This proposed feature is facilitated by ModuleManager and Module classes. "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "It extends `Command` and is stored internally inside `Module` as an `grade` and `moduleCredit`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `GradeCommand#testgrade(stringGrade)` - checks if the input grade is valid according to NUS grading schematic "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "* `GradeCommand#grade(moduleModule)` - assigns the specific module present in the module list, the grade and moduleCredit attributes."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Given below is an example usage scenario and how the grade feature behaves at each step."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 1. The user launches the application for the first time. The user inputs `add -m CS2101` into Ravi, as the user wants to note down a module named ‘CS2101’ and add it to their module list. This input is received by the Ui ,which processes it into a string. The string is parsed by the parser and allocates it to the AddCommand where it is added to the list of modules. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 2. The user inputs `grade CS2101 4 A+`. Where the user input is parsed and allocated to by the parser to GradeCommand. `GradeCommand#execute()` is called and moduleManager checks if such a module exists in the user’s module list, then checks if the input grade is valid according to the NUS grading schematic and finally assigns the specific module , the grade and module credits."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "Step 3. The `CommandResult` returns the success message to show the user that their module has successfully been graded. Otherwise, an exception message will be shown with regards to the exception caught. "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|save and load my information|store all my school related data in the application|"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add tasks to the application|keep track of all my tasks|"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add deadlines for tasks to the application|keep track of when I need to complete the tasks|"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|add modules to the application|keep track of them during the school term|"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|delete tasks from the application|keep track of new tasks|"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v1.0|user|delete modules from the application|keep track of new modules|"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "|v2.0|user|view my timetable quickly|be aware of my classes and prepare for them quickly|"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "|v2.0|user|view a summary of my tasks|be aware of my tasks and work on them as needed|"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "|v2.0|user|write notes for my modules|manage my notes together with my tasks and modules|"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "|v2.0|user|grade my modules|keep track of my grades for respective modules|"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "* Mainstream OS: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Adding a task w/ deadline"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Adding a task without deadline"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `add -t read a book`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Task `read a book` will be added to the task list. Details of the added task is shown in the status message."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    2. Test case: `add -t `"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: As there is no task to add, details of the associated error message will be shown."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "2. Adding a task with deadline"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `add -t read a book -by 20-10-2020 1800`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Task `read a book` will be added to the task list. Additionally, the deadline "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    will be added to the task."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Details of the added task is shown in the status message."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    2. Test case: `add -t read a book -by 20/20/2020`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Invalid deadline `20/20/2020` will not allow the task to be added to the task list. Details of the associated error message will be shown."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Adding a module"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "1. Adding a module"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    1. Test case: `add -m CS2113T`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: Module `CS2113T` will be checked against the NUS module list. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Since `CS2113T` is a valid module, it will be added to the module list. Details of the added module is shown in the status message."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    2. Test case: `add -m Fake Mod`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    Expected: As there is no such module `Fake Mod` in the NUS module list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    It will not be added to the module list. Details of the associated error message will be shown."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Adding a lesson to the timetable"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Marking a task as done / undone"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Editing a task"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Editing a module"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Viewing the timetable"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "### Grading an existing module in module list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "1. Add a module:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    1. Test case: `add -m CS2101`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Expected:  Module `CS2101` will be checked against the NUS module list. "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Since `CS2113T` is a valid module, it will be added to the module list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Details of the added module is shown in the status message."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "2. Grade the module:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    1. Test case: `grade CS2101 4 A+`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Expected: Module `CS2101` will be checked if its inside ModuleManager."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    Since `CS2101` exists then the attributes of `4` and `A+` which are module credit and grade,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    will be added to the Module.  "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Undo the previous command"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Redo the previous command"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "f0fz"
        },
        "content": "1. Add tasks and modules, then exit"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: `add -t task 1`, `add -m CS1010`, `bye`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: `user_task_data.json` and `user_mod_data.json` should be created in `\u003cROOT\u003e/data/` with a JSON"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    representation of the task and module."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "f0fz"
        },
        "content": "2. Loading tasks and modules"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    1. Test case: Run raVI again after the first test case, then run `list -t` and `list -m`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    Expected: `task 1` should be shown in the task list, and `CS1010` should be shown in the module list."
      }
    ],
    "authorContributionMap": {
      "f0fz": 119,
      "tobiasceg": 27,
      "-": 32,
      "Aseanseen": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.StateManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final DukeLogger logger \u003d new DukeLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param args arguments passed to the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws FileNotFoundException exception is thrown if the file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        new Duke().run(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Sets up the storage, loads up the data from the storage file and prints the welcome message.  */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void start(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.ui \u003d new TextUi(in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.start();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        StateManager.initialise();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TextUi.showWelcomeMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Initialised scanner, UI, and IO\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Runs the program until termination.  */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void run(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"STARTING PROGRAM...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        start(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        InputOutputManager.save();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        InputOutputManager.saveNusMods();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"PROGRAM TERMINATED SUCCESSFULLY\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /** Reads the user command and executes it, until the user issues the exit command.  */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"ENTERING COMMAND LOOP\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            String userInput \u003d TextUi.getUserCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (command.getPromptType() \u003d\u003d PromptType.EDIT) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                StateManager.saveState();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            ui.showResultToUser(result);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult getResponse(String userInput) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return Executor.executeCommand(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 6,
      "wangqinNick": 18,
      "-": 12,
      "Aseanseen": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.LogRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DukeLogger {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private Logger dukeLogger; // One logger for each instance"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // The following are shared across all DukeLogger instances"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static FileHandler logFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static String logFileName \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_PATH \u003d \"./logs/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_NAME \u003d \"session_\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final String LOG_EXT \u003d \".log\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final Level LOGGING_LEVEL \u003d Level.INFO; // CHANGE LOGGING LEVEL HERE!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final SimpleFormatter FORMATTER \u003d new SimpleFormatter() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        private static final String formatE \u003d \"%1$s - %2$s:%n[%3$-7s] %4$s%n%5$s%n%n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        private static final String format \u003d \"%1$s - %2$s:%n[%3$-7s] %4$s%n%n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        public synchronized String format(LogRecord lr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (lr.getThrown() !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return String.format(formatE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceClassName(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceMethodName(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getLevel().getLocalizedName(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getMessage(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getThrown()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return String.format(format,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceClassName(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getSourceMethodName(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getLevel().getLocalizedName(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                        lr.getMessage()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public DukeLogger(String className) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dukeLogger \u003d Logger.getLogger(className);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (logFileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                globalSetup();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logFile \u003d new FileHandler(logFileName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dukeLogger.setUseParentHandlers(false); // Stop it from logging from console..."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dukeLogger.addHandler(logFile); // Make it log to file instead"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            dukeLogger.setLevel(LOGGING_LEVEL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFile.setFormatter(FORMATTER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Logger getLogger() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return dukeLogger;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void globalSetup() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            preparePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFileName \u003d prepareFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void preparePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File logFolder \u003d new File(LOG_PATH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!logFolder.exists()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFolder.mkdir();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String prepareFile() throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int sessionNum \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String currentLogFileName \u003d LOG_PATH + LOG_NAME + sessionNum + LOG_EXT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File logFile \u003d new File(currentLogFileName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        while (logFile.exists()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            sessionNum++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentLogFileName \u003d LOG_PATH + LOG_NAME + sessionNum + LOG_EXT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logFile \u003d new File(currentLogFileName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logFile.createNewFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return currentLogFileName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 89,
      "wangqinNick": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/Executor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param userInput The input from the user to be parsed and executed as a command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static CommandResult executeCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (command.getPromptType() \u003d\u003d PromptType.EDIT) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            StateManager.saveState();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.command.PromptType.NONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected PromptType promptType \u003d NONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public PromptType getPromptType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return promptType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setPromptType(PromptType promptType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.promptType \u003d promptType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return command instanceof ExitCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 2,
      "Aseanseen": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String feedbackToUser; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PromptType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": " * Indicates the type of user commands and corresponding command results."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * WARNING: the command results a waring message"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * INFORMATIVE: the command results a help message"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * EDIT: the command is a EDIT command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * NONE: the command is a basic command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public enum PromptType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    WARNING,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    INFORMATIVE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    EDIT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 14,
      "Aseanseen": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003copt\u003e \u003cargs\u003e\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/add/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_ADD_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddModuleCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddModuleCommand and tests the format of the deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param module Module code to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddModuleCommand(String module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.promptType \u003d PromptType.EDIT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Add the Module to the module list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param module Module code to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleManager.DuplicateModuleException if the module is already in the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void addModule(String module) throws ModuleManager.DuplicateModuleException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Module newModule \u003d new Module(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.add(newModule);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Adds the module to the module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the add module or messages from exceptions."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            addModule(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_ADD_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/add/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_ADD_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Parser.TypeOfEntries typeOfEntry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddTaskCommand without the deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the entry."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException If the deadline does not follow the DateTime format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddTaskCommand(String desc) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.promptType \u003d PromptType.EDIT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructs AddTaskCommand and tests the format of the deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the entry."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param deadline Deadline of the task to be added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException If the deadline does not follow the DateTime format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public AddTaskCommand(String desc, String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (deadline !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            dateTimeOfDeadline \u003d testDeadline(deadline);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.promptType \u003d PromptType.EDIT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Test if the deadline of the task follows the DateTimeFormatter."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param deadline LocalDateTime deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws DateTimeParseException if the deadline does not follow format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private LocalDateTime testDeadline(String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        LocalDateTime dateTimeOfDeadline;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        dateTimeOfDeadline \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return dateTimeOfDeadline;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Add the Task with deadline to the task list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param desc Description of the task to be added."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param dateTimeOfDeadline LocalDateTime of the deadline."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void addTask(String desc, LocalDateTime dateTimeOfDeadline) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        // Option for user to input a deadline"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        if (dateTimeOfDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            newTask \u003d new Task(desc);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            newTask \u003d new Task(desc, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Adds the task to the task list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the add task or messages from exceptions."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addTask(desc, dateTimeOfDeadline);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        message \u003d MESSAGE_ADD_TASK_SUCCESS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 90
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003copt\u003e \u003cargs\u003e\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 3,
      "Aseanseen": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/delete/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteModuleCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructor to delete module from module list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param moduleCode Module code to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the module from the module list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param moduleCode Module code to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException If the module is not found in the module list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void deleteModule(String moduleCode) throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.delete(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the module from the module list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the delete or errors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            deleteModule(moduleCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/delete/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteTaskCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Constructor to delete task from task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId ID of the task to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public DeleteTaskCommand(int taskId) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        setPromptType(PromptType.EDIT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId ID of the task to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException If the task is not found in the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private void deleteTask(int taskId) throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.delete(taskId);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @return CommandResult containing acknowledgement of the delete or errors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            deleteTask(taskId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            message \u003d MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/done/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_DONE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003copt\u003e \u003cargs\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Marks the task from the task list as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * @param taskId id of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException If the task is not found in the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private void doneTask(int taskId) throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.done(taskId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Marks the task from the task list as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing acknowledgement of marking task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            doneTask(taskId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            message \u003d MESSAGE_DONE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 41,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 1,
      "wangqinNick": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String FORMAT \u003d EditCommand.COMMAND_WORD + \"-m\" + \" \u003cmodule code\u003e \u003cnew module code\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"(?\u003cidentifier\u003e(edit)) -m(?\u003cmoduleCode\u003e(?:\\\\s+\\\\w\\\\S*))(?\u003cmoduleCode1\u003e(?:\\\\s+\\\\w\\\\S*))\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String oldModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String newModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the command to edit a module."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code of the module to be edited"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The new module code for the module if any"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditModuleCommand(String oldModuleCode, String newModuleCode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.oldModuleCode \u003d oldModuleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.newModuleCode \u003d newModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Edits the module."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module to edit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleManager.DuplicateModuleException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the new module code is duplicated"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the new module code is not a recognised NUS module"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected void edit(Module toEdit) throws ModuleManager.DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        toEdit.setModuleCode(newModuleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.edit(toEdit, oldModuleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Executes the \u003cb\u003eEdit Module Command\u003c/b\u003e to edit a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * from the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see ModuleManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module toEdit \u003d ModuleManager.getModule(oldModuleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            edit(toEdit);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }  catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 1,
      "f0fz": 2,
      "wangqinNick": 73
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/edit/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class EditTaskCommand extends EditCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String newTaskDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String FORMAT \u003d EditCommand.COMMAND_WORD + \"-t\" + \" \u003ctask ID\u003e \u003cnew task description\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the command to edit a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param taskID"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The ID of the task to be edited"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditTaskCommand(int taskID, String newTaskDescription) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.newTaskDescription \u003d newTaskDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.promptType \u003d PromptType.EDIT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected void edit() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.getTaskList().get(taskID).setName(newTaskDescription);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            edit();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_TASK_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(Message.MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 16,
      "wangqinNick": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/filter/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class FilterCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/help/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * Prints help message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing list of available commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String message \u003d TextUi.getHelpMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/list/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_LIST_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_LIST_PRINTED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    private Parser.TypeOfEntries typeOfEntry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003copt\u003e \u003cargs\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public ListCommand(Parser.TypeOfEntries typeOfEntry) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.typeOfEntry \u003d typeOfEntry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        setPromptType(PromptType.INFORMATIVE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Lists the tasks/modules from their respective lists."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return CommandResult containing list of tasks/modules"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        switch (typeOfEntry) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d TaskManager.list();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            output \u003d ModuleManager.list();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (output \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_PRINTED + output);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 9,
      "amalinasani": 31,
      "Aseanseen": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/misc/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_UNDO_AT_BEGINNING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_UNDO_UNSUCCESSFUL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.promptType \u003d PromptType.INFORMATIVE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            StateManager.undo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (EmptyStackException | IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_AT_BEGINNING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Constant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Constant {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String FILE_EXT          \u003d \".json\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String TASK_SAVE_FILE_NAME    \u003d \"task_data\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String MOD_SAVE_FILE_NAME     \u003d \"mod_data\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static final String NUSMOD_SAVE_FILE_NAME  \u003d \"nus_mod_data\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 5,
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LessonType lessonType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Lesson(String moduleCode, LessonType lessonType, DayOfWeek day, LocalTime startTime, LocalTime endTime)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (startTime.isAfter(endTime) || startTime.equals(endTime)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonInvalidTimeException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public LessonType getLessonType() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isAfter(Lesson otherLesson) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return otherLesson.getEndTime().isBefore(startTime) || otherLesson.getEndTime().equals(startTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isBefore(Lesson otherLesson) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return otherLesson.getStartTime().isAfter(endTime) || otherLesson.getStartTime().equals(endTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Checks for time period overlap with the specified Lesson."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param otherLesson"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified lesson"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Whether their start and end times overlap"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean checkOverlap(Lesson otherLesson) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (otherLesson.getDay() !\u003d day) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // lessons are constructed with valid start-end times"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // to check NO OVERLAP, ensure otherEnd \u003c\u003d currentStart xor otherStart \u003e\u003d currentEnd"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return !(isAfter(otherLesson) ^ isBefore(otherLesson));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Generates string based on lesson type."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  String of lesson type"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String getLessonTypeString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        switch (lessonType) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case LECTURE:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Lecture\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case TUTORIAL:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Tutorial\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case LAB:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Lab\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case SEMINAR:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Seminar\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        case RECITATION:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Recitation\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return \"Session\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Creates string representation of lesson."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * e.g. CS1010 Lecture: MONDAY 1400-1500"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  String representation of lesson"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        DateTimeFormatter time \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return String.format(\"%s %s: %s %s-%s\", moduleCode, getLessonTypeString(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                day.toString(), startTime.format(time), endTime.format(time));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 118
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/LessonFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public interface LessonFilter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    boolean filter(Lesson l);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/LessonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final HashMap\u003cDayOfWeek, ArrayList\u003cLesson\u003e\u003e lessonMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Initialise the lessonMap when it is empty."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void initialise() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.put(eachDay, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Inserts a Lesson object in the correct position in the correct ArrayList in lessonMap, based on its day and time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newLesson"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new Lesson object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void addLesson(Lesson newLesson) throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        DayOfWeek lessonDay \u003d newLesson.getDay();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // if lessonMap is not initialised yet..."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (lessonMap.keySet().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            initialise();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(newLesson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int indexToInsertNewLesson \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c lessonMap.get(lessonDay).size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Lesson eachLesson \u003d lessonMap.get(lessonDay).get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (newLesson.checkOverlap(eachLesson)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                throw new LessonInvalidTimeException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // insert before the lesson which starts right after newLesson"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // each day ArrayList in lessonMap is hence always sorted due to addLesson\u0027s logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachLesson.isAfter(newLesson)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                indexToInsertNewLesson \u003d i;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (indexToInsertNewLesson \u003d\u003d -1) { // lesson is the latest lesson in the day"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(newLesson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            lessonMap.get(lessonDay).add(indexToInsertNewLesson, newLesson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes the lesson at lessonIndex on the given day."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param lessonIndex"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the lesson to be removed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void removeLesson(DayOfWeek day, int lessonIndex) throws LessonNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!lessonMap.containsKey(day)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (lessonIndex \u003c 0 || lessonIndex \u003e\u003d lessonMap.get(day).size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lessonMap.get(day).remove(lessonIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns the ArrayList of lessons on the given day."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList of lessons on that day"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws LessonNotFoundException"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If there are no lessons on that day"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cLesson\u003e getDayLessonList(DayOfWeek day) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonMap.get(day);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getLessonCountOnDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return lessonMap.get(day).size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns an ArrayList with lessons by filtering all lessons in lessonMap through the given LessonFilter."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param currentFilter"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The current LessonFilter in use"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The filtered ArrayList of lessons generated from lessonMap"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cLesson\u003e filterLessons(LessonFilter currentFilter) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cLesson\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (DayOfWeek eachDay : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ArrayList\u003cLesson\u003e currentDay \u003d lessonMap.get(eachDay);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (Lesson eachLesson : currentDay) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                if (currentFilter.filter(eachLesson)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                    outputList.add(eachLesson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears the lesson ArrayList for a given day."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified day"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clearDayLesson(DayOfWeek day) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lessonMap.put(day, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 126
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/LessonType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "enum LessonType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    TUTORIAL,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    LECTURE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    SEMINAR,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    LAB,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    RECITATION,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    SESSION"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Module extends Directory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Module(String moduleCode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public boolean isSameModule(Module checkModule) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String moduleCode \u003d checkModule.getModuleCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String moduleTitle \u003d checkModule.getTitle();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return this.moduleCode.equalsIgnoreCase(moduleCode) \u0026\u0026 this.title.equalsIgnoreCase(moduleTitle);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return getModuleCode() + \": \" + getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//public class Module extends Directory {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    public Directory getParent() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 15,
      "wangqinNick": 50,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/ModuleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static HashMap\u003cString, Module\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // modulesMap is the main module list. Maps module code to module object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static HashMap\u003cString, Module\u003e nusModsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    // nusModsMap is the module list containing the Module objects created from NUSMods\u0027 JSON file of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  Finds a module with the specified module code in the Module List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Module getModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : modulesMap.values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a module in the Module List by replacing the old module object with a new one."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The new module that replaces the old one."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to be edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If there is no module with the new module code offered by NUS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws DuplicateModuleException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  If there are duplicate modules with the same module code as the new module code in the Module List"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void edit(Module newModule, String oldModuleCode)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throws ModuleNotProvidedException, DuplicateModuleException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //modulesMap.get(module.getCode()).setTitle(moduleDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module oldModule \u003d modulesMap.get(oldModuleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!modulesMap.containsKey(oldModuleCode)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (oldModule.isSameModule(newModule)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.remove(oldModuleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.put(newModule.getModuleCode(), newModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks for duplicates of the same module code in the Module List."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The module code to check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static boolean contains(String moduleCode) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachCode : modulesMap.keySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachCode.equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a module to the Module List."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module object to add to the module list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void add(Module newModule) throws DuplicateModuleException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (contains(newModule.getModuleCode())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.put(newModule.getModuleCode(), newModule);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes a module from the Module List using the module code."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to remove from the module list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static boolean delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!contains(moduleCode)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap.remove(moduleCode);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a module to the NUSMods Module List."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newModule"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module object to add to the module list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void addNusMod(Module newModule) throws DuplicateModuleException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (contains(newModule.getModuleCode())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        nusModsMap.put(newModule.getModuleCode(), newModule);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Finds a module with the specified module code in the NUSMods Module List."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Module getNusModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module module : nusModsMap.values()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String[] getModCodeList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] outputArray \u003d modulesMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return outputArray;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static String[] getNusModCodeList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] outputArray \u003d nusModsMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return outputArray;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * List modules in the module map."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The formatted module list from TextUi or null if list is empty"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String list() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (modulesMap.size() \u003e 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return TextUi.getIndexModuleList(modulesMap);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded module map into ModuleManager\u0027s own module map."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedModulesMap the loaded module map from file"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadMods(HashMap\u003cString, Module\u003e loadedModulesMap) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap \u003d loadedModulesMap;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded module map into ModuleManager\u0027s own module map."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedModulesMap the loaded module map from file"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadNusMods(HashMap\u003cString, Module\u003e loadedModulesMap) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        nusModsMap \u003d loadedModulesMap;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears all modules in modulesMap."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clearModules() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        modulesMap \u003d new HashMap\u003cString, Module\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the modules in the system."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return modulesMap"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e getModulesMap() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static class ModuleNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static class DuplicateModuleException extends DuplicateDataException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 116,
      "wangqinNick": 71,
      "amalinasani": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/State.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String encodedSavedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String encodedSavedMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public State(String encodedSavedList, String encodedSavedMap) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.encodedSavedList \u003d encodedSavedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.encodedSavedMap \u003d encodedSavedMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getEncodedSavedList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return encodedSavedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getEncodedSavedMap() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return encodedSavedMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/StateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class StateManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static Stack\u003cState\u003e undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static Stack\u003cState\u003e redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Initialises the screen shot manager with its first screen shot of the starting list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void initialise() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //for Junit Test only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var gson \u003d new GsonBuilder().create();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d gson.toJson(TaskManager.getTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d gson.toJson(ModuleManager.getModulesMap());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var screenShot \u003d new State(encodedSavedList, encodedSavedMap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assert undoStack.isEmpty() : \"Undo stack should be empty!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assert redoStack.isEmpty() : \"Redo stack should be empty!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack.push(screenShot);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns and pops the top state."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the last state."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws EmptyStackException stack is empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static State popPreviousScreenShot() throws EmptyStackException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // There should be at least 2 screen shots to allow undo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (undoStack.size() \u003c 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            throw new EmptyStackException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var currentState \u003d undoStack.pop();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        redoStack.push(currentState);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the last state without pop it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the last state."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static State peekPreviousScreenShot() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Reverts to the previous changed state of the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws IOException exception is thrown when error occurred during IO operation."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws EmptyStackException exception is thrown when user trying to undo at the initial state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void undo() throws IOException, EmptyStackException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousState \u003d popPreviousScreenShot();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d previousState.getEncodedSavedList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d previousState.getEncodedSavedMap();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var stream1 \u003d new ByteArrayInputStream(encodedSavedList.getBytes());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var bufferedReader1 \u003d new BufferedReader(new InputStreamReader(stream1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var stream2 \u003d new ByteArrayInputStream(encodedSavedMap.getBytes());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var bufferedReader2 \u003d new BufferedReader(new InputStreamReader(stream2));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task[] readList1 \u003d new Gson().fromJson(bufferedReader1, Task[].class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.loadTasks(getDecodedTaskList(readList1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Type type \u003d new TypeToken\u003cHashMap\u003cString, Module\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e map \u003d new Gson().fromJson(bufferedReader2, type);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ModuleManager.loadMods(map);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        bufferedReader1.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        bufferedReader2.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Saves the moduleList as a string if it was changed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void saveState() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var gson \u003d new GsonBuilder().create();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedList \u003d gson.toJson(TaskManager.getTaskList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var encodedSavedMap \u003d gson.toJson(ModuleManager.getModulesMap());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var screenShot \u003d new State(encodedSavedList, encodedSavedMap);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        undoStack.push(screenShot);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (getUndoStackSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousScreenShot \u003d peekPreviousScreenShot();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        var previousEncodedSavedList \u003d previousScreenShot.getEncodedSavedList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!previousEncodedSavedList.equals(encodedSavedList)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (!redoStack.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                redoStack.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the task list read from Json file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param readList the task array read from Json file"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list parsed from readList array"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cTask\u003e getDecodedTaskList(Task[] readList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cTask\u003e tempTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Task task : readList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            tempTaskList.add(new Task(task.getName(), task.getDeadline(), task.getStatus()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return tempTaskList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the number of states store in th stack."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the stack size"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static int getUndoStackSize() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return undoStack.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Return the task list read from Json file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param readList the module map read from Json file"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list parsed from readList array"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cModule\u003e getDecodedModuleList(Module[] readList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cModule\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module module : readList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            temp.add(new Module(module.getModuleCode()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parse map to list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return module list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cModule\u003e parseModuleList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ArrayList\u003cModule\u003e moduleArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Iterator\u003cString\u003e it \u003d ModuleManager.getModulesMap().keySet().iterator();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            String key \u003d it.next();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            moduleArrayList.add(ModuleManager.getModulesMap().get(key));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleArrayList;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parse list to map."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleArrayList module list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return module map"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e parseModuleMap(ArrayList\u003cModule\u003e moduleArrayList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module module: moduleArrayList"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            map.put(module.getModuleCode(), module);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 187
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private LocalDateTime deadline \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public Task(String name, LocalDateTime dateTimeOfDeadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        this.deadline \u003d dateTimeOfDeadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task(String name, LocalDateTime dateTimeOfDeadline, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.deadline \u003d dateTimeOfDeadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void setDeadline(LocalDateTime deadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public void setStatus() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return Message.ICON_DONE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            return Message.ICON_NOT_DONE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return getName() + \" [\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return getName() + \" by \" + getDeadline().toString() + \" [\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//import seedu.duke.directory.Directory;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//import seedu.duke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//public class Task extends Directory {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    public Directory getParent() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 52,
      "wangqinNick": 7,
      "amalinasani": 19,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/TaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e(); // Main task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  Finds a task with the specified task index (id) in the Task List."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task to be found"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The found task with the specified task index"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If the task is not found in the Task List"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static Task getTask(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.get(taskId);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Edits a task in the Task List."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param editedTask"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The edited task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task in the Task List."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void edit(Task editedTask, int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        tasksList.set(taskId, editedTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Adds a task to the Task List."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param newTask"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The task object to add to the task list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void add(Task newTask) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.add(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Removes a task from the Task List using the task index (id)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param taskId"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The index of the task to be deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void delete(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList.remove(taskId);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static void done(int taskId) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (taskId \u003c 0 || taskId \u003e tasksList.size() - 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        task \u003d getTask(taskId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        task.setStatus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Generate an ordered ArrayList of ArrayLists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * First ArrayList contains a list of uncompleted tasks with deadlines, sorted by deadlines."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Second ArrayList contains a list of uncompleted tasks without deadlines."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Last ArrayList contains a list of completed tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList of ArrayLists mentioned above."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cTask\u003e\u003e summary() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cArrayList\u003cTask\u003e\u003e summaryLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteTasksDated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e incompleteTasksUndated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e completedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Task eachTask : tasksList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (eachTask.getStatus()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                completedTasks.add(eachTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else if (eachTask.getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                incompleteTasksUndated.add(eachTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                incompleteTasksDated.add(eachTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Comparator\u003cTask\u003e compareByDeadline \u003d Comparator.comparing(Task::getDeadline);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        incompleteTasksDated.sort(compareByDeadline);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Do not change the adding order!"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(incompleteTasksDated);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(incompleteTasksUndated);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        summaryLists.add(completedTasks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return summaryLists;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Gets Task List."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return tasksList"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return tasksList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "     * Prints all tasks in task list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The formatted task list from TextUi or null if list is empty"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String list() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        if (getTaskList().size() \u003e 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return TextUi.getIndexTaskList(tasksList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the file loaded task list into TaskManager\u0027s own task list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param loadedTasksList the loaded task list from file"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadTasks(ArrayList\u003cTask\u003e loadedTasksList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList \u003d loadedTasksList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Returns the number of tasks."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the number of tasks"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static int getTaskCount() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return tasksList.size();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Clears the current task list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void clear() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static class TaskNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 122,
      "wangqinNick": 9,
      "amalinasani": 27,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/Decoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.ui.TextUi;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all outputs from files, and the conversion from String in file to Object in memory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Throws exceptions to InputOutputManager and handles none."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Wang Qin"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Decoder {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads a HashMap of Module objects from the specified file. Used for both user and NUS modules."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The file to load from"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The HashMap of Module objects"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static HashMap\u003cString, Module\u003e loadModules(String dataFileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // FastJSON doesn\u0027t write the square brackets for some reason when we save, so we add it in here"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so that parseArray works as it should"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr \u003d \"[\" + jsonStr + \"]\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (moduleList !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            for (Module eachModule : moduleList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                modulesMap.put(eachModule.getModuleCode(), eachModule);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Parses the specified save file to return an ArrayList of Task objects."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to read from"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The ArrayList tasksList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  When the file does not exist"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static ArrayList\u003cTask\u003e loadTasks(String dataFileName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // FastJSON doesn\u0027t write the square brackets for some reason when we save, so we add it in here"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // so that parseArray works as it should"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (jsonStr !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            jsonStr \u003d \"[\" + jsonStr + \"]\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cTask\u003e tasksList \u003d JSON.parseArray(jsonStr, Task.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return new ArrayList\u003c\u003e(tasksList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Pulls JSON from the NUSMods API, parses it, and returns the HashMap of Module objects."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The HashMap of Module objects (from NUSMods)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static HashMap\u003cString, Module\u003e generateNusModsList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        HashMap\u003cString, Module\u003e retrievedNusModsList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String retrievedJson;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        retrievedJson \u003d requestNusModsJsonString(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // This JSON string comes with the square brackets, so no need to add"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        List\u003cModule\u003e modulesList \u003d JSON.parseArray(retrievedJson, Module.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (Module eachModule : modulesList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            retrievedNusModsList.put(eachModule.getModuleCode(), eachModule);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        return retrievedNusModsList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Reads a string from a file (doesn\u0027t necessarily have to be JSON)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The specified file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string read from file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        byte[] fileContent \u003d new byte[(int) fileLength];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            in.read(fileContent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Uses the NUSMods API to get a JSON string with the information of all available mods."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The endpoint for the NUSMods API."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The JSON string with information of all currently available mods in NUS."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static String requestNusModsJsonString(String filePath) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        int httpResult; // the status from the server response"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            URL url \u003d new URL(filePath); // create URL"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            URLConnection urlConn \u003d url.openConnection(); // try to connect and get the status code"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            urlConn.connect();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            HttpURLConnection httpConn \u003d (HttpURLConnection) urlConn;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            httpResult \u003d httpConn.getResponseCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            if (httpResult !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                System.out.print(\"cannot connect!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                int fileSize \u003d urlConn.getContentLength(); // get the length of the data"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                InputStreamReader isReader \u003d new InputStreamReader(urlConn.getInputStream(), \"UTF-8\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(isReader);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                String line; // to save the content of every line"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                line \u003d reader.readLine(); // read the first line"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                while (line !\u003d null) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    buffer.append(line); // append to the buffer"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    buffer.append(\" \"); // add new line"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    line \u003d reader.readLine(); // read the next line"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                //System.out.print(buffer.toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                content \u003d buffer.toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 95,
      "wangqinNick": 2,
      "Aseanseen": 77
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/Encoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all inputs to files, and the conversion from Object in memory to String in file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Throws exceptions to InputOutputManager and handles none."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class Encoder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all tasks to file path/name specified."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveTasks(String dataFileName) throws IOException, TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        int taskCount \u003d TaskManager.getTaskCount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task currentTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentTask \u003d TaskManager.getTask(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentTask));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all modules to file path/name specified."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveModules(String dataFileName) throws IOException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module currentModule;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String[] modsToBeSaved \u003d ModuleManager.getModCodeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachModCode : ModuleManager.getModCodeList()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentModule \u003d ModuleManager.getModule(eachModCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentModule));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Saves all NUS modules to file path/name specified."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param dataFileName"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The name of the file to save to"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveNusModules(String dataFileName) throws IOException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File mySaveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        prepareSaveFile(mySaveFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module currentModule;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        for (String eachModCode : ModuleManager.getNusModCodeList()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            currentModule \u003d ModuleManager.getNusModule(eachModCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            writeToFile(mySaveFile, JSON.toJSONString(currentModule));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Prepares the specified save file (and dir) by creating it or deleting then creating it (if the file exists)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The File object to prepare the actual file for"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If createNewFile does not work as expected"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void prepareSaveFile(File saveFile) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (saveFile.exists()) { // overwrite by deleting first"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveFile.delete();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        saveFile.createNewFile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Appends the specified string to the specified File object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param saveFile"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The File object to write to"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @param textToAdd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  The string to write"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     *  If FileWriter cannot write or close the file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static void writeToFile(File saveFile, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        FileWriter fw \u003d new FileWriter(saveFile, true); // true to append data instead of overwrite"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.write(textToAdd + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 95,
      "Aseanseen": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/storage/InputOutputManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.common.Constant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Manages all inputs and outputs (to and from files)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * Encoder and Decoder are only used by InputOutputManager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * InputOutputManager also handles exceptions thrown by Encoder and Decoder. No exceptions are thrown from here."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": " * @author Sim Jun You"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class InputOutputManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static String root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static java.nio.file.Path dirPath \u003d java.nio.file.Paths.get(root, \"data\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String userModuleFileName \u003d Constant.MOD_SAVE_FILE_NAME + Constant.FILE_EXT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String userTaskFileName \u003d Constant.TASK_SAVE_FILE_NAME + Constant.FILE_EXT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static String nusModuleFileName \u003d Constant.NUSMOD_SAVE_FILE_NAME + Constant.FILE_EXT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path userModuleFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), userModuleFileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path userTaskFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), userTaskFileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static java.nio.file.Path nusModuleFile \u003d java.nio.file.Paths.get(String.valueOf(dirPath), nusModuleFileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    private static final DukeLogger logger \u003d new DukeLogger(InputOutputManager.class.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Creates the save directory if it has not been created."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads the user\u0027s module and task saves into memory."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void start() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Starting InputOutputManager\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        File saveFolder \u003d dirPath.toFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!saveFolder.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().info(\"Save folder does not exist, creating now\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            saveFolder.mkdir();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (Files.exists(userModuleFile)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading user module saves from \" + userModuleFileName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                ModuleManager.loadMods(Decoder.loadModules(userModuleFile.toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Skipping user module save; file does not exist: \" + userModuleFileName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (Files.exists(userTaskFile)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Loading user task saves from \" + userTaskFileName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                TaskManager.loadTasks(Decoder.loadTasks(userTaskFile.toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                logger.getLogger().info(\"Skipping user task save; file does not exist: \" + userTaskFileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            loadNusModSave(); // will load from NUSMods API if file not found"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Loads NUS Modules from the given file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void loadNusModSave() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Loading NUS modules from \" + nusModuleFileName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        if (!Files.exists(nusModuleFile)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.loadNusMods(Decoder.generateNusModsList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.loadNusMods(Decoder.loadModules(nusModuleFile.toString()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Updates the user\u0027s save files. Does not save NUS Modules."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static void save() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Saving user modules and tasks into \" + userModuleFileName"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                + \" and \" + userTaskFileName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (ModuleManager.getModCodeList().length !\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveModules(userModuleFile.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            if (TaskManager.getTaskCount() !\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "                Encoder.saveTasks(userTaskFile.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // print module not found"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // print task not found"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     * Updates the user\u0027s NUS Modules save file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "f0fz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    public static void saveNusMods() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        logger.getLogger().info(\"Saving NUS modules into \" + nusModuleFileName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            Encoder.saveNusModules(nusModuleFile.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // print module not found"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            logger.getLogger().log(Level.WARNING, e.getLocalizedMessage(), e);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 94,
      "wangqinNick": 9,
      "Aseanseen": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/Directory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Directory parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the Directory without a parent."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.parent \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs the Directory that has a parent."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param parent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory(Directory parent) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the parent of the class in the Directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract Directory getParent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Returns the corresponding level of the Directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *  The level of the Directory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract DirectoryLevel getLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/DirectoryLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public enum DirectoryLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    ROOT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    MODULE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    TAG {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        public DirectoryLevel next() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel next() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return values()[ordinal() + 1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/directory/Root.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Root extends Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Root() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return DirectoryLevel.ROOT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DataNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class DataNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DuplicateDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/LessonInvalidTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonInvalidTimeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonNotFoundException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/ModuleNotProvidedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleNotProvidedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_ADD_MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_ADD_TASK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    protected static final String DESC_GROUP \u003d \"desc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String DEADLINE_GROUP \u003d \"deadline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String BY_GROUP \u003d \"by\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern ADD_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e-\\\\S+)\" + \"(?\u003cdesc\u003e[^-]*)\" + \"((?\u003cby\u003e-by)?)\" + \"((?\u003cdeadline\u003e.*)?)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareAddCommand(String parameters)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException, IllegalStateException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d ADD_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, AddCommand.FORMAT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        String addedTask \u003d matcher.group(DESC_GROUP).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String taskDeadline \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // Checks for presence of -by"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String dashBy \u003d matcher.group(BY_GROUP);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (dashBy !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            taskDeadline \u003d matcher.group(DEADLINE_GROUP).trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (taskDeadline.isEmpty()) { // -by is present but empty deadline"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, AddTaskCommand.FORMAT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // no task input by user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (Parser.isEmptyParse(addedTask)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return (commandFlag.equals(MODULE_PREFIX))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? new IncorrectCommand(MESSAGE_NO_ADD_MODULE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    : new IncorrectCommand(MESSAGE_NO_ADD_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return getAddCommand(commandFlag, addedTask, taskDeadline);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static AddCommand getAddCommand(String commandFlag, String addedTask, String taskDeadline) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new AddModuleCommand(addedTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new AddTaskCommand(addedTask, taskDeadline);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 58,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.delete.DeleteModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String TASK_MODULE_GROUP \u003d \"taskModule\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String INVALID_GROUP \u003d \"invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern DELETE_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"((?\u003ccommandFlag\u003e.*-\\\\S+)?)\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    + \"(?\u003ctaskModule\u003e\\\\s\\\\S+)\" + \"((?\u003cinvalid\u003e.*)?)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getDeleteCommand(String parameters) throws NumberFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d DELETE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, DeleteCommand.FORMAT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(Parser.COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(Parser.COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String stringTaskIndex \u003d matcher.group(TASK_MODULE_GROUP).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        // Checks for any string after the module or index given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, DeleteCommand.FORMAT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            return new DeleteModuleCommand(stringTaskIndex); //parameter is module code"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new DeleteTaskCommand(Integer.parseInt(stringTaskIndex) - 1);//parameters is the index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 50,
      "Aseanseen": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.done.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class DoneCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String NUMBER_GROUP \u003d \"digit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern DONE_FORMAT \u003d Pattern.compile(\"(?\u003cdigit\u003e.*)\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareDoneCommand(String parameters)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws NumberFormatException, InvalidParameterException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d DONE_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String digit \u003d Parser.isMatcherNull(matcher.group(NUMBER_GROUP))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(NUMBER_GROUP).trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (digit \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int intDigit \u003d Integer.parseInt(digit);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new DoneCommand(intDigit);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String ARGUMENT_IDENTIFIER_GROUP \u003d \"argument\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String FIRST_ARGUMENT_IDENTIFIER_GROUP \u003d \"firstArg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String SECOND_ARGUMENT_IDENTIFIER_GROUP \u003d \"secondArg\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String INVALID_GROUP \u003d \"invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern EDIT_PREFIX_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e-\\\\S+)\" + \"(?\u003cargument\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern EDIT_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003cfirstArg\u003e\\\\S+)\" + \"(?\u003csecondArg\u003e.*)\"); "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getEditCommand(String parameters) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_PREFIX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n%s\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, EditTaskCommand.FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    EditModuleCommand.FORMAT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String argument \u003d Parser.isMatcherNull(matcher.group(ARGUMENT_IDENTIFIER_GROUP))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(ARGUMENT_IDENTIFIER_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareEditModuleCommand(argument.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return prepareEditTaskCommand(argument.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Prepares the command to edit a module."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The command to edit a module"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareEditModuleCommand(String parameters) throws InvalidParameterException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    EditModuleCommand.FORMAT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String oldModuleCode \u003d matcher.group(FIRST_ARGUMENT_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newModuleCode \u003d matcher.group(SECOND_ARGUMENT_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new EditModuleCommand(oldModuleCode, newModuleCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command prepareEditTaskCommand(String parameters)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throws InvalidParameterException,NumberFormatException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d EDIT_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    EditModuleCommand.FORMAT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String stringTaskIndex \u003d matcher.group(FIRST_ARGUMENT_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(stringTaskIndex) - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String newTaskDescription \u003d matcher.group(SECOND_ARGUMENT_IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (Parser.isEmptyParse(newTaskDescription)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return new EditTaskCommand(taskIndex,newTaskDescription);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 97
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.list.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final Pattern LIST_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandFlag\u003e.*-\\\\S+)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static Command getListCommand(String parameters) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        Matcher matcher \u003d LIST_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, parameters, MESSAGE_CHECK_COMMAND_FORMAT, ListCommand.FORMAT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String commandFlag \u003d Parser.isMatcherNull(matcher.group(Parser.COMMAND_FLAG_GROUP))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                ? null : matcher.group(Parser.COMMAND_FLAG_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        if (commandFlag.equals(MODULE_PREFIX)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new ListCommand(Parser.TypeOfEntries.MODULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else if (commandFlag.equals(TASK_PREFIX)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new ListCommand(Parser.TypeOfEntries.TASK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.delete.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.done.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.help.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.list.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.ExceptionMessage.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EMPTY_INPUT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public enum TypeOfEntries {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TASK, MODULE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String COMMAND_WORD_GROUP \u003d \"commandWord\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static final String COMMAND_FLAG_GROUP \u003d \"commandFlag\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final String PARAMETERS_GROUP \u003d \"parameters\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)\" + \"((?\u003cparameters\u003e.*)?)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //(?\u003cidentifier\u003e(?:\\s+\\w\\S*)*)+ -m+ (?\u003cmoduleCode\u003e(?:\\\\s+\" + \"(?:\\\\s+\\\\w\\\\S*)+)?)(?\u003cinvalid\u003e.*)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parses the input string read by the \u003cb\u003eUI\u003c/b\u003e and converts the string into a specific \u003cb\u003eCommand\u003c/b\u003e, which is"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * to be executed by the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The user input has to start with a certain keyword (i.e. \u003ci\u003ecommand word\u003c/i\u003e), otherwise an"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * \u003ci\u003eInvalid Command Exception\u003c/i\u003e will be thrown."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param input The user input read by the \u003cb\u003eUI\u003c/b\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return The \u003cb\u003ecorresponding\u003c/b\u003e command to be executed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public Command parseCommand(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(MESSAGE_EMPTY_INPUT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            // Checks if the matched groups are null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String commandWord \u003d isMatcherNull(matcher.group(COMMAND_WORD_GROUP))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(COMMAND_WORD_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            String parameters \u003d isMatcherNull(matcher.group(PARAMETERS_GROUP))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    ? null : matcher.group(PARAMETERS_GROUP).trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            if (commandWord.equals(ExitCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            } else if (commandWord.equals(HelpCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                switch (commandWord) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                    return new UndoCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return EditCommandParser.getEditCommand(parameters);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return AddCommandParser.prepareAddCommand(parameters);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return DeleteCommandParser.getDeleteCommand(parameters);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return DoneCommandParser.prepareDoneCommand(parameters);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return ListCommandParser.getListCommand(parameters); //command flag is the -t or -m"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                    return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (InvalidParameterException | NumberFormatException | IllegalStateException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static boolean isMatcherNull(String matcherTest) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return (matcherTest \u003d\u003d null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Checks the input given by the user is empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param attributes"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  The input from the user"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if the input is empty, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    protected static boolean isEmptyParse(String... attributes) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (String attribute : attributes) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (!attribute.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 54,
      "wangqinNick": 57,
      "Aseanseen": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/system/SystemSetting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class SystemSetting {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/TextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static Scanner in;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //Offset required to convert between 1-indexing and 0-indexing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final int DISPLAY_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String DIVIDER_LINE \u003d \"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    //%1$ catches the furthest left arg, %2$ catches the 2nd arg"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static final String MESSAGE_INDEX_LIST_FORMAT \u003d \"\\n%1$d. %2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public TextUi() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public TextUi(Scanner in) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        this.in \u003d in;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void showGoodByeMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                Message.MESSAGE_GOODBYE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void showWelcomeMessage()     {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                Message.MESSAGE_WELCOME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static void outputToUser(String... output) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (String o : output) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            System.out.println(o);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Formats an Arraylist of type Task with their Index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param taskList the list to be formatted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAY_INDEX_OFFSET;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            stringFormat.append(getIndexListFormat(displayIndex, t.toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return stringFormat.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Formats the HashMap to string with their index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param modulesMap the HashMap to be formatted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexModuleList(HashMap\u003cString, Module\u003e modulesMap) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAY_INDEX_OFFSET;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        for (Module module : modulesMap.values()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            stringFormat.append(getIndexListFormat(displayIndex, module.toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return stringFormat.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *  Formats a string with its index in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param listIndex task/module index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param listItem task/module name or description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getIndexListFormat(int listIndex, String listItem) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return String.format(MESSAGE_INDEX_LIST_FORMAT, listIndex, listItem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Trims spacing and checks if input is empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param rawInputLine full input from user"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return true if inputline is a legit command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    private static boolean isEmptyCheck(String rawInputLine) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return rawInputLine.trim().isEmpty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * gets the User\u0027s input command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @return the trimmed command input"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static String getUserCommand() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        System.out.println(\"Enter Command: \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        while (isEmptyCheck(userInput)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * Shows the result of a command execution to the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     * @param result the relevant message shown to user"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        outputToUser("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                result.feedbackToUser,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                DIVIDER_LINE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * gets Help Message."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     * @return the list of available commands"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static String getHelpMessage() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        return MESSAGE_HELP;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 104,
      "wangqinNick": 4,
      "amalinasani": 22,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/DummyModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/ExceptionMessage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MISSING_DIRECTORY_NAME \u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Please include the name of the directory you want to move to.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Alternatively, enter .. to move to the parent directory instead.\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Sorry, the module is not found.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_PROVIDED \u003d \"Sorry, the module is not provided by NUS currently.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Sorry, the module already exists.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_CATEGORY_NOT_FOUND \u003d \"Sorry, the category is not found.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"Sorry, the category already exists.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"Sorry, the task is not found.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Sorry, the task already exists.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TASK_FILE_NOT_FOUND \u003d \"Sorry, the file is not found.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK_FILE \u003d \"Sorry, the file already exists.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_IMPLICIT_FILE_EXCEED_LIMIT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the name of the file you are adding exceeds 30 characters.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Please enter a new file name.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"Sorry, some parameters seem to be missing.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIORITY \u003d \"Alert! Priority should be a number between 0 and 20.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Sorry, the deadline you entered is not in a recognised datetime format.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"Please make sure to follow the datetime format as such:\\n\\t\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DateTime.FORMAT + \"\\nExample: 06/06/2020 12:00am\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            \"Sorry, the date you entered is not in a recognised date format.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + \"Please make sure to follow the date format as such:\\n\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            + DateTime.DATE_FORMAT + \"\\nExample: 07/07/2020\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_LIST_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"The List number is not found on the list! Deletion is aborted.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TRAVERSE_ERROR \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"There seems to be an error when traversing. Moving back to Root...\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FAILED_DIRECTORY_TRAVERSAL \u003d \"Unable to traverse further.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DIRECTORY_NOT_FOUND \u003d \"Sorry, the next directory could not be found.\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DIRECTORY_LEVEL \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, unable to execute the command at the current directory level.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Either move to the appropriate directory level, or enter the full directory path.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETERS \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Oh no! It seems that some invalid or missing parameters were found!\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIX_FOUND \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"There seems to be duplicate prefix(es) in your input...\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_IO_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_SYSTEM_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file. \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"Please check that your file is not currently running.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Sorry, the file path entered is invalid.\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_ADD_FILE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the file does not exists. Please check the file path again.\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_SECURITY_EXCEPTION \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Oh no! File access was denied by device\u0027s security program.\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_OPEN \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"The following file(s) could not be opened as they cannot be found:\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_DELETE \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Deletion completed.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"However, note that the following file(s) could not be deleted completely from Nuke as they \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            + \"could not be found:\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_LIST_EMPTY \u003d \"Your list is empty.\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            \"It seems you have input an incorrect command word. \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            + \"Please key in help to see our list of commands. \\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 3,
      "wangqinNick": 60,
      "amalinasani": 1,
      "Aseanseen": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/Message.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d \"SUCCESS!! The task has been added.\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been added.\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"SUCCESS!! The task has been deleted.\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been deleted.\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been updated.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"SUCCESS!! The task has been updated.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"Please enter a command.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Sorry, the command entered contains some unrecognised parameters starting from here:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_CHECK_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"Please check to make sure to follow the command format as such:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_MODULE \u003d \"Please enter a new module code to edit.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_TASK \u003d \"Please enter a new task index to edit.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_NO_ADD_MODULE \u003d \"Please enter a new module code to add.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_NO_ADD_TASK \u003d \"Please enter a new task index to add.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Good bye!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to RAVI\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"SUCCESS!! The task has been marked as done.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String ICON_DONE \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String ICON_NOT_DONE \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_LIST_PRINTED \u003d \"List:\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undo successfully!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_UNDO_UNSUCCESSFUL \u003d \"Sorry, there was an IO error when undoing the state.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_UNDO_AT_BEGINNING \u003d \"You are already at the initial state!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    public static final String MESSAGE_HELP \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "              \"Command                                       Function\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"help ---------------------------------------- View command list\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -t \u003ctask desc.\u003e [-by] ------------------- Add task\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -m \u003cmodule\u003e ----------------------------- Add module\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -t \u003ctask index\u003e \u003cnew task desc.\u003e ------- Edit a task\u0027s description\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -m \u003cmodule code\u003e \u003cnew module code\u003e ----- Edit a module\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -t \u003ctask index\u003e ------------------------- Delete a task\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -m \u003cmodule index\u003e ----------------------- Delete a module\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -t ------------------------------------- List all tasks\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -m ------------------------------------- List all modules\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"done \u003ctask index\u003e --------------------------- Mark task as done\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"bye ----------------------------------------- Exit RaVi\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 5,
      "wangqinNick": 16,
      "amalinasani": 17,
      "Aseanseen": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/add/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String TASK \u003d \"test task\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String BAD_DEADLINE \u003d \"bad_deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String EMPTY_DEADLINE \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String SPACES_DEADLINE \u003d \"        \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addModule_duplicateModuleMessage_isShown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addMod \u003d new AddModuleCommand(MOD_CODE_1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addDupMod \u003d new AddModuleCommand(MOD_CODE_1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addMod.execute();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d addDupMod.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_DUPLICATE_MODULE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_badDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddTaskCommand(TASK, BAD_DEADLINE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_emptyDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddTaskCommand(TASK, EMPTY_DEADLINE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void addTask_blankDeadline_DateTimeParseException_isThrown() throws DateTimeParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertThrows(DateTimeParseException.class,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "            () -\u003e new AddTaskCommand(TASK, SPACES_DEADLINE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 45
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/delete/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "package seedu.duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.command.add.AddTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String MOD_CODE_MISSING \u003d \"CS2040\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final String TASK \u003d \"test task\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    static final int TASK_ID_MISSING \u003d 10;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addModule \u003d new AddModuleCommand(MOD_CODE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void setupTaskObjects() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        AddCommand addModule \u003d new AddTaskCommand(TASK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        addModule.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteMissingModuleMessage_isShown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DeleteCommand deleteMissingModuleTest \u003d new DeleteModuleCommand(MOD_CODE_MISSING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d deleteMissingModuleTest.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_MODULE_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    void deleteMissingTaskMessage_isShown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        DeleteCommand deleteMissingTaskTest \u003d new DeleteTaskCommand(TASK_ID_MISSING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        CommandResult commandResult \u003d deleteMissingTaskTest.execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_TASK_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 48
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/done/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void setupTaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        Task newTask \u003d new Task(\"read a book\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void doneTask_validIndex_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DoneCommand doneValidTask \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d doneValidTask.execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(Message.MESSAGE_DONE_TASK_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void doneTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        DoneCommand doneInvalidTask \u003d new DoneCommand(2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d doneInvalidTask.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(ExceptionMessage.MESSAGE_TASK_NOT_FOUND, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 35
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/edit/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.storage.Decoder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class EditModuleCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void execute() throws ModuleManager.DuplicateModuleException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        HashMap\u003cString, Module\u003e modulesMap \u003d Decoder.loadModules(\"data/\" + \"moduleList.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //ModuleManager.add(new Module(\"CS1231\", \"AAA\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //base case"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -m cs1231 CS3224\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/edit/EditTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.Executor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.duke.util.Message.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditTaskCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task newTask \u003d new Task(\"read a book\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.add(newTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //base case"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edit -t 1 return a book\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //invalid parameters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"edit -t 0 return a book\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result2.feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"edit -t 2 return a book\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_TASK, result3.feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/help/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "package seedu.duke.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    static final String HELP_MESSAGE \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "              \"Command                                       Function\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"help ---------------------------------------- View command list\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -t \u003ctask desc.\u003e [-by] ------------------- Add task\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"add -m \u003cmodule\u003e ----------------------------- Add module\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -t \u003ctask index\u003e \u003cnew task desc.\u003e ------- Edit a task\u0027s description\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"edit -m \u003cmodule code\u003e \u003cnew module code\u003e ----- Edit a module\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -t \u003ctask index\u003e ------------------------- Delete a task\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"del -m \u003cmodule index\u003e ----------------------- Delete a module\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -t ------------------------------------- List all tasks\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"list -m ------------------------------------- List all modules\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"done \u003ctask index\u003e --------------------------- Mark task as done\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "            + \"bye ----------------------------------------- Exit RaVi\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amalinasani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    void testHelpCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        CommandResult commandResult \u003d helpCommand.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "        assertEquals(HELP_MESSAGE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amalinasani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amalinasani": 29
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/misc/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.Executor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.StateManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.data.storage.InputOutputManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.util.Message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        InputOutputManager.start();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        StateManager.initialise();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ModuleManager.clearModules();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void undo_addModule_Success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"add -m cs3235\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"add -m cs3230\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new UndoCommand().execute();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"add -m cs1010\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void undo_deleteModule_Success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"add -m cs3235\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"add -m cs3230\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new UndoCommand().execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"add -m cs1010\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //CommandResult result4 \u003d Executor.executeCommand(\"del -m cs1010\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(1, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //new UndoCommand().execute();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 57
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonInvalidTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.LessonNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Lesson lesson2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_3 \u003d \"MA1511\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_12 \u003d LocalTime.of(12,0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_13 \u003d LocalTime.of(13,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_14 \u003d LocalTime.of(14,0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final LocalTime time_15 \u003d LocalTime.of(15,0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupModObjects() throws LessonInvalidTimeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson1 \u003d new Lesson(MOD_CODE_1, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_13);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        lesson2 \u003d new Lesson(MOD_CODE_2, LessonType.LECTURE, DayOfWeek.MONDAY, time_14, time_15);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager.initialise();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager.addLesson(lesson1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager.addLesson(lesson2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getOverlapException_addLesson() throws LessonInvalidTimeException, LessonNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson1 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_13);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e LessonManager.addLesson(testLesson1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson2 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_12, time_14);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e LessonManager.addLesson(testLesson2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson3 \u003d new Lesson(MOD_CODE_3, LessonType.LECTURE, DayOfWeek.MONDAY, time_13, time_15);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class, () -\u003e LessonManager.addLesson(testLesson3));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_LessonNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e LessonManager.removeLesson(DayOfWeek.TUESDAY, 0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e LessonManager.removeLesson(DayOfWeek.MONDAY, -1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e LessonManager.removeLesson(DayOfWeek.MONDAY, 2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verify_addLesson_sortsLessons() throws LessonNotFoundException, LessonInvalidTimeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_1, LessonManager.getDayLessonList(DayOfWeek.MONDAY).get(0).getModuleCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_2, LessonManager.getDayLessonList(DayOfWeek.MONDAY).get(1).getModuleCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String testCode \u003d \"Test Code\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Lesson testLesson \u003d new Lesson(testCode, LessonType.LECTURE, DayOfWeek.MONDAY, time_13, time_14);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager.addLesson(testLesson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_1, LessonManager.getDayLessonList(DayOfWeek.MONDAY).get(0).getModuleCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(testCode, LessonManager.getDayLessonList(DayOfWeek.MONDAY).get(1).getModuleCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(MOD_CODE_2, LessonManager.getDayLessonList(DayOfWeek.MONDAY).get(2).getModuleCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verifyLessonCount_afterDeletingLessons() throws LessonNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, LessonManager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager.removeLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, LessonManager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonManager.removeLesson(DayOfWeek.MONDAY, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, LessonManager.getLessonCountOnDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verifyException_lessonConstruction_withInvalidTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            () -\u003e new Lesson(MOD_CODE_1, LessonType.LAB, DayOfWeek.TUESDAY, time_13, time_12));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(LessonInvalidTimeException.class,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            () -\u003e new Lesson(MOD_CODE_1, LessonType.LAB, DayOfWeek.TUESDAY, time_12, time_12));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void verifyLessonFilter_isWorking() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonFilter filterTuesday \u003d (l) -\u003e l.getDay().equals(DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, LessonManager.filterLessons(filterTuesday).size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonFilter filterMonday \u003d (l) -\u003e l.getDay().equals(DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, LessonManager.filterLessons(filterMonday).size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonFilter filterMonBefore2 \u003d (l) -\u003e l.getDay().equals(DayOfWeek.MONDAY) \u0026\u0026 l.getEndTime().isBefore(time_14);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, LessonManager.filterLessons(filterMonBefore2).size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String testCode \u003d MOD_CODE_1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LessonFilter filterVariableModCode \u003d (l) -\u003e l.getModuleCode().equalsIgnoreCase(testCode);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, LessonManager.filterLessons(filterVariableModCode).size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 98
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import seedu.duke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Module normalMod1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Module normalMod2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_1 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static final String MOD_CODE_2 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupModObjects() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod1 \u003d new Module(MOD_CODE_1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod1.setTitle(\"Test\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod2 \u003d new Module(MOD_CODE_2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalMod2.setTitle(\"Test 2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.clearModules();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.add(normalMod1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.add(normalMod2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getModuleCount_isEquals2() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getModule_isCorrect() throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod1.getTitle(), ModuleManager.getModule(MOD_CODE_1).getTitle());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod1.getModuleCode(), ModuleManager.getModule(MOD_CODE_1).getModuleCode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod2.getTitle(), ModuleManager.getModule(MOD_CODE_2).getTitle());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(normalMod2.getModuleCode(), ModuleManager.getModule(MOD_CODE_2).getModuleCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void check_moduleNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(ModuleManager.ModuleNotFoundException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            () -\u003e ModuleManager.getModule(\"WHAT1010\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void editMod_getTitle_equalsNewTitle()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            throws ModuleManager.DuplicateModuleException, ModuleNotProvidedException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "            ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newTitle \u003d \"NEW\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newCode \u003d \"CODE1\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Module editedMod \u003d new Module(newCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        editedMod.setTitle(newTitle);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.edit(editedMod, MOD_CODE_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newTitle, ModuleManager.getModule(newCode).getTitle());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void deleteTask_getTaskCount_isEquals0() throws ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.delete(MOD_CODE_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ModuleManager.delete(MOD_CODE_2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, ModuleManager.getModCodeList().length);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(ModuleManager.ModuleNotFoundException.class, () -\u003e ModuleManager.getModule(MOD_CODE_1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 71
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "f0fz"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "f0fz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "f0fz"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Task normalTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    static Task datedTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void setupTaskObjects() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalTask \u003d new Task(\"ABC\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime myDate \u003d LocalDateTime.of(2020, 10, 1, 0, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        datedTask \u003d new Task(\"DEF\", myDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(normalTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(datedTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void getTaskCount_isEquals2() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, TaskManager.getTaskCount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void check_taskNotFoundException_isThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(TaskManager.TaskNotFoundException.class, () -\u003e TaskManager.getTask(2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void editTask_getName_equalsNewName() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newName1 \u003d \"NEW\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        String newName2 \u003d \"NAME\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        normalTask.setName(newName1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        datedTask.setName(newName2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.edit(normalTask, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.edit(datedTask, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newName1, TaskManager.getTask(0).getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(newName2, TaskManager.getTask(1).getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void deleteTask_geTaskCount_isEquals0() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.delete(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.delete(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(0, TaskManager.getTaskCount());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertThrows(TaskManager.TaskNotFoundException.class, () -\u003e TaskManager.getTask(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkTaskOrder_isCorrect() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        LocalDateTime myDate \u003d LocalDateTime.of(2020, 10, 1, 1, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task laterDatedTask \u003d new Task(\"LATER\", myDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.add(laterDatedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTaskWithDeadlines \u003d TaskManager.summary().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task earlierTask \u003d sortedTaskWithDeadlines.get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task laterTask \u003d sortedTaskWithDeadlines.get(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        // Assert that laterTask actually has a later deadline than earlierTask"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(laterTask.getDeadline().compareTo(earlierTask.getDeadline()) \u003e 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, sortedTaskWithDeadlines.size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkNoDeadlineList_isCorrect() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTasksWithoutDeadlines \u003d TaskManager.summary().get(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        Task taskWithoutDeadline \u003d sortedTasksWithoutDeadlines.get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(taskWithoutDeadline.getDeadline() \u003d\u003d null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(1, sortedTasksWithoutDeadlines.size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "f0fz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    void summary_checkCompletedList_isCorrect() throws TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.done(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        TaskManager.done(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        ArrayList\u003cTask\u003e completedTasks \u003d TaskManager.summary().get(2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertTrue(completedTasks.get(0).getStatus());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "f0fz"
        },
        "content": "        assertEquals(2, completedTasks.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "f0fz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "f0fz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "f0fz": 90
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.duke.command.edit.EditModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import seedu.duke.command.edit.EditTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_EDIT \u003d \"3 read a book\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_TASK_TO_EDIT \u003d \"read a book\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_ADD_WITH_DEADLINE \u003d \"-t project work -by 2-2-2020 1800\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String TASK_TO_ADD_WITHOUT_DEADLINE \u003d \"-t do quiz\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    static final String BAD_TASK_TO_ADD \u003d \"-t do quiz -by \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void isNothingToEdit_emptyString_returnsTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().isEmptyParse(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().isEmptyParse(\"\", \"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new Parser().isEmptyParse(\"\", \"\", \"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void isNothingToEdit_nonemptyString_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertFalse(new Parser().isEmptyParse(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertFalse(new Parser().isEmptyParse(\" \", \"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertFalse(new Parser().isEmptyParse(\"\", \"b\", \"\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    void prepareEditModuleCommandTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new EditCommandParser().prepareEditModuleCommand(\"-m cs2113 cs3224\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                instanceof EditModuleCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new EditCommandParser().prepareEditModuleCommand(\" cs2113 cs3224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditTaskCommandTest_returnsEditTaskCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new EditCommandParser().prepareEditTaskCommand(TASK_TO_EDIT)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof EditTaskCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareEditTaskCommandTest_badTaskToEdit_isThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "            () -\u003e new EditCommandParser().prepareEditTaskCommand(BAD_TASK_TO_EDIT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareAddCommandTest_returnsAddCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(TASK_TO_ADD_WITH_DEADLINE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof AddCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(TASK_TO_ADD_WITHOUT_DEADLINE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof AddCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    void prepareAddCommandTest_returnsIncorrectCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "        assertTrue(new AddCommandParser().prepareAddCommand(BAD_TASK_TO_ADD)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "                instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tobiasceg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tobiasceg": 43,
      "wangqinNick": 24,
      "Aseanseen": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aseanseen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Aseanseen": 1
    }
  }
]
