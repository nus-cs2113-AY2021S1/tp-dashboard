[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "   Hello from..."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     How can termiNus assist you today?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " \t   Unsure what to type? Start of by typing \u003chelp\u003e to see the commands and their usage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 14,
      "-": 55
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    compile group: \u0027commons-validator\u0027, name: \u0027commons-validator\u0027, version: \u00271.7\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    archiveBaseName \u003d \"termiNus\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "-": 45,
      "Cao-Zeyu": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | GuoAi | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zeyu Cao | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![MuhammadPhoto](./displayPictures/MuhammadPhoto.jpg) | Muhammad Hozefa | [Github](https://github.com/MuhammadHoze) | [Portfolio](docs/team/muhammadhozefa.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Jia Jun | [Github](https://github.com/iamchenjiajun) | [Portfolio](docs/team/iamchenjiajun.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Antonio | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 4,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Architecture Diagram"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Below is an architecture diagram of termiNus."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![ArchitectureDiagram](./images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Duke` is the main object of the program and handles all the logic and models related to the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Ui` is the main object that provides an interface between `Duke` and the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Command` represents a command that is provided by the user. `Ui` reads the command and it is sent to `Parser` to create a new `Command` object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Duke` executes the command and shows the output to the user using `Ui`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Command` object modifies the state of `ItemList`, which consists of multiple lists for different types of `Items`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Storage` takes the state of `ItemList` and stores it to file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Sequence Diagram"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Below is a sequence diagram of how the main program functions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![DukeSequenceDiagram](./images/DukeSequenceDiagram.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- First, the `main` function of the `Duke` class creates an instance of `Duke`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- During the instantiation of `Duke`, a `Storage` object is created."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Duke` creates and loads the state of `ItemList` from file by calling a function from `Storage`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- After `Duke` is initialized, the `Duke` class calls the `run()` method of `Duke`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Duke` calls methods from `Ui` class and shows messages to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Duke` reads commands from the user using the `Ui` class (which acts as an interface between `Duke` and the user)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Command` object is returned to `Duke` which is executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Command` object interacts with `ItemList` and changes its state."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Storage` saves the state of `ItemList` to file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Duke` continues reading commands until a `ByeCommand` is generated by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Ui component"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Parser component"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Parser` class is a class forming part of the logic of termiNus. The `Parser` parses user commands and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "returns a `Command` subclass which corresponds to the full command with arguments."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### High level description"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Parser.parse()` method takes in `fullCommand` as an argument, which is the full command entered by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example commands:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `add task tP meeting c/cs2113 p/0`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `add module CS2113 mc/4 ay/2021S1 g/A`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `fullCommand` is composed of several parts, which consists of a root command (`add`), description (`module CS2113`)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "and optional arguments (`mc/4 ay/2021S1 g/A`)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "An optional argument consists of 2 parts, which is delimited by a forward slash. In the example above, there are 3 optional"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "arguments, which are `mc/4`, `ay/2021S1` and `g/A`. Each optional argument can be represented in this form: `\u003ckey\u003e/\u003cvalue\u003e`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "In some commands, the optional arguments may be compulsory and is checked by the `Parser` at runtime."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `parse` method parses the `fullCommand` into these parts before passing them as arguments to `CommandCreator`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "methods and returns a `Command` object with the corresponding arguments."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Implementation details"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The following sequence diagram shows how the `Parser` works."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![DukeSequenceDiagram](./images/ParserSequenceDiagram.png)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The `parse` method of `Parser` is invoked by the calling object. In termiNus, the only object that invokes this"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "method is `Duke`. The `fullCommand` is passed an argument, which is the full command entered by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The method parses `fullCommand` into two separate `Strings`, which are `rootCommand` and `commandString`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`rootCommand` contains the first word of the command and `commandString` contains the rest of the command with the first"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "word removed. This is done using the `split` method of the `String` class, then removing the `rootCommand` from the "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`fullCommand` before storing it in `commandString`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The method then invokes the `removeArgumentsFromCommand` method to parse and remove optional arguments from the full"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "command. This is done using regular expression parsing which is detailed in the next section. The results are returned"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "to the `parse` method and stored in `description`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The method then invokes the `getArgumentsFromRegex` method to parse the optional arguments from the full command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The results are stored in a `HashMap\u003cString, String\u003e`, which is a `HashMap` of key-value pairs, similar to the form of the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "optional argument (`\u003ckey\u003e/\u003cvalue\u003e`). The results are returned to the `parse` method and stored as `argumentsMap`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The method then checks the `rootCommand` and decides which `Command` to return, which calls `CommandCreator`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "methods with the parsed `argumentsMap`, `description`, and `commandString`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The results of the `CommandCreator` methods are returned as a `Command` back to the invoker of the `parse` method."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Regular expression parsing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Two of the previously mentioned methods, `removeArgumentsFromCommand` and `getArgumentsFromRegex` make use of regular"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "expressions to parse the optional arguments."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- The regular expression that parses these optional arguments is `([\\w]+/[^\\s]+)`. This regular expression matches 1 or more"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "alphanumeric characters (denoted by `[\\w]+`), followed by a forward slash, then 1 or more of any character except whitespace (denoted by `[^\\s]+`)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- The expression also uses capturing parenthesis to ensure that the parser does not parse the same argument twice."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- The results of `getArgumentsFromRegex` are stored as a `HashMap` instead of `ArrayList` or simply returned as a value."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "This allows the same method to be reused for different commands, which may accept different optional arguments with"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "different key-value pairs. This ensures that the code follows DRY principles."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- The regular expressions parsing means that we do not need to manually parse every different command with different"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "arguments, thus reducing code complexity and SLOC."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Command component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "\u003c!-- @@author GuoAi --\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Storage component  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The `Storage` class is a class loading data from files when Duke starts and saving data to files after each command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### High level description"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Methods handling data loading (i.e. `loadTask()`, `loadBook()`, `loadLinks()`, `loadCredit()`, `loadModule()` methods) "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "return an `ArrayList` of `Item`s (i.e. `Task`, `Book`, `Link`, `Credit`, `Module`). These will be the initial values of "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "the `ItemList`. The `save()` method takes an `ItemList` and a `String` specifying the path to which the file will be "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "saved. The `ItemList` will be parsed and saved into files (each `ItemList` will be saved to a separate file) at the "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "specified path.  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Formats of the files: "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `tasks.txt`:  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 6 fields stored for each `Task`:  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. String `T` for \"Task\"  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Whether the `Task` has been done or not (1 for done, 0 for not done)  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Description of the `Task`  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Priority of the `Task` (an Integer)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "5. Category of the `Task`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "6. Date of the `Task`  "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by ` | ` with a leading and a trailing space. Each `Task` is stored as one line.  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `T | 0 | borrow book | 1 | book | 28-10-2020`  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `books.txt`:  "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 5 fields stored for each `Book`:  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. String `B` for \"Book\"  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Whether the `Book` has been returned or not (1 for returned, 0 for not returned)   "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Name/Description of the `Book`  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Borrow date of the `Book`  "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "5. Return date of the `Book`  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by ` | ` with a leading and a trailing space. Each `Book` is stored as one line.  "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `B | 0 | cooking book | 11-11-2011 | 11-12-2011`  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `links.txt`:  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 3 fields stored for each `Link`:  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Module of the `Link`  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Type of the `Link`  "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. URL of the `Link`  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by ` | ` with a leading and a trailing space. Each `Link` is stored as one line.  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `CS2113 | lecture | https://cs2113Lecture.zoom.com`  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `modules.txt`:  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 4 fields for each `Module`:  "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Module code  "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Grade  "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Modular credits  "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Academic year and semester  "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by ` | ` with a leading and a trailing space. Each `Module` is stored as one line.  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Implementation details"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The following sequence diagram shows how the `Storage` works."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "![StorageSequenceDiagram](./images/StorageSequenceDiagram.png)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. At the start of `Duke`, a new `Storage` object will be created."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. `Duke` calls loading methods (i.e. `loadTask()`, `loadBook()`, `loadCredit()`, `loadLinks()`, `loadModule()`) "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "sequentially. Each loading method calls the corresponding helper method (i.e. `loadTaskFromLine()`, `loadBookFromLine()`, "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`loadCreditFromLine()`, `loadLinkFromLine()`, `loadModuleFromLine()`) to load `Item`s from each line in the file. "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. After each command, `Duke` calls the `save()` method of `Storage` to save all the `Item`s in the list to files."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Undergraduate students of National University of Singapore who:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- require help to better manage their school work."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- forgets to return their loan books to the library on time."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- wants a timetable planner for easy reference."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- are lazy to create separate module folders every semester."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- wish to calculate their CAP."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "termiNus is an application which helps NUS undergraduates to better manage their school life, by providing daily task or"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "borrowed books tracking, and module-related functions. This increase users\u0027 efficiency and make their life more organized."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|Version|Priority| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|--------|----------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v1.0|***|student|add tasks into a list|keep track of the things I need to do|"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v1.0|***|student|assign priorities to tasks|focus on the more important things first|"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v1.0|**|student|assign categories to tasks|have a more organised task list|"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v1.0|***|student|mark tasks as done|keep track of the remaining tasks to do|"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v1.0|**|student|list all tasks in my list|have a better overview|"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v1.0|***|student|be able to delete unwanted tasks|focus on the tasks which I need|"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v1.0|***|student|save all data after using the application|retrieve the data upon running the application"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v2.0|**|student|automatically create folders for my modules|I do not have to manually create them|"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v2.0|***|student|add recurring tasks|avoid adding the same tasks every week"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v2.0|***|student|have a calendar|I can view my current and upcoming tasks"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v2.0|***|student|be able to set a tracker my borrowed books|avoid overdue fines"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v2.0|**|student|sort my tasks based on highest priority|focus on those tasks first"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v2.0|***|student|save zoom links in a centralized place|easily attend my online classes instead of looking through my email for the link "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v2.0|***|student|add modules and calculate my CAP|have a better projection of my grades and efforts"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "|v2.0|*|student|login with a password|my system is protected "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### List tasks"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The list tasks feature allows the user to list all the tasks tracked."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilitated by `ListCommand`. "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 1 The user inputs the command `list tasks`. (Assuming the task list is not empty)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 2 The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `ListCommand`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 3 The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `tasks`, and returns a `ListCommand` for the whole task list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 4 The command is executed and the complete list of all the tracked tasks is displayed."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### List tasks with priority"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The list tasks with priority feature allows the user to list tasks of a certain priority."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilitated by `Parser` and `ListCommand`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 1 The user inputs the command `list tasks p/3`. (Assuming the tasks of CS2113 is not empty)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 2 The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `ListCommand`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 3 The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `tasks` and `p/`, and returns a `ListCommand` for the task list of priority level 3."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 4 The command is executed and the list of tasks with level 3 priority is displayed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### List tasks with category"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The list tasks with category feature allows the user to list tasks of a certain category."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilitated by `Parser` and `ListCommand`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 1 The user inputs the command `list tasks c/CS2113`. (Assuming the tasks of CS2113 is not empty)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 2 The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `ListCommand`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 3 The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `tasks` and `c/`, and returns a `ListCommand` for the task list under CS2113 category."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 4 The command is executed and the list of tasks categoried by CS2113 is displayed."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Add links"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The add links feature allows the user to add and save zoom meeting links of modules."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is faclitated by `Parser`, `AddCommand` and `Storage`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 1 The user inputs `add links m/CS2113 t/lecture u/https://nus.sg.zoom.us/cs2113/lecture`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 2 The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `AddCommand`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 3 The method `createAddCommand()` in `CommandCreator` further parses the input by identifying the keyword `link`, and returns a `AddCommand`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 4 The command is excuted and the links is added into the link list with module name and online class type."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 5 `Storage` saves the added link by writing it into the `links.txt` file."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### List links"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The list link feature allows the user to list all the zoom meeting links."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilitated by `Parser` and `AddCommand`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 1 The user inputs `list links`. (Assuming the link list is not empty)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 2 The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `ListCommand`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 3 The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `links`, and returns a `ListCommand` for the link list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Step 4 The command is excuted and the complete list of links is displayed."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Calendar command"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The calendar command allows users to print out a calendar view of their tasks within the next `X` days, where `X` is a parameter passed by the user."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `CalendarCommand` obtains a list of tasks from `TaskList` by using its `getTaskList` method, which returns an `ArrayList` of `Task` objects."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- The list of tasks is converted into a `Stream`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- The `Task` objects without dates are filtered out."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- The `Task` objects outside the range of the current date and `X` days of the current date are filtered out."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- The `ArrayList` is sorted by task dates, which uses a `Comparator` defined in the parameters."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- The `Stream` is collected back into an `ArrayList`, which has sorted dates of tasks within the next `X` days."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- The `ArrayList` of `Task` objects are passed to the `Ui.dukePrintCalendar` method, which prints the tasks as a calendar."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- The `dukePrintCalendar` method groups tasks by date and a new heading is printed for each day. This is done by comparing each `Task` in the loop with the"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "previous task to check if they have the same date, and to print a new heading if not."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The filtering of the tasks by date is done using this code, which is called on a `Stream` object."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003e\u003d 0)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003c\u003d daysToPrint)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The sorting of tasks by date is done using this code, which is also called on a `Stream` object."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ".sorted(Comparator.comparing(Task::getDate))"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This sorts the stream using a `Comparator` which is defined inline. The `Comparator` makes use of the `Task.getDate()` method to do the comparisons."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This is done instead of defining a new `Comparator` class as `toCompare` is already implemented in the `LocaDate` API, and doing this simplifies the code."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 97,
      "GuoAi": 188,
      "-": 3,
      "Cao-Zeyu": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# termiNus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Hello from..."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     How can termiNus assist you today?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Unsure what to type? Start of by typing \u003chelp\u003e to see the commands and their usage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is an interactive task manager for undergraduate students in NUS. It is ideal for keyboard-inclined students "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "to showcase their skills and make their life easier with the help of termiNus. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Here are some useful links:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 12,
      "MuhammadHoze": 8,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "# \u003cdiv align\u003d\"center\"\u003e termiNus User Guide\u003c/div\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "* [Introduction](#introduction)   "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "* [Quick Start](#quick-start) "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Adding a task](#adding-a-task-add): `add`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Adding recurring tasks](#adding-recurring-tasks-addr): `addr`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Adding a module](#adding-a-module-add-module): `add module`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Adding a WebLink](#adding-a-weblink-add-link): `add link`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Borrowing a book](#borrowing-a-book-borrow): `borrow`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    * [Adding an expense item](#adding-an-expense-item-spend-coming-soon): `spend` (coming soon)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Creating module folders](#creating-module-folders-makefolders): `makefolders`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Displaying tasks on list](#displaying-tasks-on-list-list): `list`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        * [Displaying tasks based on priority](#displaying-tasks-based-on-priority-list): `list`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        * [Displaying tasks based on category](#displaying-tasks-based-on-category-list): `list`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Displaying WebLinks on list](#displaying-weblinks-on-list-list): `list`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Displaying books borrowed and returned on list](#displaying-books-borrowed-and-returned-on-list-list): `list`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Displaying modules on list](#displaying-modules-on-list-list): `list`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    * [Displaying expense items on list](#displaying-expense-items-on-list-list-coming-soon): `list` (coming soon)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Deleting a task from the list](#deleting-a-task-from-the-list-delete): `delete`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        * [Deleting all tasks of a certain priority](#deleting-all-tasks-of-a-certain-priority-delete): `delete`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        * [Deleting all tasks of a certain category](#deleting-all-tasks-of-a-certain-category-delete): `delete`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Deleting a link from the list](#deleting-a-link-from-the-list-delete): `delete` "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Deleting a module from the list](#deleting-a-module-from-the-list-delete): `delete` "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    * [Deleting an expense item from the list](#deleting-an-expense-item-from-the-list-delete-coming-soon): `delete` (coming soon)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Marking a task as done](#marking-a-task-as-done-done): `done`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Setting a module as complete](#setting-a-module-as-complete-done): `done`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Marking a book as returned](#marking-a-book-as-returned-return): `return`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Setting the priority of a task](#setting-the-priority-of-a-task-set): `set`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Setting the category of a task](#setting-the-category-of-a-task-category): `category`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Setting the date of a task](#setting-the-date-of-a-task-date): `date`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Printing task calendar](#printing-task-calendar-calendar): `calendar`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Searching for tasks with keyword](#searching-for-tasks-with-keyword-find): `find`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Clearing all tasks](#clearing-all-tasks-clear): `clear`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Getting help](#getting-help-help): `help`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * [Exit and Save](#exiting-and-saving-the-program-bye): `bye`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "* [FAQ](#frequently-asked-questions)  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "* [Command Summary](#quick-command-reference)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is an interactive Command Line Interface (CLI) task manager for undergraduate students in NUS. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This program will help them achieve a better grip on their school life as well as assist in better management of their "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "daily expenses and be reminded of any library loans. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Fear not, this guide contains all the features found in termiNus along with detailed explanations on the usage of each"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "command. We hope this guide is user-friendly! "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Download the latest version of `termiNus` from [here](https://github.com/AY2021S1-CS2113-T14-3/tp/releases/latest)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. Copy the jar file to a new folder."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "4. Navigate to the directory which contains `termiNus.jar` using the command prompt."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "5. Run termiNus by typing `java -jar termiNus.jar` and press enter."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "6. A greeting message will be displayed as shown below"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Hello from..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     How can termiNus assist you today?"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Unsure what to type? Start of by typing \u003chelp\u003e to see the commands and their usage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "7. Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**Take note:**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    1. "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    2."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    3."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding a task: `add`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Adds a new item to the list of todo tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `add task \u003cdescription\u003e \u003coptional arguments\u003e`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `date/\u003cdd-MM-yyyy\u003e` sets the date of the task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: By default, there is no category and date, and the priority is set to 0."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Optional arguments can be typed in any order."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add task tP meeting`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add task tP meeting c/cs2113 p/1`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add task tP meeting p/1 c/cs2113 date/13-05-2020`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add task tP meeting date/13-05-2020 p/1 c/cs2113`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [T][N] tP meeting (p:1) (category: cs2113) (date: 13 May 2020)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding recurring tasks: `addr`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Adds multiple tasks to the list of tasks that occur weekly on a given day."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `addr \u003cdescription\u003e \u003coptional/compulsory arguments\u003e`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `s/\u003cdd-MM-yyyy\u003e` start date of recurring tasks (inclusive)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `e/\u003cdd-MM-yyyy\u003e` end date of recurring tasks (inclusive)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `day/\u003cmon/tue/wed/thu/fri/sat/sun\u003e` day of recurring task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Optional and compulsory arguments can be typed in any order."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Category is **case-sensitive**."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: day is **case-insensitive**."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`addr tp meeting s/26-10-2020 e/27-11-2020 day/fri`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`addr board games club s/26-10-2020 e/27-11-2020 day/wed c/CCA`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`addr board games club s/26-10-2020 day/wed e/27-11-2020 p/1 c/CCA`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added these tasks:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 28 Oct 2020)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 04 Nov 2020)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 11 Nov 2020)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 18 Nov 2020)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 25 Nov 2020)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Adding a module: `add module`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add modules to the module list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `add module \u003cmodule code\u003e \u003coptional/compulsory arguments\u003e`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cmodule code\u003e` matches 2 or 3 prefix characters, followed by 4 digits and optional suffix."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: All characters in `\u003cmodule code\u003e` must be in caps. "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Duplicate module code in the same semester will not be allowed. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `d/\u003c1 or 0\u003e` sets whether a module is completed or not (1 for completed, 0 for incomplete)."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Modules will be **set to complete by default** if `d/\u003c1 or 0\u003e` is not provided."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: This feature lets users add incomplete modules and compute a projected CAP when `list modules` is entered (which includes modules already done)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Optional and compulsory arguments can be typed in any order"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- `g/\u003cgrade\u003e` grade of the module **in caps** (`A+`, `A`, `A-`, etc)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `ay/\u003cXXXXSY\u003e` academic year of the module where `X` is an integer and `Y` is `1` or `2` (`2021S1`, `2021S2`, etc...)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `mc/\u003cMCs\u003e` modular credits of the module. Valid for a range of 0 to 40 MCs."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: All characters in Semester code must be in caps. "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Grades must be in caps."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`add module CS2113 g/A+ mc/4 ay/2021S1`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add module CS2117 mc/4 g/B+ d/0 ay/2021S2`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add module CS2119 g/C+ d/1 mc/4 ay/2021S2`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added this module:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [CM][A+] CS2113 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Now you have 3 module(s) in the list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `[CM]` indicates a completed module, and `[IC]` indicates an incomplete module."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Adding a weblink: `add link`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add a link for lecture/tutorial sessions through zoom "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `add link m/\u003cmodule code\u003e \u003ccompulsory arguments\u003e`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- `t/\u003cTYPE\u003e` type of lesson (`lecture`, `tutorial`, `lab`, `project`)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- `u/\u003cURL\u003e`  the link.  "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: URL has to begin with either http:// or https:// "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: All characters in `\u003cmodule code\u003e` must be in caps. (haven\u0027t implement yet)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add link m/CS2113 t/lecture u/https://cs2113Lecture.zoom.com`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Got it. I\u0027ve added this link:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       CS2113 lecture"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       https://cs2113Lecture.zoom.com"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 1 link(s) in the list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Borrowing a book: `borrow`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Loan a book and add into the book list "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `borrow \u003cbook name\u003e \u003ccompulsory argument\u003e`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List of `\u003ccompulsory argument\u003e`:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- `date/\u003cDD-MM-YYYY\u003e` date of borrow (`23/11/2020`)."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: The due date will be fixed to **1 month** from the date of loan. "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Duplicate book name will not be allowed. "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`borrow cooking book date/11-11-2011`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Got it. I\u0027ve added this book: cooking book"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       (Loan Date: 11 Nov 2011)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       (Due Date: 11 Dec 2011)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Adding an expense item: `spend` (coming soon)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Add an expense item into the expense list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `spend \u003cdescription\u003e \u003ccompulsory arguments\u003e \u003coptional arguments\u003e`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `v/\u003cvalue\u003e` sets the amount of money spent"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `currency/\u003ccurrency\u003e` sets the currency of the expense."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `date/\u003cdd-MM-yyyy\u003e` sets the date of the expense."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: By default, there is no currency and date, and the currency is set to \"SGD\"."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`spend lunch v/5`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`spend lunch v/5 currency/CNY`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`spend lunch v/5 currency/USD date/28-10-2020`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Got it. I\u0027ve added this expense item:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "       lunch (5 SGD) (date: 28 Oct 2020)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 4 expense(s) in the list."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Creating module folders: `makefolders`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Make folders for all modules in the module list according to academic year."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `makefolders`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`makefolders`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Creating module folders..."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Created folder/sub-folders for CS1010 at ./modules/AY2021S1/CS1010/"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Created folder/sub-folders for CS1231 at ./modules/AY1920S1/CS1231/"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Created folder/sub-folders for CS2113 at ./modules/AY2021S1/CS2113/"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Created folder(s) for 3 module(s)."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Displaying tasks on list: `list`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Lists all the tasks."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Lists all the tasks including recurring task."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here are the task(s) in your list:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] tP meeting (p:1) (category: cs2113)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     3.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     4.[T][N] board games club (p:1) (category: CCA) (date: 28 Oct 2020)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     5.[T][N] board games club (p:1) (category: CCA) (date: 04 Nov 2020)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     6.[T][N] board games club (p:1) (category: CCA) (date: 11 Nov 2020)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Displaying tasks based on priority: `list`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Lists all the tasks with the same priority."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cpriority\u003e` must be **non-negative**."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks p/2`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here are the task(s) of this priority in your list:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Displaying tasks based on category: `list`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Lists all the tasks with the same category."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: category is **case-sensitive**."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks c/cs2113`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     Here are the tasks of this category in your list:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     1.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     2.[T][N] lecture quiz (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Displaying weblinks on list: `list`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Lists all the links."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list links`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`list links`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here are the links in your list:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     1.CS2113 lecture"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       https://cs2113Lecture.zoom.com"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     2.cs2028 lecture"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       https://zoom.com.sg"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Displaying books borrowed and returned on list: `list`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List all books loaned and returned. "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list books`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`list books`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here are the books in your list:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     1.[B][L] cooking book"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         (Loan Date: 11 Nov 2011)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         (Due Date: 11 Dec 2011)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     2.[B][R] java book"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         (Loan Date: 10 Oct 2020)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         (Due Date: 10 Nov 2020)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Displaying modules on list: `list`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List all the modules in the module list and shows computed CAP and completed MCs."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list modules`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`list modules`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here is a list of your module(s):"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[CM][A-] GER1000 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[CM][A+] GET1029 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     3.[CM][A+] CS2113 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     4.[IC][B] GES1041 (4 MC) (AY2021S2)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Current CAP: 4.83"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Projected CAP: 4.50"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Total MCs completed: 12"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Displaying expense items on list: `list` (coming soon)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List all the expense items in the expense list and shows total amount of money spent for each currency."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `list expenses`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`list expenses`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here is a list of your expense(s):"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     lunch (5 SGD) (date: 28 Oct 2020)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     dinner (10 USD)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Total money spent:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     SGD: 5"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     USD: 10"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting a task from the list: `delete`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Deletes a task from the list"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete task \u003ctaskIndexNumber\u003e`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete task 2`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [T][N] iP meeting (p:2)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 5 task(s) in the list."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting all tasks of a certain priority: `delete`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks of the same priority"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete tasks p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cpriority\u003e` must be **non-negative**."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete tasks p/2`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```    "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed all these task(s) with the same priority:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] tP meeting (p:2)"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] iP meeting (p:2)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting all tasks of a certain category: `delete`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks of the same category"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete tasks c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ccategory\u003e` is **case-sensitive**."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete tasks c/cs2113`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```    "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed all these task(s) with the same category:"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][Y] tP meeting (p:0) (category: cs2113)"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting a link from the list: `delete`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Deletes a link from the list "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete link \u003clinkIndexNumber\u003e`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003clinkIndexNumber\u003e` corresponds to the index given on `list links` command output."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete link 2`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed this link:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       CS2113 lecture"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       https://cs2113Lecture.zoom.com"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 2 link(s) in the list."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting a module from the list: `delete`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Deletes a module from the list "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `delete module \u003cmoduleIndexNumber\u003e`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cmoduleIndexNumber\u003e` corresponds to the index given on `list modules` command output."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`delete module 2`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Noted. I\u0027ve removed this module:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [A+] CS1010 (4 MC) (AY1920S1)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 7 module(s) in the list."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Deleting an expense item from the list: `delete` (coming soon)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Deletes an expense item from the list "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `delete expense \u003cexpenseIndexNumber\u003e`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cexpenseIndexNumber\u003e` corresponds to the index given on `list expenses` command output."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`delete expense 2`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Noted. I\u0027ve removed this expense item:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "       lunch (5 SGD)"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 0 expense(s) in the list."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Marking a task as done: `done`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Marks a given task as done."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `done task \u003ctaskIndexNumber\u003e`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`done task 1`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [Y] tP meeting"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Setting a module as complete: `done`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Sets a module as complete."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `done module \u003cmoduleIndexNumber\u003e`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003cmoduleIndexNumber\u003e` corresponds to the index given on `list modules` command output."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`done module 1`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I\u0027ve marked this module as complete:"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [CM][A-] GER1000 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Marking a book as returned: `return`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Marks a given task as done."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `return \u003cbookIndexNumber\u003e`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cbookIndexNumber\u003e` corresponds to the index given on `list books` command output."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`return 2`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I\u0027ve marked this book as returned:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [R] java book"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Setting the priority of a task: `set`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Sets the priority of an existing task."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `set \u003ctaskIndexNumber\u003e p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cpriority\u003e` must be **non-negative**."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`set 1 p/3`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`set 2 p/4`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I\u0027ve set the priority of this task to: 4"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Setting the category of a task: `category`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Sets the category of an existing task."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `category \u003ctaskIndexNumber\u003e c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ccategory\u003e` is **case-sensitive**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`category 1 c/CCA`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I have set the category of this task:"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [T][N] tP meeting (p:0) (category: CCA)"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Setting the date of a task: `date`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Sets the date of an existing task."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `date \u003ctaskIndexNumber\u003e date/\u003cdd-MM-yyyy\u003e`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`date 1 date/11-11-2020`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I have set the date of this task:"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [T][N] study for finals (p:0) (category: st2334) (date: 11 Nov 2020)"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Printing task calendar: `calendar`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Prints a calendar with tasks from current date to given number of days."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `calendar d/\u003cdaysToPrint\u003e`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cdaysToPrint\u003e` must be **non-negative** "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`calendar d/7`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Today\u0027s date is: 26 Oct 2020"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here\u0027s your tasks for the next 7 day(s)."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     MONDAY - 26 Oct 2020"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] finish tutorial (p:2) (date: 26 Oct 2020)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     TUESDAY - 27 Oct 2020"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] tp meeting (p:0) (category: cs2113) (date: 27 Oct 2020)"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] meet with friend (p:1) (category: personal) (date: 27 Oct 2020)"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     THURSDAY - 29 Oct 2020"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] tp v2.0 submission (p:0) (category: cs2113) (date: 29 Oct 2020)"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Searching for tasks with keyword: `find`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Finds all tasks with matching description."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ckeyword\u003e` is case-insensitive."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ckeyword\u003e` is a **whole word** from the task description, e.g `meeting`, `ip` etc."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Incomplete keywords will not be accepted. e.g `meet`, `t` etc."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`find meeting`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][Y] tP meeting (p:1) (category: cs2113)"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Clearing all tasks: `clear`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Clears all tasks,lists,books,modules from the list "
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `clear all`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`clear all`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve cleared everything."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Getting help: `help`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Prints the help message for commands."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     add: Adds a task to the task list."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: TASK_NAME \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     List of \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `date/\u003cdd-MM-yyyy\u003e` sets the date of the task."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: add task example_task \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     addr: Adds a task to the task list."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Parameters: TASK_NAME \u003coptional/compulsory arguments\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     List of \u003coptional arguments\u003e:"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `date/\u003cdd-MM-yyyy\u003e` sets the date of the task."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     List of `\u003ccompulsory arguments\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `s/\u003cdd-MM-yyyy\u003e` start date of recurring tasks (inclusive)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `e/\u003cdd-MM-yyyy\u003e` end date of recurring tasks (inclusive)."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - `day/\u003cmon/tue/wed/thu/fri/sat/sun\u003e` day of recurring task."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: addr example_task \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     borrow: Adds a book to the book list."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Parameters: BOOK_NAME date/DATE"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: borrow example_book  date/10-10-2020"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     category: Sets the category of a task identified by the task index number in the task list"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX c/CATEGORY"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: category 1 c/Academics"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     clear: Clears all tasks in the task list."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: clear"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     delete: Deletes the task identified by the index number used in the task listing."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: delete task 1"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 1: p/PRIORITY"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Deletes all the tasks with PRIORITY."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "          Example: delete tasks p/1"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 2: c/CATEGORY"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Deletes all the tasks with CATEGORY."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "          Example: delete tasks c/cs2113"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     done: Marks the task identified by the index number used in the task listing as done."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: done 1"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     find: Finds all tasks whose descriptions contain any of the specified keywords (case-insensitive) and displays them as a list with index numbers."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: KEYWORDS"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: find book"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     help: Shows program usage instructions."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: help"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     list: Displays all items in the list with index numbers."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: list all"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Displays all items in the list."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 1: tasks p/PRIORITY"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Displays all the tasks with PRIORITY as a list."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Example: list tasks p/1"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 2: tasks c/CATEGORY"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Displays all the tasks with CATEGORY as a list."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Example: list tasks c/cs2113"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "          Optional parameter 3: tasks sorted"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "          Displays all the tasks sorted by priority"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     bye: Exits the program."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: bye"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     set: Sets the task identified by the index number used in the task listing to the new priority."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX p/PRIORITY"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: set 1 p/2"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Exiting and saving the program: `bye`"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Terminates and saves the program in different text files."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Frequently Asked Questions"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**A**: `./tasks.txt`, `./books.txt`, `./links.txt` stores the user data, which can be transferred to another computer or instance of the program by"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "putting it in the same folder as `termiNus.jar`."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**Q**: Are all commands case-sensitive?"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**A**: The case-sensitivity has been stated for the applicable commands. "
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " "
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Quick Command Reference"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Action | Command | Example"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "----- | ------ | ------"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add task | `add task \u003cdescription\u003e \u003coptional arguments\u003e` | `add task tP meeting c/cs2113`"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add recurring task | `addr \u003cdescription\u003e \u003coptional/compulsory arguments\u003e` | `addr board games club s/26-10-2020 e/27-11-2020 day/wed p/1 c/CCA`"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add module | `add module \u003cmodule code\u003e \u003coptional/compulsory arguments\u003e` | `add module CS2113 g/A+ mc/4 ay/2021S1`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add web link | `add link m/\u003cmodule code\u003e \u003ccompulsory arguments\u003e` | `add link m/CS2113 t/lecture u/https://cs2113Lecture.zoom.com`"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add book | `borrow \u003cbook name\u003e \u003ccompulsory argument\u003e` | `borrow cooking book date/11-11-2011`"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Add expense item | `spend \u003cdescription\u003e \u003ccompulsory arguments\u003e \u003coptional arguements\u003e` | `spend lunch v/5 currency/SGD date/29-10-2020`"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Create module folders | `makefolders` | `makefolders`"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List tasks | `list` | `list tasks`"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List tasks with priority | `list p/\u003cpriority\u003e` | `list p/2`"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List tasks with category | `list c/\u003ccategory\u003e` | `list c/CS2113`"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List links | `list` | `list links`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List books | `list` | `list books`"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List modules | `list` | `list modules`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List expense items | `list` | `list expenses`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete task | `delete task \u003ctaskIndexNumber\u003e` | `delete task 2`"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks by priority | `delete p/\u003cpriority\u003e` | `delete tasks p/2`"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks by category  | `delete c/\u003ccategory\u003e` | `delete tasks c/cs2113`"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete link | `delete link \u003ctaskIndexNumber\u003e` | `delete link 2`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Delete module | `delete module \u003cmoduleIndexNumber\u003e` | `delete module 2`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Delete expense items | `delete expense \u003cexpenseIndexNumber\u003e` | `delete expense 2`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Mark task as done | `done task \u003ctaskIndexNumber\u003e` | `done task 1`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Mark module as complete | `done module \u003cmoduleIndexNumber\u003e` | `done module 1`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Mark book as returned | `return \u003ctaskIndexNumber\u003e` | `return 2`"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set priority of task | `set \u003ctaskIndexNumber\u003e p/\u003cpriority\u003e` | `set 1 p/2`"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set category of task | `category \u003ctaskIndexNumber\u003e c/\u003ccategory\u003e` | `category 1 c/CCA`"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set date of task | `date \u003ctaskIndexNumber\u003e date/\u003cdd-MM-yyyy\u003e` | `date 1 date/11-11-2020`"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Print calendar | `calendar d/\u003cdaysToPrint\u003e` | `calendar d/7`"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Find tasks with matching keyword | `find \u003ckeyword\u003e` | `find meeting`"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Clear everything | `clear all` | `clear all`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Getting help | `help` | `help`"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Exiting the program | `bye` | `bye`"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 343,
      "MuhammadHoze": 469,
      "GuoAi": 80,
      "-": 31,
      "Cao-Zeyu": 42
    }
  },
  {
    "path": "docs/team/iamchenjiajun.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# Chen Jia Jun\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "termiNus is an interactive task manager for students in NUS. The program uses a Command Line Interface (CLI) and is"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "written in Java."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Here are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Features added to Parser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Regular expression parsing of commands and module code."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Parse arguments with regular expressions into a `HashMap` so that arguments can be optional and non-positional."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Allows arguments to be checked using a method and a `HashSet` of allowed arguments in the `Command` class which follows polymorphism and reusable code principles."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Features added to Task List"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Using the optional argument feature of the Parser, allow users to optionally label tasks with dates, priorities and categories."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added setting of task priorities and dates after a task has been added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Print a calendar in chronological order for the next X days, with a divider for each day."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Add recurring weekly tasks to the task list with a simple command specifying a start and end date range."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Added the Module List"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Add modules to a module list and compute the current CAP."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Allow adding incomplete modules using optional arguments to compute the projected CAP."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Code contributed: ~2.5k SLOC"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - [RepoSense Report](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003diamchenjiajun\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003diamchenjiajun\u0026tabRepo\u003dAY2021S1-CS2113-T14-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Code enhancements:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Apply SLAP and DRY principles to refactor duplicated code in the code base, moving code to new functions where necessary, thus reducing SLOC."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Applied software design patterns like facade to refactor and repackage code into new classes and make the code more OOP."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Used functional programming to write declarative code where applicable."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Managed issue tracker on GitHub, adding issues where necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Managed releases `v1.0` and `v2.0` on GitHub."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Authored PRs with detailed descriptions to ensure that the team is kept updated with the new changes, especially during refactors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - PR: [Refactoring Model class](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/146)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Reviewed teammates PRs and wrote comments about code quality."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Documentation:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - User Guide:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added documentation for tasks and module features."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added quick command reference section as a summary of commands."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Developer Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added an overall architecture diagram for the major components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added sequence diagrams for several components generated with PlantUML."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Described implementation details of regular expression parsing of arguments."
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 49
    }
  },
  {
    "path": "docs/team/muhammadhozefa.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "# Muhammad Hozefa - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "We were assigned a task to develop a program which would benefit our target audience. We decided to further improve on Duke and renamed our program, termiNus. From it\u0027s name we can infer that it is a one-stop Command Line Interface (CLI) based solution for NUS undergraduate students to manage their school curriculum, keep track of their daily expenses and be reminded of any library loans."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is using Java and Object-Oriented Programming (OOP). My role was to implement the entire loan system as well as certain subtasks such as ensuring deletion of items were done correctly, clearing of all data and finding tasks. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private static final Logger dukeLogger \u003d Logger.getLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        model \u003d new Model();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        model.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Reads the user command and executes it, until the user issues the bye command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showWelcome();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                String fullCommand \u003d Ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                c.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                model.save();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        dukeLogger.log(Level.INFO, \"Logging started\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 8,
      "MuhammadHoze": 5,
      "GuoAi": 25,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Signals an error caused by Duke commands and operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import org.apache.commons.validator.routines.UrlValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Utils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Link;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that adds a task to the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Adds a task to the task list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: TASK_NAME \u003coptional arguments\u003e\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     List of \u003coptional arguments\u003e\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - p/\u003cnumber\u003e sets the priority of the task.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - c/\u003ccategory\u003e sets the category of the task.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - date/\u003cdd-MM-yyyy\u003e sets the date of the task.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" task\" + \" example_task \u003coptional arguments\u003e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e TASK_ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\", \"c\", \"date\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e LINK_ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"m\", \"t\", \"u\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e MODULE_ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"g\", \"mc\", \"ay\", \"d\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final ListType addType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddCommand(String description, HashMap\u003cString, String\u003e argumentsMap, ListType addType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.addType \u003d addType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        LinkList links \u003d (LinkList) model.getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (addType) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case TASK_LIST:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            executeAddTask(tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case LINK_LIST:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            executeAddLink(links);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case MODULE_LIST:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            executeAddModule(modules);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void executeAddTask(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        setTaskProperties(newTask, argumentsMap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addItem(newTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void executeAddLink(LinkList links) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"m\") || !argumentsMap.containsKey(\"t\") || !argumentsMap.containsKey(\"u\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String module \u003d argumentsMap.get(\"m\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String type \u003d argumentsMap.get(\"t\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!type.toLowerCase().equals(\"lecture\") \u0026 !type.toLowerCase().equals(\"tutorial\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                \u0026 !type.toLowerCase().equals(\"lab\") \u0026 !type.toLowerCase().equals(\"project\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LINK_TYPE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String url \u003d argumentsMap.get(\"u\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] schemes \u003d {\"http\", \"https\"};"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        UrlValidator urlValidator \u003d new UrlValidator(schemes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!urlValidator.isValid(url)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_URL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Link newLink \u003d new Link(module, type, url);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        links.addLink(newLink);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void executeAddModule(ModuleList modules) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int mc;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean isDone \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"g\") || !argumentsMap.containsKey(\"mc\") || !argumentsMap.containsKey(\"ay\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"OOPS!!! g, mc and ay arguments are required!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            mc \u003d Integer.parseInt(argumentsMap.get(\"mc\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"OOPS!!! Your MCs are invalid!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"d\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!argumentsMap.get(\"d\").equals(\"0\") \u0026\u0026 !argumentsMap.get(\"d\").equals(\"1\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(\"Your done argument is invalid! Valid values: 1 or 0.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            isDone \u003d Utils.stringToBoolean(argumentsMap.get(\"d\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Module module \u003d new Module(description, argumentsMap.get(\"g\"), mc, argumentsMap.get(\"ay\"), isDone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        modules.addItem(module);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the properties of a given Task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param task         Task to set the properties of."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing arguments to set the Task properties."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If arguments in HashMap are invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected void setTaskProperties(Task task, HashMap\u003cString, String\u003e argumentsMap) throws DukeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"p\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int newPriority;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newPriority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (newPriority \u003c 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            task.setPriority(newPriority);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"c\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argumentsMap.get(\"c\") !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                task.setCategory(argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            task.setDateFromString(argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 154,
      "Cao-Zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddRecurringCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that adds a recurring task to the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddRecurringCommand extends AddCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addr\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Adds multiple tasks to the list of tasks that occur weekly on a given day.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: TASK_NAME \u003coptional/compulsory arguments\u003e\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     List of \u003coptional arguments\u003e:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - p/\u003cnumber\u003e sets the priority of the task.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - c/\u003ccategory\u003e sets the category of the task.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - date/\u003cdd-MM-yyyy\u003e sets the date of the task.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     List of `\u003ccompulsory arguments\u003e\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - s/\u003cdd-MM-yyyy\u003e start date of recurring tasks (inclusive)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - e/\u003cdd-MM-yyyy\u003e end date of recurring tasks (inclusive).\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - day/\u003cmon/tue/wed/thu/fri/sat/sun\u003e day of recurring task.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_task \u003coptional/compulsory arguments\u003e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\", \"c\", \"day\", \"s\", \"e\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddRecurringCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super(description, argumentsMap, ListType.TASK_LIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final LocalDate startDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final LocalDate endDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        LocalDate firstDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"day\") || !argumentsMap.containsKey(\"s\") || !argumentsMap.containsKey(\"e\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_RECURRING_ARGUMENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            startDate \u003d LocalDate.parse(argumentsMap.get(\"s\"), Task.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            endDate \u003d LocalDate.parse(argumentsMap.get(\"e\"), Task.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dayOfWeek \u003d Parser.getDayFromString(argumentsMap.get(\"day\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            firstDate \u003d startDate.with(TemporalAdjusters.nextOrSame(dayOfWeek));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE_RANGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d generateWeeklyTasks(firstDate, endDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (newTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"There is no \" + dayOfWeek + \" between \" + startDate + \" and \" + endDate + \"!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTasksFromList(newTasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Generates a list of Tasks every 7 days from a starting date to an end date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param firstDate Starting date to generate tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param endDate End date of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return ArrayList of Tasks between starting date and ending date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If Tasks have invalid arguments."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private ArrayList\u003cTask\u003e generateWeeklyTasks(LocalDate firstDate, LocalDate endDate) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (firstDate.until(endDate, ChronoUnit.DAYS) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            argumentsMap.put(\"date\", firstDate.format(Task.DATETIME_PARSE_FORMAT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setTaskProperties(newTask, argumentsMap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            newTasks.add(newTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            firstDate \u003d firstDate.plusDays(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return newTasks;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/BorrowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Book;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class BorrowCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"borrow\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Adds a book to the book list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_book  date/DD-MM-YYYY\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private String description \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Collections.singletonList(\"date\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public BorrowCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) model.getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Book newBook \u003d new Book(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newBook.setDateFromString(argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        books.addBook(newBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 4,
      "MuhammadHoze": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.exit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "GuoAi": 22,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command corresponding to the calendar command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Sets the date of a given task in the list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" d/\u003cdaysToPrint\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"d\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final LocalDate currentDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public CalendarCommand(HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int daysToPrint;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert argumentsMap.size() \u003c\u003d ALLOWED_ARGUMENTS.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"d\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            daysToPrint \u003d Integer.parseInt(argumentsMap.get(\"d\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (daysToPrint \u003c 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_NEGATIVE_DAY_COUNT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DAY_COUNT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e dateList \u003d tasks.getTaskList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e task.getDate() !\u003d null)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003e\u003d 0)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003c\u003d daysToPrint)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .sorted(Comparator.comparing(Task::getDate))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintCalendar(currentDate, dateList, daysToPrint);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 67
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Sets the category of a task identified by its index in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class CategoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"category\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \": Sets the category of a task identified by the task index number in the task list\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: INDEX c/CATEGORY\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1 c/Academics\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public CategoryCommand(int index, String category) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.setCategory(index, category);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 8,
      "GuoAi": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Clears all tasks in the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all tasks in the task list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private String description \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ClearCommand(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.description \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) model.getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        LinkList links \u003d (LinkList) model.getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (description.isEmpty() | !description.equals(\"all\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_CLEAR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if ((links.size() !\u003d 0 | books.size() !\u003d 0 | modules.size() !\u003d 0)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.clearTask();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            books.clearBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            links.clearList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            modules.clearModule();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_CLEAR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.MESSAGE_CLEARED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 4,
      "MuhammadHoze": 45,
      "GuoAi": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Represents a general command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return whether to exit Duke application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param model Model representing program data in memory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public abstract void execute(Model model) throws DukeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 8,
      "GuoAi": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CommandCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class CommandCreator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns an AddCommand with given arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description  Description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return AddCommand with given arguments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException When description is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static Command createAddCommand(String commandString, String description, HashMap\u003cString,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String\u003e argumentsMap) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String rootCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String newDescription \u003d description.replaceFirst(rootCommand, \"\").trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (rootCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"link\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, AddCommand.LINK_ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new AddCommand(newDescription, argumentsMap, ListType.LINK_LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"module\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, AddCommand.MODULE_ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new AddCommand(newDescription, argumentsMap, ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, AddCommand.TASK_ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new AddCommand(newDescription, argumentsMap, ListType.TASK_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createAddRecurringCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new AddRecurringCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a SetCommand with given arguments."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param fullCommand  Full command given by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return SetCommand with given arguments."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createSetCommand(String fullCommand, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new SetCommand(Integer.parseInt(fullCommand.split(\" \")[1]), argumentsMap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Creates and returns a ListCommand with given arguments."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param fullCommand    Full command given by the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param subRootCommand sub-root command given by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param commandString  Command parameters given by the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return ListCommand with given arguments."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static Command createListCommand(String fullCommand, String subRootCommand,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                                            String commandString) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (fullCommand.trim().toLowerCase().equals(\"list tasks sorted\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ListCommand(true, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        switch (subRootCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        case \"tasks\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (commandString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            int priority;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String category;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (commandString.contains(\"p/\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (commandString.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_EMPTY_PRIORITY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    priority \u003d Integer.parseInt(commandString.substring(2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand(priority);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            } else if (commandString.contains(\"c/\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (commandString.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_EMPTY_CATEGORY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                category \u003d commandString.substring(2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand(category);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_LIST_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        case \"links\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return new ListCommand(false, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"modules\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new ListModuleCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case \"books\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ListCommand(false, false, true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_LIST_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Creates and returns a DeleteCommand with given arguments."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return DeleteCommand with given arguments."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createDeleteCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String subRootAddCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String value;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (commandString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            value \u003d commandString.split(\" \")[1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            switch (subRootAddCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            case \"link\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                int index;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    index \u003d Integer.parseInt(commandString.replaceFirst(subRootAddCommand, \"\").trim());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_LINK_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                return new DeleteCommand(index, true);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            case \"tasks\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (value.contains(\"p/\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    return new DeleteCommand(value);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (value.contains(\"c/\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    return new DeleteCommand(value);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(value));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(value), ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a DateCommand with given arguments."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DateCommand with given arguments."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createDateCommand(String commandString, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int index \u003d Integer.parseInt(commandString.split(\" \")[0]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new DateCommand(index, argumentsMap);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a DoneCommand with given arguments."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DoneCommand with given arguments."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createDoneCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String[] arguments \u003d commandString.split(\" \", 2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String type \u003d arguments[0];"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int index \u003d Integer.parseInt(arguments[1]);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                return new DoneCommand(index, ListType.TASK_LIST);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                return new DoneCommand(index, ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_DONE_COMMAND);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DONE_COMMAND);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createFindCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (commandString.isEmpty()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_FIND);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new FindCommand(commandString.toLowerCase().trim());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // @@author MuhammadHoze"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createBorrowCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (description.isEmpty() | argumentsMap.isEmpty()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_BORROW);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return new BorrowCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // @@author MuhammadHoze"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Creates and returns a ReturnCommand with given arguments."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return ReturnCommand with given arguments."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createReturnCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ReturnCommand(Integer.parseInt(commandString));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_BOOK);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Creates and returns a CategoryCommand with given arguments."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return CategoryCommand with given arguments."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command createCategoryCommand(String commandString, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            index \u003d Integer.parseInt(commandString.split(\" \")[0]);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!argumentsMap.containsKey(\"c\")) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.get(\"c\").trim().equals(\"\")) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_CATEGORY);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return new CategoryCommand(index, argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createDeductCommand(String value)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return new DeductCommand(value);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 115,
      "MuhammadHoze": 93,
      "GuoAi": 29,
      "Cao-Zeyu": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class DateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"date\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Sets the date of a given task in the list.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" \u003ctaskIndex\u003e\" + \" date/DD-MM-YYYY\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"date\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DateCommand(int index, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.setDate(index, argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 34,
      "MuhammadHoze": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DeductCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deduct\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Deduct meal credit.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameter: value\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 5\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeductCommand(String value){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "MuhammadHoze": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Deletes a Task identified by its index in the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Deletes the task identified by the index number used in the task listing.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" task\" + \" 1\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Optional parameter 1: p/PRIORITY\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Deletes all the tasks with PRIORITY.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" tasks\" + \" p/1\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Optional parameter 2: c/CATEGORY\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Deletes all the tasks with CATEGORY.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" tasks\" + \" c/cs2113.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Deletes the link identified by the index number used in the link listing.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" link\" + \" 1\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private String categoryValue \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int priorityIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean isLink;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private ListType deleteType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert index \u003e 0 : \"Task number should be greater than 0\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(String inputValue) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (inputValue.startsWith(\"p\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasPriorityValue \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.priorityIndex \u003d Integer.parseInt(inputValue.substring(2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (inputValue.startsWith(\"c\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasCategoryValue \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.categoryValue \u003d inputValue.substring(2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(int index, boolean isLink) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert index \u003e 0 : \"Task number should be greater than 0\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.isLink \u003d isLink;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(int index, ListType deleteType) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.deleteType \u003d deleteType;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        LinkList links \u003d (LinkList) model.getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cTask\u003e taskDeleted \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        boolean isCategory \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (hasPriorityValue) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (priorityIndex \u003c 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            for (int i \u003d tasks.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getPriority() \u003d\u003d priorityIndex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    taskDeleted.add(tasks.get(i));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    tasks.deletePriorityOrCategoryTask(i);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (taskDeleted.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.displayDeletedPriorityOrCategoryTask(taskDeleted, isCategory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (hasCategoryValue) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            isCategory \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            for (int i \u003d tasks.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getCategory() \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    continue; //ignore if category is not set for the task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getCategory().equals(categoryValue)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    taskDeleted.add(tasks.get(i));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    tasks.deletePriorityOrCategoryTask(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (taskDeleted.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.displayDeletedPriorityOrCategoryTask(taskDeleted, isCategory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            links.deleteLink(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (deleteType \u003d\u003d ListType.MODULE_LIST) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            model.getList(ListType.MODULE_LIST).deleteTask(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5,
      "MuhammadHoze": 110,
      "GuoAi": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Marks a Task, identified by its index in the task list, as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Marks the task/module identified by the index number used in the listing as done.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: \u003ctype\u003e INDEX\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Accepted \u003ctype\u003e: task, module\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" task 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final ListType doneType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DoneCommand(int index, ListType doneType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.doneType \u003d doneType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (doneType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case TASK_LIST:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.markItemAsDone(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case MODULE_LIST:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            modules.markItemAsDone(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 28,
      "GuoAi": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Finds and lists all tasks in the task list whose description contains the argument keywords."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose descriptions contain any of \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"     Parameters: KEYWORDS\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" book\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.findTask(keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7,
      "GuoAi": 23,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        list of help commands is in alphabetical order"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        String message \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"\\n\\n     \" + AddRecurringCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"\\n\\n     \" + BorrowCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ByeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"\\n\\n     \" + CalendarCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + CategoryCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"\\n\\n     \" + DateCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + \"\\n\\n     \" + DoneCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + \"\\n\\n     \" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"\\n\\n     \" + ReturnCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + SetCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "       "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5,
      "MuhammadHoze": 5,
      "GuoAi": 19,
      "yh-ng": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "// @@author Cao-Zeyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.model.item.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": " * Lists all tasks in the task list to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \": Displays all items in the list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" all\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     Displays all items in the list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 1: tasks p/PRIORITY\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the tasks with PRIORITY as a list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" tasks p/1\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 2: tasks c/CATEGORY\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the tasks with CATEGORY as a list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" tasks c/cs2113\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 3: tasks sorted\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the tasks sorted by priority\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean hasPriority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean hasCategory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean isSorted;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean isBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static int listSize;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static int newListSize;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean isLink;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(int priority) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(String category) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(boolean isSorted, boolean isLink) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (isSorted) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isSorted \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isLink \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(boolean isSorted, boolean isLink, boolean isBook) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (isSorted) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isSorted \u003d isSorted;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isLink \u003d isLink;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isBook) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isBook \u003d isBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        BookList books \u003d (BookList) model.getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        LinkList links \u003d (LinkList) model.getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cBook\u003e newBooks \u003d new ArrayList\u003cBook\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        listSize \u003d tasks.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (priority \u003c 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getPriority() \u003d\u003d priority) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    newTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask(priority);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (hasCategory) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getCategory() \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getCategory().equals(category)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    newTasks.add((Task) tasks.get(i));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask(category);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isSorted) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTasks \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Collections.sort(newTasks);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isBook) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newBooks \u003d books.getBookList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            BookList newBookList \u003d new BookList(newBooks);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newBookList.listBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links.listLink();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            tasks.listTask();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        newListSize \u003d newTasks.size();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public int getSize(Boolean isNew) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (isNew) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return newListSize;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return listSize;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 149
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class ListModuleCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        modules.listTask();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/MakeFolderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class MakeFolderCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"makefolders\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Make folders for your modules in the modulelist\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        modules.createModuleFolders();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ReturnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class ReturnCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Marks the book identified by the index number used in the book list as returned.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ReturnCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) model.getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        books.markAsReturn(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 3,
      "MuhammadHoze": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Sets the task identified by the index number used in the task listing to the new priority.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: INDEX p/PRIORITY\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1 p/2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public SetCommand(int index, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            priority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (priority \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.setPriority(index, priority);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String DIVIDER \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String LOGO \u003d \"     _                           _  _   _\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |                         (_)| \\\\ | |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |_   ___  _ __  _ __ ___   _ |  \\\\| | _   _  ___\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | __| / _ \\\\| \u0027__|| \u0027_ ` _ \\\\ | || . ` || | | |/ __|\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |_ |  __/| |   | | | | | || || |\\\\  || |_| |\\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"     \\\\__| \\\\___||_|   |_| |_| |_||_|\\\\_| \\\\_/ \\\\__,_||___/\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_ADD_TASK \u003d \"Got it. I\u0027ve added this task:\\n       \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_ADD_BOOK \u003d \"Got it. I\u0027ve added this book: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_ADD_LINK \u003d \"Got it. I\u0027ve added this link:\\n       \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE \u003d \"Got it. I\u0027ve added this module:\\n       \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_ADD_NO_TASK \u003d \"There are no tasks to add.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_ADD_MULTIPLE_TASK \u003d \"Got it. I\u0027ve added these tasks:\\n       \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_STATUS_FIRST \u003d \"\\n     Now you have \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_STATUS_LAST \u003d \" task(s) in the list.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_LINK_STATUS_FIRST \u003d \"\\n     Now you have \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_LINK_STATUS_LAST \u003d \" link(s) in the list.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_MODULE_STATUS_LAST \u003d \" module(s) in the list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_TASK_LIST \u003d \"Here are the task(s) in your list:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_BOOK_LIST \u003d \"Here are the book(s) in your list:\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_LIST_WITH_PRIORITY \u003d \"Here are the task(s) of this priority in your list:\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_LIST_WITH_CATEGORY \u003d \"Here are the task(s) of this category in your list:\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_EMPTY_TASK_LIST \u003d \"There are no tasks in your list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"Your task list is empty.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_EMPTY_BOOK_LIST \u003d \"There are no books in your list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Your book list is empty.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST_WITH_PRIORITY \u003d \"There are no tasks of this priority in your list. \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST_WITH_CATEGORY \u003d \"There are no tasks of this category in your list. \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_LINK_LIST \u003d \"Here are the links in your list:\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LINK_LIST \u003d \"There are no links in your list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"Your link list is empty.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_EMPTY_MODULE_LIST \u003d \"There are no modules in your list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Your module list is empty.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Noted. I\u0027ve removed this task:\\n       \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_WITH_PRIORITY \u003d \"Noted. I\u0027ve removed all these task(s) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"with the same priority:\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_WITH_CATEGORY \u003d \"Noted. I\u0027ve removed all these task(s) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"with the same category:\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_DELETE_LINK \u003d \"Noted. I\u0027ve removed this link:\\n       \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_CLEAR \u003d \"Noted. I\u0027ve cleared everything.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_CLEARED \u003d \"~Info~ Everything has already been cleared.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE \u003d \"Noted. I\u0027ve removed this module:\\n       \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String WARNING_NO_TASK \u003d \"This task index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String WARNING_NO_BOOK \u003d \"This book index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String WARNING_NO_LINK \u003d \"This link index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String WARNING_NO_MODULE \u003d \"This module index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n       [Y] \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_RETURNED \u003d \"Nice! I\u0027ve marked this book as returned:\\n       [R] \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_MODULE_COMPLETE \u003d \"Nice! I\u0027ve marked this module as complete:\\n       \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_CATEGORY \u003d \"Nice! I have set the category of this task:\\n       \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_DATE \u003d \"Nice! I have set the date of this task:\\n       \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_SET_PRIORITY \u003d \"Nice! I\u0027ve set the priority of this task to: \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_COMMAND \u003d \"I\u0027m sorry, but I don\u0027t know what that means. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"Please enter valid commands :-(\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_SPACE \u003d \"Detected an empty spacing. \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Please remove any unwanted spaces\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_DUPLICATE_ARGUMENTS \u003d \"You have duplicate arguments! \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_ARGUMENTS \u003d \"~Error~ You have invalid argument(s). \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Please refer to the User Guide.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DESCRIPTION \u003d \"~Error~ The description of a task cannot be empty. \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Please refer to the User Guide.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_BOOK_DESCRIPTION \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"The description of a book cannot be empty.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_CATEGORY \u003d \"Please input a valid category using the format \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"c/CATEGORY.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_NEGATIVE_DAY_COUNT \u003d \"~Error~ Your number of days must be positive!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_DAY_COUNT \u003d \"~Error~ Your number of days is an invalid integer!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_RECURRING_ARGUMENTS \u003d \"~Error~ All compulsory arguments (s/, e/ and day/) \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"are required.\\n \\t Please refer to the User Guide. \";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CATEGORY_BODY \u003d \"The body of a category command cannot be \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"empty.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_DATE \u003d \"~Error~ The format of your date should be DD-MM-YYYY.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_CLEAR \u003d \"~Error~ The command is: clear all\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_BORROW \u003d \"~Error~ The format is: borrow \u003cdescription\u003e \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"\u003cdate/DD-MM-YYYY\u003e\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_DAY \u003d \"The format of your day should be the first \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"3 characters of the day!\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: mon, tue, wed, thu, fri, sat, sun\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_INVALID_DATE_RANGE \u003d \"Your ending date is before your starting date!\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_PRIORITY \u003d \"The priority cannot be empty.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CATEGORY \u003d \"The category cannot be empty.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_INDEX \u003d \"Please input a valid task index.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_LINK_INDEX \u003d \"Please input a valid link index.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_PRIORITY \u003d \"Invalid priority number.\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_CATEGORY_NOT_FOUND \u003d \"Invalid category.\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_LOAD_FILE \u003d \"The file cannot be loaded. \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"Maybe this is your first time using termiNus?\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_SAVE_FILE \u003d \"Cannot save to file.\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_NEW_TASK_FILE \u003d \"I have created a new tasks.txt file for you. :) \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_NEW_BOOK_FILE \u003d \"I have created a new books.txt file for you. :) \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_NEW_MEAL_CREDIT_FILE \u003d \"I have created a new mealCredit.txt file for you. :) \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_NEW_LINK_FILE \u003d \"I have created a new links.txt file for you. :) \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_NEW_MODULE_FILE \u003d \"I have created a new modules.txt file for you :) \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String WARNING_DATETIME \u003d \"If you want your DateTime to be formatted, \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"you can input in this format: YYYY-MM-DD HH:mm\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_FIND \u003d \"~Error~ The keyword of a find command cannot be empty.\\n \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"\\t The format is: find \u003ckeyword\u003e\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_LINK_TYPE \u003d \"~Error~ Please input a correct type of lesson:\\n \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"\\t t/lecture\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"\\t t/tutorial\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"\\t t/lab\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"\\t t/project\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_DELETE_COMMAND \u003d \"Please input a valid delete command \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"using the format: \\n\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\"delete tasks p/PRIORITY\\\"\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\"delete tasks c/CATEGORY\\\"\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\"delete task \u003cindex number\u003e\\\"\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\"delete link \u003cindex number\u003e\\\"\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\"delete module \u003cindex number\u003e\\\"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_INVALID_DONE_COMMAND \u003d \"Please input a valid done command \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"using the format: \\n\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     \\\"done task \u003cindex number\u003e\\\"\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     \\\"done module \u003cindex number\u003e\\\"\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_LIST_COMMAND \u003d \"Please input a valid list command \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"using the format: \\n\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     \\\"list tasks\\\"\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     \\\"list tasks p/PRIORITY\\\"\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     \\\"list tasks c/CATEGORY\\\"\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     \\\"list links\\\"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     \\\"list modules\\\"\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\"list books\\\"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_URL \u003d \"~Error~ Invalid url entered. Please refer to the User Guide.\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 18,
      "MuhammadHoze": 78,
      "GuoAi": 22,
      "yh-ng": 6,
      "Cao-Zeyu": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Utils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Utility methods."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convert strings (either \"0\" or \"1\") to booleans (false or true respectively)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param str input string (either \"0\" or \"1\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return false if input string is \"0\", true otherwise"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static boolean stringToBoolean(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (str.equals(\"0\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ListType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public enum ListType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    TASK_LIST, BOOK_LIST, CREDIT_LIST, LINK_LIST, MODULE_LIST"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * An object representing program state stored in memory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Model() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.BOOK_LIST, new BookList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.MODULE_LIST, new ModuleList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.LINK_LIST, new LinkList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ItemList getList(ListType listType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert listMap.get(listType) !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return listMap.get(listType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean errorMessage \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            listMap.put(ListType.TASK_LIST, new TaskList(storage.loadTask()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            errorMessage \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.showError(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_TASK_FILE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            listMap.put(ListType.BOOK_LIST, new BookList(storage.loadBook()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                errorMessage \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_BOOK_FILE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            listMap.put(ListType.LINK_LIST, new LinkList(storage.loadLinks()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_LINK_FILE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            listMap.put(ListType.MODULE_LIST, new ModuleList(storage.loadModule()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_MODULE_FILE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void save() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.TASK_LIST), Storage.TASK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.BOOK_LIST), Storage.BOOK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.LINK_LIST), Storage.LINK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.MODULE_LIST), Storage.MODULE_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 78
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Book.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Book extends Item {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected boolean isReturn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected LocalDate futureDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Book(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param description the description of the book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param isReturn    true if the book is returned already, false otherwise"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Book(String description, boolean isReturn) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description, isReturn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.isReturn \u003d isReturn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Marks the book as returned."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markAsReturn() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isReturn \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Retrieves whether the task in done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public boolean getIsReturn() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return isReturn;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void setDateFromString(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert dateString !\u003d null : \"dateString should not be null.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            date \u003d LocalDate.parse(dateString, DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            futureDate \u003d date.plusMonths(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_BORROW);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String getFutureDateString(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (futureDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return futureDate.format(formatter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Converts the attributes of the book into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString(boolean isList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String returnString \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (isList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (this.isReturn) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                returnString \u003d \"[B][R] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                returnString \u003d \"[B][L] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString \u003d this.description + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString +\u003d \"\\t   (Loan Date: \" + getDateString(Task.DATETIME_PRINT_FORMAT) + \")\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString +\u003d \"\\t   (Due Date: \" + getFutureDateString(Task.DATETIME_PRINT_FORMAT) + \")\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String isReturnString \u003d (isReturn) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String dateString \u003d getDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String futureDateString \u003d getFutureDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"B | \" + isReturnString + \" | \" + description + \" | \" + dateString + \" | \" + futureDateString;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 106,
      "GuoAi": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Credit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Credit extends Item {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Credit(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// Renamed from previous Task.java with some modifications."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents an item in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Item implements Comparable\u003cItem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static DateTimeFormatter DATETIME_PARSE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static DateTimeFormatter DATETIME_PRINT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected String category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Item(String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isDone      true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param priority    the priority of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Item(String description, boolean isDone, int priority) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Item(String description, boolean isReturn) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Retrieves the description of an item."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return the description string of the item."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves whether the task in done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Marks the task as done and book as returned."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String isDoneString \u003d (isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String categoryString \u003d (category \u003d\u003d null) ? \"\" : category;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String dateString \u003d getDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return \"T | \" + isDoneString + \" | \" + description + \" | \" + priority + \" | \" + categoryString + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + dateString;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFileCredit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"C | \" + description;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setDateFromString(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assert dateString !\u003d null : \"dateString should not be null.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            date \u003d LocalDate.parse(dateString, DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            //futureDate \u003d date.plusMonths(1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getDateString(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return date.format(formatter);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Defines how tasks are sorted. First sort tasks based on priority in ascending order (priority 0, i.e. no"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * priority, is the last). If two tasks have the same priority, sort based on category lexicographically."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * positive integer if this task follows the argument task, 0 otherwise."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param otherItem The other task to compare to."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return negative integer if this task precedes the argument task,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int compareTo(Item otherItem) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority \u0026\u0026 this.priority \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority \u0026\u0026 otherItem.priority \u003d\u003d 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return this.priority - otherItem.priority;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String thisItemCategory \u003d (this.category \u003d\u003d null) ? \"\" : this.category;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String otherItemCategory \u003d (otherItem.category \u003d\u003d null) ? \"\" : otherItem.category;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return thisItemCategory.compareTo(otherItemCategory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 4,
      "MuhammadHoze": 20,
      "GuoAi": 130
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Link.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "// @@author Cao-Zeyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "public class Link extends Item {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String url;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructor used when adding a new Zoom link."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param module the name of the module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param type the type of the zoom link."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param url the Zoom link."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Link(String module, String type, String url) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        super(url);//this is weird"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public  String getType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.url;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String returnString \u003d this.getModule() + \" \" + this.getType() + \"\\n       \" + this.getUrl();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String returnString \u003d this.getModule() + \" | \" + this.getType() + \" | \" + this.getUrl();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Module extends Item {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Pattern MODULE_CODE_PATTERN \u003d Pattern.compile(\"(^[A-Z]{2,3}[\\\\d]{4}[A-Z]?$)\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Pattern MODULE_SEM_PATTERN \u003d Pattern.compile(\"(^[\\\\d]{4}S[12]$)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MODULE_COMPLETED_STRING \u003d \"[CM]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MODULE_INCOMPLETE_STRING \u003d \"[IC]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final double gradePoint;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int mc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param moduleCode the description of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Module(String moduleCode, String grade, int mc, String semester, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super(moduleCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.mc \u003d mc;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        gradePoint \u003d getCapFromGrade(grade);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d MODULE_CODE_PATTERN.matcher(moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!matcher.find() || !checkValidAy(semester) || !checkValidMcs(mc)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"~Error~ Format is incorrect. Please refer to the User Guide.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return String.format(\"%s[%s] %s (%d MC) (AY%s)\", getCompletionString(), getGrade(), getDescription(), getMc(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                getSemester());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the number of MCs is in a valid range."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param mc Number of MCs."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Boolean corresponding to the conditions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static boolean checkValidMcs(int mc) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return mc \u003e\u003d 0 \u0026\u0026 mc \u003c\u003d 40;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the Academic Year is valid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ay Academic Year."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return True if the Academic Year is valid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static boolean checkValidAy(String ay) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d MODULE_SEM_PATTERN.matcher(ay);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert ay.length() \u003d\u003d 6;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int start \u003d Integer.parseInt(ay.substring(0, 2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int end \u003d Integer.parseInt(ay.substring(2, 4));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return end - start \u003d\u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String isDoneString \u003d (isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return getDescription() + \" | \" + getGrade() + \" | \" + getMc() + \" | \" + getSemester() + \" | \" + isDoneString;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public int getMc() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public double getGradePoint() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return gradePoint;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getSemester() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getCompletionString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return (isDone) ? MODULE_COMPLETED_STRING : MODULE_INCOMPLETE_STRING;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private double getCapFromGrade(String grade) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 5.0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 4.5;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 4.0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 3.5;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 3.0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 2.5;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 2.0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 1.5;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 1.0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"S\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"U\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"~Error~ Invalid grade!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 138
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Task extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.setPriority(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isDone true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param priority the priority of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Task(String description, boolean isDone, int priority) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Retrieves the priority of a task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Priority of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Retrieves the category of a task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Category of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the priority of a task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param priority New priority of the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert priority \u003e\u003d 0 : \"Priority should be non-negative\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String returnString;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            returnString \u003d \"[T][Y] \" + this.description + \" (p:\" + this.getPriority() + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            returnString \u003d \"[T][N] \" + this.description + \" (p:\" + this.getPriority() + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (category !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            returnString +\u003d \" (category: \" + category + \")\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            returnString +\u003d \" (date: \" + getDateString(Item.DATETIME_PRINT_FORMAT) + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String isDoneString \u003d (isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String categoryString \u003d (category \u003d\u003d null) ? \"\" : category;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String dateString \u003d getDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return \"T | \" + isDoneString + \" | \" + description + \" | \" + priority + \" | \" + categoryString + \" | \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                + dateString;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 69,
      "GuoAi": 26,
      "Cao-Zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/BookList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Represents a list of books."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class BookList extends ItemList\u003cBook\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param books an ArrayList of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public BookList(ArrayList\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.items \u003d books;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public BookList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Adds a book to the book list from the parameters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param book Book to be added to the book list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addBook(Book book) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        checkBookAlreadyExists(book);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        items.add(book);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_BOOK + book.toString(false));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Clears all the books in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void clearBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markAsReturn(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_BOOK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            items.get(index - 1).markAsReturn();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_RETURNED + items.get(index - 1).getDescription());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void listBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_BOOK_LIST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            message +\u003d \"\\n     \" + (i + 1) + \".\" + items.get(i).toString(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_BOOK_LIST + message);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private void checkBookAlreadyExists(Book book) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        int count \u003d (int) items.stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                .filter(existingBook -\u003e existingBook.getDescription().equals(book.getDescription()))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (count !\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(\"~Error~ Book already exists!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "MuhammadHoze": 82,
      "GuoAi": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/CreditList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Credit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class CreditList extends ItemList\u003cCredit\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param mealCredit an ArrayList of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public CreditList(ArrayList\u003cCredit\u003e mealCredit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.items \u003d mealCredit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public CreditList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 3,
      "MuhammadHoze": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/ItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.model.item.Link;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// Renamed from previous Task.java with some modifications."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of items."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public abstract class ItemList\u003cT extends Item\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected ArrayList\u003cT\u003e items;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    //protected ArrayList\u003cLink\u003e links;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an item list with the given items."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param items an ArrayList of any type of objects"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ItemList(ArrayList\u003cT\u003e items) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an empty item list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ItemList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the list of items."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return an ArrayList of items"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ArrayList\u003cT\u003e getTaskList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds an item to the item list from the parameters."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param item Item to be added to the item list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addItem(T item) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.add(item);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_TASK + item.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds an item into the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the item"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public abstract void addTodo(String description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Deletes an item from the list, identified by the index of the item in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the item in the list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Item itemRemoved \u003d items.get(index - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE + itemRemoved.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    + (items.size() - 1) + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.remove(index - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Deletes an item from the list, identified by the index of the item in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param taskIndex the index of the item in the list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void deletePriorityOrCategoryTask(int taskIndex) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.remove(taskIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Displays the item deleted from the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param itemsDeleted the item deleted from the list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isCategory   whether to display all the tasks with the same category"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void displayDeletedPriorityOrCategoryTask(ArrayList\u003cT\u003e itemsDeleted, boolean isCategory) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (isCategory) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_TASK_WITH_CATEGORY);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_TASK_WITH_PRIORITY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Collections.reverse(itemsDeleted);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (Item item : itemsDeleted) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(item.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + (items.size()) + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Lists all the tasks in the task list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_TASK_LIST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_TASK_LIST + message);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask(int priority) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST_WITH_PRIORITY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST_WITH_PRIORITY + message);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask(String category) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST_WITH_CATEGORY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST_WITH_CATEGORY + message);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Clears all the tasks in the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void clearTask() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Marks the item, identified by the index of the item in the item list, as done (for tasks) or returned (for"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * books)."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the item in the list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void markItemAsDone(int index) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            items.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DONE + items.get(index - 1).getDescription());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Finds and lists all tasks in the task list whose description contains the argument keywords."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param keyword the keyword to be searched in the task list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void findTask(String keyword) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cT\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (T item : items) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String[] description;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            description \u003d item.getDescription().toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (Arrays.asList(description).contains(keyword)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                matchingTasks.add(item);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                message \u003d message + \"\\n     \" + count + \".\" + item.toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!message.equals(\"\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_FIND + message);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the size of the task list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the size of the task list"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves a task using the given index."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task to be retrieved"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the task in the task list at the given index"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public T get(int index) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Sets the date of a task at the given index."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task to set priority."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param date  the date to set the task at."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setDate(int index, String date) throws DukeException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.get(index - 1).setDateFromString(date);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DATE + items.get(index - 1).toString());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5,
      "MuhammadHoze": 19,
      "GuoAi": 214,
      "Cao-Zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/LinkList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "// @@author Cao-Zeyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.model.item.Link;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "public class LinkList extends ItemList\u003cLink\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private ArrayList\u003cLink\u003e links;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructs an empty link list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public LinkList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructs a link list with the given links."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param links An ArrayList of {@code Link}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public LinkList(ArrayList\u003cLink\u003e links) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.links \u003d links;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the list of links."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return An ArrayList of {@code Link}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ArrayList\u003cLink\u003e getLinks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Clears all the links in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Adds a link to the link list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param link the link to be added in to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void addLink(Link link) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        links.add(link);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_LINK + link.toString() + Messages.MESSAGE_LINK_STATUS_FIRST"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                + links.size() + Messages.MESSAGE_LINK_STATUS_LAST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the size of the link list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return the size of the link list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the i-th link in the link list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param i the index of the desired link."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return the i-th link in the link list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Link get(int i) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links.get(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Lists all the links in the link list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void listLink() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (links.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LINK_LIST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c links.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + links.get(i).toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LINK_LIST + message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Deletes a link from the list, identified by the index of the link in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param index the index of the link in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void deleteLink(int index) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (index \u003e links.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_LINK);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Link linkRemoved \u003d links.get(index - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE_LINK + linkRemoved.toString() + Messages.MESSAGE_LINK_STATUS_FIRST"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    + (links.size() - 1) + Messages.MESSAGE_LINK_STATUS_LAST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links.remove(index - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 111
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a list of modules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class ModuleList extends ItemList\u003cModule\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ModuleList(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        items \u003d modules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds an item into the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description the description of the item"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addItem(Module item) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkModuleAlreadyExists(item);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super.addItem(item);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_MODULE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Item itemRemoved \u003d items.get(index - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE_MODULE + itemRemoved.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    + (items.size() - 1) + Messages.MESSAGE_MODULE_STATUS_LAST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            items.remove(index - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Lists all the modules in the module list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_MODULE_LIST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(\"Here is a list of your module(s):\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (Module module: items) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(count + \".\" + module.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        double actualCap \u003d computeCapFromModules(items, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        double projectedCap \u003d computeCapFromModules(items, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int totalMcs \u003d computeTotalMcs(items);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(String.format(\"Current CAP: %.2f\", actualCap));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(String.format(\"Projected CAP: %.2f\", projectedCap));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(String.format(\"Total MCs completed: %d\", totalMcs));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Clears all the links in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void clearModule() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a list of graded modules from a list of modules."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param modules A list of modules."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return A list of graded modules."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private ArrayList\u003cModule\u003e getGradedModules(ArrayList\u003cModule\u003e modules, boolean isComplete) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return modules.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e !task.getGrade().equals(\"S\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e !task.getGrade().equals(\"U\"))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e !isComplete || task.getIsDone())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Computes the CAP from a given list of modules."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param modules List of modules to compute the CAP from."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return The computed CAP from the list of modules."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private double computeCapFromModules(ArrayList\u003cModule\u003e modules, boolean isComplete) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cModule\u003e gradedModules \u003d getGradedModules(modules, isComplete);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        double totalGrades \u003d 0.0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int totalMcs \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (Module module : gradedModules) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            totalMcs +\u003d module.getMc();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            totalGrades +\u003d module.getGradePoint() * module.getMc();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (totalMcs !\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return totalGrades / totalMcs;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Computes the total MCs from the modules."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param modules List of modules to compute the total MCs from."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return THe computed total MCs from the list of modules."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private int computeTotalMcs(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return modules.stream()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(Module::getIsDone)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .mapToInt(Module::getMc)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates folders corresponding to the modules and academic year."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void createModuleFolders() throws DukeException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(\"Creating module folders...\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int createdFolderCount \u003d 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (Module module : items) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String academicYear \u003d module.getSemester();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String moduleName \u003d module.getDescription();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String folderName \u003d String.format(\"./modules/AY%s/%s/\", academicYear, moduleName);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            boolean hasCreatedFolder \u003d new File(folderName).mkdirs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            hasCreatedFolder |\u003d new File(folderName + \"/Lecture Notes/\").mkdirs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            hasCreatedFolder |\u003d new File(folderName + \"/Tutorial/\").mkdirs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (hasCreatedFolder) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    createdFolderCount++;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    String filePath \u003d new File(folderName).getCanonicalPath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    Ui.dukePrintMultiple(\"Created folder/sub-folders for \" + moduleName + \" at \" + filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    throw new DukeException(\"Cannot get path\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(\"Created folder(s) for \" + createdFolderCount + \" module(s).\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if a module with the same code and semester already exists in the module list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param module Module to check against."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If module already exists in the list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void checkModuleAlreadyExists(Module module) throws DukeException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int count \u003d (int) items.stream()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(existingModule -\u003e existingModule.getSemester().equals(module.getSemester()))"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(existingModule -\u003e existingModule.getDescription().equals(module.getDescription()))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (count !\u003d 0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"~Error~ Module with same code and semester already exists!\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void markItemAsDone(int index) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_MODULE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            items.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_MODULE_COMPLETE + items.get(index - 1));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 195,
      "MuhammadHoze": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class TaskList extends ItemList\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param tasks an ArrayList of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.items \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a list of tasks to the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param newTaskList ArrayList of new tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addTasksFromList(ArrayList\u003cTask\u003e newTaskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (newTaskList.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_ADD_MULTIPLE_TASK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            for (Task task: newTaskList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                items.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                Ui.dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_STATUS_FIRST + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the category of a task identified by the task index number in the task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setCategory(int index, String category) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            items.get(index - 1).setCategory(category);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_CATEGORY + items.get(index - 1).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the priority of a task at the given index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param index    the index of the task to set priority."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param priority the priority to set the task at."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setPriority(int index, int priority) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            items.get(index - 1).setPriority(priority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_SET_PRIORITY + items.get(index - 1).getPriority());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds a todo task to the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.add(newTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_TASK + newTask.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 54,
      "MuhammadHoze": 1,
      "GuoAi": 35,
      "Cao-Zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.AddRecurringCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.BorrowCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CalendarCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CommandCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DeductCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.MakeFolderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ReturnCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.SetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ARGUMENT_REGEX \u003d \"([\\\\w]+/[^\\\\s]+)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Logger parserLogger \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Pattern argumentPattern \u003d Pattern.compile(ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param fullCommand full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if user input commands are not in the standard format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String rootCommand \u003d fullCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String commandString \u003d fullCommand.replaceFirst(rootCommand, \"\").trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d removeArgumentsFromCommand(commandString, ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d getArgumentsFromRegex(commandString, ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkValidDescription(description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (rootCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return CommandCreator.createAddCommand(commandString, description, argumentsMap);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case AddRecurringCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, AddRecurringCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createAddRecurringCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, SetCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createSetCommand(fullCommand, argumentsMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case DateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, DateCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createDateCommand(commandString, argumentsMap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, CalendarCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new CalendarCommand(argumentsMap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case CategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createCategoryCommand(commandString, argumentsMap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String subRootCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            commandString \u003d commandString.replaceFirst(subRootCommand, \"\").trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return CommandCreator.createListCommand(fullCommand, subRootCommand, commandString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createDeleteCommand(commandString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case BorrowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            checkAllowedArguments(argumentsMap, BorrowCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createBorrowCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ClearCommand(commandString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createDoneCommand(commandString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case ReturnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createReturnCommand(commandString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case DeductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createDeductCommand(description);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createFindCommand(commandString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case MakeFolderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new MakeFolderCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ByeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Parses the command and obtain arguments in the form (keyword)/(argument)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString Command substring to be parsed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentRegex  The regex to match arguments against."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return A HashMap of keyword-argument pairs containing the matched arguments."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static HashMap\u003cString, String\u003e getArgumentsFromRegex(String argumentString, String argumentRegex)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        StringBuilder log \u003d new StringBuilder(\"Optional arguments: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d argumentPattern.matcher(argumentString);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return argumentsMap;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int argumentStartIndex \u003d matcher.start();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String optionalArgumentString \u003d argumentString.substring(argumentStartIndex).trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] arguments \u003d optionalArgumentString.trim().split(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (String argument: arguments) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            log.append(argument).append(\" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!argumentPattern.matcher(argument).find()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(\"\u0027\" + argument + \"\u0027 is not a valid argument!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String argumentKey \u003d argument.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String argumentValue \u003d argument.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argumentsMap.containsKey(argumentKey)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_DUPLICATE_ARGUMENTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            argumentsMap.put(argumentKey, argumentValue);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        parserLogger.log(Level.FINER, log.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return argumentsMap;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Removes arguments from the command string."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString Command substring to remove arguments from."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentRegex  Regex to match the arguments."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String with matched patterns removed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static String removeArgumentsFromCommand(String argumentString, String argumentRegex) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d argumentPattern.matcher(argumentString);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d argumentString.replaceAll(argumentRegex, \"\").trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int argumentStartIndex \u003d matcher.start();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            description \u003d argumentString.substring(0, argumentStartIndex).trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        parserLogger.log(Level.FINER, \"Description: \" + description);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the user passed in an invalid optional argument for a given command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap     HashMap containing optional arguments."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param allowedArguments HashSet containing allowed arguments."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If argumentsMap contains invalid arguments not in allowedArguments."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void checkAllowedArguments(HashMap\u003cString, String\u003e argumentsMap, HashSet\u003cString\u003e allowedArguments)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (HashMap.Entry\u003cString, String\u003e entry : argumentsMap.entrySet()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!allowedArguments.contains(entry.getKey())) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the description contains illegal characters."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description Description given by the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If the description contains illegal characters."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void checkValidDescription(String description) throws DukeException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.contains(\"/\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Parses a day string and returns a DayOfWeek enum corresponding to the day of the week."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param day String of the day to parse."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DayOfWeek enum representing the corresponding day of the week."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If the string is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static DayOfWeek getDayFromString(String day) throws DukeException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (day.toLowerCase()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.TUESDAY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.THURSDAY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.SATURDAY;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DAY);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 160,
      "MuhammadHoze": 31,
      "GuoAi": 24,
      "Cao-Zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Book;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Credit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Link;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Used to load and save task list data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_DIVIDER_COUNT \u003d 6;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Default file path used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String TASK_STORAGE_FILEPATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String BOOK_STORAGE_FILEPATH \u003d \"books.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String CREDIT_STORAGE_FILEPATH \u003d \"credits.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String LINK_STORAGE_FILEPATH \u003d \"links.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MODULE_STORAGE_FILEPATH \u003d \"modules.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Loads the task list data from the storage, and then returns it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return ArrayList of {@code Task} from the storage file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTask() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        File file \u003d new File(TASK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task newTask \u003d loadTaskFromLine(line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Loads the book list data from the storage, and then returns it."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return ArrayList of {@code Book} from the storage file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cBook\u003e loadBook() throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        File file \u003d new File(BOOK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Book newBook \u003d loadBookFromLine(line);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            books.add(newBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return books;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Loads the link list of data from the storage, and then returns it."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return ArrayList of {@code Link} from the storage file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ArrayList\u003cLink\u003e loadLinks() throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        File file \u003d new File(LINK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cLink\u003e links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Link newLink \u003d loadLinkFromLine(line);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links.add(newLink);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Loads the credit list data from the storage, and then returns it."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return ArrayList of {@code Credit} from the storage file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cCredit\u003e loadCredit() throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        File file \u003d new File(CREDIT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cCredit\u003e mealCredit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Credit newCredit \u003d loadCreditFromLine(line);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            mealCredit.add(newCredit);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return mealCredit;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Loads the module list data from the storage."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return ArrayList of modules."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If the file does not exist, or parsing errors."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ArrayList\u003cModule\u003e loadModule() throws DukeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        File file \u003d new File(MODULE_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Module newModule \u003d loadModuleFromLine(line);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            modules.add(newModule);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Saves the {@code ItemList} data to the storage file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param items the {@code ItemList} to be saved to the storage file"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException if there were errors storing data to file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void save(ItemList items, String saveFilePath) throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            fw \u003d new FileWriter(saveFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String saveString \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            saveString \u003d saveString + items.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            fw.write(saveString);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a task corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Task corresponding to the loaded line."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Task loadTaskFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_DIVIDER_COUNT) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            boolean isDone \u003d Utils.stringToBoolean(arguments[1].trim());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String description \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int priority \u003d Integer.parseInt(arguments[3].trim());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String category \u003d arguments[4].trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String dateString \u003d arguments[5].trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            newTask \u003d new Task(description, isDone, priority);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!category.equals(\"\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newTask.setCategory(category);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!dateString.equals(\"\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newTask.setDateFromString(dateString);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Returns a book corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return Book corresponding to the loaded line."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private Book loadBookFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Book newBook;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String[] arguments \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_DIVIDER_COUNT - 1) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            boolean isReturn \u003d Utils.stringToBoolean(arguments[1].trim());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String description \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String dateString \u003d arguments[3].trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String futureDateString \u003d arguments[4].trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newBook \u003d new Book(description, isReturn);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!dateString.equals(\"\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                newBook.setDateFromString(dateString);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!futureDateString.equals(\"\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                newBook.setDateFromString(dateString);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return newBook;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Returns mealCredit corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return Credit corresponding to the loaded line."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private Credit loadCreditFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Credit newCredit;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String[] arguments \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_DIVIDER_COUNT - 4) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String description \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newCredit \u003d new Credit(description);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return newCredit;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Returns a link corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return Link corresponding to the loaded line."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private Link loadLinkFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Link newLink;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String module \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String type \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String url \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newLink \u003d new Link(module, type, url);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            System.out.println(\"here\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return newLink;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a module corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Module corresponding to the loaded line."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Module loadModuleFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (arguments.length !\u003d 5) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String description \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String grade \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int mc \u003d Integer.parseInt(arguments[2].trim());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String semester \u003d arguments[3].trim();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            boolean isDone \u003d Utils.stringToBoolean(arguments[4].trim());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new Module(description, grade, mc, semester, isDone);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 120,
      "MuhammadHoze": 125,
      "GuoAi": 41,
      "Cao-Zeyu": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Text UI of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private static Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Shows the divider line."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(Messages.DIVIDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints messages to the user in a structured format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param message the messaged to be printed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void dukePrint(String message) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void dukePrintMultiple(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a calendar from a given task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param currentDate Date of the current day."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param daysToPrint Number of days of tasks being printed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void dukePrintCalendar(LocalDate currentDate, ArrayList\u003cTask\u003e taskList, int daysToPrint) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert daysToPrint \u003e\u003d 0 : \"Days should be a positive integer\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintCalendarHeading(currentDate, taskList, daysToPrint);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintCalendarTasks(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the heading of the calendar."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param date Date to be printed in the heading."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param daysToPrint Number of days of tasks being printed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintCalendarHeading(LocalDate date, ArrayList\u003cTask\u003e taskList, int daysToPrint) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (taskList.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dukePrintMultiple(\"You have no tasks for the next \" + daysToPrint + \" day(s).\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(\"Today\u0027s date is: \" + date.format(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(\"Here\u0027s your tasks for the next \" + daysToPrint + \" day(s).\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the tasks in the calendar."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintCalendarTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintDayHeading(task.getDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            LocalDate previousTaskDate \u003d taskList.get(i - 1).getDate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (task.getDate().compareTo(previousTaskDate) !\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintDayHeading(task.getDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the heading in the calendar for a certain date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param date Date of the heading."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintDayHeading(LocalDate date) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(date.getDayOfWeek().toString() + \" - \" + date.format(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Hello from...\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(Messages.LOGO);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        dukePrint(\"How can termiNus assist you today?\\n\\n \\t Unsure what to type? Start of by typing \u003chelp\u003e to see the \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"commands and their usage.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the goodbye message after the termination of the application."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        dukePrint(Messages.MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the error message to the user if an error occurs."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param e the {@code DukeException} representing the error occurred"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showError(DukeException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        dukePrint(e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Formats the date time from user input."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param time the date time from user input"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted date time string"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DateTimeParseException if the user input date time is not in the specified format"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static String formatDateTime(String time) throws DateTimeParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyy HH:mm\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        LocalDateTime formattedDateTime \u003d LocalDateTime.parse(time, inputFormatter);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String returnString \u003d formattedDateTime.format(outputFormatter);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 68,
      "MuhammadHoze": 7,
      "GuoAi": 80
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    static final String LOGO \u003d \"     _                           _  _   _\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |                         (_)| \\\\ | |\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |_   ___  _ __  _ __ ___   _ |  \\\\| | _   _  ___\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | __| / _ \\\\| \u0027__|| \u0027_ ` _ \\\\ | || . ` || | | |/ __|\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |_ |  __/| |   | | | | | || || |\\\\  || |_| |\\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\\__| \\\\___||_|   |_| |_| |_||_|\\\\_| \\\\_/ \\\\__,_||___/\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Testing\\n\" + LOGO);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 8,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommand_addsTodo() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(description, taskList.get(0).getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommandWithPriority_addsTodoWithPriority() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputPriority \u003d \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(Integer.parseInt(inputPriority), taskList.get(0).getPriority());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommandWithCategory_addsTodoWithCategory() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputCategory \u003d \"cs2113\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"c\", inputCategory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(inputCategory, taskList.get(0).getCategory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithInvalidPriority_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputPriority \u003d \"-2\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        inputPriority \u003d \"a\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithDate_addsCommandWithDate() throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputDate \u003d \"13-05-2020\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedDateString \u003d \"13 May 2020\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedDateString, taskList.get(0).getDateString(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithInvalidDate_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputDate \u003d \"13-13-2020\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        inputDate \u003d \"blah\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 114
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/CategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class CategoryCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validCategory_setsNewCategory() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String category \u003d \"test category\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Command categoryCommand \u003d new CategoryCommand(index + 1, category);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(null, tasks.get(index).getCategory());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        categoryCommand.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(category, tasks.get(index).getCategory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 11,
      "GuoAi": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class DateCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validDate_setsNewDate() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", \"13-05-2020\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dateCommand.execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"13 May 2020\", tasks.get(0).getDateString(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_invalidDate_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", \"xx-yy-zzzz\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dateCommand.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_noDate_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dateCommand.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 62
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    void execute_validPriority_deleteTasksWithSamePriority() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    void execute_validTaskIndex_deleteIndividualTasks() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    void execute_validPriority_listsTasksWithSamePriority() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/SetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class SetCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validPriority_setsNewPriority() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int initialPriority \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int newPriority \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", Integer.toString(newPriority));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(initialPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        setCommand.execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(newPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_negativePriority_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int newPriority \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", Integer.toString(newPriority));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setCommand.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_invalidPriority_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String newPriority \u003d \"a\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", newPriority);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setCommand.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 63
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/item/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class ModuleTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_0mcs_returnsTrue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_negativeMcs_returnsFalse() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(-1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_40mcs_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(40);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_41mcs_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(41);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_4mcs_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S1_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S2_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S2\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S3_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S3\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S0_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S0\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2011S1_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2011S1\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 69
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.DateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.SetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validAddCommand_returnsAddCommand() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"add task tP meeting p/1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidAddCommand_throwsException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"add\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validSetCommand_returnsSetCommand() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"set 1 p/0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof SetCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidSetCommand_throwsException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"set p/-1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validDateCommand_returnsDateCommand() throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"date 1 date/05-05-2020\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof DateCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidDateCommand_throwsException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommandWrongIndex \u003d \"date a date/05-05-2020\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.parse(fullCommandWrongIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_validCommand_parseArgumentsCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting by/16-09-23:59 at/15-09-2020-11:00 p/1\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"16-09-23:59\", argumentsMap.get(\"by\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"15-09-2020-11:00\", argumentsMap.get(\"at\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"1\", argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_duplicateArguments_throwsException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting c/cs2113 p/1 p/2\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_multipleBackslash_parsesCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting p/23/24 c/cs2/1/13\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"23/24\", argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"cs2/1/13\", argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_validCommand_returnsDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting by/16-09-23:59 at/15-09-2020-11:00 p/1\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"add tP meeting\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, parsedString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_noArguments_returnsDescription() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"tP meeting\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(testCommand, parsedString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_extraSpaces_trimsSpaces() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"     tP meeting   c/cs2113  p/1 \";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"tP meeting\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, parsedString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkAllowedArguments_argumentNotAllowed_throwsException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashSet\u003cString\u003e allowedArguments \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", \"1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"i\", \"2\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, allowedArguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 123
    }
  },
  {
    "path": "src/test/java/seedu/duke/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getDescription_inputDescription_returnsCorrectDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputString \u003d \"test description\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(inputString);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(inputString, todo.getDescription());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getIsDone_isDone_returnsFalseByDefault() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(todo.getIsDone());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void markAsDone_setIsDone_todoSetAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(todo.getIsDone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(todo.getIsDone());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void toFile_getToFile_returnsCorrectString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fileString \u003d todo.toFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"T | 0 | test description | 0 |  | \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, fileString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void testToString_toString_returnsCorrectString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String todoString \u003d todo.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"[T][N] test description (p:0)\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, todoString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void todo_noInputPriority_setsDefaultPriority() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(0, todo.getPriority());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void setPriority_validPriority_setsCorrectPriority() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        todo.setPriority(5);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(5, todo.getPriority());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 61
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add task iP meeting"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add task other meeting p/3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add task tP meeting p/5 c/cs2113"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done task 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done task 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add task tP meeting p/2 c/cs2113 invalid/argument"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "delete task 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "delete task 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "find book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Revengers Assemble!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 6,
      "MuhammadHoze": 2,
      "GuoAi": 4,
      "Cao-Zeyu": 3
    }
  }
]
