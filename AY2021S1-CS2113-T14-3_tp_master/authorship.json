[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "# termiNus project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is a really simple all-in-one CLI based program for NUS undergraduate students. Whatcha waiting for! Download and start cruising with termiNus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "   Hello from..."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     How can termiNus assist you today?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " \t Unsure what to type? Start of by typing \u003chelp\u003e to see the commands and their usage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 16,
      "-": 53
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    compile group: \u0027commons-validator\u0027, name: \u0027commons-validator\u0027, version: \u00271.7\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    archiveBaseName \u003d \"termiNus\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "-": 45,
      "Cao-Zeyu": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | GuoAi | [Github](https://github.com/GuoAi) | [Portfolio](./team/template.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "![CaoZeyuPhoto](./displayPictures/CaoZeyuPhoto.jpeg) | Cao Zeyu | [Github](https://github.com/Cao-Zeyu) | [Portfolio](team/cao-zeyu.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![MuhammadPhoto](./displayPictures/MuhammadPhoto.jpg) | Muhammad Hozefa Zumkhawala| [Github](https://github.com/MuhammadHoze) | [Portfolio](team/muhammadhoze.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![ChenJiaJunPhoto](./displayPictures/ChenJiaJunPhoto.jpg) | Chen Jia Jun | [Github](https://github.com/iamchenjiajun) | [Portfolio](./team/iamchenjiajun.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ng Yeow Hwee Antonio | [Github](https://github.com/yh-ng) | [Portfolio](./team/yh-ng.md)"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 2,
      "-": 4,
      "Cao-Zeyu": 1,
      "yh-ng": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003etermiNus Developer Guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "* Table of contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author MuhammadHoze --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is an interactive Command Line Interface (CLI) task manager for undergraduate students in NUS. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This program will help them achieve a better grip on their school life as well as assist in better management of their "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "daily expenses and be reminded of any library loans. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This guide gives an overview understanding of the architectural design and implementation of termiNus. It will"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "assist developers in the knowledge they require to further build upon this application. We hope you have a clearer picture"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "after reading through our Developer Guide. \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**Pre-requisite:** Proficient in comprehending UML diagrams and notations.   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Setting up, Getting Started"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Setting up the project in your local machine "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Ensure that you have JDK 11 or above installed on your computer. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "First, **fork** this [repo](https://github.com/AY2021S1-CS2113-T14-3/tp), and **clone** the fork to your local machine. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "If you plan to use IntelliJ IDEA (highly recommended):"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Ensure IntelliJ IDEA is configured to use JDK 11."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Open IntelliJ and a welcome screen should appear."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Click on `Configure` -\u003e `Structure for New Projects` -\u003e `Project Settings` -\u003e `Project`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Under the `Project SDK:` section, select **java version \"11.0.8\"** or higher). \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Import the project as a Gradle project."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Ensure Gradle plugin is enabled by going to `File` -\u003e `Settings` -\u003e `Plugins`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Under the `Installed` section go to `Build Tools` and enable Gradle. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * At the welcome page, click on `Open or Import`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Locate the `build.gradle` file within the folder that contains the clone repo and select it."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Choose the `Open as Project` option when asked."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Accept all default settings and wait for the project to import. "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. Verify the setup."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Under the `seedu.duke` package, locate the `Duke` class and run it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * Try a few commands. You may want to refer to the [user guide](https://ay2021s1-cs2113-t14-3.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Before writing the code "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Configure the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * If using IntelliJ IDEA, follow this [guide](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Set up CI"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    it will run the CI for the project automatically at each push to the `master` branch or to any PR."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    **No setup is required for this**."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Learn the design"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "   * When you are ready to start coding, we recommend that you refer to [termiNus\u0027s architecture](#architecture-diagram)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "   to get a better idea of the overall design."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author --\u003e "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Architecture Diagram"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Below is an architecture diagram of termiNus."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![ArchitectureDiagram](./images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Duke` is the main object of the program and handles all the logic and models related to the program."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Ui` is the main object that provides an interface between `Duke` and the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Command` represents a command that is provided by the user. `Ui` reads the command before it is sent to `Parser` to create a new `Command` object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Parser` creates a command object by parsing the user\u0027s arguments and sending them to `CommandCreator`, which returns a `Command` object. For instances where no arguments are needed (such as `ByeCommand`), Parser creates the `Command` object directly."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Duke` executes the `Command` and shows the output to the user through `Ui`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Command` object modifies the state of `Model`, which consists of multiple lists for different types of `Items`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `Storage` takes the state of `Model` and stores it to file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Sequence Diagram"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Below is a sequence diagram of how the main program functions."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![DukeSequenceDiagram](./images/DukeSequenceDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. First, the `main` function of the `Duke` class creates an instance of `Duke`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. During the instantiation of `Duke`, a `Model` object is created."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. `Duke` loads the state of `Model` from file by calling the `load()` method of `Model`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. After `Duke` is initialized, the `Duke` class calls the `run()` method of `Duke`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. `Duke` calls methods from `Ui` class and shows messages to the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. `Duke` reads user commands using the `Ui` class (which acts as an interface between `Duke` and the user)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. `Command` object is returned to `Duke` which is executed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. `Command` object interacts with `Model` and changes its state."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. `Duke` saves the state of `Model` to file by calling the `save()` method of `Model`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. `Duke` continues reading commands until a `ByeCommand` is generated by the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Ui component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The Ui component is a user interface which reads user input command and output interacting messages."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Ui` component represents a `Ui` class and acts as an interface between `Duke` and the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Ui` component:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Reads input from the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Prints the output to the user, for example during the execution of a `Command`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Displays other types of output to the user, such as a calendar."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Parser component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Parser` class is a class forming part of the logic of termiNus. The `Parser` parses user commands and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "returns a `Command` subclass which corresponds to the full command with arguments."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Command component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Command` component represents an abstract object with state corresponding to a single line of the user\u0027s input."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "\u003c!-- @@author Cao-Zeyu --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "![CommandClassDiagram](./images/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Every basic command inherits the abstract `Command` class, with their own attributes and execute operations. After "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "user input is parsed by `Parser`, `CommandCreator` will create and return the corresponding command to be execute."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Command` object:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Modifies the state of `Model` object which depends on the state and type of `Command` object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Exposes its `execute()` method so that it can be passed around before the `Command` is executed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Is executed by the `Duke` object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Prints the output to the user through the `Ui` component."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### CommandCreator component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `CommandCreator` represents a class with methods that generate `Commands` from parsed arguments from `Parser` class."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `CommandCreator` class:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Takes in arguments as needed by `Parser` class."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Splits the arguments further into more parts if the `Command` has more arguments in the description."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Returns a `Command` subclass object depending on the method that was called."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "\u003c!-- @@author GuoAi --\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Storage component  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The `Storage` class is a class loading data from files when termiNus starts and saving data to files after each command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Storage` object:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Is referenced only by `Model`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Expose functions to allow `Model` to pass in the state and saves it to file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Expose functions to load the state of `Model` from file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "\u003c!-- @@author GuoAi --\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Item component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`Item` is a super class with 5 subclasses inheriting it: `Task`, `Expense`, `Module`, `Link`, `Book`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Here is the class diagram for `Item` class and its subclasses."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "![ItemClassDiagram](./images/ItemClassDiagram.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The `Item` class and its subclasses:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Contains getters and setters to retrieve and set the attributes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Model Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![ModelClassDiagram](./images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Model` component represents the state of the various lists stored in memory."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Model` component:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Stores and loads program state to file using the `Storage` API."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Expose references to its `ItemList` objects so that other objects such as `Command` can modify it."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This section describes how certain features are implemented."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Parser"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Parser` class is a class that takes in a single line of the user\u0027s command and returns a corresponding `Command` that can be executed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Parser` object:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Expose functions to allow `Model` to pass in the user\u0027s full command to be parsed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Uses regular expressions to parse the user\u0027s arguments into several parts."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Passes these parts to `CommandCreator` to create the corresponding command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Returns the `Command` to `Model` that can be executed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### High level description"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `Parser.parse()` method takes in `fullCommand` as an argument, which is the full command entered by the user."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example commands:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `add task tP meeting c/cs2113 p/0`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `add module CS2113 mc/4 ay/2021S1 g/A`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `fullCommand` is composed of several parts, which consists of a root command (`add`), description (`module CS2113`)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "and optional arguments (`mc/4 ay/2021S1 g/A`)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "An optional argument consists of 2 parts, which is delimited by a forward slash. In the example above, there are 3 optional"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "arguments, which are `mc/4`, `ay/2021S1` and `g/A`. Each optional argument can be represented in this form: `\u003ckey\u003e/\u003cvalue\u003e`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "In some commands, the optional arguments may be compulsory and is checked by the `Parser` at runtime."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The `parse` method parses the `fullCommand` into these parts before passing them as arguments to `CommandCreator`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "methods and returns a `Command` object with the corresponding arguments."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The following sequence diagram shows how the `Parser` works."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![DukeSequenceDiagram](./images/ParserSequenceDiagram.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The following diagram shows how a command should be parsed into its separate parts."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![CommandParseDiagram](./images/CommandParseDiagram.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Implementation details"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The `parse` method of `Parser` is invoked by the calling object. In termiNus, the only object that invokes this"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "method is `Duke`. The `fullCommand` is passed an argument, which is the full command entered by the user."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The method parses `fullCommand` into two separate `Strings`, which are `rootCommand` and `commandString`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`rootCommand` contains the first word of the command and `commandString` contains the rest of the command with the first"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "word removed. This is done using the `split` method of the `String` class, then removing the `rootCommand` from the "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`fullCommand` before storing it in `commandString`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The method then invokes the `removeArgumentsFromCommand` method to parse and remove optional arguments from the full"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "command. This is done using regular expression parsing which is detailed in the next section. The results are returned"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "to the `parse` method and stored in `description`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The method then invokes the `getArgumentsFromRegex` method when the `rootCommand` is not `\"find\"` to parse the optional arguments from the full command."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The results are stored in a `HashMap\u003cString, String\u003e`, which is a `HashMap` of key-value pairs, similar to the form of the"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "optional argument (`\u003ckey\u003e/\u003cvalue\u003e`). The results are returned to the `parse` method and stored as `argumentsMap`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The method then checks the `rootCommand` and decides which `Command` to return, which calls `CommandCreator`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "methods with the parsed `argumentsMap`, `description`, and `commandString`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. For certain commands, `checkAllowedArguments` method is called to ensure that the user did not pass in invalid arguments for that given command, and throws an error if there are invalid arguments."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. For single-word commands like `bye`, `checkFullCommand` method is called to ensure that the full command corresponds to the command word, and rejects commands like `bye 3`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The results of the `CommandCreator` methods are returned as a `Command` back to the invoker of the `parse` method."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Regular expression parsing"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Two of the previously mentioned methods, `removeArgumentsFromCommand` and `getArgumentsFromRegex` make use of regular"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "expressions to parse the optional arguments."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The diagram below illustrates how the regular expression matches an optional argument."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![RegexDiagram](./images/RegexDiagram.png)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- The regular expression that parses these optional arguments is `([\\w]+/[^\\s]+)`. This regular expression matches **1 or more"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "alphanumeric characters** (denoted by `[\\w]+`), followed by a forward slash, then **1 or more non-whitespace character** (denoted by `[^\\s]+`)."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- The expression also uses capturing parenthesis to ensure that the parser does not parse the same argument twice."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- The results of `getArgumentsFromRegex` are stored as a `HashMap` instead of `ArrayList` or simply returned as a value."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "This allows the same method to be reused for different commands, which may accept different optional arguments with"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "different key-value pairs. This ensures that the code follows DRY principles."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- The regular expressions parsing means that we do not need to manually parse every different command with different"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "arguments, thus reducing code complexity and SLOC."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "\u003c!-- @@author GuoAi --\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Storage"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This section describes how the `Storage` class works"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### High level description"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Methods handling data loading (i.e. `loadTask()`, `loadBook()`, `loadLinks()`, `loadModule()`, `loadExpense()` methods) "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "return an `ArrayList` of items (i.e. `Task`, `Book`, `Link`, `Module`, `Expense`). These will be the initial values of "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "the item list (i.e. `TaskList`, `BookList`, `LinkList`, `ModuleList`, `ExpenseList`). The `save()` method takes an "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "inherited instance of `ItemList` and a `String` specifying the path to which the file will be saved. The `ItemList` will "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "be parsed and saved into files (each `ItemList` will be saved to a separate file) at the specified path.  "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Formats of the files: "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `tasks.txt`:  "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 6 fields stored for each `Task`:  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. String `T` for \"Task\"  "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Whether the `Task` has been done or not (1 for done, 0 for not done)  "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Description of the `Task`  "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Priority of the `Task` (an Integer)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "5. Category of the `Task`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "6. Date of the `Task`  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Task` is stored as one line.  "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `T | 0 | borrow book | 1 | book | 28-10-2020`  "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `books.txt`:  "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 5 fields stored for each `Book`:  "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. String `B` for \"Book\"  "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Whether the `Book` has been returned or not (1 for returned, 0 for not returned)   "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Name/Description of the `Book`  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Borrow date of the `Book`  "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "5. Return date of the `Book`  "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Book` is stored as one line.  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `B | 0 | cooking book | 11-11-2011 | 11-12-2011`  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `links.txt`:  "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 3 fields stored for each `Link`:  "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Module of the `Link`  "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Use of the `Link`  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. URL of the `Link`  "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Link` is stored as one line.  "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `CS2113 | lecture | https://cs2113Lecture.zoom.com`  "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `modules.txt`:  "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 4 fields for each `Module`:  "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Module code  "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Grade  "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Modular credits  "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Academic year and semester  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Module` is stored as one line.  "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `expenses.txt`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 4 fields for each `Expense`:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Description"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Value"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Currency"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Date"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Module` is stored as one line."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Currency has default value \"SGD\"."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Date has default value of the date that the `spend` command is executed."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Date will be in the format of `yyyy-MM-dd`, e.g. `2020-11-09`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Implementation details"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The following sequence diagram shows how the `Storage` works."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "![StorageSequenceDiagram](./images/StorageSequenceDiagram.png)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. At the start of `Duke`, a new `Storage` object will be created."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. `Duke` calls loading methods (i.e. `loadTask()`, `loadBook()`, `loadLinks()`, `loadModule()`, `loadExpense()`) "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "sequentially. Each loading method calls the corresponding helper method (i.e. `loadTaskFromLine()`, `loadBookFromLine()`, "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`loadLinkFromLine()`, `loadModuleFromLine()`, `loadExpenseFromLine()`) to load `Item`s from each line in the file. "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. After each command, `Duke` calls the `save()` method of `Storage` to save all the `Item`s in the list to files."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### List feature"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "\u003c!-- @@author Cao-Zeyu --\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "#### List tasks"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "The list tasks feature allows the user to list all the tasks tracked."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "This feature is facilitated by `ListCommand`. "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The user inputs the command `list tasks`. (Assuming the task list is not empty)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `ListCommand`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `tasks`, and returns a `ListCommand` for the whole task list."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The command is executed and the complete list of all the tracked tasks is displayed."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "#### List tasks with priority"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "The list tasks with priority feature allows the user to list tasks of a certain priority."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "This feature is facilitated by `Parser` and `ListCommand`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The user inputs the command `list tasks p/3`. (Assuming the tasks of priority 3 exist.)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `ListCommand`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `tasks` and `p/`, and returns a `ListCommand` for the task list of priority level 3."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The command is executed and the list of tasks with priority 3 is displayed."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "#### List tasks with category"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "The list tasks with category feature allows the user to list tasks of a certain category."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "This feature is facilitated by `Parser` and `ListCommand`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The user inputs the command `list tasks c/CS2113`. (Assuming the tasks of CS2113 exist.)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `ListCommand`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `tasks` and `c/`, and returns a `ListCommand` for the task list under CS2113 category."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The command is executed and the list of tasks categorized by CS2113 is displayed."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "#### Add links"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "The add links feature allows the user to add and save zoom meeting links of modules."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "This feature is faclitated by `Parser`, `AddCommand` and `Storage`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The user inputs `add links m/CS2113 t/lecture u/https://nus.sg.zoom.us/cs2113/lecture`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `AddCommand`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The method `createAddCommand()` in `CommandCreator` further parses the input by identifying the keyword `link`, and returns a `AddCommand`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The command is excuted and the link is added into the link list with module name and online class type."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. `Storage` saves the added link by writing it into the `links.txt` file."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "#### List links"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "The list link feature allows the user to list all the zoom meeting links."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "This feature is facilitated by `Parser` and `AddCommand`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The user inputs `list links`. (Assuming the link list is not empty)."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create a `ListCommand`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `links`, and returns a `ListCommand` for the link list."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. The command is excuted and the complete list of links is displayed."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author Guo Ai --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "#### List expenses"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "The list expenses feature allows the user to list all the expense items in the expense list together with a summary "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "message displaying the total amount of expenses listed for each currency."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "This feature is facilitated by `Parser` and `ListExpenseCommand`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "1. The user inputs `list expenses`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "a `ListExpense Command`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `expenses`, "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "and calls the static method `createListExpenseCommand()` in class `ListExpenseCommand`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "1. The static method `creatListExpenseCommand()` in class `ListExpenseCommand` further parses the arguments and returns "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "a new `ListExpenseCommand` for the expense list."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command is executed and the complete expense list is displayed together with the summary information."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "- If the expense list is empty, the message `There are no expense items to be listed in your expense list.` will be "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "#### List expenses with currency"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "The list expenses with currency feature allows the user to list expense items of a curtain currency together with a "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "summary message displaying the total amount of expenses listed for each currency."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "This feature is facilitated by `Parser` and `ListExpenseCommand`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "1. The user inputs the command `list expenses currency/USD`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "create a `ListExpense Command`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `expenses`, "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "and calls the static method `createListExpenseCommand()` in class `ListExpenseCommand`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "1. The static method `creatListExpenseCommand()` in class `ListExpenseCommand` further parses the arguments by "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "identifying keyword `currency`, and returns a new `ListExpenseCommand` for the expense list."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command is executed and the expense list with `currency` `USD` is displayed together with the summary information."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "- If the expense list is empty, the message `There are no expense items to be listed in your expense list.` will be "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "#### List expenses with date"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "The list expenses with date feature allows the user to list expense items of a curtain date together with a "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "summary message displaying the total amount of expenses listed for each currency."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "This feature is facilitated by `Parser` and `ListExpenseCommand`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "1. The user inputs the command `list expenses date/2020-11-09`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "create a `ListExpense Command`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `expenses`, "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "and calls the static method `createListExpenseCommand()` in class `ListExpenseCommand`."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "1. The static method `creatListExpenseCommand()` in class `ListExpenseCommand` further parses the arguments by "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "identifying keyword `date`, and returns a new `ListExpenseCommand` for the expense list."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command is executed and the expense list with `date` `2020-11-09` is displayed together with the summary information."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "- If the expense list is empty, the message `There are no expense items to be listed in your expense list.` will be "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "- The `date` argument must be in the format of `date/\u003cyyyy-MM-dd\u003e`. If the `date` argument does not follow the correct "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "format, an error message `Please input a valid date string in the format \"yyyy-MM-dd\"` will be displayed."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "#### List expenses with date"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "The list expenses with date feature allows the user to list expense items of a curtain date together with a "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "summary message displaying the total amount of expenses listed for each currency."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "This feature is facilitated by `Parser` and `ListExpenseCommand`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "1. The user inputs the command `list expenses date/2020-11-09`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "create a `ListExpense Command`."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `expenses`, "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "and calls the static method `createListExpenseCommand()` in class `ListExpenseCommand`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "1. The static method `creatListExpenseCommand()` in class `ListExpenseCommand` further parses the arguments by "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "identifying keyword `date`, and returns a new `ListExpenseCommand` for the expense list."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command is executed and the expense list with `date` `2020-11-09` is displayed together with the summary information."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "- If the expense list is empty, the message `There are no expense items to be listed in your expense list.` will be "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "- The `date` argument must be in the format of `date/\u003cyyyy-MM-dd\u003e`. If the `date` argument does not follow the correct "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "format, an error message `Please input the date string in the format \"yyyy-MM-dd\"` will be displayed."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "#### List expenses for a certain date range"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "The list expenses for a certain date range feature allows the user to list expense items of a curtain date range (i.e. "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "today/this week/this month/this year) together with a summary message displaying the total amount of expenses listed for each currency."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "This feature is facilitated by `Parser` and `ListExpenseCommand`."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "1. The user inputs the command `list expenses for/WEEK`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "create a `ListExpense Command`."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "1. The method `createListCommand()` in `CommandCreator` further parses the input by identifying the keyword `for`, "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "and calls the static method `createListExpenseCommand()` in class `ListExpenseCommand`."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "1. The static method `creatListExpenseCommand()` in class `ListExpenseCommand` further parses the arguments by "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "identifying keyword `for`, and returns a new `ListExpenseCommand` for the expense list."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command is executed and the expense list for the currency week is displayed together with the summary information."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "- If the expense list is empty, the message `There are no expense items to be listed in your expense list.` will be "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "- The `for` argument is case-insensitive. For example, both `list expenses for/MONTH` and `list expenses for/month` are "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "valid commands."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Calendar feature"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author iamchenjiajun --\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "#### Calendar command"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The calendar command allows users to print out a calendar view of their tasks within the next `X` days, where `X` is a parameter passed by the user."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. `CalendarCommand` obtains a list of tasks from `TaskList` by using its `getTaskList` method, which returns an `ArrayList` of `Task` objects."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The list of tasks is converted into a `Stream`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The `Task` objects without dates are filtered out."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The `Task` objects outside the range of the current date and `X` days of the current date are filtered out."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The `ArrayList` is sorted by task dates, which uses a `Comparator` defined in the parameters."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The `Stream` is collected back into an `ArrayList`, which has sorted dates of tasks within the next `X` days."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The `ArrayList` of `Task` objects are passed to the `Ui.dukePrintCalendar` method, which prints the tasks as a calendar."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. The `dukePrintCalendar` method groups tasks by date and a new heading is printed for each day. This is done by comparing each `Task` in the loop with the"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "previous task to check if they have the same date, and to print a new heading if not."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The filtering of the tasks by date is done using this code, which is called on a `Stream` object."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003e\u003d 0)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003c\u003d daysToPrint)"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "The sorting of tasks by date is done using this code, which is also called on a `Stream` object."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    .sorted(Comparator.comparing(Task::getDate))"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "This sorts the stream using a `Comparator` which is defined inline. The `Comparator` makes use of the `Task.getDate()` method to do the comparisons."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "This is done instead of defining a new `Comparator` class as `toCompare` is already implemented in the `LocaDate` API, and doing this simplifies the code."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "\u003c!-- @@author GuoAi --\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Delete feature"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Delete tasks by index"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The delete tasks by index feature allows the user to delete a task identified by a certain index."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilitated by `Parser` and `DeleteCommand`."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The user inputs the command `delete task 2`. (Assuming the task of index `2` exist.)"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` command returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "create a `DeleteCommand`."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The method `createDeleteCommand()` in `CommandCreator` further parses the input by identifying the keyword `task`, "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "and returns a `DeleteCommand` with the task index."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The command is executed and the task with index `2` is deleted. The deleted task is displayed."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- If the task does not exist in the task list, the error message `~Error~ This task index does not exist. Please try "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "again.` will be displayed."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Delete tasks with priority"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The delete tasks with priority feature allows the user to delete all the tasks of a certain priority."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilicated by `Parser` and `DeleteCommand`."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The user inputs the command `delete tasks p/2`. (Assuming the tasks of priority `2` exist.)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` command returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "create a `DeleteCommand`."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The method `createDeleteCommand()` in `CommandCreator` further parses the input by identifying the keyword `tasks` "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "and `p/`, and returns a `DeleteCommand` for the task list of priority level `2`."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The command is executed and all tasks with priority level `2` are deleted. The deleted tasks are displayed."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- If the priority does not exist in the task list, the error message `~Error~ Invalid priority number.` will be "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Delete tasks with category"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The delete tasks with category feature allows the user to delete all the tasks of a certain category."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilicated by `Parser` and `DeleteCommand`."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The user inputs the command `delete tasks c/cs2113`. (Assuming the tasks of category `cs2113` exist.)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` command returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "create a `DeleteCommand`."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The method `createDeleteCommand()` in `CommandCreator` further parses the input by identifying the keyword `tasks` "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "and `c/`, and returns a `DeleteCommand` for the task list of category `cs2113`."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The command is executed and all tasks with category `cs2113` are deleted. The deleted tasks are displayed."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- If the priority does not exist in the task list, the error message `~Error~ Invalid category.` will be "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Delete links by index"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The delete links by index feature allows the user to delete a link identified by a certain index."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilitated by `Parser` and `DeleteCommand`."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The user inputs the command `delete link 2`. (Assuming the link of index `2` exist.)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` command returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "create a `DeleteCommand`."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The method `createDeleteCommand()` in `CommandCreator` further parses the input by identifying the keyword `link`, "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "and returns a `DeleteCommand` with the link index."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The command is executed and the link with index `2` is deleted. The deleted link is displayed."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- If the link does not exist in the link list, the error message `~Error~ This link index does not exist. Please try "
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "again.` will be displayed."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Delete modules by index"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The delete modules by index feature allows the user to delete a module identified by a certain index."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilitated by `Parser` and `DeleteCommand`."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The user inputs the command `delete module 2`. (Assuming the module of index `2` exist.)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` command returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "create a `DeleteCommand`."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The method `createDeleteCommand()` in `CommandCreator` further parses the input by identifying the keyword `module`, "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "and returns a `DeleteCommand` with the module index."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The command is executed and the module with index `2` is deleted. The deleted module is displayed."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- If the module does not exist in the module list, the error message `~Error~ This module index does not exist. Please "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "try again.` will be displayed."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Delete expenses by index"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The delete expenses by index feature allows the user to delete an expense item identified by a certain index."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilitated by `Parser` and `DeleteExpenseCommand`."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The user inputs `delete expense 2`. (Assuming the expense item of index `2` exist.)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` method returns a `CommandCreator` object to create "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "a `DeleteExpenseCommand`."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The method `createDeleteCommand()` in `CommandCreator` further parses the input by identifying the keyword `expenses`, "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "and returns a `DeleteExpenseCommand` with the expense index."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The command is executed and the expense item with index `2` is deleted. the deleted expense item is displayed."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- If the expense item does not exist in the expense list, the error message `~Error~ This expense item does not exist. "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Please try again.` will be displayed."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Delete expenses with currency"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The delete expenses with currency feature allows the user to delete all the expense items of a certain currency."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilicated by `Parser` and `DeleteExpenseCommand`."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The user inputs the command `delete expenses currency/USD`. (Assuming the expenses of currency `USD` exist.)"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` command returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "create a `DeleteExpenseCommand`."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The method `createDeleteCommand()` in `CommandCreator` further parses the input by identifying the keyword `expenses` "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "and `currency/`, and returns a `DeleteExpenseCommand` for the task list of currency `USD`."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The command is executed and all expense items with currency `USD` are deleted. The deleted expense items are displayed."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- If the currency does not exist in the task list, the error message `There is no expense item deleted.` will be "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Deleting expenses with date"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The delete expenses with date feature allows the user to delete all the expense items of a certain date."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This feature is facilicated by `Parser` and `DeleteExpenseCommand`."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The user inputs the command `delete expenses date/2020-11-09`. (Assuming the expenses of date `2020-11-09` exist.)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The full command string will be parsed by `Parser`, whose `parse()` command returns a `CommandCreator` object to "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "create a `DeleteExpenseCommand`."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The method `createDeleteCommand()` in `CommandCreator` further parses the input by identifying the keyword `expenses` "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "and `date/`, and returns a `DeleteExpenseCommand` for the task list of date `2020-11-09`."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. The command is executed and all expense items with date `2020-11-09` are deleted. The deleted expense items are displayed."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- If the currency does not exist in the task list, the error message `There is no expense item deleted.` will be "
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "displayed."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- The `date` argument must be in the format of `date/\u003cyyyy-MM-dd\u003e`. If the `date` argument does not follow the correct "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "format, an error message `Please input a valid date string in the format \"yyyy-MM-dd\"` will be displayed."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Appendix: Requirements"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author MuhammadHoze --\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### Target user profile"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Undergraduate students of National University of Singapore who:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- require help to better manage their school work."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- forgets to return their loan books to the library on time."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- wants a timetable planner for easy reference."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- are lazy to create separate module folders every semester."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- wish to calculate their CAP."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author MuhammadHoze --\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### Value proposition"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is an application which helps NUS undergraduates to better manage their school life, by providing daily task or"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "borrowed books tracking, and module-related functions. This increase users\u0027 efficiency and make their life more organized."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " "
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author MuhammadHoze --\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Version | Priority | As a ... | I want to ... | So that I can ..."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "------- | -------- | -------- | ------------- | ------------------"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v1.0 | High | student | add tasks into a list | keep track of the things I need to do"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v1.0 | High | student | assign priorities to tasks | focus on the more important things first"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v1.0 | Medium | student | assign categories to tasks | have a more organised task list"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v1.0 | High | student | mark tasks as done | keep track of the remaining tasks to do"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v1.0 | Medium | student | list all tasks in my list | have a better overview"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v1.0 | High | student | be able to delete unwanted tasks | focus on the tasks which I need"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v1.0 | High | student | save all data after using the application | retrieve the data upon running the application"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v2.0 | Medium | student | automatically create folders for my modules | I do not have to manually create them"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v2.0 | High | student| add recurring tasks | avoid adding the same tasks every week"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v2.0 | High | student | have a calendar | I can view my current and upcoming tasks"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v2.0 | High |student| be able to set a tracker my borrowed books | avoid overdue fines"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v2.0 | Medium | student | sort my tasks based on highest priority | focus on those tasks first"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v2.0 | High | student | save zoom links in a centralized place | easily attend my online classes instead of looking through my email for the link"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v2.0 | High | student | add modules and calculate my CAP| have a better projection of my grades and efforts"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "v2.0 | Low | student | login with a password | my system is protected"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author MuhammadHoze --\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Should work on any *mainstream OS* as long as it has `Java 11` or above installed."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Should be able to respond to any command in less than 2 seconds."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. A user should be able to complete majority of tasks faster using CLI than GUI."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author MuhammadHoze --\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Acronym | Full form | Meaning"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "-------- | ---------- | ----------"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**CI**   | Continuous Integration | Combining parts of a software product to form a whole"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**SDK**  | Software Development Kit | A set of software tools by software vendors"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**IntelliJ** | IntelliJ | An Integrated Development Environment written in Java"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**UML** | Unified Modeling Language | A modeling language which to visualize the design of a system"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**CLI** | Command Line Interface | A program that accepts text inputs to execute operating system functions"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**GUI** | Graphical User Interface | An interface that allows users to interact through graphical icons"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**Mainstream OS** | Windows, Linux, Unix, OS-X | Operating systems"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**SLOC** | Source Lines of Code | The number of lines in a program\u0027s source code"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**DRY** | Don\u0027t Repeat Yourself | Every piece of knowledge must have a single, unambiguous, authoritative representation within a system"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**CAP** | Cumulative Average Point | The weighted average grade point of all modules taken by a student"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Appendix: Instructions for manual testing"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Below are the steps required for manual testing of termiNus"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "\u003c!-- @@author Cao-Zeyu --\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. Initial launch \u003cbr\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    1. Download the latest version of `termiNus` from [here](https://github.com/AY2021S1-CS2113-T14-3/tp/releases/latest) "
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    and copy the jar file to an empty folder."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    2. Open a command line window in the same directory and launch termiNus by typing `java -jar termiNus.jar` and press enter."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "2. Shutdown \u003cbr\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    1. Input `bye` to exit the program."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Adding items"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. Adding a task"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `add task tP submission c/CS2113 p/1 date/09-11-2020` \u003cbr\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: task `tP submission` is added to the task list, with priority of `1`, category of `CS2113`, and "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      a date of `09 Nov 2020`."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "2. Adding a recurring task"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `addr tP meeting s/26-10-2020 e/27-11-2020 day/tue c/CS2113 p/2` \u003cbr\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: recurring tasks `tP meeting` are added to the task list, with priority of `2`, category of `CS2113`,"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      and the recurring dates of the Tuesdays during the start and end period."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `addr game club c/CCA \u003cbr\u003e`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed since the compulsory arguments `s/`, `e/`, `day/` are all required for "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      a recurring task."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "3. Adding a module "
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `add module CS1010 d/1 g/A+ mc/4 ay/1920S1` \u003cbr\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: module `CS1010` completed in `AY1920S1` is added to the module list, with the grade `A+` and MCs of `4`."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `add module STT233 d/1 g/A+ mc/4 ay/1920S1` \u003cbr\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed since the module name is in incorrect format."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `add module ST2334 mc/4 ay/1920S1` \u003cbr\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed since the compulsory arguments `g/`, `mc/`, `ay/` are all required for "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      a module."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "4. Adding a link"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `add link m/CS2113 t/lecture u/https://cs2113lecture.zoom.com` \u003cbr\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the Zoom meeting link for `lecture` of module `CS2113` is added to the link list."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `add link m/CS2113 t/meeting u/https://cs2113meeting.zoom.com` \u003cbr\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed since the input for `t/` argument can only be `lecture`, `tutorial`, `lab`, "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      or `project`."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "5. borrowing a book"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `borrow Harry Potter date/10-11-2020` \u003cbr\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the book `Harry Potter` is added to the book list with the loan date `10 Nov 2020` and due date "
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      `10 Dec 2020`."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "6. Adding an expense item"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `spend lunch v/4 currency/SGD date/2020-11-08` \u003cbr\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: a `4.00` `SGD` expense on `lunch` on `Sunday, November 8,2020` is added to the expense list."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `spend book v/15` \u003cbr\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: a `15.00` `SGD` expense on `book` on the current day is added to the expense list. "
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      (By default, if `currency/` and `date/` arguments are not specified, termiNus will assume the currency is `SGD` "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      and the date is the current day.)"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Creating module folders"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `makefolders` \u003cbr\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: sub-folders (`Lecture Notes` and `Tutorials`) are created at the output directories for each module in "
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  the module list."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  "
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Displaying items"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. Displaying tasks"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list tasks` \u003cbr\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the complete list of tasks is displayed."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list tasks p/1` \u003cbr\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the list of tasks under priority `1` is displayed."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list tasks p/-1` \u003cbr\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed, since the priority of a task can only be a non-zero integer."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list tasks p/4` \u003cbr\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed, since there is no task of this priority."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list tasks c/CS2113` \u003cbr\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the list of tasks under category `CS2113` is displayed."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list tasks c/work` \u003cbr\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed, since there is no task of this category."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "2. Displaying modules"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list modules` \u003cbr\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the complete list of modules is displayed."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "3. Displaying links"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list links` \u003cbr\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the complete list of links is displayed."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "4. Displaying books"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list books` \u003cbr\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the complete list of books is displayed."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "5. Displaying expenses"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list expenses` \u003cbr\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the complete list of expenses is displayed, followed by the total expenses calculated for "
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      the current day, week, month, and year."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list expenses date/2020-11-09` \u003cbr\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the list of expenses on `Sunday, November 8, 2020` is displayed, followed by the total expenses "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      caculated for the given day."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `list expenses for/week` \u003cbr\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the list of expenses for the current week is displayed."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Marking an item as done"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Prerequisite: list the desired item list using `list` command. Multiple items in the list."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. Marking a task as done"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `done task 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the first task in the task list is marked as done `Y`."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "2. Marking a module as completed"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `done module 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the first module in the module list is marked as completed `CM`."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "3. Marking a book as returned"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `return 2` \u003cbr\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the second book in the book list is marked as returned `R`."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Setting the priority of a task"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Prerequisite: list the complete task list using `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `set 3 p/2` \u003cbr\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: the priority of the third task in the task list is set as `2`."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  "
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Setting the category of a task"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Prerequisite: list the complete task list using `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `category 2 c/CS2113` \u003cbr\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: the category of the second task in the task list is set as `CS2113`."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Setting the date of a task"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Prerequisite: list the complete task list using `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `date 2 date/02-01-2021` \u003cbr\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: the date of the second task in the task list is set as `02 Jan 2021`."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  "
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Printing the task calendar"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `calendar d/3` \u003cbr\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: the tasks for the current day and for the next `3` days are output separately as a calendar."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Searching for tasks with keywords"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `find tP` \u003cbr\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: the tasks containing the keyword `tP` are displayed."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  "
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `find t` \u003cbr\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: an information is printed out to informing there is no matching tasks, since there is no keyword `t` in "
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  any task in the list and incomplete keywords are not allowed."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Deleting items"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Prerequisite: list the desired item list using `list` command. Multiple items in the list."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. Deleting a task/tasks"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete task 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the first task in the task list is deleted."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete tasks p/1` \u003cbr\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the tasks that under priority `1` are deleted."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete task p/0` \u003cbr\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed indicating invalid index, since the delete command for tasks under a certain "
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      priority should use `tasks` instead of `task` in the input."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete tasks p/10` \u003cbr\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed indicating invalid index, since there is no task of priority `10` "
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      in the list."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "   "
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete tasks c/CS2113` \u003cbr\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the tasks that under category `CS2113` are deleted."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "   "
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete task c/CS2113` \u003cbr\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed indicating invalid index, since the delete command for tasks under a certain "
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      category should use `tasks` instead of `task` in the input."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete tasks c/work` \u003cbr\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed indicating invalid category, since there is no task of category `work` "
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      in the list."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "2. Deleting a module"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete module 2` \u003cbr\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the second module in the module list is deleted."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete module 8` \u003cbr\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed, since the module index does not exist."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "3. Deleting a link"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete link 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the first link in the link list is deleted."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete link 7` \u003cbr\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed, since the link index does not exist."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "4. Deleting an expense"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete expense 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: the first expense in the expense list is deleted."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete expense 10` \u003cbr\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed, since the expense index does not exist."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    "
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete expenses date/2020-11-09` \u003cbr\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: all the expenses on `Sunday, November 8, 2020` are removed from the expense list."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "   "
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    - Test case: `delete expense date/2020-11-09` \u003cbr\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      Expected: an error message is printed indicating invalid index, since the delete command for expenses on a certain"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "      day should be `expenses` instead of `expense` in the input."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Clearing all items"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `clear all` \u003cbr\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: all the tasks, modules, links, books, and expenses are removed."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  "
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Getting help"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "- Test case: `help` \u003cbr\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "  Expected: all the available commands and their usages are displayed in the help message."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": " \u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003eEnd of termiNus Developer Guide\u003c/h1\u003e"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 196,
      "MuhammadHoze": 129,
      "GuoAi": 250,
      "-": 114,
      "Cao-Zeyu": 266
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# termiNus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Hello from..."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     How can termiNus assist you today?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Unsure what to type? Start of by typing \u003chelp\u003e to see the commands and their usage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is an interactive task manager for undergraduate students in NUS. It is ideal for keyboard-inclined students "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "to showcase their skills and make their life easier with the help of termiNus. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Here are some useful links:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Third party libraries used in this project"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " - [Apache Commons Validator](https://commons.apache.org/proper/commons-validator/) under [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Code reused"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " - termiNus is based on [GuoAi/ip](https://github.com/GuoAi/ip), although much of the codebase has been heavily modified."
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 19,
      "MuhammadHoze": 8,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003etermiNus User Guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "* Table of contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is an interactive Command Line Interface (CLI) task manager for undergraduate students in NUS. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This program will help them achieve a better grip on their school life as well as assist in better management of their "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "daily expenses and be reminded of any library loans. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Fear not, this guide contains all the features found in termiNus along with detailed explanations on the usage of each"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "command. We hope this guide is user-friendly! "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Download the latest version of `termiNus` from [here](https://github.com/AY2021S1-CS2113-T14-3/tp/releases/latest)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. Copy the jar file to a new folder."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "4. Navigate to the directory which contains `termiNus.jar` using the command prompt. Alternatively, on Windows, you"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "   can open the folder which contains `termiNus.jar` and in the address bar type `cmd` and press enter. It will open up a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "   command prompt with that directory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "5. Run termiNus by typing `java -jar termiNus.jar` and press enter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "6. A greeting message will be displayed as shown below."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Hello from..."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     How can termiNus assist you today?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Unsure what to type? Start of by typing \u003chelp\u003e to see the commands and their usage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "7. Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**Take note:**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    1. Priority 0: Default , Priority 1: Highest (As number increases, priority decreases). "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    2. Detailed descriptions are given for each command. Please follow exactly."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding a task: `add task`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Adds a new item to the list of todo tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `add task \u003cdescription\u003e \u003coptional arguments\u003e`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `date/\u003cdd-MM-yyyy\u003e` sets the date of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: By default, there is **no category and date**, and the **priority is set to 0**."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Optional arguments can be typed in **any** order."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Duplicate entry of tasks are **allowed**. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add task tP meeting`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add task tP meeting c/cs2113 p/1`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add task tP meeting p/1 c/cs2113 date/13-05-2020`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add task tP meeting date/13-05-2020 p/1 c/cs2113`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [T][N] tP meeting (p:1) (category: cs2113) (date: 13 May 2020)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding recurring tasks: `addr`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Adds multiple tasks to the list of tasks that occur weekly on a given day."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `addr \u003cdescription\u003e \u003coptional/compulsory arguments\u003e`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `s/\u003cdd-MM-yyyy\u003e` start date of recurring tasks (inclusive)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `e/\u003cdd-MM-yyyy\u003e` end date of recurring tasks (inclusive)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `day/\u003cmon/tue/wed/thu/fri/sat/sun\u003e` day of recurring task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Optional and compulsory arguments can be typed in **any** order."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Duplicate entry of recurring tasks are **allowed**. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`addr tp meeting s/26-10-2020 e/27-11-2020 day/fri`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`addr board games club s/26-10-2020 e/27-11-2020 day/wed c/CCA`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`addr board games club s/26-10-2020 day/wed e/27-11-2020 p/1 c/CCA`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added these tasks:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 28 Oct 2020)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 04 Nov 2020)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 11 Nov 2020)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 18 Nov 2020)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 25 Nov 2020)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding a module: `add module`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add modules to the module list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `add module \u003cmodule code\u003e \u003coptional/compulsory arguments\u003e`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cmodule code\u003e` matches 2 or 3 prefix characters, followed by 4 digits and optional suffix."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: All characters in `\u003cmodule code\u003e` must be in **caps**. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: Duplicate module code in the same semester will **not be allowed**. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `d/\u003c1 or 0\u003e` sets whether a module is \"completed\" or not *(1 for \"completed\", 0 for \"incomplete\")*."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: Modules will be **\"completed\" by default** if `d/\u003c1 or 0\u003e` is not provided. This feature lets users add \"incomplete\" modules and compute a projected CAP when `list modules` is entered."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- `g/\u003cgrade\u003e` grade of the module in **caps** (`A+`, `A`, `A-`, etc)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `ay/\u003cXXXXSY\u003e` academic year of the module where `X` is an integer and `Y` is `1` or `2` (`2021S1`, `2021S2`, etc...)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- `mc/\u003cMCs\u003e` modular credits of the module. Valid for a range of **0 to 40 MCs, inclusive**."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: All characters in academic year must be in **caps**. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Grades must be in **caps**."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Optional and compulsory arguments can be typed in **any** order."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`add module CS2113 g/A+ mc/4 ay/2021S1`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add module CS2117 mc/4 g/B+ d/0 ay/2021S2`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add module CS2119 g/C+ d/1 mc/4 ay/2021S2`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added this module:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [CM][A+] CS2113 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Now you have 3 module(s) in the list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `[CM]` indicates a \"completed\" module, and `[IC]` indicates an \"incomplete\" module."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding a weblink: `add link`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add a link for lecture/tutorial sessions through zoom."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `add link m/\u003cmodule code\u003e \u003ccompulsory arguments\u003e`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `t/\u003cTYPE\u003e` type of use (`lecture`, `tutorial`, `lab`, `project`)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- `u/\u003cURL\u003e`  the link.  "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: URL has to begin with either **http:// or https://**. "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: All characters in `\u003cmodule code\u003e` must be in **caps**. "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`add link m/CS2113 t/lecture u/https://CS2113Lecture.zoom.com`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Got it. I\u0027ve added this link:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       CS2113 lecture"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       https://CS2113Lecture.zoom.com"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 1 link(s) in the list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding an expense item: `spend`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add an expense item into the expense list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `spend \u003cdescription\u003e \u003ccompulsory arguments\u003e \u003coptional arguments\u003e`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "- `v/\u003cvalue\u003e` sets the amount of money spent."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: value has a limit of **100 trillion** (100,000,000,000,000). "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: value must be **non-negative**."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `currency/\u003ccurrency\u003e` sets the currency of the expense."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `date/\u003cyyyy-MM-dd\u003e` sets the date of the expense."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: By default, the currency is set to \"SGD\" and date is set to the date when the user executes the `spend` command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `currency` is user defined. It **does not** have to be a legal currency in the world."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Optional and compulsory arguments can be typed in **any** order."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`spend lunch v/5`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`spend lunch v/5 currency/CNY`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`spend lunch v/5 date/2020-10-28`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`spend lunch v/5 date/2020-11-08 currency/USD `"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added this expense item:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Now you have 9 expense items in the list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Borrowing a book: `borrow`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Loan a book and add into the book list. "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `borrow \u003cbook name\u003e \u003ccompulsory argument\u003e`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003ccompulsory argument\u003e`:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `date/\u003cDD-MM-YYYY\u003e` date of borrow (`23/11/2020`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: The due date will be fixed to **1 month** from the date of loan. "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: Duplicate book name will **not be allowed**. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`borrow cooking book date/11-11-2011`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added this book: cooking book"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       (Loan Date: 11 Nov 2011)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       (Due Date: 11 Dec 2011)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Creating module folders: `makefolders`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Make folders for all modules in the module list according to academic year."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: Folders will be created in the same location as where you ran termiNus from."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `makefolders`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`makefolders`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Creating module folders..."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Created folder/sub-folders for GER1000 at C:\\termiNus\\modules\\AY2021S1\\GER1000"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Created folder/sub-folders for CS2113 at C:\\termiNus\\modules\\AY2021S1\\CS2113"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Created folder(s) for 2 module(s)."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying tasks on list: `list tasks`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Lists all the tasks."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Lists all the tasks **including** recurring task."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here are the task(s) in your list:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] tP meeting (p:1) (category: cs2113)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     3.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     4.[T][N] board games club (p:1) (category: CCA) (date: 28 Oct 2020)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     5.[T][N] board games club (p:1) (category: CCA) (date: 04 Nov 2020)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     6.[T][N] board games club (p:1) (category: CCA) (date: 11 Nov 2020)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying tasks based on priority: `list tasks (by priority)`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Lists all the tasks with the same priority."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cpriority\u003e` must be **non-negative**."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks p/2`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here are the task(s) of this priority in your list:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying tasks based on category: `list tasks (by category)`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Lists all the tasks with the same category."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: category is **case-sensitive**."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks c/cs2113`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     Here are the tasks of this category in your list:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     1.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     2.[T][N] lecture quiz (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying weblinks on list: `list links`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Lists all the links."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list links`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`list links`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here are the links in your list:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     1.CS2113 lecture"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       https://CS2113Lecture.zoom.com"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     2.CS2028 lecture"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       https://zoom.com.sg"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying books borrowed and returned on list: `list books`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List all books loaned and returned. "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list books`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`list books`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here are the books in your list:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     1.[B][L] cooking book"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         (Loan Date: 11 Nov 2011)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         (Due Date: 11 Dec 2011)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     2.[B][R] java book"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         (Loan Date: 10 Oct 2020)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         (Due Date: 10 Nov 2020)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying modules on list: `list modules`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List all the modules in the module list and shows the current CAP, projected CAP and completed MCs."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: Current CAP is computed from \"completed\" modules, and projected CAP is computed from all modules."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: Completed MCs are computed from \"completed\" modules."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list modules`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`list modules`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Here is a list of your module(s):"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[CM][A-] GER1000 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[CM][A+] GET1029 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     3.[CM][A+] CS2113 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     4.[IC][B] GES1041 (4 MC) (AY2021S2)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Current CAP: 4.83"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Projected CAP: 4.50"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Total MCs completed: 12"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `[CM]` indicates a \"completed\" module, and `[IC]` indicates an \"incomplete\" module."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying expense items on list: `list expenses`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List all the expense items in the expense list and shows total amount of money spent for each currency and the current "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "day, week, month, and year."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list expenses`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: Expense list is sorted **based on date** (*from the most recent to the least recent*). If the date of two expense items "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "are the **same**, the expense list is sorted **based on currency lexicographically**."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`list expenses`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the expense item(s) in your list:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     dinner (0.60 A) (date: Monday, November 9, 2020)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     breakfast (0.10 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     book (0.50 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bread (0.20 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bottle (3.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     pen (1.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     earphone (0.30 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     tablet (0.40 USD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Your total expense for today is:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     0.60 SGD"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     5.20 USD"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Your total expense for this week is:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     4.90 SGD"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     5.60 USD"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Your total expense for this month is:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     0.60 A"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     4.90 SGD"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     5.60 USD"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Your total expense for this year is:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     0.60 A"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     4.90 SGD"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     5.60 USD"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying expense items by a certain currency on list: `list expenses (by currency)` "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List all the expense items in the expense list based on currency and shows total amount of money spent for each currency."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list expenses currency/\u003ccurrency_name\u003e`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: currency_name is **case-sensitive**."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`list expenses currency/USD`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the expense item(s) in your expense list of currency USD:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bread (0.20 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     tablet (0.40 USD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     The total amount listed:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     5.60 USD"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying expense items on a certain date on list: `list expenses (by date)` "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List all the expense items in the expense list based on the date and shows total amount of money spent for each currency."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `list expenses date/\u003cYYYY-MM-DD\u003e`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`list expenses date/2020-11-08`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the expense item(s) in your expense list of date Sunday, November 8, 2020:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     breakfast (0.10 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     book (0.50 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bread (0.20 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     The total amount listed:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     0.60 SGD"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     5.20 USD"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Displaying expense items for a certain time period on list: `list expenses (by time period)` "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "List all the expense items in the expense list based on the time period and shows total amount of money spent for each currency."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `list expenses for/\u003ctime period\u003e`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctime period\u003e` can only be `day`, `week`, `month`, or `year`."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: time period is **case-insensitive**."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`list expenses for/week`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```    "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the expense item(s) in your expense list for this week:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     breakfast (3.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bus (1.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     pencil (0.30 SGD) (date: Saturday, November 8, 2020)"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     pen (0.40 USD) (date: Saturday, November 9, 2020)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     The total amount listed:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     4.30 SGD"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     0.40 USD"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```  "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting a task from the list: `delete task`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Deletes a task from the list"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete task \u003ctaskIndexNumber\u003e`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete task 2`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [T][N] iP meeting (p:2)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 5 task(s) in the list."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting all tasks of a certain priority: `delete tasks (by priority)`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks of the same priority."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete tasks p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cpriority\u003e` must be **non-negative**."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete tasks p/2`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```    "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed all these task(s) with the same priority:"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] tP meeting (p:2)"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] iP meeting (p:2)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting all tasks of a certain category: `delete tasks (by category)`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks of the same category."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete tasks c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ccategory\u003e` is **case-sensitive**."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete tasks c/cs2113`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```    "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed all these task(s) with the same category:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][Y] tP meeting (p:0) (category: cs2113)"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting a link from the list: `delete link`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete a link from the list. "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete link \u003clinkIndexNumber\u003e`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003clinkIndexNumber\u003e` corresponds to the index given on `list links` command output."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete link 2`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed this link:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       CS2113 lecture"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       https://cs2113Lecture.zoom.com"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 2 link(s) in the list."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting a module from the list: `delete module`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete a module from the list."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `delete module \u003cmoduleIndexNumber\u003e`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cmoduleIndexNumber\u003e` corresponds to the index given on `list modules` command output."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`delete module 2`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Noted. I\u0027ve removed this module:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [CM][A+] CS1010 (4 MC) (AY1920S1)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 7 module(s) in the list."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting an expense item from the list: `delete expense`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete an expense item from the list."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `delete expense \u003cexpenseIndexNumber\u003e`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cexpenseIndexNumber\u003e` corresponds to the index given on `list expenses` command output."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`delete expense 2`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Noted. I\u0027ve removed all these expense item(s)"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     breakfast (0.10 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting all the expense items of a certain currency: `delete expenses (by currency)`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete expense items of the same currency."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete expenses currency/\u003ccurrency_name\u003e`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: currency_name is **case-sensitive**."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`delete expenses currency/SGD`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Noted. I\u0027ve removed all these expense item(s)"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     earphone (0.30 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     pen (1.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     book (0.50 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bottle (3.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Deleting all expense items of the same date: `delete expenses (by same date)`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete expense items of the same date."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `delete expenses date/\u003cyyyy-MM-dd\u003e`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `date` argument must be in the format of `yyyy-MM-dd`, e.g. `2020-11-08`."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`delete expenses date/2020-11-08`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Noted. I\u0027ve removed all these expense item(s)"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bread (0.20 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Marking a task as done: `done task`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Marks a given task as done."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `done task \u003ctaskIndexNumber\u003e`"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`done task 1`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [Y] tP meeting"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Setting a module as complete: `done module`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Sets a module as complete."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `done module \u003cmoduleIndexNumber\u003e`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003cmoduleIndexNumber\u003e` corresponds to the index given on `list modules` command output."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`done module 1`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I\u0027ve marked this module as complete:"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [CM][A-] GER1000 (4 MC) (AY2021S1)"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Marking a book as returned: `return`"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Marks a given book as returned."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `return \u003cbookIndexNumber\u003e`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cbookIndexNumber\u003e` corresponds to the index given on `list books` command output."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`return 2`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I\u0027ve marked this book as returned:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [R] java book"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Setting the priority of a task: `set`"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Sets the priority of an existing task."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `set \u003ctaskIndexNumber\u003e p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cpriority\u003e` must be **non-negative**."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`set 1 p/3`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`set 2 p/4`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I\u0027ve set the priority of this task to: 4"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Setting the category of a task: `category`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Sets the category of an existing task."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `category \u003ctaskIndexNumber\u003e c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ccategory\u003e` is **case-sensitive**"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`category 1 c/CCA`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I have set the category of this task:"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [T][N] tP meeting (p:0) (category: CCA)"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Setting the date of a task: `date`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Sets the date of an existing task."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `date \u003ctaskIndexNumber\u003e date/\u003cdd-MM-yyyy\u003e`"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list tasks` command output."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`date 1 date/11-11-2020`"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Nice! I have set the date of this task:"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [T][N] study for finals (p:0) (category: st2334) (date: 11 Nov 2020)"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Printing task calendar: `calendar`"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Prints a calendar with tasks from current date to given number of days."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `calendar d/\u003cdaysToPrint\u003e`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003cdaysToPrint\u003e` must be **non-negative** "
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`calendar d/7`"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Today\u0027s date is: 26 Oct 2020"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here\u0027s your tasks for the next 7 day(s)."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     MONDAY - 26 Oct 2020"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] finish tutorial (p:2) (date: 26 Oct 2020)"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     TUESDAY - 27 Oct 2020"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] tp meeting (p:0) (category: cs2113) (date: 27 Oct 2020)"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] meet with friend (p:1) (category: personal) (date: 27 Oct 2020)"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     THURSDAY - 29 Oct 2020"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] tp v2.0 submission (p:0) (category: cs2113) (date: 29 Oct 2020)"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Searching for an item with keyword: `find`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Finds all items in the corresponding item list with matching description."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `find {tasks,links,books,expenses,modules} k/\u003ckeyword\u003e`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "🚩: `\u003ckeyword\u003e` is **case-insensitive**."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ckeyword\u003e` can be a **single word** or a **phrase**."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " "
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: `\u003ckeyword\u003e` must contain **whole words** from the item description, e.g `tp meeting`, `ip` etc."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "🚩: Incomplete keywords will **not be matched**. e.g `mee`, `t` etc."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "🚩: `\u003ckeyword\u003e` for finding modules or links can only be the related **module name**."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`find tasks k/tp meeting`"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the matching items in your list:"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] tp meeting (p:0) (category: cs2113)"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] tp meeting 2 (p:0)"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`find expenses k/dinner`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the matching items in your list:"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.dinner (0.60 A) (date: Monday, November 9, 2020)"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Clearing all tasks: `clear`"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Clears all tasks, lists, books, modules, expenses from the list. "
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `clear all`"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`clear all`"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve cleared everything."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Getting help: `help`"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "list all the available commands and their usage."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     add:"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     1. add task: Adds a task to the task list."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: TASK_NAME \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     List of \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - p/\u003cnumber\u003e sets the priority of the task."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - c/\u003ccategory\u003e sets the category of the task."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - date/\u003cdd-MM-yyyy\u003e sets the date of the task."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Example: add task example_task \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     2. add module: Adds a module to the module list."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Parameters: MODULE_CODE \u003coptional/compulsory arguments\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     List of \u003coptional arguments\u003e:"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - d/\u003c1 or 0\u003e sets whether a module is completed or not (1 for completed, 0 for incomplete)."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     List of \u003ccompulsory arguments\u003e:"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - g/\u003cgrade\u003e grade of the module in caps (A+, A, A-, etc)."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - ay/\u003cXXXXSY\u003e academic year of the module where X is an integer and Y is 1 or 2 (2021S1, 2021S2, etc...)."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - mc/\u003cMCs\u003e modular credits of the module. Valid for a range of 0 to 40 MCs."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: add module example_module \u003coptional/compulsory arguments\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     3. add link: Adds a weblink to the link list."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Parameters: m/MODULE CODE \u003ccompulsory arguments\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     List of \u003ccompulsory arguments\u003e:"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - t/\u003cTYPE\u003e type of use (lecture, tutorial, lab, project)."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       - u/\u003cURL\u003e the link."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: add link m/example_module \u003ccompulsory arguments\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    "
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     addr: Adds multiple tasks to the list of tasks that occur weekly on a given day."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Parameters: TASK_NAME \u003coptional/compulsory arguments\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     List of \u003coptional arguments\u003e:"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - p/\u003cnumber\u003e sets the priority of the task."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - c/\u003ccategory\u003e sets the category of the task."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - date/\u003cdd-MM-yyyy\u003e sets the date of the task."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     List of \u003ccompulsory arguments\u003e:"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - s/\u003cdd-MM-yyyy\u003e start date of recurring tasks (inclusive)"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - e/\u003cdd-MM-yyyy\u003e end date of recurring tasks (inclusive)."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - day/\u003cmon/tue/wed/thu/fri/sat/sun\u003e day of recurring task."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: addr example_task \u003coptional/compulsory arguments\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     borrow: Adds a book to the book list."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: borrow example_book  date/DD-MM-YYYY"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bye: Exits the program."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: bye"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     calendar: Sets the date of a given task in the list."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Example: calendar d/\u003cdaysToPrint\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     category: Sets the category of a task identified by the task index number in the task list."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX c/CATEGORY"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: category 1 c/Academics"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     clear: Clears all tasks in the task list."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: clear"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     date: Sets the date of a given task in the list."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Example: date \u003ctaskIndex\u003e date/DD-MM-YYYY"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     delete:"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1. Deletes the task identified by the index number used in the task listing."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: delete task 1"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 1: p/PRIORITY"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "             Deletes all the tasks with PRIORITY."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "             Example: delete tasks p/1"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 2: c/CATEGORY"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "             Deletes all the tasks with CATEGORY."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "             Example: delete tasks c/cs2113"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2. Deletes the link identified by the index number used in the link listing."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Example: delete link 1"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     3. Deletes the expense items identified by the index number used in the expense list."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "          Optional parameter 1: currency/CURRENCY"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Deletes all the expense items with CURRENCY."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Example: delete expenses currency/SGD"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "          Optional parameter 2: date/yyyy-MM-dd"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Deletes all the expense items on the date in the format of yyyy-MM-dd"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Example: delete expenses date/2020-11-07"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     done: Marks the task/module identified by the index number used in the listing as done."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: \u003ctype\u003e INDEX"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Accepted \u003ctype\u003e: task, module"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: done task 1"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     find: Finds all items whose descriptions contain the specified keywords (case-insensitive) and displays them in a list with index numbers."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: {tasks, links, books, expenses, modules} k/KEYWORDS"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: find expenses k/buy food"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     help: Shows program usage instructions."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: help"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     list: Displays all items in the list with index numbers."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Example: list all"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1. Displays all the tasks in the task list."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 1: tasks p/PRIORITY"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Displays all the tasks with priority PRIORITY as a list."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "             Example: list tasks p/1"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 2: tasks c/CATEGORY"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "             Displays all the tasks with CATEGORY as a list."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "             Example: list tasks c/cs2113"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "          Optional parameter 3: tasks sorted"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Displays all the tasks sorted by priority     2. Displays all the books in the book list."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Example: list books"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     2. Displays all the links in the link list."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Example: list links"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     3. Displays all the modules in the module list."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Example: list modules"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     4. Displays all the expense items in the expense list."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "          Optional parameter 1: currency/CURRENCY"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Displays all the expense items with currency CURRENCY as a list."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Example: list expenses currency/SGD"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "          Optional parameter 2: date/yyyy-MM-dd"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Displays all the expense items with date in the format of yyyy-MM-dd."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Example: list expenses date/2020-11-07"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "          Optional parameter 3: for/{DAY, WEEK, MONTH, YEAR}"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Displays all the expense items for today/this week/this month/this year."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "             Example: list expenses for/YEAR"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     makefolders: Make folders for your modules in the modulelist"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     spend: Adds an expense item to the expense list."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: DESCRIPTION \u003ccompulsory/optional argument\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     List of \u003ccompulsory arguments\u003e:"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - v/\u003cvalue\u003e sets the value of the expense item."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     List of \u003ccompulsory arguments\u003e:"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - currency/\u003ccurrency\u003e sets the currency of the expense item."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       - date/\u003cyyyy-MM-dd\u003e sets the date of the expense item."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: spend example_expense_item v/5.0 currency/SGD date/2020-11-07"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     set: Sets the task identified by the index number used in the task listing to the new priority."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX p/PRIORITY"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: set 1 p/2"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     return: Marks the book identified by the index number used in the book list as returned."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Example: return 2"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  "
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Exiting and saving the program: `bye`"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Terminates and saves the program in the respective text files."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Farewell student. Hope to see you again soon!"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Frequently Asked Questions"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "**A**: `./tasks.txt`, `./books.txt`, `./links.txt`, `./modules.txt` and `./expenses.txt` stores the user data, which can be transferred to another computer or instance of the program by"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "putting it in the same folder as `termiNus.jar`."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**Q**: Are all commands case-sensitive?"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**A**: The case-sensitivity has been stated for the applicable commands. "
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Quick Command Reference"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Action | Command | Example"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "----- | ------ | ------"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add task | `add task \u003cdescription\u003e \u003coptional arguments\u003e` | `add task tP meeting c/cs2113`"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add recurring task | `addr \u003cdescription\u003e \u003coptional/compulsory arguments\u003e` | `addr board games club s/26-10-2020 e/27-11-2020 day/wed p/1 c/CCA`"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add module | `add module \u003cmodule code\u003e \u003coptional/compulsory arguments\u003e` | `add module CS2113 g/A+ mc/4 ay/2021S1`"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add web link | `add link m/\u003cmodule code\u003e \u003ccompulsory arguments\u003e` | `add link m/CS2113 t/lecture u/https://cs2113Lecture.zoom.com`"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Add book | `borrow \u003cbook name\u003e \u003ccompulsory argument\u003e` | `borrow cooking book date/11-11-2011`"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Add expense item | `spend \u003cdescription\u003e \u003ccompulsory arguments\u003e \u003coptional arguements\u003e` | `spend lunch v/5 currency/SGD date/29-10-2020`"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Create module folders | `makefolders` | `makefolders`"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List tasks | `list tasks` | `list tasks`"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List tasks with priority | `list tasks p/\u003cpriority\u003e` | `list tasks p/2`"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List tasks with category | `list tasks c/\u003ccategory\u003e` | `list tasks c/CS2113`"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List links | `list links` | `list links`"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List books | `list books` | `list books`"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List modules | `list modules` | `list modules`"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List expense items | `list expenses` | `list expenses`"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List expense items with currency | `list expenses currency/\u003ccurrency_name\u003e` | `list expenses currency/USD`"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List expense items with date | `list expenses date/\u003cYYYY-MM-DD\u003e` | `list expenses date/2020-11-08`"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "List expense items with date range | `list expenses for/\u003ctime period\u003e` | `list expenses for/WEEK`"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete task | `delete task \u003ctaskIndexNumber\u003e` | `delete task 2`"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks by priority | `delete p/\u003cpriority\u003e` | `delete tasks p/2`"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks by category  | `delete c/\u003ccategory\u003e` | `delete tasks c/cs2113`"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete link | `delete link \u003ctaskIndexNumber\u003e` | `delete link 2`"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Delete module | `delete module \u003cmoduleIndexNumber\u003e` | `delete module 2`"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Delete expense items | `delete expense \u003cexpenseIndexNumber\u003e` | `delete expense 2`"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Delete expense items by currency | `delete expenses currency/\u003ccurrency\u003e` | `delete expenses currency/SGD`"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Delete expense items by date | `delete expenses date/\u003cyyyy-MM-dd\u003e` | `delete expenses date/2020-11-08`"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Mark task as done | `done task \u003ctaskIndexNumber\u003e` | `done task 1`"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Mark module as complete | `done module \u003cmoduleIndexNumber\u003e` | `done module 1`"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Mark book as returned | `return \u003ctaskIndexNumber\u003e` | `return 2`"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set priority of task | `set \u003ctaskIndexNumber\u003e p/\u003cpriority\u003e` | `set 1 p/2`"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set category of task | `category \u003ctaskIndexNumber\u003e c/\u003ccategory\u003e` | `category 1 c/CCA`"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set date of task | `date \u003ctaskIndexNumber\u003e date/\u003cdd-MM-yyyy\u003e` | `date 1 date/11-11-2020`"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Print calendar | `calendar d/\u003cdaysToPrint\u003e` | `calendar d/7`"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Find an item with matching keyword | `find {tasks,links,books,expenses,modules} k/\u003ckeyword\u003e` | `find tasks k/tp meeting`"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Clear everything | `clear all` | `clear all`"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Getting help | `help` | `help`"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Exiting the program | `bye` | `bye`"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003eEnd of termiNus User Guide\u003c/h1\u003e"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 624,
      "MuhammadHoze": 438,
      "GuoAi": 62,
      "-": 34,
      "yh-ng": 1,
      "Cao-Zeyu": 53
    }
  },
  {
    "path": "docs/team/cao-zeyu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# Cao Zeyu - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "termiNus is an interactive Command Line Interface (CLI) task manager for undergraduate students in NUS. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "This program will help them achieve a better grip on their school life as well as assist in better management of their "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "daily expenses and be reminded of any library loans. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Summary of Contributions:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Code Contributed "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- [My RepoSense Report](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dcao-zeyu\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Enhancement implemented:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Enhancement in ListCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Enable the `list` command to support the function of listing tasks under a certain priority or category."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Enable the `list` command to list other types of items (e.g. links, etc.) by identifying the corresponding "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    sub-root command when parsing user\u0027s input for listing items."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "2. Adding Link and LinkList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Zoom meeting links for modules can be added to a list of links with corresponding module name and type of usage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    (i.e. lecture, tutorial, lab, or project)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - The list of links can be saved in a separate .txt file, supporting basic commands like `add` or `delete`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Contributions to User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Features of listing items."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Contributions to Developer Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Implementation of `list`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "2. Instructions for manual testing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "3. Command component and Command class diagram."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "##### Contributions to Team-based tasks:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "1. Use issue tracker to add necessary issues."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "2. Do some smoke-tests to test the features."
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 31,
      "Cao-Zeyu": 4
    }
  },
  {
    "path": "docs/team/guoai.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## Guo Ai - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "termiNus is an interactive task manager for students in NUS."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "## Summary of Contributions:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Code Contributed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- [My RepoSense Report](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dguoai\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Enhancement implemented:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Features added to Task List"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Implement the `category` command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "      - Allow users to set the category of a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Implement the listing sorted tasks feature."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "      - Allow users to list the tasks sorted firstly by priority in ascending order (high-priority tasks are displayed "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "      first). If multiple tasks have the same priority, they are sorted based on category lexicographically."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Features added to Expense List"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Implement the `spend` command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Allow users to add an expense item with a value to the expense list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Allow users to optionally label expense items with currency and date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Implement the `list expenses` command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Allow users to list all the expense items in the expense list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Allow users to see the summary of the total amount of expenses spent for each currency, and for date ranges "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     including today, this week, this month, and this year, for all the expense items in the expense list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - The listed expense items listed are sorted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        - First sort based on date in descending order (i.e. the latest expense items are shown first)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        - If multiple expense items have the same date, sort them based on currency lexicographically."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Implement the `list expenses \u003coptional arguments\u003e` command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Allow users to list all the expense items with a specified currency, date, or date range (i.e. `DAY`, `WEEK`, "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     `MONTH`, `YEAR`)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Allow users to see the summary of the total amount of expenses spent for each currency for all the listed expense "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     items."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - The expense items listed are sorted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Implement the `delete` command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Allow users to delete:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        - One expense item identified by index from the expense list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        - One or multiple expense item(s) with a specified currency or date from the expense list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Display the deleted expense item(s)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Features added to all the 5 Item Lists (i.e. Task List, Expense List, Module List, Link List, Book List)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Implement the `find` command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - Allow users to search for items (i.e. tasks, expenses, modules, links, books) whose description contains the "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     keyword(s) specified."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - If the input keyword contains only one word (i.e. no whitespaces), match the description of items using the entire"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     word. The keyword must be a whole word in the description."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     - If the input keyword contains multiple words separated by whitespaces, in order for the item to be matched, the "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     entire keyword string must appear in the item description, and each individual word in the keyword string must also "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     be a whole word in the item description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Write JUnit tests to test the features.   "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "5. Provide a skeleton codebase based on my ip. Almost all the functionalities changed, but the basic structure for "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "commands, storage, UI, runner, and exception did not change."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "6. Refactor code and build a structure for classes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Refactor the previous `Task` and `TaskList` classes into superclasses `Item` and `ItemList`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - All other Items (i.e. `Task`, `Expense`, `Module`, `Link`, `Book`) and Item Lists (i.e. `TaskList`, `ExpenseList`, "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   `ModuleList`, `LinkList`, `BookList`) inherit from `Item` and `ItemList` classes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - This design is used among all the features and incorporates more OOP principle."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "7. Follow software engineering principles"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Apply SLAP principle, DRY principle, facade design pattern when implementing features."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Use functional programming and improve readability when writing code as much as possible."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Contributions to User Guide:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Add user guide sections for all commands related to expenses"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - `spend` command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - `list` command and subcommands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - `delete` command and subcommands"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Add user guide sections for `find` command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Contributions to Developer Guide:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Add a sequence diagram for `Stroage` generated with PlantUML."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Add a class diagram for `Item` class and its subclasses."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Explain usage for the `Storage` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Explain the `Item` class and its subclasses."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Describe implementation details of `list` command for expenses and `delete` command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Contributions to Team-based tasks:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Set up the GitHub team organization and invite teammates"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Set up the GitHub team repository"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Refactor code and build a structure for classes "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - `Item` and its subclasses"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - `ItemList` and its subclasses"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Add issues to issue tracker, assign teammates, and add labels"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "5. Smoke test on some features."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Review/mentoring contributions: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Review, approve, and merge some of teammates\u0027 PRs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Example:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   [#184](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/184)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Communicate and explain the refactoring about `Item` and `ItemList` and their subclasses to teammates in group chat, "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "so that more OOP can be applied."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Provide details when creating PR to inform teammates of the updates."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   - Example:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "   [#214](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/214)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "##### Contributions beyond the project team:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Create and host weekly project meetings"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Adding an expense item: `spend`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Add an expense item into the expense list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `spend \u003cdescription\u003e \u003ccompulsory arguments\u003e \u003coptional arguments\u003e`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `v/\u003cvalue\u003e` sets the amount of money spent."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: value has a limit of **100 trillion** (100,000,000,000,000). "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: value must be **non-negative**."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `currency/\u003ccurrency\u003e` sets the currency of the expense."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `date/\u003cyyyy-MM-dd\u003e` sets the date of the expense."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: By default, the currency is set to \"SGD\" and date is set to the date when the user executes the `spend` command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: `currency` is user defined. It **does not** have to be a legal currency in the world."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: Optional and compulsory arguments can be typed in **any** order."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`spend lunch v/5`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`spend lunch v/5 currency/CNY`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`spend lunch v/5 date/2020-10-28`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`spend lunch v/5 date/2020-11-08 currency/USD `"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Got it. I\u0027ve added this expense item:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "       lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Now you have 9 expense items in the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Displaying expense items on list: `list expenses`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List all the expense items in the expense list and shows total amount of money spent for each currency and the current "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "day, week, month, and year."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `list expenses`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: Expense list is sorted **based on date** (*from the most recent to the least recent*). If the date of two expense items "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "are the **same**, the expense list is sorted **based on currency lexicographically**."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`list expenses`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Here are the expense item(s) in your list:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     dinner (0.60 A) (date: Monday, November 9, 2020)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     breakfast (0.10 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     book (0.50 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     bread (0.20 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     bottle (3.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     pen (1.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     earphone (0.30 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     tablet (0.40 USD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Your total expense for today is:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     0.60 SGD"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     5.20 USD"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Your total expense for this week is:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     4.90 SGD"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     5.60 USD"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Your total expense for this month is:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     0.60 A"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     4.90 SGD"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     5.60 USD"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Your total expense for this year is:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     0.60 A"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     4.90 SGD"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     5.60 USD"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Displaying expense items by a certain currency on list: `list expenses (by currency)` "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List all the expense items in the expense list based on currency and shows total amount of money spent for each currency."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `list expenses currency/\u003ccurrency_name\u003e`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: currency_name is **case-sensitive**."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`list expenses currency/USD`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Here are the expense item(s) in your expense list of currency USD:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     bread (0.20 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     tablet (0.40 USD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     The total amount listed:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     5.60 USD"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Displaying expense items on a certain date on list: `list expenses (by date)` "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List all the expense items in the expense list based on the date and shows total amount of money spent for each currency."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `list expenses date/\u003cYYYY-MM-DD\u003e`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`list expenses date/2020-11-08`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Here are the expense item(s) in your expense list of date Sunday, November 8, 2020:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     breakfast (0.10 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     book (0.50 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     bread (0.20 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     The total amount listed:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     0.60 SGD"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     5.20 USD"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Displaying expense items for a certain time period on list: `list expenses (by time period)` "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "List all the expense items in the expense list based on the time period and shows total amount of money spent for each currency."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `list expenses for/\u003ctime period\u003e`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: `\u003ctime period\u003e` can only be `day`, `week`, `month`, or `year`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: time period is **case-insensitive**."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`list expenses for/week`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```    "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Here are the expense item(s) in your expense list for this week:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     breakfast (3.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     bus (1.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     pencil (0.30 SGD) (date: Saturday, November 8, 2020)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     pen (0.40 USD) (date: Saturday, November 9, 2020)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     The total amount listed:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     4.30 SGD"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     0.40 USD"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Deleting an expense item from the list: `delete expense`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Delete an expense item from the list."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `delete expense \u003cexpenseIndexNumber\u003e`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: `\u003cexpenseIndexNumber\u003e` corresponds to the index given on `list expenses` command output."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`delete expense 2`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Noted. I\u0027ve removed all these expense item(s)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     breakfast (0.10 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Deleting all the expense items of a certain currency: `delete expenses (by currency)`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Delete expense items of the same currency."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `delete expenses currency/\u003ccurrency_name\u003e`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: currency_name is **case-sensitive**."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`delete expenses currency/SGD`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Noted. I\u0027ve removed all these expense item(s)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     earphone (0.30 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     pen (1.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     book (0.50 SGD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     bottle (3.00 SGD) (date: Saturday, November 7, 2020)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Deleting all expense items of the same date: `delete expenses (by same date)`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Delete expense items of the same date."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `delete expenses date/\u003cyyyy-MM-dd\u003e`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: `date` argument must be in the format of `yyyy-MM-dd`, e.g. `2020-11-08`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`delete expenses date/2020-11-08`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Noted. I\u0027ve removed all these expense item(s)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     bread (0.20 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     lunch (5.00 USD) (date: Sunday, November 8, 2020)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Searching for an item with keyword: `find`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Finds all items in the corresponding item list with matching description."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Format: `find {tasks,links,books,expenses,modules} k/\u003ckeyword\u003e`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: `\u003ckeyword\u003e` is **case-insensitive**."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: `\u003ckeyword\u003e` can be a **single word** or a **phrase**."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: `\u003ckeyword\u003e` must contain **whole words** from the item description, e.g `tp meeting`, `ip` etc."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: Incomplete keywords will **not be matched**. e.g `mee`, `t` etc."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "🚩: `\u003ckeyword\u003e` for finding modules or links can only be the related **module name**."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`find tasks k/tp meeting`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Here are the matching items in your list:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     1.[T][N] tp meeting (p:0) (category: cs2113)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     2.[T][N] tp meeting 2 (p:0)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`find expenses k/dinner`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     Here are the matching items in your list:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     1.dinner (0.60 A) (date: Monday, November 9, 2020)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "```"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Contributions to the Developer Guide (Extracts)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Storage"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "This section describes how the `Storage` class works"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### High level description"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Methods handling data loading (i.e. `loadTask()`, `loadBook()`, `loadLinks()`, `loadModule()`, `loadExpense()` methods) "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "return an `ArrayList` of items (i.e. `Task`, `Book`, `Link`, `Module`, `Expense`). These will be the initial values of "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "the item list (i.e. `TaskList`, `BookList`, `LinkList`, `ModuleList`, `ExpenseList`). The `save()` method takes an "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "inherited instance of `ItemList` and a `String` specifying the path to which the file will be saved. The `ItemList` will "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "be parsed and saved into files (each `ItemList` will be saved to a separate file) at the specified path.  "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Formats of the files: "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `tasks.txt`:  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 6 fields stored for each `Task`:  "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. String `T` for \"Task\"  "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Whether the `Task` has been done or not (1 for done, 0 for not done)  "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Description of the `Task`  "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Priority of the `Task` (an Integer)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "5. Category of the `Task`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "6. Date of the `Task`  "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Task` is stored as one line.  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `T | 0 | borrow book | 1 | book | 28-10-2020`  "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `books.txt`:  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 5 fields stored for each `Book`:  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. String `B` for \"Book\"  "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Whether the `Book` has been returned or not (1 for returned, 0 for not returned)   "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Name/Description of the `Book`  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Borrow date of the `Book`  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "5. Return date of the `Book`  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Book` is stored as one line.  "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `B | 0 | cooking book | 11-11-2011 | 11-12-2011`  "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `links.txt`:  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 3 fields stored for each `Link`:  "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Module of the `Link`  "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Use of the `Link`  "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. URL of the `Link`  "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Link` is stored as one line.  "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Example: `CS2113 | lecture | https://cs2113Lecture.zoom.com`  "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `modules.txt`:  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 4 fields for each `Module`:  "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Module code  "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Grade  "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Modular credits  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Academic year and semester  "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Module` is stored as one line.  "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- `expenses.txt`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "There are 4 fields for each `Expense`:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. Description"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. Value"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. Currency"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "4. Date"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "All the fields are separated by `|` with a leading and a trailing space. Each `Module` is stored as one line."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Currency has default value \"SGD\"."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Date has default value of the date that the `spend` command is executed."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Date will be in the format of `yyyy-MM-dd`, e.g. `2020-11-09`."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "#### Implementation details"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The following sequence diagram shows how the `Storage` works."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "![StorageSequenceDiagram](./../images/StorageSequenceDiagram.png)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "  "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "1. At the start of `Duke`, a new `Storage` object will be created."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "2. `Duke` calls loading methods (i.e. `loadTask()`, `loadBook()`, `loadLinks()`, `loadModule()`, `loadExpense()`) "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "sequentially. Each loading method calls the corresponding helper method (i.e. `loadTaskFromLine()`, `loadBookFromLine()`, "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`loadLinkFromLine()`, `loadModuleFromLine()`, `loadExpenseFromLine()`) to load `Item`s from each line in the file. "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "3. After each command, `Duke` calls the `save()` method of `Storage` to save all the `Item`s in the list to files."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "### Item component"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "`Item` is a super class with 5 subclasses inheriting it: `Task`, `Expense`, `Module`, `Link`, `Book`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Here is the class diagram for `Item` class and its subclasses."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "![ItemClassDiagram](./../images/ItemClassDiagram.png)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "The `Item` class and its subclasses:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "- Contains getters and setters to retrieve and set the attributes."
      }
    ],
    "authorContributionMap": {
      "GuoAi": 489
    }
  },
  {
    "path": "docs/team/iamchenjiajun.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# Chen Jia Jun\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "termiNus is an interactive task manager for students in NUS. The program uses a Command Line Interface (CLI) and is written in Java."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Here are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Features added to Parser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Regular expression parsing of commands and module code."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Parse arguments with regular expressions into a `HashMap` so that arguments can be optional and non-positional."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Allows arguments to be checked using a method and a `HashSet` of allowed arguments in the `Command` class which follows polymorphism and reusable code principles."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Features added to Task List"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Using the optional argument feature of the Parser, allow users to optionally label tasks with dates, priorities and categories."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added setting of task priorities and dates after a task has been added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Print a calendar in chronological order for the next X days, with a divider for each day."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Add recurring weekly tasks to the task list with a simple command by specifying a start and end date range."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Added the Module List"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Add modules to a module list with optional arguments."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Allow adding incomplete modules using optional arguments to compute the projected CAP."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Print a list of modules with current CAP and projected CAP."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Add functionality to automatically create folders for all the user\u0027s modules in the module list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Code contributed: ~2.9k SLOC, [RepoSense Report](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003diamchenjiajun\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003diamchenjiajun\u0026tabRepo\u003dAY2021S1-CS2113-T14-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Code enhancements:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Apply SLAP and DRY principles to refactor duplicated code in the code base, moving code to new functions where necessary, thus reducing SLOC."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Applied software design patterns like facade to refactor and repackage code into new classes and make the code more OOP."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Used functional programming and wrote declarative code where applicable (while maintaining OOP)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Wrote JUnit tests for bug fixes and new code."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Managed issue tracker and releases `v1.0` and `v2.0` on GitHub."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Authored PRs with detailed descriptions to ensure that the team is kept updated with the new changes, especially during refactors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Examples: "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    [Refactoring Model class](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/146),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    [AddRecurringCommand](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/90),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    [AddCommand](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/22)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Communicated regularly with teammates on issues, bugs and tasks to be done, as well as what I\u0027m currently working on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Advised teammates on how code could be organised better and where potential bugs could arise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Managed and reviewed teammates PRs and wrote comments about code quality."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Examples:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    [#89](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/89),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    [#93](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/93),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    [#155](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/155),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    [#168](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/168),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    [#179](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/179)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- Documentation:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - User Guide:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added user guide sections for tasks and module features."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added quick command reference section as a summary of commands."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - Developer Guide:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added an overall architecture diagram for the major components."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Explained usage for `Duke`, `Parser`, `Ui`, `Command` and `CommandCreator` components."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added sequence diagrams for `Duke` and `Parser`, and class diagrams for `Model` generated with PlantUML."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Added diagrams to describe how `Parser` parses user commands into different parts."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    - Described implementation details of regular expression parsing of arguments and the calendar command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "  - [Configured](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/173) project to use Kramdown so that we could have an automatically generated Table of Contents through [suggestions](https://github.com/nus-cs2113-AY2021S1/forum/issues/108#issuecomment-716930261) on module forum."
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 63
    }
  },
  {
    "path": "docs/team/muhammadhoze.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "# Muhammad Hozefa Zumkhawala - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "We were assigned a task to develop a program which would benefit our target audience. We decided to further improve on Duke and renamed our program, termiNus. From it\u0027s name we can infer that it is a one-stop Command Line Interface (CLI) based solution for NUS undergraduate students to manage their school curriculum, keep track of their daily expenses and be reminded of any library loans."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "termiNus is using Java and Object-Oriented Programming (OOP). My role was to implement the entire loan system as well as certain subtasks such as ensuring deletion of items were done correctly, clearing of all data and finding tasks. The following sections will provide a detailed explanation on my enchancements as well as my contributions towards the User Guide and Developer Guide. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This section gives a summary of my contributions towards our project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "**Code contributed** [RepoSense](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmuhammadhoze\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dMuhammadHoze\u0026tabRepo\u003dAY2021S1-CS2113-T14-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other) "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### New feature:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Added the loan system (BookList and Book class)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * *what it does*: Allow students to keep track of their loan items from the library which will reduce overdue cases.  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    [BorrowCommand](https://github.com/AY2021S1-CS2113-T14-3/tp/blob/master/src/main/java/seedu/duke/commands/BorrowCommand.java)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    , [ReturnCommand](https://github.com/AY2021S1-CS2113-T14-3/tp/blob/master/src/main/java/seedu/duke/commands/ReturnCommand.java)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### Enhancements to existing features: "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Deletion of tasks based on priority and category (DeleteCommand class)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * *what it does*: Initially students could only delete their task one at a time. Now they are able to delete all **tasks** with the same priority and category in just one command. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    [DeleteCommand](https://github.com/AY2021S1-CS2113-T14-3/tp/blob/master/src/main/java/seedu/duke/commands/DeleteCommand.java) \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Finding **tasks** based on a keyword (FindCommand class)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * *what it does*: Allow students to find their tasks easily with the help of this command rather than manually searching through the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    [FindCommand](https://github.com/AY2021S1-CS2113-T14-3/tp/blob/master/src/main/java/seedu/duke/commands/FindCommand.java) \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    *However, this was modified to finding item specific {tasks,links,books,expenses,modules} by my teammate* \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. Clearing **all** data which includes tasks, modules, web links, books (ClearCommand class)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    * *what it does*: Allow students to clear everything and start afresh every new semester."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    [ClearCommand](https://github.com/AY2021S1-CS2113-T14-3/tp/blob/master/src/main/java/seedu/duke/commands/ClearCommand.java)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### Contributions to User Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "These are the following sections I contributed to which will be elaborated in the User Guide (Extracts)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Table of Contents"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Quick Start"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. Borrowing a book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "4. Returning a book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "5. Deleting a task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "6. Deleting tasks with same priority or category"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "7. Searching for tasks using a keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "8. Clearing all data "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "9. Quick Command Summary"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### Contributions to Developer Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "These are the following sections I contributed to:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Introduction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Setting up, Getting started "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. Product Scope"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "4. User stories"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "5. Non-functional Requirements"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "6. Glossary"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### Contributions to Team-based tasks:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "These are the following team-tasks done by me:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Did smoke-tests on our program to ensure all commands were working as expected and the intended messages printed were correct. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Added and assigned issues to my teammates."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. Added non-feature related details such as Quick start, FAQ and a brief introduction of our program."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### Review/mentoring contributions: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Instances of reviewing my teammates PR and commenting appropriately."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "[#95](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/95) [#160](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/160)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Ensure PRs are created with detailed description of the changes made so that the team is aware and updated."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "[#40](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/40) [#60](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/60) [#93](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/93) [#155](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/155)              [#158](https://github.com/AY2021S1-CS2113-T14-3/tp/pull/158)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "#### Contributions beyond the project team:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Beyond the scope of my team, I believe I reported several legitimate bugs as well as suggested solutions to fix those bugs to the team which was given to me during the dry run Pratical Exam.  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "I have made several contributions to the User Guide besides just adding the relevant documentations for my enhancement. Below are the sections of the User Guide I added: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "1. Table of Contents"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "2. Quick Start"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "3. Borrowing a book: `borrow`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This command allow students to add the books loaned from the library. The book title and the loan date is compulsory. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    *Example*: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    A student just borrowed a book from the library and has a tendency of forgetting the due date and if the book has already been returned. Therefore, the student can enter this command:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         **borrow Java for dummies date/10-11-2020**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Format: "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        borrow \u003cbook name\u003e \u003cdate/DD-MM-YYYY\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         \u003cbook name\u003e refers to the title of the book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         \u003cdate/DD-MM-YYYY\u003e refers to the when the book was loaned."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "4. Returning a book: `return`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This command allow students to mark those books as returned."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    *Example*: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    A student finished reading the book and returns it back to the library. Therefore, the student can enter this command to mark that book as returned:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         **return 2**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Format: "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \u003cbookIndexNumber\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         \u003cbookIndexNumber\u003e corresponds to the index given on list command output"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "5. Deleting a task from the list: `delete`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This command allow students to delete a specific task from the list. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    *Example*: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    The student can enter this command:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         **delete task 2**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Format: "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \u003ctaskIndexNumber\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         \u003ctaskIndexNumber\u003e corresponds to the index given on list command output"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "6. Deleting tasks based on priority and category: `delete`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This command allow students to delete several tasks with the same priority and category in one go. A task with no priority will have a priority value set as (0) by default. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *Example*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     The student wants to delete all tasks with highest priority (1) and all tasks under the category CS2113. The student can enter this commands:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     **delete tasks p/1**,   **delete tasks c/CS2113**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         Format: "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            delete tasks \u003cp/priorityNumber\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "             \u003cp/priorityNumber\u003e refers to the priority given to each task"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         Format: "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            delete tasks \u003cc/category\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "             \u003cc/category\u003e refers to the category (if assigned) to a task. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "7. Searching for an item with keyword: `find`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This command allow students to narrow down their search for a specific item."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    *Example*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         The student can enter this command to find only those task associated with the keyword:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "         **find tasks tp meeting**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Format: "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            find {tasks,links,books,expenses,modules} k/\u003ckeyword\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "             \u003ckeyword\u003e refers to the word or phrase to be matched with the item description."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "8. Clearing all data from system: `clear` "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "This command allow students to wipe off all their data."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    *Example*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "             After the semester ends, the student can enter this command to clean all files from the previous semester."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "             **clear all**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Format: "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                clear all               "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "9. Quick Command Summary"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 144
    }
  },
  {
    "path": "docs/team/template.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "# Name - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "## Summary of Contributions:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "##### Enhancement implemented:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "##### Contributions to User Guide:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "##### Contributions to Developer Guide:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "##### Contributions to Team-based tasks:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "##### Review/mentoring contributions: "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "##### Contributions beyond the project team:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Contributions to the Developer Guide (Extracts)"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 22
    }
  },
  {
    "path": "docs/team/yh-ng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "# Ng Yeow Hwee Antonio - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "termiNus is an interactive task manager for students in NUS. The program uses a Command Line Interface (CLI) and is written in Java."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "## Summary of Contributions:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "##### Code contributed:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "[RepoSense report](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyh-ng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) (7 SLOC)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "##### Enhancements implemented:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "- N.A."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "##### Contribution to the documentation:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "- N.A."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "##### Contributions to team-based tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "- N.A."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "##### Review/mentoring contributions: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "- N.A."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "##### Contributions beyond the project team:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "- N.A."
      }
    ],
    "authorContributionMap": {
      "yh-ng": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author GuoAi-reused"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals an error caused by Duke commands and operations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import org.apache.commons.validator.routines.UrlValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Utils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Link;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that adds a task to the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Adds a task to the task list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: TASK_NAME \u003coptional arguments\u003e\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     List of \u003coptional arguments\u003e\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - p/\u003cnumber\u003e sets the priority of the task.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - c/\u003ccategory\u003e sets the category of the task.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - date/\u003cdd-MM-yyyy\u003e sets the date of the task.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" task\" + \" example_task \u003coptional arguments\u003e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e TASK_ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\", \"c\", \"date\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e LINK_ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"m\", \"t\", \"u\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e MODULE_ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"g\", \"mc\", \"ay\", \"d\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final ListType addType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddCommand(String description, HashMap\u003cString, String\u003e argumentsMap, ListType addType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.addType \u003d addType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        LinkList links \u003d (LinkList) model.getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (addType) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case TASK_LIST:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            executeAddTask(tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case LINK_LIST:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            executeAddLink(links);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case MODULE_LIST:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            executeAddModule(modules);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds tasks to Task List."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param tasks task to add"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If arguments in HashMap are invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void executeAddTask(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        setTaskProperties(newTask, argumentsMap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addItem(newTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    // @@author Cao-Zeyu"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Adds links to Link List."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param links Link to add"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException If arguments in HashMap are invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private void executeAddLink(LinkList links) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (!argumentsMap.containsKey(\"m\") || !argumentsMap.containsKey(\"t\") || !argumentsMap.containsKey(\"u\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String module \u003d argumentsMap.get(\"m\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String type \u003d argumentsMap.get(\"t\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (!type.toLowerCase().equals(\"lecture\") \u0026 !type.toLowerCase().equals(\"tutorial\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                \u0026 !type.toLowerCase().equals(\"lab\") \u0026 !type.toLowerCase().equals(\"project\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LINK_TYPE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String url \u003d argumentsMap.get(\"u\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String[] schemes \u003d {\"http\", \"https\"};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        UrlValidator urlValidator \u003d new UrlValidator(schemes);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (!urlValidator.isValid(url)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_URL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Link newLink \u003d new Link(module, type, url);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        links.addLink(newLink);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds module to Module List."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param modules Module to add"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If arguments in HashMap are invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void executeAddModule(ModuleList modules) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int mc;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean isDone \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"g\") || !argumentsMap.containsKey(\"mc\") || !argumentsMap.containsKey(\"ay\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"~Error~ g, mc and ay arguments are required!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            mc \u003d Integer.parseInt(argumentsMap.get(\"mc\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"~Error~ Your MCs are invalid!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"d\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!argumentsMap.get(\"d\").equals(\"0\") \u0026\u0026 !argumentsMap.get(\"d\").equals(\"1\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(\"~Error~ Your done argument is invalid! Valid values: 1 or 0.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            isDone \u003d Utils.stringToBoolean(argumentsMap.get(\"d\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Module module \u003d new Module(description, argumentsMap.get(\"g\"), mc, argumentsMap.get(\"ay\"), isDone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        modules.addModule(module);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the properties of a given Task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param task         Task to set the properties of."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing arguments to set the Task properties."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If arguments in HashMap are invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected void setTaskProperties(Task task, HashMap\u003cString, String\u003e argumentsMap) throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"p\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int newPriority;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newPriority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (newPriority \u003c 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            task.setPriority(newPriority);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"c\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argumentsMap.get(\"c\") !\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                task.setCategory(argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            task.setDateFromString(argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 152,
      "Cao-Zeyu": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddRecurringCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that adds a recurring task to the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddRecurringCommand extends AddCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addr\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Adds multiple tasks to the list of tasks that occur weekly on a given day.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: TASK_NAME \u003coptional/compulsory arguments\u003e\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     List of \u003coptional arguments\u003e:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - p/\u003cnumber\u003e sets the priority of the task.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - c/\u003ccategory\u003e sets the category of the task.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - date/\u003cdd-MM-yyyy\u003e sets the date of the task.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     List of \u003ccompulsory arguments\u003e:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - s/\u003cdd-MM-yyyy\u003e start date of recurring tasks (inclusive)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - e/\u003cdd-MM-yyyy\u003e end date of recurring tasks (inclusive).\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"       - day/\u003cmon/tue/wed/thu/fri/sat/sun\u003e day of recurring task.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_task \u003coptional/compulsory arguments\u003e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\", \"c\", \"day\", \"s\", \"e\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddRecurringCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super(description, argumentsMap, ListType.TASK_LIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final LocalDate startDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final LocalDate endDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        LocalDate firstDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"day\") || !argumentsMap.containsKey(\"s\") || !argumentsMap.containsKey(\"e\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_RECURRING_ARGUMENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            startDate \u003d LocalDate.parse(argumentsMap.get(\"s\"), Task.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            endDate \u003d LocalDate.parse(argumentsMap.get(\"e\"), Task.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dayOfWeek \u003d Parser.getDayFromString(argumentsMap.get(\"day\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            firstDate \u003d startDate.with(TemporalAdjusters.nextOrSame(dayOfWeek));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE_RANGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d generateWeeklyTasks(firstDate, endDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (newTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(\"There is no \" + dayOfWeek + \" between \" + startDate + \" and \" + endDate + \"!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTasksFromList(newTasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Generates a list of Tasks every 7 days from a starting date to an end date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param firstDate Starting date to generate tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param endDate End date of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return ArrayList of Tasks between starting date and ending date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If Tasks have invalid arguments."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private ArrayList\u003cTask\u003e generateWeeklyTasks(LocalDate firstDate, LocalDate endDate) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (firstDate.until(endDate, ChronoUnit.DAYS) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            argumentsMap.put(\"date\", firstDate.format(Task.DATETIME_PARSE_FORMAT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setTaskProperties(newTask, argumentsMap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            newTasks.add(newTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            firstDate \u003d firstDate.plusDays(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return newTasks;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/BorrowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Book;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class BorrowCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"borrow\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Adds a book to the book list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_book  date/DD-MM-YYYY\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private String description \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Collections.singletonList(\"date\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public BorrowCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) model.getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Book newBook \u003d new Book(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newBook.setDateFromString(argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        books.addBook(newBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 4,
      "MuhammadHoze": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author GuoAi-reused"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.exit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "GuoAi": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command corresponding to the calendar command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Sets the date of a given task in the list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" d/\u003cdaysToPrint\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"d\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final LocalDate currentDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public CalendarCommand(HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int daysToPrint;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert argumentsMap.size() \u003c\u003d ALLOWED_ARGUMENTS.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"d\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            daysToPrint \u003d Integer.parseInt(argumentsMap.get(\"d\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (daysToPrint \u003c 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_NEGATIVE_DAY_COUNT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DAY_COUNT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e dateList \u003d tasks.getTaskList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e task.getDate() !\u003d null)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003e\u003d 0)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003c\u003d daysToPrint)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .sorted(Comparator.comparing(Task::getDate))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintCalendar(currentDate, dateList, daysToPrint);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Sets the category of a task identified by its index in the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class CategoryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"category\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \": Sets the category of a task identified by the task index number in the task list\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: INDEX c/CATEGORY\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1 c/Academics\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"c\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public CategoryCommand(int index, String category) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.setCategory(index, category);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 4,
      "GuoAi": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author MuhammadHoze-reused"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears all tasks in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all tasks in the task list.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ClearCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (description.isEmpty() || !description.equals(\"all\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_CLEAR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 2,
      "GuoAi": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Represents a general command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return whether to exit Duke application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param model Model representing program data in memory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public abstract void execute(Model model) throws DukeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 3,
      "GuoAi": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CommandCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class CommandCreator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns an AddCommand with given arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description  Description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return AddCommand with given arguments."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException When description is empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createAddCommand(String commandString, String description, HashMap\u003cString,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String\u003e argumentsMap) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String rootCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String newDescription \u003d description.replaceFirst(rootCommand, \"\").trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (rootCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"link\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, AddCommand.LINK_ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new AddCommand(newDescription, argumentsMap, ListType.LINK_LIST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"module\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, AddCommand.MODULE_ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new AddCommand(newDescription, argumentsMap, ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, AddCommand.TASK_ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new AddCommand(newDescription, argumentsMap, ListType.TASK_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns an AddRecurringCommand with given arguments."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap Hashmap containing compulsory and optional arguments"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return AddRecurringCommand with given arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException When description is empty."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createAddRecurringCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new AddRecurringCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command createSpendCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return new SpendCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a SetCommand with given arguments."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description  Parsed description given by the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return SetCommand with given arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException  When invalid arguments are given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createSetCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new SetCommand(Integer.parseInt(description), argumentsMap);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Creates and returns a ListCommand with given arguments."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param fullCommand    Full command given by the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param subRootCommand sub-root command given by the user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param commandString  Command parameters given by the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return ListCommand with given arguments."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static Command createListCommand(String fullCommand, String subRootCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                                            String commandString) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (fullCommand.trim().toLowerCase().equals(\"list tasks sorted\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ListCommand(true, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        switch (subRootCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        case \"tasks\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (commandString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            int priority;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String category;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (commandString.contains(\"p/\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (commandString.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_EMPTY_PRIORITY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    priority \u003d Integer.parseInt(commandString.substring(2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand(priority);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            } else if (commandString.contains(\"c/\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (commandString.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_EMPTY_CATEGORY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                category \u003d commandString.substring(2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand(category);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_LIST_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        case \"links\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return new ListCommand(false, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"modules\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new ListModuleCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case \"books\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ListCommand(false, false, true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case \"expenses\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return ListExpenseCommand.createListExpenseCommand(commandString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_LIST_COMMAND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Creates and returns a DeleteCommand with given arguments."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return DeleteCommand with given arguments."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createDeleteCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String subRootAddCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String value;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (commandString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            value \u003d commandString.split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            switch (subRootAddCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            case \"link\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                int index;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    index \u003d Integer.parseInt(commandString.replaceFirst(subRootAddCommand, \"\").trim());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_LINK_INDEX);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                return new DeleteCommand(index, true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            case \"tasks\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (value.contains(\"p/\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    return new DeleteCommand(value);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else if (value.contains(\"c/\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    return new DeleteCommand(value);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(value));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(value), ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            case \"expense\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                return new DeleteExpenseCommand(Integer.parseInt(value));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            case \"expenses\":"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                return new DeleteExpenseCommand(value);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a DateCommand with given arguments."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description Parsed description given by the user."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DateCommand with given arguments."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createDateCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new DateCommand(index, argumentsMap);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a DoneCommand with given arguments."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DoneCommand with given arguments."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createDoneCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String[] arguments \u003d commandString.split(\" \", 2);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String type \u003d arguments[0];"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int index \u003d Integer.parseInt(arguments[1]);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                return new DoneCommand(index, ListType.TASK_LIST);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                return new DoneCommand(index, ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_DONE_COMMAND);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DONE_COMMAND);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command createFindCommand(String fullCommand, String subRootCommand, String commandString)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return FindCommand.createFindCommand(fullCommand, subRootCommand, commandString);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // @@author MuhammadHoze"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createBorrowCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (description.isEmpty() | argumentsMap.isEmpty()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_BORROW);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return new BorrowCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // @@author MuhammadHoze"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Creates and returns a ReturnCommand with given arguments."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return ReturnCommand with given arguments."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createReturnCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ReturnCommand(Integer.parseInt(commandString));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_BOOK);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Creates and returns a CategoryCommand with given arguments."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return CategoryCommand with given arguments."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command createCategoryCommand(String commandString, HashMap\u003cString, String\u003e argumentsMap,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                                                String description) throws DukeException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Integer.parseInt(description);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            index \u003d Integer.parseInt(commandString.split(\" \")[0]);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!argumentsMap.containsKey(\"c\")) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.get(\"c\").trim().equals(\"\")) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_CATEGORY);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return new CategoryCommand(index, argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Creates and returns a CalendarCommand with given arguments."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description Parsed description from the user."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return CalendarCommand with arguments given."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException If arguments are invalid."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command createCalendarCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!description.isEmpty()) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return new CalendarCommand(argumentsMap);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 128,
      "MuhammadHoze": 85,
      "GuoAi": 71,
      "-": 1,
      "Cao-Zeyu": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class DateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"date\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Sets the date of a given task in the list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" \u003ctaskIndex\u003e\" + \" date/DD-MM-YYYY\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"date\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DateCommand(int index, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.setDate(index, argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 34,
      "MuhammadHoze": 3,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Deletes a Task identified by its index in the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \":\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     1. Deletes the task identified by the index number used in the task listing.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" task\" + \" 1\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Optional parameter 1: p/PRIORITY\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Deletes all the tasks with PRIORITY.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" tasks\" + \" p/1\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Optional parameter 2: c/CATEGORY\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Deletes all the tasks with CATEGORY.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" tasks\" + \" c/cs2113.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     2. Deletes the link identified by the index number used in the link listing.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" link\" + \" 1\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     3. Deletes the expense items identified by the index number used in the expense list.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Optional parameter 1: currency/CURRENCY\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Deletes all the expense items with CURRENCY.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" expenses\" + \" currency/SGD\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Optional parameter 2: date/yyyy-MM-dd\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Deletes all the expense items on the date in the format of yyyy-MM-dd\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" expenses\" + \" date/2020-11-07\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private String categoryValue \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int priorityIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean isLink;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private ListType deleteType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert index \u003e 0 : \"Task number should be greater than 0\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    //@@author GuoAi"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DeleteCommand(String inputValue) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (inputValue.startsWith(\"p\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            this.hasPriorityValue \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                this.priorityIndex \u003d Integer.parseInt(inputValue.substring(2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (inputValue.startsWith(\"c\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            this.hasCategoryValue \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                this.categoryValue \u003d inputValue.substring(2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DeleteCommand(int index, boolean isLink) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assert index \u003e 0 : \"Task number should be greater than 0\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isLink \u003d isLink;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DeleteCommand(int index, ListType deleteType) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.deleteType \u003d deleteType;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        LinkList links \u003d (LinkList) model.getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e taskDeleted \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        boolean isCategory \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (hasPriorityValue) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (priorityIndex \u003c 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (int i \u003d tasks.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (tasks.get(i).getPriority() \u003d\u003d priorityIndex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    taskDeleted.add(tasks.get(i));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    tasks.deletePriorityOrCategoryTask(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (taskDeleted.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.displayDeletedPriorityOrCategoryTask(taskDeleted, isCategory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (hasCategoryValue) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            isCategory \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (int i \u003d tasks.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (tasks.get(i).getCategory() \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    continue; //ignore if category is not set for the task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (tasks.get(i).getCategory().equals(categoryValue)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    taskDeleted.add(tasks.get(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    tasks.deletePriorityOrCategoryTask(i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (taskDeleted.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.displayDeletedPriorityOrCategoryTask(taskDeleted, isCategory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            links.deleteLink(index);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (deleteType \u003d\u003d ListType.MODULE_LIST) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            model.getList(ListType.MODULE_LIST).deleteTask(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5,
      "MuhammadHoze": 50,
      "GuoAi": 83
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Deletes an expense item identified by its index in the expense list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DeleteExpenseCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String currency;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private boolean hasCurrency \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private boolean hasDate \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private boolean hasIndex \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor for deleting expense items using index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the expense item to be deleted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DeleteExpenseCommand(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assert index \u003e 0 : \"Expense item number should be greater than 0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasCurrency \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasCurrency \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasIndex \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor for deleting all the expense items with a specific currency or date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param argumentString A string containing \"currency/CURRENCY\" or \"date/yyyy-MM-dd\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException when currency or date arguments are invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DeleteExpenseCommand(String argumentString) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(argumentString, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.keySet().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (String argument : argumentsMap.keySet()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (!argument.equals(\"currency\") \u0026\u0026 !argument.equals(\"date\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.containsKey(\"currency\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            this.hasCurrency \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            currency \u003d argumentsMap.get(\"currency\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (currency.equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            this.hasDate \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String dateString \u003d argumentsMap.get(\"date\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param model Model representing program data in memory."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ExpenseList expenses \u003d (ExpenseList) model.getList(ListType.EXPENSE_LIST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        HashSet\u003cExpense\u003e expensesDeleted \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (hasCurrency) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (expenses.get(i).getCurrency().equals(currency)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    expensesDeleted.add(expenses.get(i));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (hasDate) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (expenses.get(i).getDate().toString().equals(date.toString())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    expensesDeleted.add(expenses.get(i));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (hasIndex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                expensesDeleted.add(expenses.get(index - 1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.WARNING_NO_EXPENSE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (expensesDeleted.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NO_EXPENSE_DELETED);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            expenses.deleteExpenses(expensesDeleted);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 114
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author GuoAi-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Marks a Task, identified by its index in the task list, as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Marks the task/module identified by the index number used in the listing as done.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: \u003ctype\u003e INDEX\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Accepted \u003ctype\u003e: task, module\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" task 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final ListType doneType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DoneCommand(int index, ListType doneType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.doneType \u003d doneType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (doneType) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case TASK_LIST:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.markItemAsDone(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case MODULE_LIST:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            modules.markItemAsDone(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 21,
      "MuhammadHoze": 2,
      "GuoAi": 16,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Finds and lists all items in the item list whose description contains the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all items whose descriptions contain\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: {tasks, links, books, expenses, modules} k/KEYWORDS\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" expenses k/buy\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private ListType listType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public FindCommand(ListType listType, String keyword) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static FindCommand createFindCommand(String fullCommand, String subRootCommand, String commandString)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (subRootCommand.equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_FIND_COMMAND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        commandString \u003d commandString.trim().toLowerCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!commandString.startsWith(\"k/\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_NO_KEYWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String keyword \u003d commandString.substring(2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        switch (subRootCommand.trim().toLowerCase()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case \"tasks\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new FindCommand(ListType.TASK_LIST, keyword.toLowerCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case \"expenses\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new FindCommand(ListType.EXPENSE_LIST, keyword.toLowerCase());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case \"modules\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new FindCommand(ListType.MODULE_LIST, keyword.toLowerCase());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case \"links\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new FindCommand(ListType.LINK_LIST, keyword.toLowerCase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case \"books\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new FindCommand(ListType.BOOK_LIST, keyword.toLowerCase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_FIND_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        switch (listType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case TASK_LIST:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.findItem(keyword);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case EXPENSE_LIST:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            ExpenseList expenses \u003d (ExpenseList) model.getList(ListType.EXPENSE_LIST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            expenses.findItem(keyword);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case MODULE_LIST:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            modules.findItem(keyword);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case LINK_LIST:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LinkList links \u003d (LinkList) model.getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            links.findItem(keyword);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case BOOK_LIST:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            BookList books \u003d (BookList) model.getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            books.findItem(keyword);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_FIND_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 4,
      "GuoAi": 87
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author GuoAi-reused"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        list of help commands is in alphabetical order"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + AddRecurringCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + BorrowCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + ByeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + CalendarCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + CategoryCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + DateCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + DoneCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + MakeFolderCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + ReturnCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + SpendCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\\n     \" + SetCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "       "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.dukePrint(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "GuoAi": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Book;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "// @@author Cao-Zeyu"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": " * Lists all tasks in the task list to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \": Displays all items in the list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" all\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     1. Displays all the tasks in the task list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 1: tasks p/PRIORITY\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the tasks with priority PRIORITY as a list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" tasks p/1\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 2: tasks c/CATEGORY\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the tasks with CATEGORY as a list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" tasks c/cs2113\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 3: tasks sorted\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the tasks sorted by priority\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     2. Displays all the books in the book list.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" books\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     3. Displays all the links in the link list.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" links\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     4. Displays all the modules in the module list.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" modules\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     5. Displays all the expense items in the expense list.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 1: currency/CURRENCY\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the expense items with currency CURRENCY as a list.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" expenses currency/SGD\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 2: date/yyyy-MM-dd\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the expense items with date in the format of yyyy-MM-dd.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" expenses date/2020-11-07\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 3: for/{DAY, WEEK, MONTH, YEAR}\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Displays all the expense items for today/this week/this month/this year.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"             Example: \" + COMMAND_WORD + \" expenses for/YEAR\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean hasPriority;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean hasCategory;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean isSorted;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean isBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean isLink;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(int priority) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(String category) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(boolean isSorted, boolean isLink) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (isSorted) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isSorted \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isLink \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(boolean isSorted, boolean isLink, boolean isBook) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (isSorted) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isSorted \u003d isSorted;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isLink \u003d isLink;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isBook \u003d isBook;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        BookList books \u003d (BookList) model.getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        LinkList links \u003d (LinkList) model.getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cBook\u003e newBooks \u003d new ArrayList\u003cBook\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (priority \u003c 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getPriority() \u003d\u003d priority) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    newTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask(priority);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (hasCategory) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getCategory() \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getCategory().equals(category)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    newTasks.add((Task) tasks.get(i));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask(category);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isSorted) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTasks \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Collections.sort(newTasks);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isBook) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newBooks \u003d books.getBookList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            BookList newBookList \u003d new BookList(newBooks);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newBookList.listBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links.listLink();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            tasks.listTask();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7,
      "GuoAi": 4,
      "Cao-Zeyu": 141
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.TotalExpenseType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Lists expense items in the expense list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ListExpenseCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String currency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private TotalExpenseType totalExpenseType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private boolean hasCurrency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private boolean hasDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private boolean hasTotalExpenseType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Default constructor to list all the expense items in the expense list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ListExpenseCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasCurrency \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasDate \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasTotalExpenseType \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor to list all the expense items with the given currency in the expense list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param currency the currency to be used to select expense items to be listed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ListExpenseCommand(String currency) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasCurrency \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasDate \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasTotalExpenseType \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor to list all the expense items with the given date in the expense list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param date the date to be used to select expense items to be listed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ListExpenseCommand(LocalDate date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasDate \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasCurrency \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasTotalExpenseType \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor to list all the expense items with the given {@code TotalExpenseType} in the expense list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param totalExpenseType the {@code TotalExpenseType} to be used to select expense items to be listed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ListExpenseCommand(TotalExpenseType totalExpenseType) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.totalExpenseType \u003d totalExpenseType;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasTotalExpenseType \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasCurrency \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.hasDate \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Creates a ListExpenseCommand according to the input arguments."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param commandString A String containing the input arguments."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return a ListExpenseCommand."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException when there are invalid arguments."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static ListExpenseCommand createListExpenseCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cString\u003e allowedArguments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        allowedArguments.add(\"currency\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        allowedArguments.add(\"date\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        allowedArguments.add(\"for\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (commandString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new ListExpenseCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(commandString, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.keySet().size() !\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_ONE_ARGUMENT_ONLY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (String key : argumentsMap.keySet()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (!allowedArguments.contains(key)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String key \u003d (String) argumentsMap.keySet().toArray()[0];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (key.equals(\"currency\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String currency \u003d argumentsMap.get(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (currency.equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_EMPTY_CURRENCY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new ListExpenseCommand(currency);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (key.equals(\"date\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String dateString \u003d argumentsMap.get(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate date;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                return new ListExpenseCommand(date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (key.equals(\"for\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String totalExpenseTypeString \u003d argumentsMap.get(key).toUpperCase();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                TotalExpenseType totalExpenseType \u003d TotalExpenseType.valueOf(totalExpenseTypeString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                return new ListExpenseCommand(totalExpenseType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_EXPENSE_DATERANGE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return new ListExpenseCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param model Model representing program data in memory."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException when there are invalid arguments."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ExpenseList expenses \u003d (ExpenseList) model.getList(ListType.EXPENSE_LIST);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (hasCurrency) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (currency.equals(\"\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_EMPTY_CURRENCY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            expenses.listExpense(currency);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (hasDate) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            expenses.listExpense(date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (hasTotalExpenseType) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            expenses.listExpense(totalExpenseType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            expenses.listTask();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 149
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class ListModuleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        modules.listTask();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/MakeFolderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class MakeFolderCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"makefolders\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Make folders for your modules in the modulelist\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ModuleList modules \u003d (ModuleList) model.getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        modules.createModuleFolders();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ReturnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class ReturnCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Marks the book identified by the index number used in the book list as returned.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ReturnCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) model.getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        books.markAsReturn(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 3,
      "MuhammadHoze": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Sets the task identified by the index number used in the task listing to the new priority.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: INDEX p/PRIORITY\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1 p/2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public SetCommand(int index, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            priority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (priority \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.setPriority(index, priority);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 45,
      "MuhammadHoze": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SpendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class SpendCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"spend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \": Adds an expense item to the expense list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: DESCRIPTION \u003ccompulsory/optional argument\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     List of \u003ccompulsory arguments\u003e:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"       - v/\u003cvalue\u003e sets the value of the expense item.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     List of \u003ccompulsory arguments\u003e:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"       - currency/\u003ccurrency\u003e sets the currency of the expense item.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"       - date/\u003cyyyy-MM-dd\u003e sets the date of the expense item.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_expense_item v/5.0 currency/SGD date/2020-11-07\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"v\", \"currency\", \"date\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public SpendCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!argumentsMap.containsKey(\"v\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SPEND_ARGUMENTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.containsKey(\"v\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (argumentsMap.get(\"v\").equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_EMPTY_VALUE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.containsKey(\"currency\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (argumentsMap.get(\"currency\").equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_EMPTY_CURRENCY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (argumentsMap.get(\"date\").equals(\"\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_EMPTY_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Double value \u003d 0.0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            value \u003d Double.parseDouble(argumentsMap.get(\"v\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_VALUE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (value \u003c 0 || value \u003e 100000000000000L) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_VALUE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Expense newExpense \u003d new Expense(description, value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.containsKey(\"currency\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            newExpense.setCurrency(argumentsMap.get(\"currency\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                date \u003d LocalDate.parse(argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                newExpense.setDate(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ExpenseList expenses \u003d (ExpenseList) model.getList(ListType.EXPENSE_LIST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expenses.addExpense(newExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 88
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author GuoAi-reused"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DIVIDER \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String LOGO \u003d \"     _                           _  _   _\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    | |                         (_)| \\\\ | |\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    | |_   ___  _ __  _ __ ___   _ |  \\\\| | _   _  ___\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    | __| / _ \\\\| \u0027__|| \u0027_ ` _ \\\\ | || . ` || | | |/ __|\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    | |_ |  __/| |   | | | | | || || |\\\\  || |_| |\\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\\__| \\\\___||_|   |_| |_| |_||_|\\\\_| \\\\_/ \\\\__,_||___/\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Farewell student. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_TASK \u003d \"Got it. I\u0027ve added this task:\\n       \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_BOOK \u003d \"Got it. I\u0027ve added this book: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_LINK \u003d \"Got it. I\u0027ve added this link:\\n       \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_EXPENSE \u003d \"Got it. I\u0027ve added this expense item:\\n       \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_MULTIPLE_TASK \u003d \"Got it. I\u0027ve added these tasks:\\n       \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_STATUS_FIRST \u003d \"\\n     Now you have \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_STATUS_LAST \u003d \" task(s) in the list.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_LINK_STATUS_LAST \u003d \" link(s) in the list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_STATUS_LAST \u003d \" expense item(s) in the list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TASK_LIST \u003d \"Here are the task(s) in your list:\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_BOOK_LIST \u003d \"Here are the book(s) in your list:\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_LIST \u003d \"Here are the expense item(s) in your list:\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MODULE_LIST \u003d \"Here is a list of your module(s):\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_LIST_CURRENCY \u003d \"Here are the expense item(s) in your expense list of \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"currency \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_LIST_DATE \u003d \"Here are the expense item(s) in your expense list of \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"date \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_LIST_DATERANGE \u003d \"Here are the expense item(s) in your expense list \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"for \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_LIST_WITH_PRIORITY \u003d \"Here are the task(s) of this priority in your list:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_LIST_WITH_CATEGORY \u003d \"Here are the task(s) of this category in your list:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_TASK_LIST \u003d \"~Info~ There are no tasks in your list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Your task list is empty.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE \u003d \"Got it. I\u0027ve added this module:\\n       \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MODULE_STATUS_LAST \u003d \" module(s) in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CREATE_FOLDERS \u003d \"Creating module folders...\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_LINK_LIST \u003d \"Here are the link(s) in your list:\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_BOOK_LIST \u003d \"~Info~ There are no books in your list. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Your book list is empty.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_EXPENSE_LIST \u003d \"~Info~ There are no expense items to be listed \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"in your expense list.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST_WITH_PRIORITY \u003d \"~Info~ There are no tasks of this priority in your \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"list. \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST_WITH_CATEGORY \u003d \"~Info~ There are no tasks of this category in your \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"list. \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_LINK_LIST \u003d \"~Info~ There are no links in your list. \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Your link list is empty.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_MODULE_LIST \u003d \"~Info~ There are no modules in your list. \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Your module list is empty.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Noted. I\u0027ve removed this task:\\n       \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_WITH_PRIORITY \u003d \"Noted. I\u0027ve removed all these task(s) \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"with the same priority:\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_WITH_CATEGORY \u003d \"Noted. I\u0027ve removed all these task(s) \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"with the same category:\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_LINK \u003d \"Noted. I\u0027ve removed this link:\\n       \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE \u003d \"Noted. I\u0027ve removed all these expense item(s)\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_EXPENSE_DELETED \u003d \"~Info~ There is no expense item deleted.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CLEAR \u003d \"Noted. I\u0027ve cleared everything.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CLEARED \u003d \"~Info~ Everything has already been cleared.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE \u003d \"Noted. I\u0027ve removed this module:\\n       \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String WARNING_NO_TASK \u003d \"~Error~ This task index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String WARNING_NO_BOOK \u003d \"~Error~ This book index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String WARNING_NO_LINK \u003d \"~Error~ This link index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String WARNING_NO_MODULE \u003d \"~Error~ This module index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String WARNING_NO_EXPENSE \u003d \"~Error~ This expense item does not exist. Please try again.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n       [Y] \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_RETURNED \u003d \"Nice! I\u0027ve marked this book as returned:\\n       [R] \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MODULE_COMPLETE \u003d \"Nice! I\u0027ve marked this module as complete:\\n       \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CATEGORY \u003d \"Nice! I have set the category of this task:\\n       \";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DATE \u003d \"Nice! I have set the date of this task:\\n       \";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SET_PRIORITY \u003d \"Nice! I\u0027ve set the priority of this task to: \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"Here are the matching items in your list:\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"~Info~ There are no matching items in your list.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_DAY \u003d \"Your total expense for today is:\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_WEEK \u003d \"Your total expense for this week is:\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_MONTH \u003d \"Your total expense for this month is:\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXPENSE_YEAR \u003d \"Your total expense for this year is:\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TOTAL_EXPENSE \u003d \"The total amount listed:\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_COMMAND \u003d \"I\u0027m sorry, but I don\u0027t know what that means. \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please enter valid commands :-(\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_DUPLICATE_ARGUMENTS \u003d \"~Error~ You have duplicate arguments! \";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_ARGUMENTS \u003d \"~Error~ You have invalid argument(s). \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please refer to the User Guide.\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DESCRIPTION \u003d \"~Error~ The description of an item cannot be empty. \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please refer to the User Guide.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_CATEGORY \u003d \"~Error~ Please input a valid category using the format \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"c/CATEGORY.\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_NO_KEYWORD \u003d \"~Error~ Please input the keyword argument in the format of \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"k/KEYWORD\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_ONE_ARGUMENT_ONLY \u003d \"~Error~ Please input exactly one correct optional \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"argument!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_NEGATIVE_DAY_COUNT \u003d \"~Error~ Your number of days must be positive!\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_DAY_COUNT \u003d \"~Error~ Your number of days is an invalid integer!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_RECURRING_ARGUMENTS \u003d \"~Error~ All compulsory arguments (s/, e/ and day/) \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"are required.\\n \\t Please refer to the User Guide. \";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_SPEND_ARGUMENTS \u003d \":( OOPS!!! You need the v/ argument!\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CATEGORY_BODY \u003d \":( OOPS!!! The body of a category command cannot be \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"empty.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_DATE \u003d \"~Error~ The format of your date should be DD-MM-YYYY.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_DAY \u003d \"~Error~ The format of your day should be the first \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"3 characters of the day!\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     Example: mon, tue, wed, thu, fri, sat, sun\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_EMPTY_PRIORITY \u003d \"~Error~ The priority cannot be empty.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CATEGORY \u003d \"~Error~ The category cannot be empty.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_EMPTY_VALUE \u003d \"~Error~ The value of an expense item cannot be empty.\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CURRENCY \u003d \"~Error~ The currency of an expense item cannot be empty.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DATE \u003d \"~Error~ The date of an expense item cannot be empty.\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_INDEX \u003d \"~Error~ Please input a valid index.\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_LINK_INDEX \u003d \"~Error~ Please input a valid link index.\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_PRIORITY \u003d \"~Error~ Invalid priority number.\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_FORMAT \u003d \"~Error~ Format is incorrect. \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please refer to the User Guide.\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_VALUE \u003d \"~Error~ Please input a valid value. It must be a non-negative\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" floating point number/integer less than 10^14.\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_CATEGORY_NOT_FOUND \u003d \"~Error~ Invalid category.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_LOAD_FILE \u003d \"~Error~ The file cannot be loaded. \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Maybe this is your first time using termiNus?\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_BOOLEAN \u003d \"Only boolean values allowed are: \u003c1 or 0\u003e\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_WRONG_DATE_FORMAT \u003d \"~Error~ Please input the date string in the format \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"yyyy-MM-dd\\\"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_SAVE_FILE \u003d \"~Error~ Cannot save to file.\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_EXPENSE_DATERANGE \u003d \"~Error~ Please input a valid date range (one of \\\"DAY\\\", \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"WEEK\\\", \\\"MONTH\\\", \\\"YEAR\\\").\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_CLEAR \u003d \"~Error~ The command is: clear all\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_BORROW \u003d \"~Error~ The format is: borrow \u003cdescription\u003e \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\u003cdate/DD-MM-YYYY\u003e\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_DATE_RANGE \u003d \"~Error~ Your ending date is before your starting date!\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_MCS \u003d \"~Error~ Please enter a value between 0 and 40, inclusive\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_GRADE \u003d \"~Error~ Invalid grade!\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_DUPLICATE_MODULE \u003d \"~Error~ Module with same code and semester already\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" exists!\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_PATH \u003d \"~Error~ Cannot get path\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NEW_TASK_FILE \u003d \"I have created a new tasks.txt file for you. :) \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NEW_BOOK_FILE \u003d \"I have created a new books.txt file for you. :) \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NEW_LINK_FILE \u003d \"I have created a new links.txt file for you. :) \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NEW_MODULE_FILE \u003d \"I have created a new modules.txt file for you :) \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NEW_EXPENSE_FILE \u003d \"I have created a new expenses.txt file for you :) \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_LINK_TYPE \u003d \"~Error~ Please input a correct link type:\\n \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t t/lecture\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t t/tutorial\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t t/lab\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t t/project\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_DELETE_COMMAND \u003d \"~Error~ Please input a valid delete command \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"using the format: \\n\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"delete tasks p/PRIORITY\\\"\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"delete tasks c/CATEGORY\\\"\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"delete task \u003cindex number\u003e\\\"\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"delete link \u003cindex number\u003e\\\"\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"delete module \u003cindex number\u003e\\\"\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"delete expense \u003cindex number\u003e\\\"\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"delete expenses currency/CURRENCY\\\"\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"delete expenses date/yyyy-MM-dd\\\"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_DONE_COMMAND \u003d \"~Error~ Please input a valid done command \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"using the format: \\n\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"done task \u003cindex number\u003e\\\"\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"done module \u003cindex number\u003e\\\"\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_LIST_COMMAND \u003d \"~Error~ Please input a valid list command \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"using the format: \\n\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list tasks\\\"\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list tasks p/PRIORITY\\\"\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list tasks c/CATEGORY\\\"\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list links\\\"\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list modules\\\"\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list books\\\"\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list expenses\\\"\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list expenses currency/CURRENCY\\\"\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list expenses date/yyyy-MM-dd\\\"\\n\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"list expenses for/{DAY,WEEK,MONTH,YEAR}\\\"\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_FIND_COMMAND \u003d \"~Error~ Please input a valid find command \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"using the format: \\n\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"find tasks k/KEYWORD\\\"\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"find expenses k/KEYWORD\\\"\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"find modules k/KEYWORD\\\"\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"find links k/KEYWORD\\\"\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     \\\"find books k/KEYWORD\\\"\\n\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXCEPTION_INVALID_URL \u003d \"~Error~ Invalid url entered. Please refer to the User Guide.\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 2,
      "-": 202
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Utils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author GuoAi-reused"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convert strings (either \"0\" or \"1\") to booleans (false or true respectively)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param str input string (either \"0\" or \"1\")."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false if input string is \"0\", true if \"1\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If boolean value is neither 1 nor 0."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean stringToBoolean(String str) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (str.equals(\"0\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (str.equals(\"1\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DukeException(Messages.EXCEPTION_INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 2,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ListType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public enum ListType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    TASK_LIST,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    BOOK_LIST,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    LINK_LIST,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    MODULE_LIST,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    EXPENSE_LIST"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.BookList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ExpenseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.LinkList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.ModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * An object representing program state stored in memory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Map\u003cListType, ItemList\u003c?\u003e\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Model() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.BOOK_LIST, new BookList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.MODULE_LIST, new ModuleList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.LINK_LIST, new LinkList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        listMap.put(ListType.EXPENSE_LIST, new ExpenseList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ItemList\u003c?\u003e getList(ListType listType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert listMap.get(listType) !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return listMap.get(listType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // @@author MuhammadHoze"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Clears all lists in the model."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If lists are already cleared."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void clear() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        TaskList tasks \u003d (TaskList) getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) getList(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        LinkList links \u003d (LinkList) getList(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ModuleList modules \u003d (ModuleList) getList(ListType.MODULE_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ExpenseList expenses \u003d (ExpenseList) getList(ListType.EXPENSE_LIST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (links.size() !\u003d 0 || books.size() !\u003d 0 || modules.size() !\u003d 0 || tasks.size() !\u003d 0"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                || expenses.size() !\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            getList(ListType.TASK_LIST).clearItems();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            getList(ListType.BOOK_LIST).clearItems();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            getList(ListType.LINK_LIST).clearItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            getList(ListType.MODULE_LIST).clearItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            getList(ListType.EXPENSE_LIST).clearItems();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_CLEAR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.MESSAGE_CLEARED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Loads the lists from file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        boolean errorMessage \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            listMap.put(ListType.TASK_LIST, new TaskList(storage.loadTask()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            errorMessage \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.showError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_TASK_FILE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            listMap.put(ListType.BOOK_LIST, new BookList(storage.loadBook()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                errorMessage \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_BOOK_FILE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            listMap.put(ListType.LINK_LIST, new LinkList(storage.loadLinks()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_LINK_FILE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            listMap.put(ListType.MODULE_LIST, new ModuleList(storage.loadModule()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_MODULE_FILE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            listMap.put(ListType.EXPENSE_LIST, new ExpenseList(storage.loadExpense()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_EXPENSE_FILE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Saves the list from file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If there is a problem with the saving."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void save() throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.TASK_LIST), Storage.TASK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.BOOK_LIST), Storage.BOOK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.LINK_LIST), Storage.LINK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.MODULE_LIST), Storage.MODULE_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        storage.save(listMap.get(ListType.EXPENSE_LIST), Storage.EXPENSE_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 50,
      "MuhammadHoze": 74,
      "GuoAi": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Book.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Book extends Item {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected boolean isReturn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected LocalDate futureDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Book(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param description the description of the book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param isReturn    true if the book is returned already, false otherwise"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Book(String description, boolean isReturn) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description, isReturn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.isReturn \u003d isReturn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Marks the book as returned."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markAsReturn() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isReturn \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void setDateFromString(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert dateString !\u003d null : \"dateString should not be null.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            date \u003d LocalDate.parse(dateString, DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            futureDate \u003d date.plusMonths(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_BORROW);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String getFutureDateString(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (futureDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return futureDate.format(formatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Converts the attributes of the book into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toString(boolean isList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String returnString \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (isList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (this.isReturn) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                returnString \u003d \"[B][R] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                returnString \u003d \"[B][L] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString \u003d this.description + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString +\u003d \"\\t   (Loan Date: \" + getDateString(Task.DATETIME_PRINT_FORMAT) + \")\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString +\u003d \"\\t   (Due Date: \" + getFutureDateString(Task.DATETIME_PRINT_FORMAT) + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String isReturnString \u003d (isReturn) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String dateString \u003d getDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String futureDateString \u003d getFutureDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"B | \" + isReturnString + \" | \" + description + \" | \" + dateString + \" | \" + futureDateString;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 97,
      "GuoAi": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Expense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents an expense item."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Expense extends Item implements Comparable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String currency;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private LocalDate now;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor used when adding an expense item."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * By default, the expense item has currency \"SGD and date of today."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the expense item"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param value the value of the expense item"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Expense(String description, double value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.currency \u003d \"SGD\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.date \u003d now;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return String.format(\"%s (%.2f %s) (date: %s)\", getDescription(), getValue(), getCurrency(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                getDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getCurrency() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return currency;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setCurrency(String currency) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Converts the attributes of the expense item into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return getDescription() + \" | \" + getValue() + \" | \" + getCurrency() + \" | \" + getDate().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Defines how expense items are sorted. Firstly sort expense items based on date in descending order (i.e. the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * latest expense items are shown first). If two expense items have the same date, sort them based on currency"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * lexicographically."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param otherExpense The other expense item to compare to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return negative integer if this expense item precedes the argument expense item, positive integer if this"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *     expense item follows the argument expense item, 0 otherwise."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int compareTo(Expense otherExpense) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.date.compareTo(otherExpense.getDate()) !\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return -this.date.compareTo(otherExpense.getDate());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return this.currency.compareTo(otherExpense.getCurrency());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 1,
      "GuoAi": 92
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author GuoAi-reused"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "// Renamed from previous Task.java with some modifications."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an item in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter DATETIME_PARSE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter DATETIME_PRINT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Item(String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param isDone      true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param priority    the priority of the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Item(String description, boolean isDone, int priority) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Item(String description, boolean isReturn) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the description of an item."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the description string of the item."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves whether the task in done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks the task as done and book as returned."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String isDoneString \u003d (isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String categoryString \u003d (category \u003d\u003d null) ? \"\" : category;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateString \u003d getDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T | \" + isDoneString + \" | \" + description + \" | \" + priority + \" | \" + categoryString + \" | \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                + dateString;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDateFromString(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assert dateString !\u003d null : \"dateString should not be null.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d LocalDate.parse(dateString, DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            //futureDate \u003d date.plusMonths(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateString(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return date.format(formatter);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "GuoAi": 8,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Link.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "// @@author Cao-Zeyu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "public class Link extends Item {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String url;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructor used when adding a new Zoom link."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param module the name of the module."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param type the type of the zoom link."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param url the Zoom link."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Link(String module, String type, String url) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        super(module);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Matcher matcher \u003d Module.MODULE_CODE_PATTERN.matcher(module);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(\"~Error~ Format of the module name is incorrect.\\n \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    + \"\\t Please refer to the User Guide\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public  String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.url;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String returnString \u003d this.getModule() + \" \" + this.getType() + \"\\n       \" + this.getUrl();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String returnString \u003d this.getModule() + \" | \" + this.getType() + \" | \" + this.getUrl();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5,
      "MuhammadHoze": 1,
      "Cao-Zeyu": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class Module extends Item {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Pattern MODULE_CODE_PATTERN \u003d Pattern.compile(\"(^[A-Z]{2,3}[\\\\d]{4}[A-Z]?$)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Pattern MODULE_SEM_PATTERN \u003d Pattern.compile(\"(^[\\\\d]{4}S[12]$)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MODULE_COMPLETED_STRING \u003d \"[CM]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MODULE_INCOMPLETE_STRING \u003d \"[IC]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MODULE_PRINT_FORMAT \u003d \"%s[%s] %s (%d MC) (AY%s)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String LAST_VALID_AY \u003d \"9900\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int AY_STRING_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int YEAR_ONE_START_INDEX \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int YEAR_ONE_END_INDEX \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int YEAR_TWO_END_INDEX \u003d 4;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int ALLOWED_YEAR_DIFFERENCE \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int MIN_ALLOWED_MCS \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int MAX_ALLOWED_MCS \u003d 40;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final double gradePoint;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int mc;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String semester;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param moduleCode the description of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public Module(String moduleCode, String grade, int mc, String semester, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.mc \u003d mc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        gradePoint \u003d getCapFromGrade(grade);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d MODULE_CODE_PATTERN.matcher(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!matcher.find() || !checkValidAy(semester)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!checkValidMcs(mc)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_MCS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return String.format(MODULE_PRINT_FORMAT, getCompletionString(), getGrade(), getDescription(), getMc(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                getSemester());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the number of MCs is in a valid range."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param mc Number of MCs."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Boolean corresponding to the conditions."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static boolean checkValidMcs(int mc) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return mc \u003e\u003d MIN_ALLOWED_MCS \u0026\u0026 mc \u003c\u003d MAX_ALLOWED_MCS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the Academic Year is valid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param ay Academic Year."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return True if the Academic Year is valid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static boolean checkValidAy(String ay) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d MODULE_SEM_PATTERN.matcher(ay);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (ay.startsWith(LAST_VALID_AY)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert ay.length() \u003d\u003d AY_STRING_LENGTH;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int start \u003d Integer.parseInt(ay.substring(YEAR_ONE_START_INDEX, YEAR_ONE_END_INDEX));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int end \u003d Integer.parseInt(ay.substring(YEAR_ONE_END_INDEX, YEAR_TWO_END_INDEX));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return end - start \u003d\u003d ALLOWED_YEAR_DIFFERENCE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String isDoneString \u003d (isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return getDescription() + \" | \" + getGrade() + \" | \" + getMc() + \" | \" + getSemester() + \" | \" + isDoneString;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public int getMc() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public double getGradePoint() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return gradePoint;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getSemester() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getCompletionString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return (isDone) ? MODULE_COMPLETED_STRING : MODULE_INCOMPLETE_STRING;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Gets the grade points from a grade."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param grade Grade to get the grade points from."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Grade points corresponding to given grade."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If grade is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private double getCapFromGrade(String grade) throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 5.0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 4.5;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 4.0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 3.5;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 3.0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 2.5;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 2.0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 1.5;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 1.0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"S\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"U\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_GRADE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 167
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author GuoAi-reused"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://github.com/GuoAi/ip with minor modifications"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task extends Item implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setPriority(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param isDone true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param priority the priority of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description, boolean isDone, int priority) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Retrieves the priority of a task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Priority of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the category of a task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return Category of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the priority of a task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param priority New priority of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert priority \u003e\u003d 0 : \"Priority should be non-negative\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    //@@author GuoAi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String returnString;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString \u003d \"[T][Y] \" + this.description + \" (p:\" + this.getPriority() + \")\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString \u003d \"[T][N] \" + this.description + \" (p:\" + this.getPriority() + \")\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (category !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString +\u003d \" (category: \" + category + \")\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString +\u003d \" (date: \" + getDateString(Item.DATETIME_PRINT_FORMAT) + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String isDoneString \u003d (isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String categoryString \u003d (category \u003d\u003d null) ? \"\" : category;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String dateString \u003d getDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return \"T | \" + isDoneString + \" | \" + description + \" | \" + priority + \" | \" + categoryString + \" | \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                + dateString;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    //@@author GuoAi"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Defines how tasks are sorted. First sort tasks based on priority in ascending order (priority 0, i.e. no"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * priority, is the last). If two tasks have the same priority, sort based on category lexicographically."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param otherItem The other task to compare to."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return negative integer if this task precedes the argument task, positive integer if this task follows the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *     argument task, 0 otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int compareTo(Task otherItem) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority \u0026\u0026 this.priority \u003d\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority \u0026\u0026 otherItem.priority \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return this.priority - otherItem.priority;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String thisItemCategory \u003d (this.category \u003d\u003d null) ? \"\" : this.category;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String otherItemCategory \u003d (otherItem.category \u003d\u003d null) ? \"\" : otherItem.category;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return thisItemCategory.compareTo(otherItemCategory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 36,
      "MuhammadHoze": 2,
      "GuoAi": 62,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/item/TotalExpenseType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public enum TotalExpenseType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    DAY,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    WEEK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    MONTH,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    YEAR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/BookList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Represents a list of books."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class BookList extends ItemList\u003cBook\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param books an ArrayList of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public BookList(ArrayList\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.items \u003d books;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public BookList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Adds a book to the book list from the parameters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param book Book to be added to the book list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addBook(Book book) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        checkBookAlreadyExists(book);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        items.add(book);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_BOOK + book.toString(false));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markAsReturn(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_BOOK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            items.get(index - 1).markAsReturn();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_RETURNED + items.get(index - 1).getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void listBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_BOOK_LIST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            message +\u003d \"\\n     \" + (i + 1) + \".\" + items.get(i).toString(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_BOOK_LIST + message);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private void checkBookAlreadyExists(Book book) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        int count \u003d (int) items.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                .filter(existingBook -\u003e existingBook.getDescription().equals(book.getDescription()))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (count !\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(\"~Error~ Book already exists!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "MuhammadHoze": 70,
      "GuoAi": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/ExpenseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.TotalExpenseType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static java.time.DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static java.time.DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.firstDayOfYear;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.lastDayOfYear;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.nextOrSame;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.previousOrSame;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// @@author GuoAi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of expense items."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ExpenseList extends ItemList\u003cExpense\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ExpenseList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ExpenseList(ArrayList\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(expenses);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds an expense item to the expense list from the parameters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param expense Expense item to be added to the expense list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.add(expense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_EXPENSE + expense.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + items.size() + Messages.MESSAGE_EXPENSE_STATUS_LAST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Deletes all the expense items in {@code expensesDeleted} from the expense list and print out the expense items"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * deleted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param expensesDeleted expense items to be deleted from the expense list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void deleteExpenses(HashSet\u003cExpense\u003e expensesDeleted) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_EXPENSE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (Expense expense : expensesDeleted) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.remove(expense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(expense.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showEmptyLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Clears all the expense items in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void clearExpense() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Lists all the expense items in the list and summary values for today, this week, this month, and this year."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_EXPENSE_LIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d sortExpenseList(items);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_LIST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (Expense expense : items) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(count + \". \" + expense.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cExpense\u003e selectedExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.showEmptyLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_DAY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            selectedExpenses \u003d getExpenseItems(TotalExpenseType.DAY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            HashMap\u003cString, Double\u003e dayMap \u003d getTotalExpense(selectedExpenses);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (String currency : dayMap.keySet()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Ui.dukePrintMultiple(String.format(\"%.2f %s\", dayMap.get(currency), currency));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.showEmptyLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_WEEK);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            selectedExpenses \u003d getExpenseItems(TotalExpenseType.WEEK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            HashMap\u003cString, Double\u003e weekMap \u003d getTotalExpense(selectedExpenses);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (String currency : weekMap.keySet()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Ui.dukePrintMultiple(String.format(\"%.2f %s\", weekMap.get(currency), currency));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.showEmptyLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_MONTH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            selectedExpenses \u003d getExpenseItems(TotalExpenseType.MONTH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            HashMap\u003cString, Double\u003e monthMap \u003d getTotalExpense(selectedExpenses);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (String currency : monthMap.keySet()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Ui.dukePrintMultiple(String.format(\"%.2f %s\", monthMap.get(currency), currency));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.showEmptyLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_YEAR);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            selectedExpenses \u003d getExpenseItems(TotalExpenseType.YEAR);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            HashMap\u003cString, Double\u003e yearMap \u003d getTotalExpense(selectedExpenses);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (String currency : yearMap.keySet()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Ui.dukePrintMultiple(String.format(\"%.2f %s\", yearMap.get(currency), currency));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.showLine();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.showEmptyLine();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(e.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Lists all the expense items with the given currency."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param currency the currency to be used to select expense items to be listed"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listExpense(String currency) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cExpense\u003e expensesListed \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (items.get(i).getCurrency().equals(currency)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                expensesListed.add(items.get(i));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expensesListed \u003d sortExpenseList(expensesListed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (expensesListed.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_EXPENSE_LIST);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_LIST_CURRENCY + currency + \":\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expensesListed.forEach(expense -\u003e Ui.dukePrintMultiple(expense.toString()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        printSummary(expensesListed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showEmptyLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Lists all the expense items with the given date."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param date the date to be used to select expense items to be listed"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listExpense(LocalDate date) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cExpense\u003e expensesListed \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (items.get(i).getDate().toString().equals(date.toString())) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                expensesListed.add(items.get(i));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expensesListed \u003d sortExpenseList(expensesListed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (expensesListed.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_EXPENSE_LIST);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_LIST_DATE"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL)) + \":\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expensesListed.forEach(expense -\u003e Ui.dukePrintMultiple(expense.toString()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        printSummary(expensesListed);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showEmptyLine();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Lists all the expense items wit the given totalExpenseType."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param totalExpenseType the {@code TotalExpenseType} to be used to select expense items to be listed"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if totalExpenseType if invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listExpense(TotalExpenseType totalExpenseType) throws DukeException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cExpense\u003e expensesListed \u003d getExpenseItems(totalExpenseType);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expensesListed \u003d sortExpenseList(expensesListed);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (expensesListed.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_EXPENSE_LIST);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        switch (totalExpenseType) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_LIST_DATERANGE + \"today:\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_LIST_DATERANGE + \"this week:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_LIST_DATERANGE + \"this month:\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_EXPENSE_LIST_DATERANGE + \"this year:\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EXPENSE_DATERANGE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expensesListed.forEach(expense -\u003e Ui.dukePrintMultiple(expense.toString()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        printSummary(expensesListed);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showEmptyLine();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the total amount of all the expense items listed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param expensesListed the expense list to be listed"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void printSummary(ArrayList\u003cExpense\u003e expensesListed) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showEmptyLine();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        HashMap\u003cString, Double\u003e currencyMap \u003d getTotalExpense(expensesListed);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_TOTAL_EXPENSE);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (String key : currencyMap.keySet()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(String.format(\"%.2f %s\", currencyMap.get(key), key));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Gets the total value of expenses for each currency."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param selectedExpenses An ArrayList of Expense representing the expenses items selected"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return a hashmap where the key is the currency and value is the total value of expenses for the currency."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public HashMap\u003cString, Double\u003e getTotalExpense(ArrayList\u003cExpense\u003e selectedExpenses) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        HashMap\u003cString, Double\u003e totalMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (Expense item : selectedExpenses) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (!totalMap.containsKey(item.getCurrency())) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                // Currency does not exist in the hashmap"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                totalMap.put(item.getCurrency(), item.getValue());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                totalMap.put(item.getCurrency(), totalMap.get(item.getCurrency()) + item.getValue());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return totalMap;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves all the expense items in the date range."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param totalExpenseType a {@code TotalExpenseType} value, i.e. DAY, WEEK, MONTH, or YEAR"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return an ArrayList of expense items in the date range."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException when the argument {@code totalExpenseType} is invalid."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ArrayList\u003cExpense\u003e getExpenseItems(TotalExpenseType totalExpenseType) throws DukeException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cExpense\u003e resultExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        switch (totalExpenseType) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            resultExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (Expense item : items) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (item.getDate().compareTo(today) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    resultExpenses.add(item);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            resultExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate monday \u003d today.with(previousOrSame(MONDAY));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate sunday \u003d today.with(nextOrSame(SUNDAY));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (Expense item : items) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (item.getDate().compareTo(monday) \u003e\u003d 0 \u0026\u0026 item.getDate().compareTo(sunday) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    resultExpenses.add(item);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            resultExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate monthBegin \u003d today.withDayOfMonth(1);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate monthEnd \u003d today.plusMonths(1).withDayOfMonth(1).minusDays(1);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (Expense item : items) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (item.getDate().compareTo(monthBegin) \u003e\u003d 0 \u0026\u0026 item.getDate().compareTo(monthEnd) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    resultExpenses.add(item);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            resultExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate firstDay \u003d today.with(firstDayOfYear());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate lastDay \u003d today.with(lastDayOfYear());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            for (Expense item : items) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (item.getDate().compareTo(firstDay) \u003e\u003d 0 \u0026\u0026 item.getDate().compareTo(lastDay) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    resultExpenses.add(item);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EXPENSE_DATERANGE);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return resultExpenses;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ArrayList\u003cExpense\u003e sortExpenseList(ArrayList\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Collections.sort(expenses);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 1,
      "GuoAi": 307
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/ItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public abstract class ItemList\u003cT extends Item\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected ArrayList\u003cT\u003e items;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an item list with the given items."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param items an ArrayList of any type of objects"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ItemList(ArrayList\u003cT\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an empty item list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ItemList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the list of items."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return an ArrayList of items"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ArrayList\u003cT\u003e getTaskList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds an item to the item list from the parameters."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param item Item to be added to the item list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void addItem(T item) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.add(item);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_TASK + item.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Deletes an item from the list, identified by the index of the item in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the item in the list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Item itemRemoved \u003d items.get(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE + itemRemoved.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    + (items.size() - 1) + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.remove(index - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Deletes an item from the list, identified by the index of the item in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param taskIndex the index of the item in the list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void deletePriorityOrCategoryTask(int taskIndex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.remove(taskIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Displays the item deleted from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param itemsDeleted the item deleted from the list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isCategory   whether to display all the tasks with the same category"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void displayDeletedPriorityOrCategoryTask(ArrayList\u003cT\u003e itemsDeleted, boolean isCategory) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (isCategory) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_TASK_WITH_CATEGORY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_TASK_WITH_PRIORITY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Collections.reverse(itemsDeleted);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (Item item : itemsDeleted) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(item.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + (items.size()) + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Lists all the tasks in the task list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_TASK_LIST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_TASK_LIST + message);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask(int priority) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST_WITH_PRIORITY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST_WITH_PRIORITY + message);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask(String category) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST_WITH_CATEGORY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST_WITH_CATEGORY + message);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Clears all the items in the list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void clearItems() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Marks the item, identified by the index of the item in the item list, as done (for tasks) or returned (for"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * books)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the item in the list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void markItemAsDone(int index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DONE + items.get(index - 1).getDescription());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Finds and lists all items in the task list whose description contains the argument keywords."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param keyword the keyword to be searched in the items list"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void findItem(String keyword) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cT\u003e matchingItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (T item : items) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String[] description;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            description \u003d item.getDescription().trim().toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (Arrays.asList(description).contains(keyword.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                matchingItems.add(item);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                message \u003d message + \"\\n     \" + count + \".\" + item.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } else if (keyword.contains(\" \")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                if (!item.getDescription().trim().toLowerCase().contains(keyword.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                String[] keywords \u003d keyword.trim().toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                for (String word : keywords) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    if (!Arrays.asList(description).contains(word)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                matchingItems.add(item);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                message \u003d message + \"\\n     \" + count + \".\" + item.toString();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!message.equals(\"\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_FIND + message);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the size of the item list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the size of the item list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves an item using the given index."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the item to be retrieved"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the item in the item list at the given index"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public T get(int index) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Sets the date of an item at the given index."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the item to set date."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param date  the date to set the item at."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setDate(int index, String date) throws DukeException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.get(index - 1).setDateFromString(date);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DATE + items.get(index - 1).toString());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "MuhammadHoze": 1,
      "GuoAi": 238
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/LinkList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Link;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "// @@author Cao-Zeyu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "public class LinkList extends ItemList\u003cLink\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    //private ArrayList\u003cLink\u003e links;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructs an empty link list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public LinkList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructs a link list with the given links."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param items An ArrayList of {@code Link}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public LinkList(ArrayList\u003cLink\u003e items) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the list of links."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return An ArrayList of {@code Link}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ArrayList\u003cLink\u003e getLinks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Adds a link to the link list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param link the link to be added in to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void addLink(Link link) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        checkLinkAlreadyExists(link);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        items.add(link);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_LINK + link.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                + items.size() + Messages.MESSAGE_LINK_STATUS_LAST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the size of the link list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return the size of the link list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the i-th link in the link list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param i the index of the desired link."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return the i-th link in the link list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Link get(int i) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return items.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Lists all the links in the link list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void listLink() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LINK_LIST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LINK_LIST + message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Deletes a link from the list, identified by the index of the link in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param index the index of the link in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void deleteLink(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_LINK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Link linkRemoved \u003d items.get(index - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE_LINK + linkRemoved.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    + (items.size() - 1) + Messages.MESSAGE_LINK_STATUS_LAST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            items.remove(index - 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private void checkLinkAlreadyExists(Link link) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        int count \u003d (int) items.stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                .filter(existingLink -\u003e existingLink.getModule().equals(link.getModule()))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                .filter(existingLink -\u003e existingLink.getType().equals(link.getType()))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (count !\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(\"~Error~ Link of this lesson already exists!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 3,
      "MuhammadHoze": 2,
      "Cao-Zeyu": 110
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a list of modules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class ModuleList extends ItemList\u003cModule\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String CURRENT_CAP_STRING \u003d \"Current CAP: %.2f\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String PROJECTED_CAP_STRING \u003d \"Projected CAP: %.2f\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MCS_COMPLETED_STRING \u003d \"Total MCs completed: %d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String FOLDER_CREATED_STRING \u003d \"Created folder(s) for %d module(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String FOLDER_PATH_STRING \u003d \"./modules/AY%s/%s/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String LECTURE_PATH_STRING \u003d \"/Lecture Notes/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String TUTORIAL_PATH_STRING \u003d \"/Tutorial/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String FOLDER_CREATION_SUCCESS_STRING \u003d \"Created folder/sub-folders for %s at %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String GRADE_S \u003d \"S\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String GRADE_U \u003d \"U\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ModuleList(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        items \u003d modules;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addModule(Module module) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        checkModuleAlreadyExists(module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        items.add(module);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_MODULE + module.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                + items.size() + Messages.MESSAGE_MODULE_STATUS_LAST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_MODULE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Item itemRemoved \u003d items.get(index - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE_MODULE + itemRemoved.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    + (items.size() - 1) + Messages.MESSAGE_MODULE_STATUS_LAST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            items.remove(index - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Lists all the modules in the module list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (items.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_MODULE_LIST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_MODULE_LIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (Module module: items) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(index + \".\" + module.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        double actualCap \u003d computeCapFromModules(items, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        double projectedCap \u003d computeCapFromModules(items, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int totalMcs \u003d computeTotalMcs(items);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(String.format(CURRENT_CAP_STRING, actualCap));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(String.format(PROJECTED_CAP_STRING, projectedCap));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(String.format(MCS_COMPLETED_STRING, totalMcs));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a list of graded modules from a list of modules."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param modules A list of modules."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return A list of graded modules."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private ArrayList\u003cModule\u003e getGradedModules(ArrayList\u003cModule\u003e modules, boolean isComplete) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return modules.stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e !task.getGrade().equals(GRADE_S))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e !task.getGrade().equals(GRADE_U))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e !isComplete || task.getIsDone())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Computes the CAP from a given list of modules."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param modules List of modules to compute the CAP from."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return The computed CAP from the list of modules."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private double computeCapFromModules(ArrayList\u003cModule\u003e modules, boolean isComplete) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cModule\u003e gradedModules \u003d getGradedModules(modules, isComplete);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        double totalGrades \u003d 0.0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int totalMcs \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (Module module : gradedModules) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            totalMcs +\u003d module.getMc();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            totalGrades +\u003d module.getGradePoint() * module.getMc();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (totalMcs !\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return totalGrades / totalMcs;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Computes the total MCs from the modules."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param modules List of modules to compute the total MCs from."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return THe computed total MCs from the list of modules."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private int computeTotalMcs(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return modules.stream()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(Module::getIsDone)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .mapToInt(Module::getMc)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates folders corresponding to the modules and academic year."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void createModuleFolders() throws DukeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_CREATE_FOLDERS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int createdFolderCount \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (Module module : items) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String academicYear \u003d module.getSemester();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String moduleName \u003d module.getDescription();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String folderName \u003d String.format(FOLDER_PATH_STRING, academicYear, moduleName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            boolean hasCreatedFolder \u003d new File(folderName).mkdirs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            hasCreatedFolder |\u003d new File(folderName + LECTURE_PATH_STRING).mkdirs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            hasCreatedFolder |\u003d new File(folderName + TUTORIAL_PATH_STRING).mkdirs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (hasCreatedFolder) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    createdFolderCount++;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    String filePath \u003d new File(folderName).getCanonicalPath();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    Ui.dukePrintMultiple(String.format(FOLDER_CREATION_SUCCESS_STRING, moduleName, filePath));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_PATH);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintMultiple(String.format(FOLDER_CREATED_STRING, createdFolderCount));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if a module with the same code and semester already exists in the module list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param module Module to check against."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If module already exists in the list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private void checkModuleAlreadyExists(Module module) throws DukeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int count \u003d (int) items.stream()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(existingModule -\u003e existingModule.getSemester().equals(module.getSemester()))"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(existingModule -\u003e existingModule.getDescription().equals(module.getDescription()))"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (count !\u003d 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void markItemAsDone(int index) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_MODULE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            items.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_MODULE_COMPLETE + items.get(index - 1));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 191,
      "MuhammadHoze": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/itemlist/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.itemlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class TaskList extends ItemList\u003cTask\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param tasks an ArrayList of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.items \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a list of tasks to the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param newTaskList ArrayList of new tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addTasksFromList(ArrayList\u003cTask\u003e newTaskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (newTaskList.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_ADD_MULTIPLE_TASK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            for (Task task: newTaskList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                items.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                Ui.dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_STATUS_FIRST + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showEmptyLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the category of a task identified by the task index number in the task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setCategory(int index, String category) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            items.get(index - 1).setCategory(category);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_CATEGORY + items.get(index - 1).toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the priority of a task at the given index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param index    the index of the task to set priority."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param priority the priority to set the task at."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setPriority(int index, int priority) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            items.get(index - 1).setPriority(priority);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_SET_PRIORITY + items.get(index - 1).getPriority());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a todo task to the task list with given description."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addTaskFromString(String description) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.add(newTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_TASK + newTask.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 52,
      "MuhammadHoze": 2,
      "GuoAi": 38,
      "-": 1,
      "Cao-Zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.AddRecurringCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.BorrowCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CalendarCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CommandCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.MakeFolderCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ReturnCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.SetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.SpendCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ARGUMENT_REGEX \u003d \"([\\\\w]+/[^\\\\s]+)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Logger PARSER_LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Pattern ARGUMENT_PATTERN \u003d Pattern.compile(ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param fullCommand full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if user input commands are not in the standard format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String rootCommand \u003d fullCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String commandString \u003d fullCommand.replaceFirst(rootCommand, \"\").trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d removeArgumentsFromCommand(commandString, ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!rootCommand.trim().toLowerCase().equals(\"find\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            argumentsMap \u003d getArgumentsFromRegex(commandString, ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkValidDescription(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (rootCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return CommandCreator.createAddCommand(commandString, description, argumentsMap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case AddRecurringCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, AddRecurringCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createAddRecurringCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case SpendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            checkAllowedArguments(argumentsMap, SpendCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return CommandCreator.createSpendCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, SetCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createSetCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case DateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, DateCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createDateCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, CalendarCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createCalendarCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case CategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            checkAllowedArguments(argumentsMap, CategoryCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return CommandCreator.createCategoryCommand(commandString, argumentsMap, description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            HashSet\u003cString\u003e allowedDescrptions \u003d new HashSet\u003c\u003e(Arrays.asList(\"tasks\", \"expenses\", \"modules\", \"links\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    \"books\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (!allowedDescrptions.contains(description.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_LIST_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String subRootCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            commandString \u003d commandString.replaceFirst(subRootCommand, \"\").trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return CommandCreator.createListCommand(fullCommand, subRootCommand, commandString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createDeleteCommand(commandString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case BorrowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            checkAllowedArguments(argumentsMap, BorrowCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createBorrowCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ClearCommand(commandString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createDoneCommand(commandString);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case ReturnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createReturnCommand(commandString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String subRootCommandFind \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            commandString \u003d commandString.replaceFirst(subRootCommandFind, \"\").trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return CommandCreator.createFindCommand(fullCommand, subRootCommandFind, commandString);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case MakeFolderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkFullCommand(fullCommand.trim(), MakeFolderCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new MakeFolderCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkFullCommand(fullCommand.trim(), HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ByeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkFullCommand(fullCommand.trim(), ByeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Parses the command and obtain arguments in the form (keyword)/(argument)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString Command substring to be parsed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentRegex  The regex to match arguments against."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return A HashMap of keyword-argument pairs containing the matched arguments."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static HashMap\u003cString, String\u003e getArgumentsFromRegex(String argumentString, String argumentRegex)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        StringBuilder log \u003d new StringBuilder(\"Optional arguments: \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d ARGUMENT_PATTERN.matcher(argumentString);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return argumentsMap;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int argumentStartIndex \u003d matcher.start();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String optionalArgumentString \u003d argumentString.substring(argumentStartIndex).trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] arguments \u003d optionalArgumentString.trim().split(\" \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (String argument: arguments) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            log.append(argument).append(\" \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!ARGUMENT_PATTERN.matcher(argument).find()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(\"\u0027\" + argument + \"\u0027 is not a valid argument!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String argumentKey \u003d argument.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String argumentValue \u003d argument.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argumentsMap.containsKey(argumentKey)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_DUPLICATE_ARGUMENTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            argumentsMap.put(argumentKey, argumentValue);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        PARSER_LOGGER.log(Level.FINER, log.toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return argumentsMap;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Removes arguments from the command string."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString Command substring to remove arguments from."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentRegex  Regex to match the arguments."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String with matched patterns removed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static String removeArgumentsFromCommand(String argumentString, String argumentRegex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d ARGUMENT_PATTERN.matcher(argumentString);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d argumentString.replaceAll(argumentRegex, \"\").trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int argumentStartIndex \u003d matcher.start();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            description \u003d argumentString.substring(0, argumentStartIndex).trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        PARSER_LOGGER.log(Level.FINER, \"Description: \" + description);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the user passed in an invalid optional argument for a given command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap     HashMap containing optional arguments."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param allowedArguments HashSet containing allowed arguments."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If argumentsMap contains invalid arguments not in allowedArguments."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void checkAllowedArguments(HashMap\u003cString, String\u003e argumentsMap, HashSet\u003cString\u003e allowedArguments)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (HashMap.Entry\u003cString, String\u003e entry : argumentsMap.entrySet()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!allowedArguments.contains(entry.getKey())) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the description contains illegal characters."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description Description given by the user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If the description contains illegal characters."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void checkValidDescription(String description) throws DukeException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.contains(\"/\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Ensures that the full command corresponds to the command word."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param fullCommand fullCommand to check against."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If the full command is not equal to the command word."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void checkFullCommand(String fullCommand, String commandWord) throws DukeException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!fullCommand.equals(commandWord)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Parses a day string and returns a DayOfWeek enum corresponding to the day of the week."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param day String of the day to parse."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DayOfWeek enum representing the corresponding day of the week."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If the string is invalid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static DayOfWeek getDayFromString(String day) throws DukeException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (day.toLowerCase()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.TUESDAY;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.THURSDAY;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.SATURDAY;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DAY);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 172,
      "MuhammadHoze": 28,
      "GuoAi": 43,
      "Cao-Zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Book;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Link;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Used to load and save task list data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String TASK_STORAGE_FILEPATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String BOOK_STORAGE_FILEPATH \u003d \"books.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String LINK_STORAGE_FILEPATH \u003d \"links.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MODULE_STORAGE_FILEPATH \u003d \"modules.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXPENSE_STORAGE_FILEPATH \u003d \"expenses.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_TASK_DIVIDER_COUNT \u003d 6;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_EXPENSE_DIVIDER_COUNT \u003d 4;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_MODULE_DIVIDER_COUNT \u003d 5;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_BOOK_DIVIDER_COUNT \u003d 5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_LINK_DIVIDER_COUNT \u003d 3;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Loads the task list data from the storage, and then returns it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return ArrayList of {@code Task} from the storage file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTask() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        File file \u003d new File(TASK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task newTask \u003d loadTaskFromLine(line);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Loads the book list data from the storage, and then returns it."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return ArrayList of {@code Book} from the storage file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cBook\u003e loadBook() throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        File file \u003d new File(BOOK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Book newBook \u003d loadBookFromLine(line);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            books.add(newBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return books;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Loads the link list of data from the storage, and then returns it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return ArrayList of {@code Link} from the storage file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ArrayList\u003cLink\u003e loadLinks() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        File file \u003d new File(LINK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cLink\u003e links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Link newLink \u003d loadLinkFromLine(line);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links.add(newLink);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Loads the module list data from the storage."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return ArrayList of modules."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If the file does not exist, or parsing errors."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public ArrayList\u003cModule\u003e loadModule() throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        File file \u003d new File(MODULE_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Module newModule \u003d loadModuleFromLine(line);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            modules.add(newModule);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Loads the expense list data from the storage."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return ArrayList of expenses."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException If the file does not exist, or parsing errors."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ArrayList\u003cExpense\u003e loadExpense() throws DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        File file \u003d new File(EXPENSE_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Expense newExpense \u003d loadExpenseFromLine(line);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            expenses.add(newExpense);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Saves the {@code ItemList} data to the storage file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param items the {@code ItemList} to be saved to the storage file"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if there were errors storing data to file."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void save(ItemList items, String saveFilePath) throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fw \u003d new FileWriter(saveFilePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String saveString \u003d \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            saveString \u003d saveString + items.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fw.write(saveString);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a task corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Task corresponding to the loaded line."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Task loadTaskFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_TASK_DIVIDER_COUNT) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            boolean isDone \u003d Utils.stringToBoolean(arguments[1].trim());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String description \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int priority \u003d Integer.parseInt(arguments[3].trim());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String category \u003d arguments[4].trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String dateString \u003d arguments[5].trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            newTask \u003d new Task(description, isDone, priority);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!category.equals(\"\")) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newTask.setCategory(category);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!dateString.equals(\"\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newTask.setDateFromString(dateString);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    // @@author MuhammadHoze"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Returns a book corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return Book corresponding to the loaded line."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private Book loadBookFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Book newBook;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String[] arguments \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_BOOK_DIVIDER_COUNT) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            boolean isReturn \u003d Utils.stringToBoolean(arguments[1].trim());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String description \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String dateString \u003d arguments[3].trim();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String futureDateString \u003d arguments[4].trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newBook \u003d new Book(description, isReturn);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!dateString.equals(\"\")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                newBook.setDateFromString(dateString);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!futureDateString.equals(\"\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                newBook.setDateFromString(dateString);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return newBook;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    // @@author Cao-Zeyu"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Returns a link corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return Link corresponding to the loaded line."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private Link loadLinkFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Link newLink;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_LINK_DIVIDER_COUNT) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String module \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String type \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String url \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newLink \u003d new Link(module, type, url);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            System.out.println(\"here\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return newLink;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Returns a module corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return Module corresponding to the loaded line."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private Module loadModuleFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_MODULE_DIVIDER_COUNT) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String description \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String grade \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            int mc \u003d Integer.parseInt(arguments[2].trim());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String semester \u003d arguments[3].trim();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            boolean isDone \u003d Utils.stringToBoolean(arguments[4].trim());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return new Module(description, grade, mc, semester, isDone);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    //@@author GuoAi"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Returns an expense item corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return Expense corresponding to the loaded line."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private Expense loadExpenseFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_EXPENSE_DIVIDER_COUNT) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String description \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Double value \u003d Double.valueOf(arguments[1].trim());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String currency \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(arguments[3].trim());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Expense newExpense \u003d new Expense(description, value);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            newExpense.setCurrency(currency);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            newExpense.setDate(date);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return newExpense;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 98,
      "MuhammadHoze": 65,
      "GuoAi": 110,
      "Cao-Zeyu": 79
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Text UI of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private static Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Shows the divider line."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(Messages.DIVIDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Shows an empty line."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showEmptyLine() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints messages to the user in a structured format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param message the messaged to be printed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void dukePrint(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void dukePrintMultiple(String message) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author iamchenjiajun"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a calendar from a given task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param currentDate Date of the current day."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList    ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param daysToPrint Number of days of tasks being printed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void dukePrintCalendar(LocalDate currentDate, ArrayList\u003cTask\u003e taskList, int daysToPrint) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert daysToPrint \u003e\u003d 0 : \"Days should be a positive integer\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintCalendarHeading(currentDate, taskList, daysToPrint);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintCalendarTasks(taskList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showEmptyLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the heading of the calendar."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param date        Date to be printed in the heading."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList    ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param daysToPrint Number of days of tasks being printed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintCalendarHeading(LocalDate date, ArrayList\u003cTask\u003e taskList, int daysToPrint) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (taskList.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dukePrintMultiple(\"You have no tasks for the next \" + daysToPrint + \" day(s).\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(\"Today\u0027s date is: \" + date.format(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(\"Here\u0027s your tasks for the next \" + daysToPrint + \" day(s).\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the tasks in the calendar."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintCalendarTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintDayHeading(task.getDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            LocalDate previousTaskDate \u003d taskList.get(i - 1).getDate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (task.getDate().compareTo(previousTaskDate) !\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintDayHeading(task.getDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the heading in the calendar for a certain date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param date Date of the heading."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintDayHeading(LocalDate date) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(date.getDayOfWeek().toString() + \" - \" + date.format(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Hello from...\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(Messages.LOGO);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        dukePrint(\"How can termiNus assist you today?\\n\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + \"     Unsure what to type? Start of by typing \u003chelp\u003e to see the commands and their usage.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author GuoAi"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the goodbye message after the termination of the application."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        dukePrint(Messages.MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the error message to the user if an error occurs."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param e the {@code DukeException} representing the error occurred"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showError(DukeException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        dukePrint(e.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Formats the date time from user input."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param time the date time from user input"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted date time string"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DateTimeParseException if the user input date time is not in the specified format"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static String formatDateTime(String time) throws DateTimeParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyy HH:mm\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        LocalDateTime formattedDateTime \u003d LocalDateTime.parse(time, inputFormatter);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String returnString \u003d formattedDateTime.format(outputFormatter);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 72,
      "MuhammadHoze": 9,
      "GuoAi": 92
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    static final String LOGO \u003d \"     _                           _  _   _\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |                         (_)| \\\\ | |\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |_   ___  _ __  _ __ ___   _ |  \\\\| | _   _  ___\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | __| / _ \\\\| \u0027__|| \u0027_ ` _ \\\\ | || . ` || | | |/ __|\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |_ |  __/| |   | | | | | || || |\\\\  || |_| |\\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\\__| \\\\___||_|   |_| |_| |_||_|\\\\_| \\\\_/ \\\\__,_||___/\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Testing\\n\" + LOGO);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 8,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class AddCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommand_addsTodo() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(TEST_DESCRIPTION, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(TEST_DESCRIPTION, tasks.get(0).getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommandWithPriority_addsTodoWithPriority() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputPriority \u003d \"2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(TEST_DESCRIPTION, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(Integer.parseInt(inputPriority), tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommandWithCategory_addsTodoWithCategory() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputCategory \u003d \"cs2113\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"c\", inputCategory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(TEST_DESCRIPTION, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(inputCategory, tasks.get(0).getCategory());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithInvalidPriority_throwsException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputPriority \u003d \"-2\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                new AddCommand(TEST_DESCRIPTION, argumentsMap, ListType.TASK_LIST).execute(model));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        inputPriority \u003d \"a\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                new AddCommand(TEST_DESCRIPTION, argumentsMap, ListType.TASK_LIST).execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithDate_addsCommandWithDate() throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputDate \u003d \"13-05-2020\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedDateString \u003d \"13 May 2020\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(TEST_DESCRIPTION, argumentsMap, ListType.TASK_LIST).execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedDateString, tasks.get(0).getDateString(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithInvalidDate_throwsException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputDate \u003d \"13-13-2020\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                new AddCommand(TEST_DESCRIPTION, argumentsMap, ListType.TASK_LIST).execute(model));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        inputDate \u003d \"blah\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                new AddCommand(TEST_DESCRIPTION, argumentsMap, ListType.TASK_LIST).execute(model));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 88
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/CategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "//@@author GuoAi"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class CategoryCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validCategory_setsNewCategory() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String category \u003d \"test category\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTaskFromString(\"test description\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Command categoryCommand \u003d new CategoryCommand(index + 1, category);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(null, tasks.get(index).getCategory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        categoryCommand.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(category, tasks.get(index).getCategory());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_invalidIndex_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String category \u003d \"test category\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Model model \u003d new Model();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTaskFromString(\"test description\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        // index out of bound"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new CategoryCommand(index + 2, category).execute(model));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        // index \u003d 0"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new CategoryCommand(index, category).execute(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        // index \u003d -1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new CategoryCommand(index - 1, category).execute(model));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 55
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents the state of an instance of a Command test."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected static final String TEST_DESCRIPTION \u003d \"test description\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected ExpenseList expenses;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Resets the fields for each test case."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void resetFields() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        model \u003d new Model();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expenses \u003d (ExpenseList) model.getList(ListType.EXPENSE_LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 26,
      "GuoAi": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class DateCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validDate_setsNewDate() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "      "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTaskFromString(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", \"13-05-2020\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dateCommand.execute(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"13 May 2020\", tasks.get(0).getDateString(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_invalidDate_throwsException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTaskFromString(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", \"xx-yy-zzzz\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e dateCommand.execute(model));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_noDate_throwsException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTaskFromString(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e dateCommand.execute(model));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 44
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "//@@author GuoAi"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DeleteCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int testPriority \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String testPriorityString \u003d \"p/1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private boolean isDone \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validTaskPriority_deleteTasksWithSamePriority() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        newTaskList.add(new Task(TEST_DESCRIPTION, isDone, testPriority));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        newTaskList.add(new Task(TEST_DESCRIPTION, isDone, testPriority));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTasksFromList(newTaskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(2, tasks.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        new DeleteCommand(testPriorityString).execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_invalidTaskPriority_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        newTaskList.add(new Task(TEST_DESCRIPTION, isDone, testPriority));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        newTaskList.add(new Task(TEST_DESCRIPTION, isDone, testPriority));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTasksFromList(newTaskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(2, tasks.size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String inputPriorityStringNoPriority \u003d \"p/\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new DeleteCommand(inputPriorityStringNoPriority).execute(model));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String inputPriorityStringHigh \u003d \"p/2\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new DeleteCommand(inputPriorityStringHigh).execute(model));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String inputPriorityStringNegative \u003d \"p/-1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new DeleteCommand(inputPriorityStringNegative).execute(model));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validTaskIndex_deleteIndividualTasks() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        newTaskList.add(new Task(TEST_DESCRIPTION, isDone, testPriority));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTasksFromList(newTaskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        new DeleteCommand(1).execute(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_outOfBoundTaskIndex_doesNotChangeTaskList() throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d (TaskList) model.getList(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        newTaskList.add(new Task(TEST_DESCRIPTION, isDone, testPriority));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTasksFromList(newTaskList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        new DeleteCommand(2).execute(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(TEST_DESCRIPTION, tasks.get(0).getDescription());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(isDone, tasks.get(0).getIsDone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(testPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 2,
      "GuoAi": 96
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteExpenseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "//@@author GuoAi"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.itemlist.ExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DeleteExpenseCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private Double testValue \u003d 0.0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String testValueString \u003d \"0.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validIndex_deleteExpensesWithIndex() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ExpenseList expenses \u003d (ExpenseList) model.getList(ListType.EXPENSE_LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        expenses.addItem(new Expense(TEST_DESCRIPTION, testValue));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(1, expenses.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        new DeleteExpenseCommand(index + 1).execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(0, expenses.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 32
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    void execute_validPriority_listsTasksWithSamePriority() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/SetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.model.item.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class SetCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validPriority_setsNewPriority() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int initialPriority \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int newPriority \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", Integer.toString(newPriority));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTaskFromString(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(initialPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        setCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(newPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_negativePriority_throwsException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int newPriority \u003d -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", Integer.toString(newPriority));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTaskFromString(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e setCommand.execute(model));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_invalidPriority_throwsException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String newPriority \u003d \"a\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", newPriority);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTaskFromString(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setCommand.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 51,
      "GuoAi": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/SpendCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "//@@author GuoAi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class SpendCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private Double testValue \u003d 0.0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String testValueString \u003d \"0.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String defaultCurrency \u003d \"SGD\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String testCurrency \u003d \"USD\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private LocalDate defaultDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private LocalDate testDate \u003d LocalDate.parse(\"2020-10-24\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validCommand_spends() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"v\", testValueString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        new SpendCommand(TEST_DESCRIPTION, argumentsMap).execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(1, expenses.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(TEST_DESCRIPTION, expenses.get(0).getDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(0, expenses.get(0).getValue());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(defaultCurrency, expenses.get(0).getCurrency());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(defaultDate.toString(), expenses.get(0).getDate().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validCommandWithCurrency_spendsWithCurrency() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"v\", testValueString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"currency\", testCurrency);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        new SpendCommand(TEST_DESCRIPTION, argumentsMap).execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(1, expenses.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(TEST_DESCRIPTION, expenses.get(0).getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(0, expenses.get(0).getValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(testCurrency, expenses.get(0).getCurrency());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(defaultDate.toString(), expenses.get(0).getDate().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validCommandWithDate_spendsWithDate() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"v\", testValueString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"date\", testDate.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        new SpendCommand(TEST_DESCRIPTION, argumentsMap).execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(1, expenses.size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(TEST_DESCRIPTION, expenses.get(0).getDescription());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(0, expenses.get(0).getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(defaultCurrency, expenses.get(0).getCurrency());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(testDate.toString(), expenses.get(0).getDate().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_commandWithInvalidDescription_throwsException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String inputDescription \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"v\", testValueString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new SpendCommand(inputDescription, argumentsMap).execute(model));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_commandWithInvalidValue_throwsException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String inputValueString \u003d \"a\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"v\", inputValueString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new SpendCommand(TEST_DESCRIPTION, argumentsMap).execute(model));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_commandWithInvalidCurrency_throwsException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String inputCurrency \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"v\", testValueString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"currency\", inputCurrency);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new SpendCommand(TEST_DESCRIPTION, argumentsMap).execute(model));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_commandWithInvalidDate_throwsException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String inputDate \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"v\", testValueString);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new SpendCommand(TEST_DESCRIPTION, argumentsMap).execute(model));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        inputDate \u003d \"09-11-2020\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new SpendCommand(TEST_DESCRIPTION, argumentsMap).execute(model));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        inputDate \u003d \"blah\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                new SpendCommand(TEST_DESCRIPTION, argumentsMap).execute(model));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 123
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/item/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class ModuleTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_0mcs_returnsTrue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_negativeMcs_returnsFalse() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(-1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_40mcs_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(40);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_41mcs_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(41);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidMcs_4mcs_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidMcs(4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S1_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S2_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S2\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S3_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S3\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S0_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S0\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2011S1_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2011S1\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY9900_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"9900S1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        result \u003d Module.checkValidAy(\"9900S2\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY9900S3_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"9900S3\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkValidAy_AY2021S1A_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        boolean result \u003d Module.checkValidAy(\"2021S1A\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 89
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/item/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static final String TEST_DESCRIPTION \u003d \"test description\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getDescription_inputDescription_returnsCorrectDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(TEST_DESCRIPTION, todo.getDescription());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getIsDone_isDone_returnsFalseByDefault() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(todo.getIsDone());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void markAsDone_setIsDone_todoSetAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(todo.getIsDone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(todo.getIsDone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void toFile_getToFile_returnsCorrectString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fileString \u003d todo.toFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"T | 0 | \" + TEST_DESCRIPTION + \" | 0 |  | \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, fileString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void testToString_toString_returnsCorrectString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String todoString \u003d todo.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"[T][N] \" + TEST_DESCRIPTION + \" (p:0)\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, todoString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void todo_noInputPriority_setsDefaultPriority() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(0, todo.getPriority());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void setPriority_validPriority_setsCorrectPriority() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        todo.setPriority(5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(5, todo.getPriority());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 60
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.DateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.SetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validAddCommand_returnsAddCommand() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"add task tP meeting p/1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidAddCommand_throwsException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"add\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(fullCommand));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validSetCommand_returnsSetCommand() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"set 1 p/0\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof SetCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidSetCommand_throwsException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"set p/-1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(fullCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validDateCommand_returnsDateCommand() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"date 1 date/05-05-2020\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof DateCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidDateCommand_throwsException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommandWrongIndex \u003d \"date a date/05-05-2020\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(fullCommandWrongIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_validCommand_parseArgumentsCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting by/16-09-23:59 at/15-09-2020-11:00 p/1\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"16-09-23:59\", argumentsMap.get(\"by\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"15-09-2020-11:00\", argumentsMap.get(\"at\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"1\", argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_duplicateArguments_throwsException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting c/cs2113 p/1 p/2\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_multipleBackslash_parsesCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting p/23/24 c/cs2/1/13\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"23/24\", argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"cs2/1/13\", argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_validCommand_returnsDescription() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting by/16-09-23:59 at/15-09-2020-11:00 p/1\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"add tP meeting\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, parsedString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_noArguments_returnsDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"tP meeting\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(testCommand, parsedString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_extraSpaces_trimsSpaces() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"     tP meeting   c/cs2113  p/1 \";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"tP meeting\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, parsedString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkAllowedArguments_argumentNotAllowed_throwsException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashSet\u003cString\u003e allowedArguments \u003d new HashSet\u003c\u003e(Collections.singletonList(\"p\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", \"1\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"i\", \"2\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.checkAllowedArguments(argumentsMap, allowedArguments));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 113
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add task iP meeting"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add task other meeting p/3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add task tP meeting p/5 c/cs2113"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done task 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "done task 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add task tP meeting p/2 c/cs2113 invalid/argument"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "delete task 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "delete task 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "find book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Revengers Assemble!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 6,
      "MuhammadHoze": 2,
      "GuoAi": 4,
      "Cao-Zeyu": 3
    }
  }
]
