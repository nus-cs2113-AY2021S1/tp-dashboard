[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    archiveBaseName \u003d \"termiNus\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "-": 45
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | GuoAi | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zeyu Cao | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Muhammad | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jia Jun | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Antonio | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "![DukeSequenceDiagram](https://raw.githubusercontent.com/AY2021S1-CS2113-T14-3/tp/master/docs/images/DukeSequenceDiagram.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "-": 34
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# termiNus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Hello! I\u0027m termiNus."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "termiNus is an interactive task manager for students in NUS."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 16,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# termiNus User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Hello! I\u0027m termiNus."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "termiNus is an interactive task manager for students in NUS."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Down the latest version of `termiNus` from [here](http://link.to/duke)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Navigate to the folder containing `termiNus.jar` in the terminal."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Run termiNus by using `java -jar termiNus.jar`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding a task: `add`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Adds a new item to the list of todo tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `add \u003cdescription\u003e \u003coptional arguments\u003e`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `date/\u003cdd-MM-yyyy\u003e` sets the date of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: By default, there is no category and date, and the priority is set to 0."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`add tP meeting`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`add tP meeting c/cs2113`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`add tP meeting c/cs2113 p/1 date/13-05-2020`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [T][N] tP meeting (p:1) (category: cs2113) (date: 13 May 2020)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding recurring tasks: `addr`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Adds multiple tasks to the list of todo tasks that occur weekly."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `addr \u003cdescription\u003e \u003coptional/compulsory arguments\u003e`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003ccompulsory arguments\u003e`:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `s/\u003cdd-MM-yyyy\u003e` start date of recurring tasks (inclusive)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `e/\u003cdd-MM-yyyy\u003e` end date of recurring tasks (inclusive)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `day/\u003cmon/tue/wed/thu/fri/sat/sun\u003e` day of recurring task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`addr tp meeting s/26-10-2020 e/27-11-2020 day/fri`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`addr board games club s/26-10-2020 e/27-11-2020 day/wed p/1 c/CCA`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added these tasks:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 28 Oct 2020)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 04 Nov 2020)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 11 Nov 2020)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 18 Nov 2020)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] board games club (p:1) (category: CCA) (date: 25 Nov 2020)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Now you have 31 tasks in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Listing: `list`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Lists everything."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list all`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list all`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     1.[T][N] tP meeting (p:1) (category: cs2113)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     2.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     3.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Listing tasks: `list`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Lists all the tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] tP meeting (p:1) (category: cs2113)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     3.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Listing tasks with given priority: `list`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Lists all the tasks with the given priority."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks p/2`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the tasks of this priority in your list:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Listing tasks with given category: `list`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Lists all the tasks with the given category."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list tasks c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list tasks c/cs2113`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     Here are the tasks of this category in your list:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     1.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     2.[T][N] lecture quiz (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Setting priority of task: `set`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Sets the priority of an existing task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `set \u003ctaskIndexNumber\u003e p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`set 1 p/3`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`set 2 p/4`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I\u0027ve set the priority of this task to: 4"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Setting category of a task: `category`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Sets the category of an existing task."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `category \u003ctaskIndexNumber\u003e c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`category 1 c/CCA`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I have set the category of this task:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [T][N] tP meeting (p:0) (category: CCA)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Setting date of a task: `date`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Sets the date of an existing task."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `date \u003ctaskIndexNumber\u003e date/\u003cdd-MM-yyyy\u003e`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`date 1 date/11-11-2020`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I have set the date of this task:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [T][N] study for finals (p:0) (category: st2334) (date: 11 Nov 2020)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Mark task as done: `done`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Marks a given task as done."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `done \u003ctaskIndexNumber\u003e`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [Y] tP meeting"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting a task: `delete`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Deletes a task from the list"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `delete \u003ctaskIndexNumber\u003e`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [T][N] iP meeting (p:2)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting all tasks of a certain priority: `delete`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks of the same priority"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `delete p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete p/2`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```    "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed all these task(s) with the same priority:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] tP meeting (p:2)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] iP meeting (p:2)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting all tasks of a certain category: `delete`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks of the same category"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete c/cs2113`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```    "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed all these task(s) with the same category:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][Y] tP meeting (p:0) (category: cs2113)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] iP meeting (p:0) (category: cs2113)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Clearing all tasks: `clear`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Clears all tasks from the list "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve cleared all your tasks."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Print calendar: `calendar`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Prints a calendar with tasks from current date to given number of days."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `calendar d/\u003cdaysToPrint\u003e`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`calendar d/7`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Today\u0027s date is: 26 Oct 2020"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here\u0027s your tasks for the next 7 day(s)."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     MONDAY - 26 Oct 2020"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] finish tutorial (p:2) (date: 26 Oct 2020)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     TUESDAY - 27 Oct 2020"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] tp meeting (p:0) (category: cs2113) (date: 27 Oct 2020)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] meet with friend (p:1) (category: personal) (date: 27 Oct 2020)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     THURSDAY - 29 Oct 2020"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     [T][N] tp v2.0 submission (p:0) (category: cs2113) (date: 29 Oct 2020)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Searching tasks: `find`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Finds all tasks with matching description (case-insensitive)."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`find meeting`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][Y] tP meeting (p:1) (category: cs2113)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Getting help: `help`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Prints the help message for commands."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     add: Adds a task to the task list."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: TASK_NAME \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: add example_task \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bye: Exits the program."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: bye"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     category: Sets the category of a task identified by the task index number in the task list"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX c/CATEGORY"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: category 1 c/Academics"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     clear: Clears all tasks in the task list."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: clear"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     delete: Deletes the task identified by the index number used in the task listing."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: delete 1"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 1: p/PRIORITY"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Deletes all the tasks with PRIORITY."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Example: delete p/1"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 2: c/CATEGORY"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Deletes all the tasks with CATEGORY."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Example: delete c/cs2113"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     done: Marks the task identified by the index number used in the task listing as done."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: done 1"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     find: Finds all tasks whose descriptions contain any of the specified keywords (case-insensitive) and displays them as a list with index numbers."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: KEYWORDS"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: find book"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     help: Shows program usage instructions."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: help"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     list: Displays all tasks in the task list as a list with index numbers."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: list"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 1: tasks p/PRIORITY"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Displays all the tasks with PRIORITY as a list."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Example: list tasks p/1"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 2: tasks c/CATEGORY"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Displays all the tasks with CATEGORY as a list."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Example: list tasks c/cs2113"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     set: Sets the task identified by the index number used in the task listing to the new priority."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX p/PRIORITY"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: set 1 p/2"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Exiting the program: `bye`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Terminates the program."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Frequently Asked Questions"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "**A**: `./tasks.txt` stores the user data, which can be transferred to another computer or instance of the program by"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "putting it in the same folder as `termiNus.jar`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Quick Command Reference"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Action | Command | Example"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "----- | ------ | ------"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add task | `add \u003cdescription\u003e \u003coptional arguments\u003e` | `add tP meeting c/cs2113`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add recurring task | `addr \u003cdescription\u003e \u003coptional/compulsory arguments\u003e` | `addr board games club s/26-10-2020 e/27-11-2020 day/wed p/1 c/CCA`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List tasks | `list` | `list`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List tasks with priority | `list p/\u003cpriority\u003e` | `list p/2`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set priority of task | `set \u003ctaskIndexNumber\u003e p/\u003cpriority\u003e` | `set 1 p/2`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set category of task | `category \u003ctaskIndexNumber\u003e c/\u003ccategory\u003e` | `category 1 c/CCA`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set date of task | `date \u003ctaskIndexNumber\u003e date/\u003cdd-MM-yyyy\u003e` | `date 1 date/11-11-2020`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Mark task as done | `done \u003ctaskIndexNumber\u003e` | `done 1`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Delete task | `delete \u003ctaskIndexNumber\u003e` | `delete 2`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks by priority | `delete p/\u003cpriority\u003e` | `delete p/2`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks by category  | `delete c/\u003ccategory\u003e` | `delete c/cs2113`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Clear all tasks | `clear` | `clear`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Print calendar | `calendar d/\u003cdaysToPrint\u003e` | `calendar d/7`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Find tasks matching keyword | `find \u003ckeyword\u003e` | `find meeting`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Getting help | `help` | `help`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Exiting the program | `bye` | `bye`"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 333,
      "MuhammadHoze": 80,
      "GuoAi": 1,
      "-": 26,
      "Cao-Zeyu": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.BookList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.CreditList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.LinkList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private BookList books \u003d new BookList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private CreditList mealCredit \u003d new CreditList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private Storage linkStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private LinkList links;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private static final Logger dukeLogger \u003d Logger.getLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        boolean errorMessage \u003d false; // nvr show yet"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTask());          "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            errorMessage \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.showError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_TASK_FILE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            books \u003d new BookList(storage.loadBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                errorMessage \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            books \u003d new BookList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_BOOK_FILE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            mealCredit \u003d new CreditList(storage.loadCredit());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                errorMessage \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            mealCredit \u003d new CreditList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_MEAL_CREDIT_FILE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            links \u003d new LinkList(storage.loadLinks());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!errorMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links \u003d new LinkList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_LINK_FILE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, tasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        listMap.put(ListType.BOOK_LIST, books);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        listMap.put(ListType.CREDIT_LIST, mealCredit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        listMap.put(ListType.LINK_LIST, links);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Reads the user command and executes it, until the user issues the bye command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showWelcome();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                String fullCommand \u003d Ui.readCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                c.execute(listMap);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                storage.saveTask(tasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                storage.saveBook(books);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                storage.saveCredit(mealCredit);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                storage.save(links);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        dukeLogger.log(Level.INFO, \"Logging started\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        new Duke(Storage.TASK_STORAGE_FILEPATH).run();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7,
      "MuhammadHoze": 49,
      "GuoAi": 36,
      "-": 10,
      "Cao-Zeyu": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Signals an error caused by Duke commands and operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.LinkList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.Link;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that adds a task to the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Adds a task to the task list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: TASK_NAME \u003coptional arguments\u003e\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_task \u003coptional arguments\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\", \"c\", \"date\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final Boolean isLink;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.module \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.url \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.isLink \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddCommand(String module, String type, String url) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.isLink \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param listMap a Map object containing all lists"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        LinkList links \u003d (LinkList) listMap.get(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Link newLink \u003d new Link(module, type, url);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (isLink) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            links.addLink(newLink);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setTaskProperties(newTask, argumentsMap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the properties of a given Task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param task Task to set the properties of."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing arguments to set the Task properties."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If arguments in HashMap are invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected void setTaskProperties(Task task, HashMap\u003cString, String\u003e argumentsMap) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"p\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int newPriority;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newPriority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (newPriority \u003c 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            task.setPriority(newPriority);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"c\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argumentsMap.get(\"c\") !\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                task.setCategory(argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            task.setDateFromString(argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 99,
      "Cao-Zeyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddRecurringCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command that adds a recurring task to the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddRecurringCommand extends AddCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addr\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Adds a task to the task list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: TASK_NAME \u003coptional arguments\u003e\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_task \u003coptional arguments\u003e\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\", \"c\", \"day\", \"s\", \"e\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddRecurringCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        super(description, argumentsMap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param listMap a Map object containing all lists"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final LocalDate startDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final LocalDate endDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        LocalDate nearestDay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"day\") || !argumentsMap.containsKey(\"s\") || !argumentsMap.containsKey(\"e\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_RECURRING_ARGUMENTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            startDate \u003d LocalDate.parse(argumentsMap.get(\"s\"), Task.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            endDate \u003d LocalDate.parse(argumentsMap.get(\"e\"), Task.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        DayOfWeek dayOfWeek \u003d Parser.getDayFromString(argumentsMap.get(\"day\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        nearestDay \u003d startDate.with(TemporalAdjusters.nextOrSame(dayOfWeek));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (nearestDay.until(endDate, ChronoUnit.DAYS) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            argumentsMap.put(\"date\", nearestDay.format(Task.DATETIME_PARSE_FORMAT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setTaskProperties(newTask, argumentsMap);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            newTasks.add(newTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            nearestDay \u003d nearestDay.plusDays(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTasksFromList(newTasks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 74
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/BorrowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.BookList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class BorrowCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"borrow\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Adds a book to the book list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: BOOK_NAME date/DATE\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_book  date/10-10-2020\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private String description \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Collections.singletonList(\"date\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public BorrowCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) listMap.get(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Book newBook \u003d new Book(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newBook.setDateFromString(argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        books.addBook(newBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.exit();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5,
      "GuoAi": 23,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "// @@author iamchenjiajun"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " * Represents a command corresponding to the calendar command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Sets the date of a given task in the list.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" d/\u003cdaysToPrint\u003e\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"d\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final LocalDate currentDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public CalendarCommand(HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param listMap a Map object containing all lists"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int daysToPrint;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert argumentsMap.size() \u003c\u003d ALLOWED_ARGUMENTS.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"d\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            daysToPrint \u003d Integer.parseInt(argumentsMap.get(\"d\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (daysToPrint \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_NEGATIVE_DAY_COUNT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DAY_COUNT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        ArrayList\u003cTask\u003e dateList \u003d tasks.getTaskList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e task.getDate() !\u003d null)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003e\u003d 0)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .filter(task -\u003e currentDate.until(task.getDate(), ChronoUnit.DAYS) \u003c\u003d daysToPrint)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .sorted(Comparator.comparing(Task::getDate))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrintCalendar(currentDate, dateList, daysToPrint);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 73
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Sets the category of a task identified by its index in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class CategoryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"category\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \": Sets the category of a task identified by the task index number in the task list\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: INDEX c/CATEGORY\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1 c/Academics\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public CategoryCommand(int index, String category) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.setCategory(index, category);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 8,
      "GuoAi": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Clears all tasks in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all tasks in the task list.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.clearTask();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7,
      "GuoAi": 15,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Represents a general command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return whether to exit Duke application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param listMap a TaskList object containing all tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public abstract void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 12,
      "GuoAi": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CommandCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class CommandCreator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns an AddCommand with given arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description  Description of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return AddCommand with given arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException When description is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createAddCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new AddCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static Command createAddCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (!commandString.contains(\"m/\") || !commandString.contains(\" t/\") || !commandString.contains(\" u/\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        int indexOfT \u003d commandString.indexOf(\"t/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String module \u003d commandString.substring(2, indexOfT - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        int indexOfU \u003d commandString.indexOf(\"u/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String type \u003d commandString.substring(indexOfT + 2, indexOfU - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String url \u003d commandString.substring(indexOfU + 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return new AddCommand(module, type, url);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static Command parseAddCommand(String commandString, String description, HashMap\u003cString,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String\u003e argumentsMap) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String subRootAddCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (subRootAddCommand.equals(\"link\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            commandString \u003d commandString.replaceFirst(subRootAddCommand, \"\").trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return CommandCreator.createAddCommand(commandString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            //checkAllowedArguments(argumentsMap, AddCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (HashMap.Entry\u003cString, String\u003e entry : argumentsMap.entrySet()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (!AddCommand.ALLOWED_ARGUMENTS.contains(entry.getKey())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return CommandCreator.createAddCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createAddRecurringCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new AddRecurringCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a SetCommand with given arguments."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param fullCommand  Full command given by the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return SetCommand with given arguments."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createSetCommand(String fullCommand, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new SetCommand(Integer.parseInt(fullCommand.split(\" \")[1]), argumentsMap);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Creates and returns a ListCommand with given arguments."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param fullCommand    Full command given by the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param subRootCommand sub-root command given by the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param commandString  Command parameters given by the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return ListCommand with given arguments."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static Command createListCommand(String fullCommand, String subRootCommand,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                                            String commandString) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (fullCommand.trim().toLowerCase().equals(\"list tasks sorted\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ListCommand(true, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        switch (subRootCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        case \"tasks\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (commandString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            int priority;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String category;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (commandString.contains(\"p/\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (commandString.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_EMPTY_PRIORITY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    priority \u003d Integer.parseInt(commandString.substring(2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand(priority);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            } else if (commandString.contains(\"c/\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (commandString.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_EMPTY_CATEGORY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                category \u003d commandString.substring(2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand(category);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_LIST_COMMAND);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        case \"links\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return new ListCommand(false, true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        case \"expenses\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        case \"meals\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case \"books\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ListCommand(false, false, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_LIST_COMMAND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Creates and returns a DeleteCommand with given arguments."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return DeleteCommand with given arguments."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createDeleteCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String subRootAddCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (subRootAddCommand.equals(\"link\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            int index \u003d Integer.parseInt(commandString.replaceFirst(subRootAddCommand, \"\").trim());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return new DeleteCommand(index, true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (commandString.contains(\"p\")) { // for priority"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                return new DeleteCommand(commandString);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else if (commandString.contains(\"c\")) { // for category"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                return new DeleteCommand(commandString);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(commandString));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a DateCommand with given arguments."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DateCommand with given arguments."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createDateCommand(String commandString, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int index \u003d Integer.parseInt(commandString.split(\" \")[0]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new DateCommand(index, argumentsMap);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a DoneCommand with given arguments."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DoneCommand with given arguments."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createDoneCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new DoneCommand(Integer.parseInt(commandString));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createFindCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new FindCommand(commandString.trim());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_FIND);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createBorrowCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (argumentsMap.isEmpty()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return new BorrowCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Creates and returns a ReturnCommand with given arguments."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param commandString Command parameters given by the user."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return ReturnCommand with given arguments."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If invalid arguments are given."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createReturnCommand(String commandString) throws DukeException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return new ReturnCommand(Integer.parseInt(commandString));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static Command createDeductCommand(String value)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return new DeductCommand(value);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 95,
      "MuhammadHoze": 59,
      "GuoAi": 2,
      "Cao-Zeyu": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class DateCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Sets the date of a given task in the list.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"date\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public DateCommand(int index, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param listMap a Map object containing all lists"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (!argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.setDate(index, argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DeductCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deduct\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Deduct meal credit.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameter: value\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 5\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeductCommand(String value){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.LinkList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Deletes a Task identified by its index in the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Deletes the task identified by the index number used in the task listing.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Optional parameter 1: p/PRIORITY\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Deletes all the tasks with PRIORITY.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Example: \" + COMMAND_WORD + \" p/1\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Optional parameter 2: c/CATEGORY\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Deletes all the tasks with CATEGORY.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"          Example: \" + COMMAND_WORD + \" c/cs2113\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private String categoryValue \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int priorityIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean isLink;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert index \u003e 0 : \"Task number should be greater than 0\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(String inputValue) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (inputValue.startsWith(\"p\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasPriorityValue \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.priorityIndex \u003d Integer.parseInt(inputValue.substring(2));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (inputValue.startsWith(\"c\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasCategoryValue \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.categoryValue \u003d inputValue.substring(2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(int index, boolean isLink) { // for single deletion of link"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert index \u003e 0 : \"Task number should be greater than 0\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.isLink \u003d isLink;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        LinkList links \u003d (LinkList) listMap.get(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cTask\u003e taskDeleted \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        boolean isCategory \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (hasPriorityValue) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (priorityIndex \u003c 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            for (int i \u003d tasks.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getPriority() \u003d\u003d priorityIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    taskDeleted.add(tasks.get(i));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    tasks.deletePriorityOrCategoryTask(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (taskDeleted.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.displayDeletedPriorityOrCategoryTask(taskDeleted, isCategory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (hasCategoryValue) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            isCategory \u003d true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            for (int i \u003d tasks.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getCategory() \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    continue; //ignore if category is not set for the task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getCategory().equals(categoryValue)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    taskDeleted.add(tasks.get(i));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    tasks.deletePriorityOrCategoryTask(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (taskDeleted.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.displayDeletedPriorityOrCategoryTask(taskDeleted, isCategory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            links.deleteLink(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 3,
      "MuhammadHoze": 100,
      "GuoAi": 4,
      "Cao-Zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Marks a Task, identified by its index in the task list, as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \": Marks the task identified by the index number used in the task listing as done.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        tasks.markTaskAsDone(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7,
      "MuhammadHoze": 1,
      "GuoAi": 23,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Finds and lists all tasks in the task list whose description contains the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose descriptions contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"     Parameters: KEYWORDS\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" book\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.findTask(keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7,
      "GuoAi": 25,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        list of help commands is in alphabetical order"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        String message \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ByeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + CategoryCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + \"\\n\\n     \" + DoneCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + \"\\n\\n     \" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + SetCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7,
      "GuoAi": 20,
      "yh-ng": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.BookList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.LinkList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Lists all tasks in the task list to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \": Displays all items in the list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" all\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Displays all items in the list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 1: tasks p/PRIORITY\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Displays all the tasks with PRIORITY as a list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Example: \" + COMMAND_WORD + \" tasks p/1\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 2: tasks c/CATEGORY\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Displays all the tasks with CATEGORY as a list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"          Example: \" + COMMAND_WORD + \" tasks c/cs2113\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"          Optional parameter 3: tasks sorted\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"          Displays all the tasks sorted by priority\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasPriority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasCategory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private boolean isSorted;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean isBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static int listSize;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static int newListSize;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private boolean isLink;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(int priority) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(String category) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(boolean isSorted, boolean isLink) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (isSorted) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isSorted \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            this.isLink \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ListCommand(boolean isSorted, boolean isLink, boolean isBook) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (isSorted) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.isSorted \u003d isSorted;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.isLink \u003d isLink;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (isBook) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.isBook \u003d isBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param listMap a Map object containing all lists"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) listMap.get(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        LinkList links \u003d (LinkList) listMap.get(ListType.LINK_LIST);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cBook\u003e newBooks \u003d new ArrayList\u003cBook\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        listSize \u003d tasks.size();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (priority \u003c 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getPriority() \u003d\u003d priority) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    newTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask(priority);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (hasCategory) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getCategory() \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getCategory().equals(category)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    newTasks.add((Task) tasks.get(i));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask(category);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else if (isSorted) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            newTasks \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Collections.sort(newTasks);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (isBook) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newBooks \u003d books.getBookList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            BookList newBookList \u003d new BookList(newBooks);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newBookList.listBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (isLink) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links.listLink();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.listTask();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        newListSize \u003d newTasks.size();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public int getSize(Boolean isNew) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (isNew) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return newListSize;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return listSize;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 7,
      "MuhammadHoze": 37,
      "GuoAi": 34,
      "Cao-Zeyu": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ReturnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.BookList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "// @@author MuhammadHoze"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class ReturnCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \": Marks the book identified by the index number used in the book list as returned.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ReturnCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        BookList books \u003d (BookList) listMap.get(ListType.BOOK_LIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        books.markAsReturn(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Sets the task identified by the index number used in the task listing to the new priority.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: INDEX p/PRIORITY\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1 p/2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public SetCommand(int index, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param listMap a Map object containing all lists"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(Map\u003cListType, ItemList\u003e listMap) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            priority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (priority \u003c 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.setPriority(index, priority);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String DIVIDER \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String LOGO \u003d \"     _                           _  _   _\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |                         (_)| \\\\ | |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |_   ___  _ __  _ __ ___   _ |  \\\\| | _   _  ___\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | __| / _ \\\\| \u0027__|| \u0027_ ` _ \\\\ | || . ` || | | |/ __|\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |_ |  __/| |   | | | | | || || |\\\\  || |_| |\\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"     \\\\__| \\\\___||_|   |_| |_| |_||_|\\\\_| \\\\_/ \\\\__,_||___/\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_ADDTASK \u003d \"Got it. I\u0027ve added this task:\\n       \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_ADDBOOK \u003d \"Got it. I\u0027ve added this book: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_ADD_LINK \u003d \"Got it. I\u0027ve added this link:\\n       \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_ADD_NO_TASK \u003d \"There are no tasks to add.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_ADD_MULTIPLE_TASK \u003d \"Got it. I\u0027ve added these tasks:\\n       \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_STATUS_FIRST \u003d \"\\n     Now you have \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_STATUS_LAST \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_LINK_STATUS_FIRST \u003d \"\\n     Now you have \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_LINK_STATUS_LAST \u003d \" links in the list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_TASK_LIST \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_BOOK_LIST \u003d \"Here are the books in your list:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_LIST_WITH_PRIORITY \u003d \"Here are the tasks of this priority in your list:\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_LIST_WITH_CATEGORY \u003d \"Here are the tasks of this category in your list:\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_EMPTY_TASK_LIST \u003d \"There are no tasks in your list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"Your task list is empty.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_EMPTY_BOOK_LIST \u003d \"There are no books in your list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Your book list is empty.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST_WITH_PRIORITY \u003d \"There are no tasks of this priority in your list. \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST_WITH_CATEGORY \u003d \"There are no tasks of this category in your list. \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_LINK_LIST \u003d \"Here are the links in your list:\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LINK_LIST \u003d \"There are no links in your list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"Your link list is empty.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Noted. I\u0027ve removed this task:\\n       \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_WITH_PRIORITY \u003d \"Noted. I\u0027ve removed all these task(s) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"with the same priority:\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_WITH_CATEGORY \u003d \"Noted. I\u0027ve removed all these task(s) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"with the same category:\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_DELETE_LINK \u003d \"Noted. I\u0027ve removed this link:\\n       \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_CLEAR \u003d \"Noted. I\u0027ve cleared all your tasks.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String WARNING_NO_TASK \u003d \"You do not have this task in the list.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String WARNING_NO_LINK \u003d \"You do not have this link in the list.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n       [Y] \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_RETURNED \u003d \"Nice! I\u0027ve marked this book as returned:\\n       [R] \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_CATEGORY \u003d \"Nice! I have set the category of this task:\\n       \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_DATE \u003d \"Nice! I have set the date of this task:\\n       \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_SET_PRIORITY \u003d \"Nice! I\u0027ve set the priority of this task to: \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_COMMAND \u003d \":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means. \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"Please enter valid commands :-(\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_SPACE \u003d \";( OOPS!! Detected an empty spacing. \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Please remove any unwanted spaces\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_DUPLICATE_ARGUMENTS \u003d \";( OOPS!! You have duplicate arguments! \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_INVALID_ARGUMENTS \u003d \":( OOPS!!! You have invalid arguments\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DESCRIPTION \u003d \":( OOPS!!! The description of a task cannot be empty.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_CATEGORY \u003d \":( OOPS!!! Please input a valid category using the format \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"c/CATEGORY.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_NEGATIVE_DAY_COUNT \u003d \":( OOPS!!! Your number of days must be positive!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_INVALID_DAY_COUNT \u003d \":( OOPS!!! Your number of days is an invalid integer!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_RECURRING_ARGUMENTS \u003d \":( OOPS!!! You need the s/, e/ and day/ arguments!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CATEGORY_BODY \u003d \":( OOPS!!! The body of a category command cannot be \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"empty.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_INVALID_DATE \u003d \":( OOPS!!! The format of your date should be dd-MM-yyyy.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_INVALID_DAY \u003d \":( OOPS!!! The format of your day should be the first 3 charact\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"ers of the day!\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: mon, tue, wed, thu, fri, sat, sun\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String EXCEPTION_EMPTY_PRIORITY \u003d \":( OOPS!!! The priority cannot be empty.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CATEGORY \u003d \":( OOPS!!! The category cannot be empty.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DEADLINE \u003d \":( OOPS!!! The deadline of a task cannot be empty.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_INDEX \u003d \"Please input a valid task index.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_PRIORITY \u003d \"Invalid priority number.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_CATEGORY_NOT_FOUND \u003d \"Invalid category.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_LOAD_FILE \u003d \"The file cannot be loaded. \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"Maybe this is your first time using termiNus?\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_SAVE_FILE \u003d \":( OOPS!!! Cannot save to file.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_NEW_TASK_FILE \u003d \"I have created a new tasks.txt file for you. :) \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_NEW_BOOK_FILE \u003d \"I have created a new books.txt file for you. :) \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_NEW_MEAL_CREDIT_FILE \u003d \"I have created a new mealCredit.txt file for you. :) \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_NEW_LINK_FILE \u003d \"I have created a new links.txt file for you. :) \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String WARNING_DATETIME \u003d \"If you want your DateTime to be formatted, \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"you can input in this format: yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_FIND \u003d \":( OOPS!!! The keyword of a find command cannot be empty.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String EXCEPTION_INVALID_LIST_COMMAND \u003d \":( OOPS!!! Please input a valid list command \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"using the format: \\n\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     \\\"list tasks p/PRIORITY\\\", \\\"list tasks c/CATEGORY\\\";\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     \\\"list links\\\"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     \\\"list expenses\\\"\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\"list meals\\\"\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\"list books\\\"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 13,
      "MuhammadHoze": 23,
      "GuoAi": 35,
      "yh-ng": 6,
      "Cao-Zeyu": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Utils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Utility methods."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convert strings (either \"0\" or \"1\") to booleans (false or true respectively)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param str input string (either \"0\" or \"1\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return false if input string is \"0\", true otherwise"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static boolean stringToBoolean(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (str.equals(\"0\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.AddRecurringCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.BorrowCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CalendarCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.CommandCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DeductCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.ReturnCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.commands.SetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ARGUMENT_REGEX \u003d \"([\\\\w]+/[^\\\\s]+)\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Logger parserLogger \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param fullCommand full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if user input commands are not in the standard format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String rootCommand \u003d fullCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String commandString \u003d fullCommand.replaceFirst(rootCommand, \"\").trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d removeArgumentsFromCommand(commandString, ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d getArgumentsFromRegex(commandString, ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (rootCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return CommandCreator.parseAddCommand(commandString, description, argumentsMap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case AddRecurringCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, AddRecurringCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createAddRecurringCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, SetCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createSetCommand(fullCommand, argumentsMap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case DateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, DateCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createDateCommand(commandString, argumentsMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, CalendarCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new CalendarCommand(argumentsMap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case CategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                index \u003d Integer.parseInt(commandString.split(\" \")[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!argumentsMap.containsKey(\"c\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (argumentsMap.get(\"c\").trim().equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_EMPTY_CATEGORY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new CategoryCommand(index, argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String subRootCommand \u003d commandString.split(\" \")[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            commandString \u003d commandString.replaceFirst(subRootCommand, \"\").trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return CommandCreator.createListCommand(fullCommand, subRootCommand, commandString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createDeleteCommand(commandString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case BorrowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            checkAllowedArguments(argumentsMap, BorrowCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createBorrowCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createDoneCommand(commandString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case ReturnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createReturnCommand(commandString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case DeductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return CommandCreator.createDeductCommand(description);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createFindCommand(commandString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ByeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Parses the command and obtain arguments in the form (keyword)/(argument)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString Command substring to be parsed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentRegex  The regex to match arguments against."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return A HashMap of keyword-argument pairs containing the matched arguments."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static HashMap\u003cString, String\u003e getArgumentsFromRegex(String argumentString, String argumentRegex)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Pattern argumentPattern \u003d Pattern.compile(argumentRegex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d argumentPattern.matcher(argumentString);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        StringBuilder log \u003d new StringBuilder(\"Optional arguments: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String[] currentArgument \u003d matcher.group().trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argumentsMap.containsKey(currentArgument[0])) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_DUPLICATE_ARGUMENTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            argumentsMap.put(currentArgument[0], currentArgument[1]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            log.append(currentArgument[0]).append(\"/\").append(currentArgument[1]).append(\" \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        parserLogger.log(Level.FINER, log.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return argumentsMap;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Removes arguments from the command string."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString Command substring to remove arguments from."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentRegex  Regex to match the arguments."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String with matched patterns removed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static String removeArgumentsFromCommand(String argumentString, String argumentRegex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Pattern argumentPattern \u003d Pattern.compile(argumentRegex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d argumentPattern.matcher(argumentString);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d argumentString.replaceAll(argumentRegex, \"\").trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int argumentStartIndex \u003d matcher.start();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            description \u003d argumentString.substring(0, argumentStartIndex).trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        parserLogger.log(Level.FINER, \"Description: \" + description);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the user passed in an invalid optional argument for a given command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap     HashMap containing optional arguments."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param allowedArguments HashSet containing allowed arguments."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If argumentsMap contains invalid arguments not in allowedArguments."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void checkAllowedArguments(HashMap\u003cString, String\u003e argumentsMap, HashSet\u003cString\u003e allowedArguments)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (HashMap.Entry\u003cString, String\u003e entry : argumentsMap.entrySet()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!allowedArguments.contains(entry.getKey())) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Parses a day string and returns a DayOfWeek enum corresponding to the day of the week."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param day String of the day to parse."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return DayOfWeek enum representing the corresponding day of the week."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If the string is invalid."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static DayOfWeek getDayFromString(String day) throws DukeException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (day.toLowerCase()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.TUESDAY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.THURSDAY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.SATURDAY;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DAY);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 129,
      "MuhammadHoze": 30,
      "GuoAi": 37,
      "Cao-Zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.Book;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.BookList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.Credit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.CreditList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.Link;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.LinkList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Used to load and save task list data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final int EXPECTED_DIVIDER_COUNT \u003d 6;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Default file path used."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String TASK_STORAGE_FILEPATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String BOOK_STORAGE_FILEPATH \u003d \"books.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String CREDIT_STORAGE_FILEPATH \u003d \"credits.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String DEFAULT_LINK_FILEPATH \u003d \"links.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Loads the task list data from the storage, and then returns it."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return ArrayList of {@code Task} from the storage file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTask() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        File file \u003d new File(TASK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task newTask \u003d loadTaskFromLine(line);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Loads the book list data from the storage, and then returns it."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return ArrayList of {@code Book} from the storage file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cBook\u003e loadBook() throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        File file \u003d new File(BOOK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Book newBook \u003d loadBookFromLine(line);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            books.add(newBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return books;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Loads the link list of data from the storage, and then returns it."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return ArrayList of {@code Link} from the storage file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ArrayList\u003cLink\u003e loadLinks() throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        File file \u003d new File(DEFAULT_LINK_FILEPATH);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cLink\u003e links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Link newLink \u003d loadLinkFromLine(line);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links.add(newLink);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Loads the credit list data from the storage, and then returns it."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return ArrayList of {@code Credit} from the storage file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cCredit\u003e loadCredit() throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        File file \u003d new File(CREDIT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cCredit\u003e mealCredit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Credit newCredit \u003d loadCreditFromLine(line);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            mealCredit.add(newCredit);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return mealCredit;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Saves the {@code TaskList} data to the storage file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param tasks the {@code TaskList} to be saved to the storage file"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if there were errors storing data to file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void saveTask(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            fw \u003d new FileWriter(TASK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String taskString \u003d \"\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            taskString \u003d taskString + tasks.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fw.write(taskString);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Saves the {@code BookList} data to the storage file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param books the {@code BookList} to be saved to the storage file"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException if there were errors storing data to file."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void saveBook(BookList books) throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            fw \u003d new FileWriter(BOOK_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String bookString \u003d \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size(); i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            bookString \u003d bookString + books.get(i).toFileBook() + \"\\n\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            fw.write(bookString);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Saves the {@code CreditList} data to the storage file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param credits the {@code CreditList} to be saved to the storage file"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException if there were errors storing data to file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void saveCredit(CreditList credits) throws DukeException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            fw \u003d new FileWriter(CREDIT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String creditString \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (int i \u003d 0; i \u003c credits.size(); i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            creditString \u003d creditString + credits.get(i).toFileCredit() + \"\\n\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            fw.write(creditString);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Saves the {@code LinkList} data to the storage file."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param links the {@code LinkList} to be saved to the storage file"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException if there were errors storing data to file."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void save(LinkList links) throws DukeException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            fw \u003d new FileWriter(\"links.txt\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String linkString \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c links.size(); i++) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            linkString \u003d linkString + links.get(i).linkToFile() + \"\\n\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            fw.write(linkString);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Returns a task corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Task corresponding to the loaded line."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private Task loadTaskFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_DIVIDER_COUNT) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            boolean isDone \u003d Utils.stringToBoolean(arguments[1].trim());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String description \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int priority \u003d Integer.parseInt(arguments[3].trim());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String category \u003d arguments[4].trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String dateString \u003d arguments[5].trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            newTask \u003d new Task(description, isDone, priority);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!category.equals(\"\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newTask.setCategory(category);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!dateString.equals(\"\")) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newTask.setDateFromString(dateString);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Returns a book corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return Book corresponding to the loaded line."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private Book loadBookFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Book newBook;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String[] arguments \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_DIVIDER_COUNT - 1) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            boolean isReturn \u003d Utils.stringToBoolean(arguments[1].trim());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String description \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String dateString \u003d arguments[3].trim();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String futureDateString \u003d arguments[4].trim();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newBook \u003d new Book(description, isReturn);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!dateString.equals(\"\")) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                newBook.setDateFromString(dateString);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (!futureDateString.equals(\"\")) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                newBook.setDateFromString(dateString);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return newBook;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Returns mealCredit corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return Credit corresponding to the loaded line."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private Credit loadCreditFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Credit newCredit;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String[] arguments \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (arguments.length !\u003d EXPECTED_DIVIDER_COUNT - 4) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            String description \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            newCredit \u003d new Credit(description);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return newCredit;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Returns a link corresponding to arguments from a line loaded from file."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param line A line loaded from the save file."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return Link corresponding to the loaded line."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @throws DukeException If there is an error parsing the save file."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private Link loadLinkFromLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Link newLink;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String paddedLine \u003d line + \" \";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String[] arguments \u003d paddedLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String module \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String type \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String url \u003d arguments[2].trim();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newLink \u003d new Link(module, type, url);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            System.out.println(\"here\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return newLink;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 41,
      "MuhammadHoze": 183,
      "GuoAi": 64,
      "Cao-Zeyu": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Book.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Book extends Item {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected boolean isReturn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    protected LocalDate futureDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Book(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param description the description of the book"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param isReturn    true if the book is returned already, false otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Book(String description, boolean isReturn) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description, isReturn);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Marks the task as done and book as returned."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markAsReturn() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        isReturn \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Retrieves whether the task in done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public boolean getIsReturn() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return isReturn;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void setDateFromString(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert dateString !\u003d null : \"dateString should not be null.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            date \u003d LocalDate.parse(dateString, DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            futureDate \u003d date.plusMonths(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String getFutureDateString(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (futureDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return futureDate.format(formatter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Converts the attributes of the book into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toStringBook(boolean isList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String returnString \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (isList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (this.isReturn) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                returnString \u003d \"[B][R] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                returnString \u003d \"[B][L] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString \u003d this.description + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString +\u003d \"\\t\\t (Loan Date: \" + getDateString(Task.DATETIME_PRINT_FORMAT) + \")\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            returnString +\u003d \"\\t\\t (Due Date: \" + getFutureDateString(Task.DATETIME_PRINT_FORMAT) + \")\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFileBook() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String isDoneString \u003d (isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String dateString \u003d getDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String futureDateString \u003d getFutureDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"B | \" + isDoneString + \" | \" + description + \" | \" + dateString + \" | \" + futureDateString;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 83,
      "GuoAi": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/BookList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of books."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class BookList extends ItemList\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param books an ArrayList of tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public BookList(ArrayList\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.items \u003d books;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public BookList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public ArrayList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Adds a book to the book list from the parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param book Book to be added to the book list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        items.add(book);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADDBOOK + book.toStringBook(false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Book newBook \u003d new Book(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.add(newBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADDTASK + newBook.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markAsReturn(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            items.get(index - 1).markAsReturn();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_RETURNED + items.get(index - 1).getDescription());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void listBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_BOOK_LIST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            message +\u003d \"\\n     \" + (i + 1) + \".\" + items.get(i).toStringBook(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_BOOK_LIST + message);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 36,
      "GuoAi": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Credit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class Credit extends Item {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Credit(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/CreditList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class CreditList extends ItemList\u003cCredit\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * @param mealCredit an ArrayList of tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public CreditList(ArrayList\u003cCredit\u003e mealCredit) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.items \u003d mealCredit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public CreditList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// Renamed from previous Task.java with some modifications."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents an item in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Item implements Comparable\u003cItem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static DateTimeFormatter DATETIME_PARSE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static DateTimeFormatter DATETIME_PRINT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected String category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Item(String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.setPriority(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isDone      true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param priority    the priority of the task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Item(String description, boolean isDone, int priority) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public Item(String description, boolean isReturn) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the description of a task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the description string of the task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves whether the task in done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * Marks the task as done and book as returned."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String isDoneString \u003d (isDone) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String categoryString \u003d (category \u003d\u003d null) ? \"\" : category;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String dateString \u003d getDateString(Item.DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return \"T | \" + isDoneString + \" | \" + description + \" | \" + priority + \" | \" + categoryString + \" | \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + dateString;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public String toFileCredit() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        return \"C | \" + description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String returnString \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString \u003d \"[T][Y] \" + this.description + \" (p:\" + this.getPriority() + \")\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString \u003d \"[T][N] \" + this.description + \" (p:\" + this.getPriority() + \")\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (category !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString +\u003d \" (category: \" + category + \")\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString +\u003d \" (date: \" + getDateString(Item.DATETIME_PRINT_FORMAT) + \")\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the priority of a task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return Priority of the task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the category of a task."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return Category of the task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Sets the priority of a task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param priority New priority of the task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assert priority \u003e\u003d 0 : \"Priority should be non-negative\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setDateFromString(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assert dateString !\u003d null : \"dateString should not be null.\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            date \u003d LocalDate.parse(dateString, DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            //futureDate \u003d date.plusMonths(1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getDateString(DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return date.format(formatter);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Defines how tasks are sorted. First sort tasks based on priority in ascending order (priority 0, i.e. no"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * priority, is the last). If two tasks have the same priority, sort based on category lexicographically."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     * positive integer if this task follows the argument task, 0 otherwise."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param otherItem The other task to compare to."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return negative integer if this task precedes the argument task,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int compareTo(Item otherItem) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority \u0026\u0026 this.priority \u003d\u003d 0) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority \u0026\u0026 otherItem.priority \u003d\u003d 0) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.priority !\u003d otherItem.priority) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return this.priority - otherItem.priority;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String thisItemCategory \u003d (this.category \u003d\u003d null) ? \"\" : this.category;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String otherItemCategory \u003d (otherItem.category \u003d\u003d null) ? \"\" : otherItem.category;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return thisItemCategory.compareTo(otherItemCategory);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 22,
      "GuoAi": 179
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/ItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "// Renamed from previous Task.java with some modifications."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public abstract class ItemList\u003cT extends Item\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected ArrayList\u003cT\u003e items;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an item list with the given items."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param items an ArrayList of any type of objects"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ItemList(ArrayList\u003cT\u003e items) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an empty item list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ItemList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the list of items."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return an ArrayList of items"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ArrayList\u003cT\u003e getTaskList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds an item to the item list from the parameters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param item Item to be added to the item list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void addTask(T item) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.add(item);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_LINK + item.toString() + Messages.MESSAGE_LINK_STATUS_FIRST"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                + items.size() + Messages.MESSAGE_LINK_STATUS_LAST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds an item into the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the item"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public abstract void addTodo(String description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Deletes an item from the list, identified by the index of the item in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the item in the list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Item itemRemoved \u003d items.get(index - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE + itemRemoved.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    + (items.size() - 1) + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.remove(index - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Deletes an item from the list, identified by the index of the item in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param taskIndex the index of the item in the list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void deletePriorityOrCategoryTask(int taskIndex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.remove(taskIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Displays the item deleted from the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param itemsDeleted the item deleted from the list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isCategory   whether to display all the tasks with the same category"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void displayDeletedPriorityOrCategoryTask(ArrayList\u003cT\u003e itemsDeleted, boolean isCategory) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (isCategory) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_TASK_WITH_CATEGORY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_TASK_WITH_PRIORITY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Collections.reverse(itemsDeleted);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (Item item : itemsDeleted) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrintMultiple(item.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + (items.size()) + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Lists all the tasks in the task list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_TASK_LIST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_TASK_LIST + message);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask(int priority) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST_WITH_PRIORITY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST_WITH_PRIORITY + message);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask(String category) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST_WITH_CATEGORY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST_WITH_CATEGORY + message);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Clears all the items in the list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void clearTask() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_CLEAR);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Marks the item, identified by the index of the item in the item list, as done (for tasks) or returned (for"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * books)."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the item in the list"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            items.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DONE + items.get(index - 1).getDescription());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Sets the category of a task identified by the task index number in the task list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setCategory(int index, String category) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.get(index - 1).setCategory(category);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_CATEGORY + items.get(index - 1).toString());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Finds and lists all tasks in the task list whose description contains the argument keywords."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param keyword the keyword to be searched in the task list"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void findTask(String keyword) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cT\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (items.get(i).getDescription().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                matchingTasks.add(items.get(i));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                message \u003d message + \"\\n     \" + count + \".\" + items.get(i).toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!message.equals(\"\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_FIND + message);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the size of the task list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the size of the task list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves a task using the given index."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task to be retrieved"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the task in the task list at the given index"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public T get(int index) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Sets the priority of a task at the given index."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index    the index of the task to set priority."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param priority the priority to set the task at."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setPriority(int index, int priority) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.get(index - 1).setPriority(priority);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_SET_PRIORITY + items.get(index - 1).getPriority());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Sets the date of a task at the given index."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task to set priority."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param date  the date to set the task at."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setDate(int index, String date) throws DukeException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e items.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            items.get(index - 1).setDateFromString(date);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DATE + items.get(index - 1).toString());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 8,
      "GuoAi": 251,
      "Cao-Zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Link.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "public class Link extends Item {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    protected String url;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructor used when adding a new Zoom link."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param module the name of the module."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param type the type of the zoom link."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param url the Zoom link."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Link(String module, String type, String url) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        super(url);//this is weird"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public  String getType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return this.url;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String linkToString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String returnString \u003d this.getModule() + \" \" + this.getType() + \"\\n       \" + this.getUrl();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public String linkToFile() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String returnString \u003d this.getModule() + \" | \" + this.getType() + \" | \" + this.getUrl();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/LinkList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "public class LinkList extends ItemList\u003cLink\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private ArrayList\u003cLink\u003e links;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructs an empty link list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public LinkList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Constructs a link list with the given links."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param links An ArrayList of {@code Link}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public LinkList(ArrayList\u003cLink\u003e links) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.links \u003d links;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the list of links."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return An ArrayList of {@code Link}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ArrayList\u003cLink\u003e getLinks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Adds a link to the link list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param link the link to be added in to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void addLink(Link link) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        links.add(link);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADD_LINK + link.linkToString() + Messages.MESSAGE_LINK_STATUS_FIRST"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                + links.size() + Messages.MESSAGE_LINK_STATUS_LAST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the size of the link list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return the size of the link list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Retrieves the i-th link in the link list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param i the index of the desired link."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @return the i-th link in the link list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Link get(int i) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        return links.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Lists all the links in the link list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void listLink() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (links.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LINK_LIST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c links.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + links.get(i).linkToString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LINK_LIST + message);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Deletes a link from the list, identified by the index of the link in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param index the index of the link in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void deleteLink(int index) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (index \u003e links.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_LINK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Link linkRemoved \u003d links.get(index - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE_LINK + linkRemoved.linkToString() + Messages.MESSAGE_LINK_STATUS_FIRST"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    + (links.size() - 1) + Messages.MESSAGE_LINK_STATUS_LAST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            links.remove(index - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 100
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/ListType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public enum ListType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    TASK_LIST, BOOK_LIST, CREDIT_LIST, LINK_LIST"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 4,
      "MuhammadHoze": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Task extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.setPriority(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isDone true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param priority the priority of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Task(String description, boolean isDone, int priority) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "GuoAi": 27,
      "Cao-Zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class TaskList extends ItemList\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param tasks an ArrayList of tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.items \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a list of tasks to the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param newTaskList ArrayList of new tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addTasksFromList(ArrayList\u003cTask\u003e newTaskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (newTaskList.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_ADD_MULTIPLE_TASK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            for (Task task: newTaskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                items.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                Ui.dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_STATUS_FIRST + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds a todo task to the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        items.add(newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADDTASK + newTask.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + items.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 23,
      "MuhammadHoze": 1,
      "GuoAi": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Text UI of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private static Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Shows the divider line."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(Messages.DIVIDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints messages to the user in a structured format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param message the messaged to be printed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void dukePrint(String message) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void dukePrintMultiple(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints a calendar from a given task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param currentDate Date of the current day."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param daysToPrint Number of days of tasks being printed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void dukePrintCalendar(LocalDate currentDate, ArrayList\u003cTask\u003e taskList, int daysToPrint) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert daysToPrint \u003e\u003d 0 : \"Days should be a positive integer\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintCalendarHeading(currentDate, taskList, daysToPrint);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintCalendarTasks(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the heading of the calendar."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param date Date to be printed in the heading."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param daysToPrint Number of days of tasks being printed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintCalendarHeading(LocalDate date, ArrayList\u003cTask\u003e taskList, int daysToPrint) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (taskList.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dukePrintMultiple(\"You have no tasks for the next \" + daysToPrint + \" day(s).\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(\"Today\u0027s date is: \" + date.format(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(\"Here\u0027s your tasks for the next \" + daysToPrint + \" day(s).\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the tasks in the calendar."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param taskList ArrayList of Task to print the tasks from."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintCalendarTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintDayHeading(task.getDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            LocalDate previousTaskDate \u003d taskList.get(i - 1).getDate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (task.getDate().compareTo(previousTaskDate) !\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                dukePrintDayHeading(task.getDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Prints the heading in the calendar for a certain date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param date Date of the heading."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private static void dukePrintDayHeading(LocalDate date) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrintMultiple(date.getDayOfWeek().toString() + \" - \" + date.format(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(Messages.LOGO);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrint(\"Hello! I\u0027m termiNus.\\n     What can I do for you?\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the goodbye message after the termination of the application."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        dukePrint(Messages.MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the error message to the user if an error occurs."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param e the {@code DukeException} representing the error occurred"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showError(DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        dukePrint(e.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Formats the date time from user input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param time the date time from user input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted date time string"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DateTimeParseException if the user input date time is not in the specified format"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static String formatDateTime(String time) throws DateTimeParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyy HH:mm\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        LocalDateTime formattedDateTime \u003d LocalDateTime.parse(time, inputFormatter);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String returnString \u003d formattedDateTime.format(outputFormatter);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 69,
      "MuhammadHoze": 4,
      "GuoAi": 80
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    static final String LOGO \u003d \"     _                           _  _   _\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |                         (_)| \\\\ | |\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |_   ___  _ __  _ __ ___   _ |  \\\\| | _   _  ___\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | __| / _ \\\\| \u0027__|| \u0027_ ` _ \\\\ | || . ` || | | |/ __|\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |_ |  __/| |   | | | | | || || |\\\\  || |_| |\\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\\__| \\\\___||_|   |_| |_| |_||_|\\\\_| \\\\_/ \\\\__,_||___/\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Testing\\n\" + LOGO);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 8,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommand_addsTodo() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap).execute(listMap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(description, taskList.get(0).getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommandWithPriority_addsTodoWithPriority() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputPriority \u003d \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap).execute(listMap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(Integer.parseInt(inputPriority), taskList.get(0).getPriority());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommandWithCategory_addsTodoWithCategory() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputCategory \u003d \"cs2113\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"c\", inputCategory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap).execute(listMap);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(inputCategory, taskList.get(0).getCategory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithInvalidPriority_throwsException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputPriority \u003d \"-2\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap).execute(listMap);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        inputPriority \u003d \"a\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap).execute(listMap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithDate_addsCommandWithDate() throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        final Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputDate \u003d \"13-05-2020\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedDateString \u003d \"13 May 2020\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap).execute(listMap);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedDateString, taskList.get(0).getDateString(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithInvalidDate_throwsException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputDate \u003d \"13-13-2020\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap).execute(listMap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        inputDate \u003d \"blah\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap).execute(listMap);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 119
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/CategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class CategoryCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validCategory_setsNewCategory() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String category \u003d \"test category\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Command categoryCommand \u003d new CategoryCommand(index + 1, category);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(null, tasks.get(index).getCategory());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        categoryCommand.execute(listMap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(category, tasks.get(index).getCategory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 10,
      "GuoAi": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class DateCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validDate_setsNewDate() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", \"13-05-2020\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dateCommand.execute(listMap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"13 May 2020\", tasks.get(0).getDateString(Task.DATETIME_PRINT_FORMAT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_invalidDate_throwsException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", \"xx-yy-zzzz\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dateCommand.execute(listMap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_noDate_throwsException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command dateCommand \u003d new DateCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            dateCommand.execute(listMap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 64
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    void execute_validPriority_deleteTasksWithSamePriority() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    void execute_validTaskIndex_deleteIndividualTasks() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    void execute_validPriority_listsTasksWithSamePriority() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/SetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.ListType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class SetCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validPriority_setsNewPriority() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int initialPriority \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int newPriority \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", Integer.toString(newPriority));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(initialPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        setCommand.execute(listMap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(newPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_negativePriority_throwsException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int newPriority \u003d -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", Integer.toString(newPriority));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setCommand.execute(listMap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_invalidPriority_throwsException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String newPriority \u003d \"a\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Map\u003cListType, ItemList\u003e listMap \u003d new EnumMap\u003c\u003e(ListType.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        listMap.put(ListType.TASK_LIST, new TaskList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d (TaskList) listMap.get(ListType.TASK_LIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", newPriority);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setCommand.execute(listMap);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 68
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.DateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.SetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validAddCommand_returnsAddCommand() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"add tP meeting p/1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidAddCommand_throwsException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"add\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validSetCommand_returnsSetCommand() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"set 1 p/0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof SetCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidSetCommand_throwsException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"set p/-1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validDateCommand_returnsDateCommand() throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"date 1 date/05-05-2020\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof DateCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidDateCommand_throwsException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommandWrongIndex \u003d \"date a date/05-05-2020\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.parse(fullCommandWrongIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_validCommand_parseArgumentsCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting by/16-09-23:59 at/15-09-2020-11:00 p/1\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"16-09-23:59\", argumentsMap.get(\"by\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"15-09-2020-11:00\", argumentsMap.get(\"at\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"1\", argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_duplicateArguments_throwsException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting c/cs2113 p/1 p/2\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_multipleBackslash_parsesCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting p/23/24 c/cs2/1/13\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"23/24\", argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"cs2/1/13\", argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_validCommand_returnsDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting by/16-09-23:59 at/15-09-2020-11:00 p/1\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"add tP meeting\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, parsedString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_noArguments_returnsDescription() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"tP meeting\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(testCommand, parsedString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_extraSpaces_trimsSpaces() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"     tP meeting   c/cs2113  p/1 \";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"tP meeting\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, parsedString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkAllowedArguments_argumentNotAllowed_throwsException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashSet\u003cString\u003e allowedArguments \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", \"1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"i\", \"2\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, allowedArguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 123
    }
  },
  {
    "path": "src/test/java/seedu/duke/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getDescription_inputDescription_returnsCorrectDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputString \u003d \"test description\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(inputString);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(inputString, todo.getDescription());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getIsDone_isDone_returnsFalseByDefault() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(todo.getIsDone());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void markAsDone_setIsDone_todoSetAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(todo.getIsDone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(todo.getIsDone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void toFile_getToFile_returnsCorrectString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fileString \u003d todo.toFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"T | 0 | test description | 0 |  | \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, fileString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void testToString_toString_returnsCorrectString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String todoString \u003d todo.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"[T][N] test description (p:0)\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, todoString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void todo_noInputPriority_setsDefaultPriority() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(0, todo.getPriority());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void setPriority_validPriority_setsCorrectPriority() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Task todo \u003d new Task(\"test description\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        todo.setPriority(5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(5, todo.getPriority());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 60
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add iP meeting"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add other meeting p/3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add tP meeting p/5 c/cs2113"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add tP meeting p/2 c/cs2113 invalid/argument"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "list tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "find book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Revengers Assemble!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5,
      "GuoAi": 7,
      "Cao-Zeyu": 3
    }
  }
]
