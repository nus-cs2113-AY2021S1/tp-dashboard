[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    archiveBaseName \u003d \"termiNus\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 2,
      "-": 45
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | GuoAi | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zeyu Cao | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Muhammad | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jia Jun | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Antonio | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 5,
      "-": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# termiNus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Hello! I\u0027m termiNus."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "termiNus is an interactive task manager for students in NUS."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 16,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "# termiNus User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     _                           _  _   _"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |                         (_)| \\ | |"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_   ___  _ __  _ __ ___   _ |  \\| | _   _  ___"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | __| / _ \\| \u0027__|| \u0027_ ` _ \\ | || . ` || | | |/ __|"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    | |_ |  __/| |   | | | | | || || |\\  || |_| |\\__ \\"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     \\__| \\___||_|   |_| |_| |_||_|\\_| \\_/ \\__,_||___/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Hello! I\u0027m termiNus."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "termiNus is an interactive task manager for students in NUS."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Down the latest version of `termiNus` from [here](http://link.to/duke)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Navigate to the folder containing `termiNus.jar` in the terminal."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "1. Run termiNus by using `java -jar termiNus.jar`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Adding a task: `add`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a new item to the list of todo items."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `add \u003cdescription\u003e \u003coptional arguments\u003e`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List of `\u003coptional arguments\u003e`:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `p/\u003cnumber\u003e` sets the priority of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `c/\u003ccategory\u003e` sets the category of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "- `date/\u003cdd-MM-yyyy\u003e` sets the date of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: By default, there is no category and date, and the priority is set to 0."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`add tP meeting`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`add tP meeting c/cs2113`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`add tP meeting c/cs2113 p/1 date/13-05-2020`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [T][N] tP meeting (p:1) (category: cs2113) (date: 13 May 2020)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Listing tasks: `list`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Lists all the tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] tP meeting (p:1) (category: cs2113)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     3.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Listing tasks with given priority: `list`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Lists all the tasks with the given priority."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `list p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`list p/2`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the tasks of this priority in your list:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] assignment submission (p:2) (category: cg2028)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "### Listing tasks with given category: `list`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Lists all the tasks with the given category."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Format: `list c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "`list c/cs2113`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     Here are the tasks of this category in your list:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     1.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     2.[T][N] lecture quiz (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Setting priority of task: `set`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Sets the priority of an existing task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `set \u003ctaskIndexNumber\u003e p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`set 1 p/3`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`set 2 p/4`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I\u0027ve set the priority of this task to: 4"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Setting category of a task: `category`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Sets the category of an existing task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `category \u003ctaskIndexNumber\u003e c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`category 1 c/CCA`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I have set the category of this task:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [T][N] tP meeting (p:0) (category: CCA)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Mark task as done: `done`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Marks a given task as done."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `done \u003ctaskIndexNumber\u003e`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "       [Y] tP meeting"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting a task: `delete`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Deletes a task from the list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `delete \u003ctaskIndexNumber\u003e`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ":triangular_flag_on_post: `\u003ctaskIndexNumber\u003e` corresponds to the index given on `list` command output."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "       [T][N] iP meeting (p:2)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting all tasks of a certain priority: `delete`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks of the same priority"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `delete p/\u003cpriority\u003e`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete p/2`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed all these task(s) with the same priority:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] tP meeting (p:2)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] iP meeting (p:2)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "### Deleting all tasks of a certain category: `delete`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks of the same category"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Format: `delete c/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`delete c/cs2113`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```    "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve removed all these task(s) with the same category:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][Y] tP meeting (p:0) (category: cs2113)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     [T][N] iP meeting (p:0) (category: cs2113)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Clearing all tasks: `clear`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Clears all tasks from the list "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     Noted. I\u0027ve cleared all your tasks."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "```"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Searching tasks: `find`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Finds all tasks with matching description (case-insensitive)."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`find meeting`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     1.[T][Y] tP meeting (p:1) (category: cs2113)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     2.[T][N] iP meeting (p:2) (category: cs2113)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Getting help: `help`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Prints the help message for commands."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     add: Adds a task to the task list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: TASK_NAME \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: add example_task \u003coptional arguments\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     bye: Exits the program."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: bye"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     category: Sets the category of a task identified by the task index number in the task list"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX c/CATEGORY"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: category 1 c/Academics"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     clear: Clears all tasks in the task list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: clear"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     delete: Deletes the task identified by the index number used in the task listing."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: delete 1"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     done: Marks the task identified by the index number used in the task listing as done."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: done 1"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     find: Finds all tasks whose descriptions contain any of the specified keywords (case-insensitive) and displays them as a list with index numbers."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: KEYWORDS"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: find book"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     help: Shows program usage instructions."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: help"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     list: Displays all tasks in the task list as a list with index numbers."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: list"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 1: p/PRIORITY"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Displays all the tasks with PRIORITY as a list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Example: list p/1"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Optional parameter 2: c/CATEGORY"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Displays all the tasks with CATEGORY as a list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "          Example: list c/cs2113"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     set: Sets the task identified by the index number used in the task listing to the new priority."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Parameters: INDEX p/PRIORITY"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Example: set 1 p/2"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "### Exiting the program: `bye`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Terminates the program."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "```"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Frequently Asked Questions"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "**A**: `./tasks.txt` stores the user data, which can be transferred to another computer or instance of the program by"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "putting it in the same folder as `termiNus.jar`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "## Quick Command Reference"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Action | Command | Example"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "----- | ------ | ------"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Add task | `add \u003cdescription\u003e \u003coptional arguments\u003e` | `add tP meeting c/cs2113`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List tasks | `list` | `list`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "List tasks with priority | `list p/\u003cpriority\u003e` | `list p/2`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set priority of task | `set \u003ctaskIndexNumber\u003e p/\u003cpriority\u003e` | `set 1 p/2`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Set category of task | `category \u003ctaskIndexNumber\u003e c/\u003ccategory\u003e` | `category 1 c/CCA`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Mark task as done | `done \u003ctaskIndexNumber\u003e` | `done 1`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Delete task | `delete \u003ctaskIndexNumber\u003e` | `delete 2`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks by priority | `delete p/\u003cpriority\u003e` | `delete p/2`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "Delete tasks by category  | `delete c/\u003ccategory\u003e` | `delete c/cs2113`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Clear all tasks | `clear` | `clear`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Find tasks matching keyword | `find \u003ckeyword\u003e` | `find meeting`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Getting help | `help` | `help`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "Exiting the program | `bye` | `bye`"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 249,
      "MuhammadHoze": 79,
      "-": 27,
      "Cao-Zeyu": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private static final Logger dukeLogger \u003d Logger.getLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.showError(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NEW_FILE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Reads the user command and executes it, until the user issues the bye command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.showWelcome();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                String fullCommand \u003d Ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                c.execute(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                storage.save(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                Ui.showError(e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        dukeLogger.log(Level.INFO,\"Logging started\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        new Duke(Storage.DEFAULT_STORAGE_FILEPATH).run();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 5,
      "GuoAi": 42,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Signals an error caused by Duke commands and operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Adds a task to the task list.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: TASK_NAME \u003coptional arguments\u003e\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" example_task \u003coptional arguments\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\", \"c\", \"date\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public AddCommand(String description, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param tasks a TaskList object containing all tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Todo newTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"p\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int newPriority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                newPriority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (newPriority \u003c 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            newTodo.setPriority(newPriority);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (argumentsMap.containsKey(\"c\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (argumentsMap.get(\"c\") !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                newTodo.setCategory(argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (argumentsMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            newTodo.setDateFromString(argumentsMap.get(\"date\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTask(newTodo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 56,
      "GuoAi": 5,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.exit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 24,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Sets the category of a task identified by its index in the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class CategoryCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"category\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \": Sets the category of a task identified by the task index number in the task list\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: INDEX c/CATEGORY\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1 c/Academics\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public CategoryCommand(int index, String category) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.setCategory(index, category);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "GuoAi": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Clears all tasks in the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all tasks in the task list.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.clearTask();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 17,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Represents a general command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return whether to exit Duke application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param tasks a TaskList object containing all tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public abstract void execute(TaskList tasks) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 8,
      "GuoAi": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CommandCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class CommandCreator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns an AddCommand with given arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return AddCommand with given arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException When description is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createAddCommand(String description, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return new AddCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Creates and returns a SetCommand with given arguments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param fullCommand Full command given by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap HashMap containing optional arguments."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return SetCommand with given arguments."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException When invalid arguments are given."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static Command createSetCommand(String fullCommand, HashMap\u003cString, String\u003e argumentsMap)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return new SetCommand(Integer.parseInt(fullCommand.split(\" \")[1]), argumentsMap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Deletes a Task identified by its index in the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \": Deletes the task identified by the index number used in the task listing.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 1: p/PRIORITY\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Deletes all the tasks with PRIORITY.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Example: \" + COMMAND_WORD + \" p/1\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 2: c/CATEGORY\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Deletes all the tasks with CATEGORY.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Example: \" + COMMAND_WORD + \" c/cs2113\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private boolean hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private String categoryValue \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private int priorityIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    private static final Logger deleteCommandLogger \u003d Logger.getLogger(DeleteCommand.class.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(int index) { // for single delete"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert index \u003e 0 : \"Task number should be greater than 0\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasPriorityValue \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        this.hasCategoryValue \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public DeleteCommand(String inputValue) {  // for both priority + category"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (inputValue.startsWith(\"p\")) {  // for priority"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasPriorityValue \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.priorityIndex \u003d Integer.parseInt(inputValue.substring(2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            //deleteCommandLogger.log(Level.WARNING, \"Priority should be non-negative\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else { // for category"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.hasCategoryValue \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            this.categoryValue \u003d inputValue.substring(2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            //deleteCommandLogger.log(Level.WARNING, \"Priority should be non-negative\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        ArrayList\u003cTask\u003e taskDeleted \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        boolean isCategory \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (hasPriorityValue) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (priorityIndex \u003c 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            for (int i \u003d tasks.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getPriority() \u003d\u003d priorityIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    taskDeleted.add(tasks.get(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    tasks.deletePriorityOrCategoryTask(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (taskDeleted.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.displayDeletedPriorityOrCategoryTask(taskDeleted,isCategory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else if (hasCategoryValue) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            isCategory \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            for (int i \u003d tasks.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getCategory() \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    continue; //ignore if category is not set for the task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getCategory().equals(categoryValue)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    taskDeleted.add(tasks.get(i));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    tasks.deletePriorityOrCategoryTask(i);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            if (taskDeleted.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            tasks.displayDeletedPriorityOrCategoryTask(taskDeleted,isCategory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 66,
      "GuoAi": 23,
      "Cao-Zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Marks a Task, identified by its index in the task list, as done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \": Marks the task identified by the index number used in the task listing as done.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.markAsDone(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 25,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Finds and lists all tasks in the task list whose description contains the argument keywords."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose descriptions contain any of \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"     Parameters: KEYWORDS\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" book\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.findTask(keyword);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 26,
      "yh-ng": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        list of help commands is in alphabetical order"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "        String message \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ByeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + CategoryCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + \"\\n\\n     \" + DoneCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + \"\\n\\n     \" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "                + \"\\n\\n     \" + SetCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yh-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(message);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 21,
      "yh-ng": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Lists all tasks in the task list to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \": Displays all tasks in the task list as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 1: p/PRIORITY\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Displays all the tasks with PRIORITY as a list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Example: \" + COMMAND_WORD + \" p/1\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Optional parameter 2: c/CATEGORY\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Displays all the tasks with CATEGORY as a list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"          Example: \" + COMMAND_WORD + \" c/cs2113\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private final boolean hasPriority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private final boolean hasCategory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static int listSize;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static int newListSize;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(int priority) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public ListCommand(String category) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasPriority \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.hasCategory \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param tasks a TaskList object containing all tasks"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        listSize \u003d tasks.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (priority \u003c 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                if (tasks.get(i).getPriority() \u003d\u003d priority) { //if the task matches the same priority input by user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                    newTasks.add(tasks.get(i)); // add the task into arraylist (newTasks)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks); //created a new object called newTaskList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask(priority);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else if (hasCategory) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getCategory() \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (tasks.get(i).getCategory().equals(category)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    newTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask(category);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                newTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(newTasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            newTaskList.listTask();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        newListSize \u003d newTasks.size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public int getSize(Boolean isNew) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (isNew) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return newListSize;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return listSize;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 4,
      "GuoAi": 17,
      "Cao-Zeyu": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \": Sets the task identified by the index number used in the task listing to the new priority.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Parameters: INDEX p/PRIORITY\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"     Example: \" + COMMAND_WORD + \" 1 p/2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final HashSet\u003cString\u003e ALLOWED_ARGUMENTS \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    private final HashMap\u003cString, String\u003e argumentsMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public SetCommand(int index, HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.argumentsMap \u003d argumentsMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param tasks a TaskList object containing all tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            priority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (priority \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.setPriority(index, priority);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String DIVIDER \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "    public static final String LOGO \u003d \"     _                           _  _   _\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |                         (_)| \\\\ | |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |_   ___  _ __  _ __ ___   _ |  \\\\| | _   _  ___\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | __| / _ \\\\| \u0027__|| \u0027_ ` _ \\\\ | || . ` || | | |/ __|\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"    | |_ |  __/| |   | | | | | || || |\\\\  || |_| |\\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yh-ng"
        },
        "content": "            + \"     \\\\__| \\\\___||_|   |_| |_| |_||_|\\\\_| \\\\_/ \\\\__,_||___/\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_ADDTASK \u003d \"Got it. I\u0027ve added this task:\\n       \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_STATUS_FIRST \u003d \"\\n     Now you have \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_STATUS_LAST \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_LIST \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_LIST_WITH_PRIORITY \u003d \"Here are the tasks of this priority in your list:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_LIST_WITH_CATEGORY \u003d \"Here are the tasks of this category in your list:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST \u003d \"There are no tasks in your list. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"Your task list is empty.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST_WITH_PRIORITY \u003d \"There are no tasks of this priority in your list. \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST_WITH_CATEGORY \u003d \"There are no tasks of this category in your list. \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Noted. I\u0027ve removed this task:\\n       \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_WITH_PRIORITY \u003d \"Noted. I\u0027ve removed all these task(s) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"with the same priority:\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_WITH_CATEGORY \u003d \"Noted. I\u0027ve removed all these task(s) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"with the same category:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_CLEAR \u003d \"Noted. I\u0027ve cleared all your tasks.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String WARNING_NO_TASK \u003d \"You do not have this task in the list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n       [Y] \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_CATEGORY \u003d \"Nice! I have set the category of this task:\\n       \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_SET_PRIORITY \u003d \"Nice! I\u0027ve set the priority of this task to: \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_COMMAND \u003d \":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"Please enter valid commands :-(\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_SPACE \u003d \";( OOPS!! Detected an empty spacing. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"Please remove any unwanted spaces\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_DUPLICATE_ARGUMENTS \u003d \";( OOPS!! You have duplicate arguments! \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_INVALID_ARGUMENTS \u003d \":( OOPS!!! You have invalid arguments\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DESCRIPTION \u003d \":( OOPS!!! The description of a task cannot be empty.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_CATEGORY \u003d \":( OOPS!!! Please input a valid category using the format \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"c/CATEGORY.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CATEGORY_BODY \u003d \":( OOPS!!! The body of a category command cannot be \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"empty.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String EXCEPTION_INVALID_DATE \u003d \":( OOPS!!! The format of your date should be dd-MM-yyyy.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String EXCEPTION_EMPTY_PRIORITY \u003d \":( OOPS!!! The priority cannot be empty.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_CATEGORY \u003d \":( OOPS!!! The category cannot be empty.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_DEADLINE \u003d \":( OOPS!!! The deadline of a task cannot be empty.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_EMPTY_TIME \u003d \":( OOPS!!! The time of an event task cannot be empty.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_DEADLINE \u003d \"Please enter your deadline in the correct format.\\n     \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"Example: deadline return book /by Sunday\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_EVENT \u003d \"Please enter your event in the correct format.\\n     \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"Example: event project meeting /at Mon 2-4pm\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_INVALID_INDEX \u003d \"Please input a valid task index.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_INVALID_PRIORITY \u003d \"Invalid priority number.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static final String EXCEPTION_CATEGORY_NOT_FOUND \u003d \"Invalid category.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_LOAD_FILE \u003d \"The file cannot be loaded. \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            + \"Maybe this is your first time using termiNus?\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_SAVE_FILE \u003d \":( OOPS!!! Cannot save to file.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String MESSAGE_NEW_FILE \u003d \"I have created a new tasks.txt file for you. :) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"Type some commands and see it.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String WARNING_DATETIME \u003d \"If you want your DateTime to be formatted, \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            + \"you can input in this format: yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String EXCEPTION_FIND \u003d \":( OOPS!!! The keyword of a find command cannot be empty.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public static final String EXCEPTION_INVALID_LIST_COMMAND \u003d \":( OOPS!!! Please input a valid list command \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            + \"using the format \\\"list p/PRIORITY\\\", or \\\"list\\\".\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 4,
      "MuhammadHoze": 8,
      "GuoAi": 42,
      "yh-ng": 6,
      "Cao-Zeyu": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Utils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Utility methods."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convert strings (either \"0\" or \"1\") to booleans (false or true respectively)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param str input string (either \"0\" or \"1\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return false if input string is \"0\", true otherwise"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static boolean stringToBoolean(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (str.equals(\"0\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.CategoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.CommandCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.SetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final String ARGUMENT_REGEX \u003d \"([\\\\w]+/[^\\\\s]+)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static final Logger parserLogger \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param fullCommand full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if user input commands are not in the standard format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String rootCommand \u003d fullCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String commandString \u003d fullCommand.replaceFirst(rootCommand, \"\").trim(); // full command without rootCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d removeArgumentsFromCommand(commandString, ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d getArgumentsFromRegex(commandString, ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        switch (rootCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, AddCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createAddCommand(description, argumentsMap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            checkAllowedArguments(argumentsMap, SetCommand.ALLOWED_ARGUMENTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return CommandCreator.createSetCommand(fullCommand, argumentsMap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        case CategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                index \u003d Integer.parseInt(commandString.split(\" \")[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!argumentsMap.containsKey(\"c\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (argumentsMap.get(\"c\").trim().equals(\"\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_EMPTY_CATEGORY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new CategoryCommand(index, argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (fullCommand.equals(\"list\")) { //list every tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            int priority;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            String category;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            if (commandString.contains(\"p/\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (argumentsMap.get(\"p\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_EMPTY_PRIORITY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    priority \u003d Integer.parseInt(argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand(priority);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            } else if (commandString.contains(\"c/\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                if (argumentsMap.get(\"c\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                    throw new DukeException(Messages.EXCEPTION_EMPTY_CATEGORY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                category \u003d argumentsMap.get(\"c\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                return new ListCommand(category);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_LIST_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                if (commandString.contains(\"p\")) { // for priority"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    return new DeleteCommand(commandString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                } else if (commandString.contains(\"c\")) { // for category"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    return new DeleteCommand(commandString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                    return new DeleteCommand(Integer.parseInt(commandString));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                return new DoneCommand(Integer.parseInt(commandString));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                return new FindCommand(commandString.trim());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_FIND);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        case ByeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Parses the command and obtain arguments in the form (keyword)/(argument)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString Command substring to be parsed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentRegex  The regex to match arguments against."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return A HashMap of keyword-argument pairs containing the matched arguments."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static HashMap\u003cString, String\u003e getArgumentsFromRegex(String argumentString, String argumentRegex)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Pattern argumentPattern \u003d Pattern.compile(argumentRegex);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d argumentPattern.matcher(argumentString);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        StringBuilder log \u003d new StringBuilder(\"Optional arguments: \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            String[] currentArgument \u003d matcher.group().trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (argumentsMap.containsKey(currentArgument[0])) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_DUPLICATE_ARGUMENTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            argumentsMap.put(currentArgument[0], currentArgument[1]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            log.append(currentArgument[0]).append(\"/\").append(currentArgument[1]).append(\" \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        parserLogger.log(Level.FINER, log.toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return argumentsMap;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Removes arguments from the command string."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentString Command substring to remove arguments from."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentRegex  Regex to match the arguments."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return String with matched patterns removed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static String removeArgumentsFromCommand(String argumentString, String argumentRegex) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Pattern argumentPattern \u003d Pattern.compile(argumentRegex);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Matcher matcher \u003d argumentPattern.matcher(argumentString);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d argumentString.replaceAll(argumentRegex, \"\").trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            int argumentStartIndex \u003d matcher.start();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            description \u003d argumentString.substring(0, argumentStartIndex).trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        parserLogger.log(Level.FINER, \"Description: \" + description);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Checks if the user passed in an invalid optional argument for a given command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param argumentsMap     HashMap containing optional arguments."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param allowedArguments HashSet containing allowed arguments."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @throws DukeException If argumentsMap contains invalid arguments not in allowedArguments."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static void checkAllowedArguments(HashMap\u003cString, String\u003e argumentsMap, HashSet\u003cString\u003e allowedArguments)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        for (HashMap.Entry\u003cString, String\u003e entry : argumentsMap.entrySet()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            if (!allowedArguments.contains(entry.getKey())) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                throw new DukeException(Messages.EXCEPTION_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 103,
      "MuhammadHoze": 30,
      "GuoAi": 57,
      "Cao-Zeyu": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Used to load and save task list data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /** Default file path used. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Loads the task list data from the storage, and then returns it."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return ArrayList of {@code Task} from the storage file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if the storage file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_LOAD_FILE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            String[] taskParts \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            task \u003d new Todo(taskParts[2].trim(), Utils.stringToBoolean(taskParts[1].trim()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    Integer.parseInt(taskParts[3].trim()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (taskParts.length \u003e 4) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                task.setCategory(taskParts[4]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Saves the {@code TaskList} data to the storage file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param tasks the {@code TaskList} to be saved to the storage file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DukeException if there were errors storing data to file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String taskString \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            taskString \u003d taskString + tasks.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fw.write(taskString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_SAVE_FILE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 83
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static DateTimeFormatter DATETIME_PARSE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public static DateTimeFormatter DATETIME_PRINT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    protected String category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor used when adding a new task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * By default, the deadline task is not done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.setPriority(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isDone true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "     * @param priority the priority of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public Task(String description, boolean isDone, int priority) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the description of a task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the description string of the task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves whether the task in done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return true if the task is done already, false otherwise"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be saved into the storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted string to be saved into the storage file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public abstract String toFile();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Converts the attributes of the task into a formatted string to be displayed to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted string to be displayed to the user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Retrieves the priority of a task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @return Priority of the task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the category of a task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return Category of the task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the priority of a task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param priority New priority of the task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        assert priority \u003e\u003d 0 : \"Priority should be non-negative\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setDateFromString(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assert dateString !\u003d null : \"dateString should not be null.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            date \u003d LocalDate.parse(dateString, DATETIME_PARSE_FORMAT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            throw new DukeException(Messages.EXCEPTION_INVALID_DATE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        return date.format(DATETIME_PRINT_FORMAT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 52,
      "MuhammadHoze": 1,
      "GuoAi": 83,
      "Cao-Zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs a task list with the given tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param tasks an ArrayList of Task objects"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return an ArrayList of {@code Task}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Adds a task to the task list from the parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param task Task to be added to the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADDTASK + task.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "                + tasks.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Adds a todo task to the task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void addTodo(String description) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Todo newTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.add(newTodo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_ADDTASK + newTodo.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                + tasks.size() + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Deletes a task from the list, identified by the index of the task in the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Task taskRemoved \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DELETE + taskRemoved.toString() + Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                    + (tasks.size() - 1) + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.remove(index - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void deletePriorityOrCategoryTask(int taskIndex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void displayDeletedPriorityOrCategoryTask(ArrayList\u003cTask\u003e taskDeleted, boolean isCategory) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        if (isCategory) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_TASK_WITH_CATEGORY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrintMultiple(Messages.MESSAGE_DELETE_TASK_WITH_PRIORITY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Collections.reverse(taskDeleted);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        for (Task task : taskDeleted) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            Ui.dukePrintMultiple(task.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.dukePrintMultiple(Messages.MESSAGE_STATUS_FIRST"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "                + (tasks.size()) + Messages.MESSAGE_STATUS_LAST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        Ui.showLine();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Lists all the tasks in the task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + tasks.get(i).toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST + message);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public void listTask(int priority) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST_WITH_PRIORITY);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + tasks.get(i).toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST_WITH_PRIORITY + message);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    public void listTask(String category) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_EMPTY_LIST_WITH_CATEGORY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "            message \u003d message + \"\\n     \" + (i + 1) + \".\" + tasks.get(i).toString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_LIST_WITH_CATEGORY + message);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Clears all the tasks in the task list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void clearTask() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Ui.dukePrint(Messages.MESSAGE_CLEAR);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Marks the task, identified by the index of the task in the task list, as done."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void markAsDone(int index) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_DONE + tasks.get(index - 1).getDescription());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Sets the category of a task identified by the task index number in the task list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void setCategory(int index, String category) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            tasks.get(index - 1).setCategory(category);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_CATEGORY + tasks.get(index - 1).toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Finds and lists all tasks in the task list whose description contains the argument keywords."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param keyword the keyword to be searched in the task list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public void findTask(String keyword) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            if (tasks.get(i).description.toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                matchingTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "                message \u003d message + \"\\n     \" + count + \".\" + tasks.get(i).toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (!message.equals(\"\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_FIND + message);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves the size of the task list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the size of the task list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Retrieves a task using the given index."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param index the index of the task to be retrieved"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the task in the task list at the given index"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * Sets the priority of a task at the given index."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param index    the index of the task to set priority."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     * @param priority the priority to set the task at."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    public void setPriority(int index, int priority) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.WARNING_NO_TASK);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            tasks.get(index - 1).setPriority(priority);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Ui.dukePrint(Messages.MESSAGE_SET_PRIORITY + tasks.get(index - 1).getPriority());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 26,
      "MuhammadHoze": 29,
      "GuoAi": 158,
      "Cao-Zeyu": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Todo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Represents a todo task in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Constructor used when adding a new todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * By default, the todo task is not done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Convenience constructor used when loading from the storage file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param isDone true if the todo task is done already, false otherwise"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public Todo(String description, boolean isDone, int priority) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String fileString \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fileString \u003d \"T | 1 | \" + description + \" | \" + priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fileString \u003d \"T | 0 | \" + description + \" | \" + priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (category !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            fileString +\u003d \" | \" + category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return fileString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String returnString \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString \u003d  \"[T][Y] \" + this.description + \" (p:\" + this.getPriority() + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString \u003d  \"[T][N] \" + this.description + \" (p:\" + this.getPriority() + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        if (category !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "            returnString +\u003d \" (category: \" + category + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            returnString +\u003d \" (date: \" + getDateString() + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 3,
      "GuoAi": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " * Text UI of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    private static Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Shows the divider line."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(Messages.DIVIDER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints messages to the user in a structured format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param message the messaged to be printed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void dukePrint(String message) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    public static void dukePrintMultiple(String message) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        System.out.println(Messages.LOGO);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        dukePrint(\"Hello! I\u0027m termiNus.\\n     What can I do for you?\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the goodbye message after the termination of the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        dukePrint(Messages.MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Prints the error message to the user if an error occurs."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param e the {@code DukeException} representing the error occurred"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static void showError(DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        dukePrint(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * Formats the date time from user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @param time the date time from user input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @return the formatted date time string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     * @throws DateTimeParseException if the user input date time is not in the specified format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    public static String formatDateTime(String time) throws DateTimeParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyy HH:mm\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        LocalDateTime formattedDateTime \u003d LocalDateTime.parse(time, inputFormatter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String returnString \u003d formattedDateTime.format(outputFormatter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 1,
      "MuhammadHoze": 4,
      "GuoAi": 80
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    static final String LOGO \u003d \"     _                           _  _   _\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |                         (_)| \\\\ | |\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |_   ___  _ __  _ __ ___   _ |  \\\\| | _   _  ___\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | __| / _ \\\\| \u0027__|| \u0027_ ` _ \\\\ | || . ` || | | |/ __|\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"    | |_ |  __/| |   | | | | | || || |\\\\  || |_| |\\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "            + \"     \\\\__| \\\\___||_|   |_| |_| |_||_|\\\\_| \\\\_/ \\\\__,_||___/\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "        System.out.println(\"Testing\\n\" + LOGO);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 8,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommand_addsTodo() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap).execute(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(description, taskList.get(0).getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommandWithPriority_addsTodoWithPriority() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputPriority \u003d \"2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap).execute(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(Integer.parseInt(inputPriority), taskList.get(0).getPriority());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validCommandWithCategory_addsTodoWithCategory() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputCategory \u003d \"cs2113\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"c\", inputCategory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap).execute(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(inputCategory, taskList.get(0).getCategory());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithInvalidPriority_throwsException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputPriority \u003d \"-2\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap).execute(taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        inputPriority \u003d \"a\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", inputPriority);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap).execute(taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithDate_addsCommandWithDate() throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputDate \u003d \"13-05-2020\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedDateString \u003d \"13 May 2020\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        new AddCommand(description, argumentsMap).execute(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedDateString, taskList.get(0).getDateString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_commandWithInvalidDate_throwsException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputDate \u003d \"13-13-2020\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap).execute(taskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        inputDate \u003d \"blah\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"date\", inputDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            new AddCommand(description, argumentsMap).execute(taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 101
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/CategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "public class CategoryCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    void execute_validCategory_setsNewCategory() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String category \u003d \"test category\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        Command categoryCommand \u003d new CategoryCommand(index + 1, category);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(null, tasks.get(index).getCategory());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        categoryCommand.execute(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        assertEquals(category, tasks.get(index).getCategory());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GuoAi": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    void execute_validPriority_deleteTasksWithSamePriority() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    void execute_validTaskIndex_deleteIndividualTasks() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MuhammadHoze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MuhammadHoze": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    void execute_validPriority_listsTasksWithSamePriority() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cao-Zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cao-Zeyu": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/SetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class SetCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_validPriority_setsNewPriority() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int initialPriority \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int newPriority \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", Integer.toString(newPriority));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(initialPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        setCommand.execute(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(newPriority, tasks.get(0).getPriority());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_negativePriority_throwsException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        int newPriority \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", Integer.toString(newPriority));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setCommand.execute(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void execute_invalidPriority_throwsException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String newPriority \u003d \"a\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", newPriority);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command setCommand \u003d new SetCommand(1, argumentsMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        tasks.addTodo(\"test description\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            setCommand.execute(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 57
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import seedu.duke.commands.SetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validAddCommand_returnsAddCommand() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"add tP meeting p/1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidAddCommand_throwsException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_validSetCommand_returnsSetCommand() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"set 1 p/0\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(command instanceof SetCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void parse_invalidSetCommand_throwsException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fullCommand \u003d \"set p/-1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_validCommand_parseArgumentsCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting by/16-09-23:59 at/15-09-2020-11:00 p/1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"16-09-23:59\", argumentsMap.get(\"by\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"15-09-2020-11:00\", argumentsMap.get(\"at\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"1\", argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_duplicateArguments_throwsException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting c/cs2113 p/1 p/2\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getArgumentsFromRegex_multipleBackslash_parsesCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting p/23/24 c/cs2/1/13\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d Parser.getArgumentsFromRegex(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"23/24\", argumentsMap.get(\"p\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(\"cs2/1/13\", argumentsMap.get(\"c\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_validCommand_returnsDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"add tP meeting by/16-09-23:59 at/15-09-2020-11:00 p/1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"add tP meeting\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, parsedString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_noArguments_returnsDescription() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"tP meeting\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(testCommand, parsedString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void removeArgumentsFromCommand_extraSpaces_trimsSpaces() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String testCommand \u003d \"     tP meeting   c/cs2113  p/1 \";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String parsedString \u003d Parser.removeArgumentsFromCommand(testCommand, Parser.ARGUMENT_REGEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"tP meeting\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, parsedString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void checkAllowedArguments_argumentNotAllowed_throwsException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashSet\u003cString\u003e allowedArguments \u003d new HashSet\u003c\u003e(Arrays.asList(\"p\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"p\", \"1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        argumentsMap.put(\"i\", \"2\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "            Parser.checkAllowedArguments(argumentsMap, allowedArguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 107
    }
  },
  {
    "path": "src/test/java/seedu/duke/task/TodoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getDescription_inputDescription_returnsCorrectDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String inputString \u003d \"test description\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Todo todo \u003d new Todo(inputString);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(inputString, todo.getDescription());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void getIsDone_isDone_returnsFalseByDefault() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Todo todo \u003d new Todo(\"test description\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(todo.getIsDone());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void markAsDone_setIsDone_todoSetAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Todo todo \u003d new Todo(\"test description\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertFalse(todo.getIsDone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertTrue(todo.getIsDone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void toFile_getToFile_returnsCorrectString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Todo todo \u003d new Todo(\"test description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String fileString \u003d todo.toFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "        String expectedString \u003d \"T | 0 | test description | 0\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, fileString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void testToString_toString_returnsCorrectString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Todo todo \u003d new Todo(\"test description\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String todoString \u003d todo.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        String expectedString \u003d \"[T][N] test description (p:0)\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(expectedString, todoString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void todo_noInputPriority_setsDefaultPriority() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Todo todo \u003d new Todo(\"test description\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(0, todo.getPriority());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    void setPriority_validPriority_setsCorrectPriority() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        Todo todo \u003d new Todo(\"test description\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        todo.setPriority(5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "        assertEquals(5, todo.getPriority());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 59,
      "GuoAi": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add iP meeting"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add other meeting p/3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add tP meeting p/5 c/cs2113"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "add tP meeting p/2 c/cs2113 invalid/argument"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamchenjiajun"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "find book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "Revengers Assemble!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GuoAi"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "iamchenjiajun": 5,
      "GuoAi": 10
    }
  }
]
