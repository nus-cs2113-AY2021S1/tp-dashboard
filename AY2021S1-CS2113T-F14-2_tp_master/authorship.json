[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    implementation \u0027commons-cli:commons-cli:1.4\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    compile \"org.apache.poi:poi:4.1.2\"\t     // For `.xls` files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    compile \"org.apache.poi:poi-ooxml:4.1.2\"\t // For `.xlsx` files"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 2,
      "k-walter": 2,
      "-": 46,
      "pinfang": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xie Yaoyue | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Walter Kong | [Github](https://github.com/k-walter) | [Portfolio](docs/team/walterkong.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wu Haitao | [Github](https://github.com/Wu-Haitao) | [Portfolio](docs/team/WuHaitao.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yen Pin Fang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wang Zihao | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 1,
      "k-walter": 1,
      "killingbear999": 1,
      "xieyaoyue": 1,
      "-": 4,
      "pinfang": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "Cent Wise Dollar Wise is a desktop application for money management, optimised for use via a Command Line Interface (CLI). This application aims to help NUS hostel students manage their financial situation and track their spending efficiently. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "This developer guide provides information on the architecture and design of the application. It will not only help you get started as a Cent Wise Dollar Wise contributer, but that you will find useful to refer to even if you are already a contributer of this project. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 2.1 Prerequisites"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "- JDK 1.8.0_60 or later \u003c/br\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "🛈 Having any Java 8 version is not enough. \u003c/br\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "🛈 This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "- IntelliJ IDE \u003c/br\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "🛈 IntelliJ by default has Gradle and JavaFx plugins installed. \u003c/br\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "🛈 Do not disable them. If you have disabled them, go to File \u003e Settings \u003e Plugins to re-enable them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 2.2 Setting up the project in your computer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "1. Fork this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "2. Open IntelliJ. If you are not in the welcome screen, click File \u003e Close Project to close the existing project dialog first."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "3. Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "4. Click Configure \u003e Project Defaults \u003e Project Structure."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "5. Click New…​ and find the directory of the JDK."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "6. Click Import Project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "7. Locate the build.gradle file and select it. Click OK"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "8. Click Open as Project"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "9. Click OK to accept the default settings"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "10. Open a console and run the command gradlew processResources (Mac/Linux: ./gradlew processResources). It should finish with the BUILD SUCCESSFUL message. This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 2.3 Verifying the setup"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "1. Run the seedu.duke.Duke and try a few commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "2. Run the tests and ensure all the tests pass."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 3. Design \u0026 implementation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "![image](https://user-images.githubusercontent.com/45732128/97327381-e083a780-18af-11eb-8fed-eb6d7de73703.png)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "The architecture diagram above explains the high-level design of the application. Given below is a quick overview of each component:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "Main: Initializes spending list at app launch and coordinates the interaction between other components"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "DukeException: Issues exceptions if there are errors in storage or wrong format of user input is detected"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "SpendingList: Stores the expenditure of the user as individual entries"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "Storage: Reads data from, and writes data to, the hard disk"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "Ui: Interacts with the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "Command: Executes the user command or system-issued command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "Parser: Analyzes the user command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "**How the architecture components interact with each other** \u003c/br\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "The sequence diagram below shows how the components interact with each other when the user issues a general command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "![image](https://user-images.githubusercontent.com/45732128/97327808-50922d80-18b0-11eb-9111-ee1880207b80.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.2 Edit Feature"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`SpendingList` and `Ui` facilitate this feature. The Edit feature is able to edit the existing items in the spending list. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `SpendingList#editItemDescription(index, description)` → updates the description of the item in the spending list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `SpendingList#editItemCategory(index, description)` → updates the category of the item in the spending list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `SpendingList#editItemAmount(index, amount)` → updates the amount of the item in the spending list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Ui#printEdit(spendingList, index)` → prints the message to show the successful completion of the edition process"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Below shows an example of the usage:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "1. User executes `edit 1 bubble tea` command to edit the first item in the spending list to bubble tea "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2. The `edit` command calls the `EditCommand#execute(spendingList, ui)` to complete the edition process"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Figure below shows the sequence diagram of `EditCommand` class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "![Sequence Diagram of EditCommand class](images/EditCommand.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.3 Convert Feature"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`SpendingList`, `Ui` and `Item` facilitate this feature. The Convert feature is able to convert the currency of the items "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "stored in the spending list. It implements the following operations:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `SpendingList#getSpendingList()` → retrieves the current spending list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `ConvertCommand#identifyCurrency(description)` → identifies the currency after conversion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `ConvertCommand#findExchangeRate()` → finds the corresponding exchange rate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Item#editAmount(amount)` → updates the new amount after conversion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Item#editSymbol(currency)` → updates the new currency after conversion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `SpendingList#updateSpendingList()` → updates the spending list after conversion "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Ui#printConvertCurrency(outputCurrency)` → prints the message to show the successful completion of the conversion "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "process"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Below shows an example of the usage:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "1. User executes `convert SGD USD` command to convert the currency from SGD to USD"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2. The `convert` command calls the `ConvertCommand#execute(spendingList, ui)` to complete the conversion process"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Figure below shows the sequence diagram of `ConvertCommand` class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "![Sequence Diagram of ConvertCommand class](images/ConvertCommand.png)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.4 Set Budget Feature"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`Budget` and `Ui` facilitate this feature. The Set Budget feature is able to set the budget limit for the spending. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `SetBudgetCommand#identifyBudgetLimit(description)` → identifies the budget limit input by the user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Budget#addBudget(currency, budgetLimit)` → stores the budget limit with its corresponding currency"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Ui#printBudgetLimit(currency, budgetLimit)` → prints the message to show the successful completion of the setting "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "budget process"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Below shows an example of usage:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "1. User executes `set SGD 100.0` to set the budget limit to SGD 100.0"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2. The `set` command calls `SetBudgetCommand#execute(spendingList, ui)` to complete the setting budget process"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Figure below shows the sequence diagram of SetBudgetCommand class."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "![Sequence Diagram of SetBudgetCommand class](images/SetBudgetCommand.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.5 Warn Feature"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`Budget`, `SpendingList` and `Ui` facilitate this feature. The Warn feature is able to warn the user when the total "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "spending amount approaches the threshold of 90% of the budget limit or when the total spending amount exceeds "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "the budget limit. It implements the following operations:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Budget#getCurrency()` → retrieves the corresponding currency for the budget"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Budget#getBudgetLimit()` → retrieves the budget limit"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `SpendingList#getCurrentAmount()` → gets the total amount of spending in the spending list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Ui#printApproachingWarningMessage(outputCurrency, amountRemaining)` → prints the warning message that the spending "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "is approaching budget limit (i.e. exceeds the threshold value of 90% of the budget limit but not yet exceed it), with "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "the amount remaining"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Ui#printExceedingWarningMessage()` → prints the warning message that the spending has exceeded the budget limit"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Below shows an example of usage:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "1. User adds the spending to the spending list after setting the budget limit"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2. The `add` command calls `WarnCommand#execute(spendingList, ui)` to check if the user approaches or exceeds budget "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "limit "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Figure below shows the sequence diagram of WarnCommand class."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "![Sequence Diagram of WarnCommand class](images/WarnCommand.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.6 Repay Feature"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`RepaymentList` and `Ui` facilitate this feature. The Repay feature is able to store the repayment information as a "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "remainder to the user. It implements the following operations:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `RepaymentList#storeCurrentString()` → stores the repayment information to the repayment list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* `Ui#printRepay(repaymentList.returnCurrentString()` → prints the repayment information which has been successfully stored"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Below shows an example of usage:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "1. User executes `repay Johnny SGD 5.0 2020-12-20` command to add the repayment information that one has to repay "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "SGD 5.0 to Johnny before 2020-12-20"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2. The `repay` command calls the `RepayCommand#execute(spendingList, ui)` to complete the adding process"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Figure below shows the sequence diagram of `RepayCommand` class:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "![Sequence Diagram of RepayCommand class](images/RepayCommand.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.7 Summary Feature"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pinfang"
        },
        "content": "`SpendingList` and `Item` facilitate this feature. The Summary feature is able to summarise the total amount spent "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pinfang"
        },
        "content": "given a date. It implements the following operations:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pinfang"
        },
        "content": "* `Item#getDate()` → gets the date when user spent on the item"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pinfang"
        },
        "content": "* `Item#getAmount()` → gets the amount spent on the item"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pinfang"
        },
        "content": "* `SpendingList#getSpendingAmountTime(period)` → gets the total amount spent during a period"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pinfang"
        },
        "content": "* `SpendingList#getSpendingAmountCategory(category, period)` → gets the total amount spent of a given category"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Below shows an example of usage:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pinfang"
        },
        "content": "1. User executes the `summary 2020` command to get the amount spent during year 2020."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pinfang"
        },
        "content": "2. The `summary` command calls the `SpendinList#getSpendingAmount(2020)` which checks the spending date of every items"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pinfang"
        },
        "content": "stored in the memory."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pinfang"
        },
        "content": "3. If the item is spent during year 2020, the amount spent will be summed up."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Figure below shows the sequence diagram of `SummaryCommand` class:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pinfang"
        },
        "content": "![Sequence Diagram of SummaryCommand class](images/summary.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.8 Reminder Feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pinfang"
        },
        "content": "`SpendingList` and `WarnCommand` facilitate this feature. The Reminder feature is able to provide the user about the "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pinfang"
        },
        "content": "total expenditure of the current week, starting on Monday. It implements the following operations:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pinfang"
        },
        "content": "* `SpendingList#getSpendingAmountTime(period)` "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pinfang"
        },
        "content": "* `WarnCommand#execute(spendingList, ui)`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Below shows an example of usage:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pinfang"
        },
        "content": "1. User starts the application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pinfang"
        },
        "content": "2. The `Reminder` will be instantiated. The dates of the current week (starting from Monday) will be saved to a list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pinfang"
        },
        "content": "3. In the `Reminder#execute(spendinglist, ui)`, a check will be done to see if there is any budget being set by the user."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    * If no budget is being set, the total expenditure of current week will be tallied up. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    * If there is, `WarnCommand#execute(spendingList, ui)` will be called first before tallying up the expenditure. "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Figure below shows the sequence diagram of Reminder class: "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pinfang"
        },
        "content": "![Sequence Diagram of SummaryCommand class](images/reminder.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 3.9 Export Feature"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "`Workbook`, `FileOutputStream`, `SpendingList` and `Ui` facilitate this feature. The export data feature could extract the current data and export to an Excel file. It implements the following operations:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "* `Workbook#createSheet()` → creates a sheet in the workbook"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "* `SpendingList#getItem()` → gets the item waiting to be added to the workbook"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "* `Workbook#write()` → writes the data to an Excel file"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "* `Ui#printExportMessage()` → prints the message indicating that the Excel file has been created successfully"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "Below shows an example of usage:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "1. User executes the `export F:\\` command to export the data to the location `F:\\`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "2. The `export` command calls the `Workbook#createSheet()` to create an Excel workbook sheet."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "3. `SpendingList#getItem()` will be called repeatedly to get items and set the cells\u0027 values accordingly."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "3. After writing to an Excel file at the location `F:\\` using `Workbook#write()`, a prompt message will be shown by `Ui`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "Figure below shows the sequence diagram of `ExportCommand` class:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "![Sequence Diagram of ExportCommand class](images/ExportCommand.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 4. Product scope"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 4.1 Target user profile"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "The target user is NUS hostel students including both local students and international students."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "### 4.2 Value proposition"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "We observed that hostel students are encountering tight budgets due to expensive hostel fees, on top of their school "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "tuition fees. Hence, we are developing a money manager targeted at NUS hostel students. This money manager   "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Cent Wise Dollar Wise aims to help hostel students to have better financial management with limited budget. "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 5. User Stories"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "|v1.0|international student|convert local currency to foreign currency or the reverse way|trace my spending easily|"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "|v1.0|careless user|view and reset the previous input|ensure the data input is correct|"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pinfang"
        },
        "content": "|v1.0|user|have a monthly/yearly summary|know how much I had spent|"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "|v2.0|user|set a budget limit|be less likely to overspend my money|"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "|v2.0|user|be warned when my spending approaches the budget limit or exceeds the budget limit|be less likely to overspend my money|"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pinfang"
        },
        "content": "|v2.0|big spender|tag purchases according to categories|for an easier overview|"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pinfang"
        },
        "content": "|v2.0|user|have weekly reminders on how much has spent|take note of future spending|"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "|v2.0|forgetful user|include a list to summarise the repayment to others|repay the debt on time|"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 6. Non-Functional Requirements"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 7. Glossary"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 8. Instructions for manual testing"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 14,
      "killingbear999": 85,
      "xieyaoyue": 58,
      "-": 27,
      "pinfang": 42
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "Welcome to Cent Wise Dollar Wise User Guide! Cent Wise Dollar Wise is a desktop application for money management, optimised for use via a Command Line Interface (CLI). This application aims to help NUS hostel students manage their financial situation and track their spending efficiently. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "This user guide provides in-depth documentation on the application’s installation process and command features. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "1. Ensure that you have Java 11 or above installed in your computer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "2. Download the latest version of `Duke` from [here](http://link.to/duke)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "3. Copy the file to a home folder you would like to use."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "4. Open a terminal in that home folder and enter java -jar duke.jar to begin."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "5. Type the desired command and press Enter to execute it. Tips: entering help will display the help window with a list of commands that could be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "## 3. Command Features "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "In this section, specific information about each command will be explained. This includes the purpose of each command, and how it is formatted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Before we begin, do take note of the following information which applies to all commands:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* Words in UPPER_CASE are parameters that you should provide."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Example: In `-c CATEGORY`, `CATEGORY` is a parameter. `-c Food` would mean that the item belongs to the \u0027food\u0027 category."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* Parameters in square brackets (i.e. []) are options provided for you to choose to enter. You may choose one out of all."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Example: `edit INDEX [-c CATEGORY] [-d NEW DESCRIPTION]` can be used as `edit 1 [-c Food]` or `edit 1 [-c NEW DESCRIPTION]`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "* The abbreviation of `MONTH` is case sensitive. The system only accepts the abbreviation of `MONTH` with the first three letters, and the first"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "letter is capitalised. Example: `Jul` for July or `Oct` for October."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 3.1 Viewing Repayment List Summary: `repayment list`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This command shows your repayment list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`repayment list`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 3.2 Viewing Spending List Summary: `spending list`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This command shows your spending records during a specified period (a particular year or month, or both)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "You can also choose to view your spending records which belong to a specific spending category."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`spending list [YEAR] [MONTH] [-c CATEGORY] [-a]`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`spending list` → lists all entries for the current month"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`spending list 2020` → lists all entries for year 2020"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`spending list 2020 Jul` → lists all entries for July 2020"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`spending list -c Food` → lists all food entries for the current month"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`spending list 2020 -c Food` → lists all food entries for the year 2020"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`spending list 2020 Jul -c Food` → lists all food entries for July 2020"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`spending list -a` → lists all entries"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 3.3 Viewing Budget Limit: `view`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This command shows the current budget limit you have set."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`view`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 3.4 Setting Budget Limit: `set`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This command allows you to set a budget limit. You will receive a Ui warning message when your spending approaches "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "the limit or exceeds the limit."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`set -s AMOUNT`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`set -s SGD 100.0` → sets the budget limit to SGD 100.0"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 3.5 Inputting Repayment Information: `repay`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This command adds a repayment record to your repayment list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`repay -n NAME -s AMOUNT -t DEADLINE`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`repay -n Johnny -s SGD 5.0 -t 2020-12-02` → stores the information that you need to repay SGD 5.0 to Johnny before "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "2020-12-02"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 3.6 Converting Currency: `convert`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This command converts the currency in your spending list to another currency you prefer."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`convert -s INPUT_CURRENCY -t OUTPUT_CURRENCY`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`convert -s SGD -t USD` → converts the currency from SGD to USD"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "### 3.7 Viewing Summary: `summary`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This command generates a statement of your total expenditure during a specific period of time (a particular year or "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "month, or both). Statements based on each spending category will also be shown."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`summary [YEAR] [MONTH] [-a]`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pinfang"
        },
        "content": "`summary` → shows summary of current month"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pinfang"
        },
        "content": "`summary 2020` → shows summary of a specific year"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pinfang"
        },
        "content": "`summary 2020 Oct` → shows summary of a specific year and month"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pinfang"
        },
        "content": "`summary -a` → shows the summary of total expenditure"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "### 3.8 Visualizing data: `draw`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "This command generates graphs showing your spending records of a particular year or month. The graphs will be in an Excel file at the same folder of this application."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "`draw [YEAR \u003d current year] [MONTH \u003d current month]`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "`draw` → shows the graph of current month"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "`draw 2012` → shows the graph of year 2012"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "`draw 2020 Jun` → shows the graph of Jun 2020"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "### 3.9 Exporting data: `export`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "This command exports the data to an Excel file at the given location."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "`export PATH`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "`export F:\\MyFolder exports` → the records to an Excel file located at F:\\MyFolder"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pinfang"
        },
        "content": "### 3.10 Editing spending: `edit`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This command edits the existing records in the spending list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`edit INDEX [-c CATEGORY] [-d NEW DESCRIPTION] [-s NEW SPENDING]`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "`edit 1 -s SGD 4.0` → edits the amount in the first item in the spending list to SGD 4.0"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pinfang"
        },
        "content": "## 4. Useful Hidden Features"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "This section shows you the hidden features which serve as notifications and interactions with the user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pinfang"
        },
        "content": "### Reminder "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "Reminds you about your weekly expenditures, and the amount of budget left when you start the application."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pinfang"
        },
        "content": "It will also warn you if you are reaching your budget limit."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pinfang"
        },
        "content": "![reminder message](images/reminderMessage.png)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Note: A new week starts on Monday."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pinfang"
        },
        "content": "### Warning"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Warns you when you are about to overspend. The budget threshold is 90% of your budget set. After you add a spending "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pinfang"
        },
        "content": "item and the total expenditure is more than the budget threshold, warning message will appear."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pinfang"
        },
        "content": "![reminder message](images/warningMessage.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Note: You need to set the budget in order to get the warning feature."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pinfang"
        },
        "content": "### Encouragement"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pinfang"
        },
        "content": "Encourages you when you add spending items."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pinfang"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "**A**: Install the app in the other computer and copy the data/duke.json to the same folder. When you start the app, it will automatically detect and load the backup data."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "**Q**: Are the commands case sensitive?"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "**A**: Yes, they are. To execute the commands properly, please strictly follow the format given above."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pinfang"
        },
        "content": "## 6. Command Summary"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "Action | Format \u0026 Examples "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "--- | ---"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "add | `add  -c CATEGORY -d DESCRIPTION -s SPENDING` \u003c/br\u003e e.g. add -c Food -d chicken rice -s GSD 5.0"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "clear | `clear KEYWORD` \u003c/br\u003e e.g. clear 1"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "convert | `convert -s DESCRIPTION -t DESCRIPTION` \u003c/br\u003e e.g. convert -s SGD -t USD"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "draw | `draw [YEAR \u003d current year] [MONTH \u003d current month]`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "edit | `edit INDEX [-c CATEGORY] [-d NEW_DESCRIPTION] [-s NEW_SPENDING]` \u003c/br\u003e e.g. edit 1 -d bubble tea"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "export | `export PATH`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "help | `help`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "logout | `logout`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "purge data | `purge data`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "repay | `repay -n NAME -s AMOUNT -t DEADLINE` \u003c/br\u003e e.g. repay -n Johnny -s SGD 5.00 -t 2020-12-02"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "repayment list | `repayment list`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "set | `set -s AMOUNT` \u003c/br\u003e e.g. set -s SGD 100.00"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "view | `view`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "spending list | `spending list [YEAR \u003d current year] [MONTH \u003d current month] [-c CATEGORY] [-a]` \u003c/br\u003e e.g. spending list 2020 Jul"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "summary | `summary [YEAR \u003d current year] [MONTH \u003d current month] [-a]` \u003c/br\u003e e.g. summary 2020 Jul "
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 26,
      "killingbear999": 99,
      "xieyaoyue": 13,
      "-": 33,
      "pinfang": 34
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 103,
      "pinfang": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static double budgetLimit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static String currency \u003d \"SGD\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public static boolean hasBudget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static String date \u003d \"1000-01-01\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public static double getBudgetLimit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        return budgetLimit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public static String getCurrency() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        return currency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static String getDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public static void addBudget(String currency, double budgetLimit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.currency \u003d currency;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.budgetLimit \u003d budgetLimit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.hasBudget \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Budget.date \u003d currentDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public static void updateBudget(String outputCurrency, double newBudgetLimit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.currency \u003d outputCurrency;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.budgetLimit \u003d newBudgetLimit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public static void clearBudget() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        Budget.currency \u003d \"SGD\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.budgetLimit \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.hasBudget \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    protected static String currentDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 12,
      "xieyaoyue": 30,
      "pinfang": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.command.ClearRepaymentListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.command.Reminder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.command.EncouragementCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.command.ClearListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static SpendingList spendingList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static RepaymentList repaymentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static EncouragementCommand encouragement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    private static void run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String filePath \u003d storage.getFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        ui.printWelcomeMessage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        reminder.execute(spendingList, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        encouragement.execute(spendingList, ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                String fullCommand \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                Command c \u003d Parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                if (!(c instanceof ClearRepaymentListCommand) \u0026\u0026 !(c instanceof ClearListCommand)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                    c.execute(spendingList, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                } else if (c instanceof ClearRepaymentListCommand) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                    c.execute(repaymentList, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                    c.execute(spendingList, repaymentList, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                ui.printErrorMessage(e.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        } while (!isExit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        ui.printGoodbyeMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * Sets up the required objects and loads data from the storage file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        encouragement \u003d new EncouragementCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            storage \u003d new Storage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            spendingList \u003d storage.load();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            ui.printErrorMessage(e.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 1,
      "k-walter": 33,
      "xieyaoyue": 15,
      "-": 10,
      "pinfang": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/RepaymentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class RepaymentList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String currency;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private double repayment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String currentString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static ArrayList\u003cString\u003e repaymentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public RepaymentList(String name, String currency, double repayment, String deadline) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.repayment \u003d repayment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public RepaymentList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public ArrayList\u003cString\u003e getRepaymentList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return repaymentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void deleteRepaymentEntry(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        repaymentList.remove(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void clearAllEntries() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        repaymentList.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        return repaymentList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public String getEntry(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        return repaymentList.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void combine() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        currentString \u003d name + \" \" + currency + \" \" + repayment + \" \" + deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void storeCurrentString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        combine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        repaymentList.add(currentString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String returnCurrentString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return currentString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 40,
      "xieyaoyue": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/SpendingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.command.ConvertCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class SpendingList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private ArrayList\u003cItem\u003e spendingList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public SpendingList(String description, ArrayList\u003cItem\u003e spendingList, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.spendingList \u003d spendingList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public SpendingList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public SpendingList(String description, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        this(description, new ArrayList\u003c\u003e(), storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public SpendingList(Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        this(\"\", storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public SpendingList(ArrayList\u003cItem\u003e spendingList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        this(\"\", spendingList, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    private void save() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (storage \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        storage.save(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void addItem(String description, String symbol, double amount, String category) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        Item item \u003d new Item(description, symbol, amount, category);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        spendingList.add(item);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void addItem(String description, String symbol, double amount) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        Item item \u003d new Item(description, symbol, amount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        spendingList.add(item);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void deleteItem(int index) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        spendingList.remove(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void clearAllItems() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        spendingList.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assert getListSize() \u003d\u003d 0 : \"list size should be 0\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Item getItem(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return spendingList.get(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return spendingList.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public ArrayList\u003cItem\u003e getSpendingList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return spendingList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public double getSpendingAmountTime(String period) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        double totalAmount \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (Item i: spendingList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            if (i.getDate().contains(period)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                totalAmount +\u003d i.getAmount();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return totalAmount;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public double getSpendingAmountCategory(String category, String period) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        double totalAmount \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (Item i: spendingList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            if (i.getCategory().contains(category) \u0026\u0026 i.getDate().contains(period)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                totalAmount +\u003d i.getAmount();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return totalAmount;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void editItemDescription(int number, String description)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Item item \u003d getItem(number);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item.editDescription(description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void editItemCategory(int number, String category)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Item item \u003d getItem(number);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item.editCategory(category);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void editItemAmount(int number, double amount)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Item item \u003d getItem(number);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item.editAmount(amount);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void updateSpendingList() throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ConvertCommand convertCommand \u003d new ConvertCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        spendingList \u003d convertCommand.updateSpendingList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public double getCurrentAmount() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        double currentAmount \u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        for (Item i: spendingList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            if (i.getDate().compareTo(Budget.getDate()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                currentAmount +\u003d i.getAmount();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return currentAmount;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void swapItem(Item item1, Item item2) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        final String tempCategory \u003d item1.getCategory();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        final String tempDescription \u003d item1.getDescription();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        final String tempSymbol \u003d item1.getSymbol();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        final String tempDate \u003d item1.getDate();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        final double tempAmount \u003d item1.getAmount();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item1.editCategory(item2.getCategory());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item1.editDescription(item2.getDescription());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item1.editSymbol(item2.getSymbol());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item1.editAmount(item2.getAmount());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item1.editDate(item2.getDate());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item2.editCategory(tempCategory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item2.editDescription(tempDescription);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item2.editSymbol(tempSymbol);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item2.editAmount(tempAmount);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        item2.editDate(tempDate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void categoriseSpendingList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int count \u003d spendingList.size() - 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            for (int j \u003d 0; j \u003c spendingList.size() - 1; j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                Item currentItem \u003d getItem(j);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                if (i \u003d\u003d 0 \u0026\u0026 currentItem.getCategory().equals(\"Education\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    Item lastItem \u003d getItem(count);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    swapItem(currentItem, lastItem);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    count \u003d count - 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                } else if (i \u003d\u003d 1 \u0026\u0026 currentItem.getCategory().equals(\"Entertainment\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    Item lastItem \u003d getItem(count);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    swapItem(currentItem, lastItem);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    count \u003d count - 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                } else if (i \u003d\u003d 2 \u0026\u0026 currentItem.getCategory().equals(\"Food\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    Item lastItem \u003d getItem(count);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    swapItem(currentItem, lastItem);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    count \u003d count - 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                } else if (i \u003d\u003d 3 \u0026\u0026 currentItem.getCategory().equals(\"Health\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    Item lastItem \u003d getItem(count);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    swapItem(currentItem, lastItem);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    count \u003d count - 1;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                } else if (i \u003d\u003d 4 \u0026\u0026 currentItem.getCategory().equals(\"Transportation\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    Item lastItem \u003d getItem(count);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    swapItem(currentItem, lastItem);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    count \u003d count - 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                } else if (i \u003d\u003d 5 \u0026\u0026 currentItem.getCategory().equals(\"Utilities\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    Item lastItem \u003d getItem(count);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    swapItem(currentItem, lastItem);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    count \u003d count - 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                } else if (i \u003d\u003d 6 \u0026\u0026 currentItem.getCategory().equals(\"Other\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    Item lastItem \u003d getItem(count);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    swapItem(currentItem, lastItem);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                    count \u003d count - 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 25,
      "killingbear999": 109,
      "xieyaoyue": 4,
      "pinfang": 60
    }
  },
  {
    "path": "src/main/java/seedu/duke/SpendingListCategoriser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class SpendingListCategoriser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public SpendingListCategoriser() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        spendingList.categoriseSpendingList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFileExtensionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    private static Gson gson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    private static final String defaultPath \u003d \"data/duke.json\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * Creates the Storage object based on the the default storage path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * @throws InvalidStorageFilePathException for empty or blank file path"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * @throws InvalidStorageFileExtensionException for non-json file path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Storage() throws InvalidStorageFilePathException, InvalidStorageFileExtensionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        this(defaultPath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * Creates the Storage object based on the user-specified file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * @param path relative path to json file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * @throws InvalidStorageFilePathException for empty or blank file path"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * @throws InvalidStorageFileExtensionException for non-json file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Storage(String path) throws InvalidStorageFilePathException, InvalidStorageFileExtensionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        // Validate path"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String[] parts \u003d path.split(\"\\\\.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (path.isBlank() || parts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new InvalidStorageFilePathException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String extension \u003d parts[parts.length - 1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (parts.length \u003d\u003d 1 || !extension.equals(\"json\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new InvalidStorageFileExtensionException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        // Create or Initialise object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        file \u003d new File(path);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        gson \u003d new Gson();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new InvalidStorageFilePathException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * Exposes location of storage for Duke applications."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     * @return file path"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "k-walter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return file.getPath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public SpendingList load() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList sl;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            String jsonContent \u003d s"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                    .useDelimiter(\"\\\\Z\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                    .next();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            sl \u003d gson.fromJson(jsonContent, SpendingList.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            sl \u003d new SpendingList(this);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return sl;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void save(SpendingList spendingList) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String jsonContent \u003d gson.toJson(spendingList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        fw.write(jsonContent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 78,
      "pinfang": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private PrintStream out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private static final String SEPARATE_LINE_CHAR \u003d \"-\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static final int SEPARATE_LINE_LENGTH \u003d 108;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final String LOGO \u003d \"  _____         __ _      ___              \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            + \" / ___/__ ___  / /| | /| / (_)__ ___       \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            + \"/ /__/ -_) _ \\\\/ __/ |/ |/ / (_-\u003c/ -_)      \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            + \"\\\\___/\\\\__/_//_/\\\\__/|__/|__/_/___/\\\\__/       \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            + \"  / _ \\\\___  / / /__ ____| | /| / (_)__ ___ \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            + \" / // / _ \\\\/ / / _ `/ __/ |/ |/ / (_-\u003c/ -_)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            + \"/____/\\\\___/_/_/\\\\_,_/_/  |__/|__/_/___/\\\\__/ \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static final String[][] BUDGET_QUOTES \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"It takes as much energy to wish as it does to plan.\", \"Eleanor Roosevelt\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"Just because you can afford it doesn\u0027t mean you should buy it.\", \"Suze Orman\"},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"Do not save what is left after spending; instead spend what is left after saving.\", \"Warren Buffett\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"Setting goals is the first step in turning the invisible into the visible.\", \"Tony Robbins\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"If there is no struggle, there is no progress.\", \"Frederick Douglass\"}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static final String BORDER_CORNER \u003d \"+\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static final String BORDER_HORIZONTAL \u003d \"-\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static final String BORDER_VERTICAL \u003d \"|\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static final int TABLE_SIZE \u003d 115;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static final String[][] TABLE_OF_COMMANDS \u003d {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"ACTION\", \"FORMAT\", \"EXAMPLES (IF ANY)\"},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            {\"add\", \"add [-c CATEGORY] [-d DESCRIPTION] [-s SPENDING]\", \"add -c Food -d chicken rice -s SGD 3.00\"},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"clear\", \"clear INDEX\", \"clear 1\"},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR clear all\", \"\"},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"convert\", \"convert -d INPUT_CURRENCY -d OUTPUT_CURRENCY\", \"convert -d SGD -d USD\"},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"draw\", \"draw [YEAR \u003d current year] [MONTH \u003d current month]\", \"draw 2020 Jun\"},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"edit\", \"edit INDEX [-d NEW_DESCRIPTION] [-s NEW_SPENDING]\", \"edit 1 -d bubble tea -s SGD 4.00\"},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"export\", \"export PATH\", \"export F:\\\\MyFolder\"},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"help\", \"help\", \"\"},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"logout\", \"logout\", \"\"},"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            {\"repay\", \"repay [-n NAME] [-s AMOUNT] [-t DEADLINE]\", \"repay -n Johnny -s SGD 5.00 -t 2020-12-02\"},"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"repayment list\", \"repayment list\", \"\"},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"set\", \"set [-s AMOUNT]\", \"set -s SGD 100.00\"},"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"spending\", \"spending list\", \"\"},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"list\", \"OR spending list YEAR\", \"list 2020\"},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR spending list YEAR MONTH\", \"list 2020 Jul\"},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR spending list -c CATEGORY\", \"spending list -c food\"},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR spending list YEAR -c CATEGORY\", \"spending list 2020 -c food\"},"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR spending list YEAR MONTH -c CATEGORY\", \"spending list 2020 Jul -c food\"},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR spending list -a\", \"\"},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"summary\", \"summary\", \"\"},"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR summary YEAR\", \"summary 2020\"},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR summary YEAR MONTH\", \"summary 2020 Jul\"},"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR summary -c CATEGORY\", \"summary -c food\"},"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR summary YEAR -c CATEGORY\", \"summary 2020 -c food\"},"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR summary YEAR MONTH -c CATEGORY\", \"summary 2020 Jul -c food\"},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"\", \"OR summary -a\", \"\"},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            {\"purge data\", \"purge data\", \"\"}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        this(new Scanner(System.in), System.out);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public Ui(Scanner in, PrintStream out) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        this.in \u003d in;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void printEncouragementMessage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        int randInt \u003d rand.nextInt(4);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        out.println(BUDGET_QUOTES[randInt][0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(\" \".repeat(60) + \"--\" + BUDGET_QUOTES[randInt][1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        out.println(\"Keep up budgeting! You can do it!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(LOGO);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void printWelcomeMessage(String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        printWelcomeMessage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        out.println(\"Local file path: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void printGoodbyeMessage() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(\"See you next time!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private void drawSeparateLine() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(SEPARATE_LINE_CHAR.repeat(SEPARATE_LINE_LENGTH));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public String getSpendingList(SpendingList spendingList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        ByteArrayOutputStream os \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        PrintStream ps \u003d new PrintStream(os);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        spendingList.getSpendingList()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                .forEach(ps::println);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return os.toString(StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void printSpendingList(SpendingList spendingList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (spendingList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            out.println(\"Nothing in the list.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            for (int i \u003d 1; i \u003c spendingList.getListSize() + 1; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                out.println(i + \". \" + spendingList.getItem(i - 1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        /*String spendingString \u003d getSpendingList(spendingList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        if (!spendingString.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            out.print(spendingString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            out.println(\"Nothing in the list.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private void printTopBottomBorder() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(BORDER_CORNER + BORDER_HORIZONTAL.repeat(TABLE_SIZE - 2) + BORDER_CORNER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private void printWithinTableBorder() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        System.out.println(BORDER_HORIZONTAL.repeat(TABLE_SIZE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(\"Here is a summary of the commands you can use:\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        printTopBottomBorder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        for (int i \u003d 0; i \u003c 28; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            out.format(\"%1s%-15s%1s%-55s%1s%-41s%1s\\n\", BORDER_VERTICAL, TABLE_OF_COMMANDS[i][0],"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                    BORDER_VERTICAL, TABLE_OF_COMMANDS[i][1], BORDER_VERTICAL, TABLE_OF_COMMANDS[i][2],"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                    BORDER_VERTICAL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            if (i \u003d\u003d 0 || i \u003d\u003d 1 || (i \u003e\u003d 3 \u0026\u0026 i \u003c\u003d 12) || i \u003d\u003d 19 || i \u003d\u003d 26) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "                printWithinTableBorder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        printTopBottomBorder();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void printClearIndex(Item item) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(\"You\u0027ve deleted the record:\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(item);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void printClearIndex(String repaymentEntry) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        out.println(\"You\u0027ve deleted this entry in the repayment list:\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        out.println(repaymentEntry);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void printClearAll() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(\"You\u0027ve deleted all the records.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void printClearAllSpendingList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        out.println(\"You\u0027ve deleted all the records in the spending list.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void printClearAllRepaymentList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        out.println(\"You\u0027ve deleted all the entries in the repayment list.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void printAdd(SpendingList spendingList) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(\"You\u0027ve added the record:\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(spendingList.getItem(spendingList.getListSize() - 1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printConvertCurrency(String outputCurrency) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(\"The currency has been changed to \" + outputCurrency + \" .\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printEdit(SpendingList spendingList, int index) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(\"You\u0027ve updated the record:\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(spendingList.getItem(index));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    //@@author pinfang"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void printSummaryMessage(double amount) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        out.printf(\"You\u0027ve spent $%.2f.%n\", amount);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void printSummaryCategory(String category, double amount) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        out.printf(\"%-20s $%.2f\\n\", category, amount);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printErrorMessage(String message) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printBudgetLimit(String currency, double budgetLimit) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(\"The budget limit has been set to \" + currency + \" \" + budgetLimit);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printApproachingWarningMessage(String outputCurrency, double amountRemaining) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(\"Warning! Your spending is approaching your budget limit.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(\"You still have \" + outputCurrency + \" \" + String.format(\"%.2f\", amountRemaining)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                            + \" remained for spending.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printExceedingWarningMessage() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(\"Warning! Your spending has exceeded your budget limit.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printPurgeData() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(\"All data are deleted.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    //@@author pinfang"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void printReminderMessage(double amountSpent, double amountRemained, String startWeek) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        out.printf(\"You have spent $%.2f since this Mon (%s).\\n\", amountSpent, startWeek);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        out.printf(\"You have $%.2f left in your budget.\\n\", amountRemained);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    //@@author Wu-Haitao"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void printExportMessage() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        out.println(\"The records have been exported to an Excel file successfully.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static void printCurrentBudgetLimit() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"The budget limit has been set to: \" + Budget.getCurrency() + \" \" + Budget.getBudgetLimit());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static void printNoBudget() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        System.out.println(\"No budget has been set yet.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printRepaymentList(ArrayList\u003cString\u003e repaymentList) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (!repaymentList.isEmpty()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            for (int i \u003d 1; i \u003c repaymentList.size() + 1; i++) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                out.println(i + \". \" + repaymentList.get(i - 1));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            out.println(\"Nothing in the list.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void printRepay(String currentString) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(\"You have added this record: \");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        out.println(currentString);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    //@@author Wu-Haitao"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void printDrawMessage(boolean isSuccessful) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        if (isSuccessful) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            out.println(\"The charts have been generated successfully!\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            out.println(\"You can find the charts at this location:\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            out.println(System.getProperty(\"user.dir\") + \"\\\\Charts.xlsx\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            out.println(\"Sorry, generation failed.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        drawSeparateLine();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 91,
      "k-walter": 12,
      "killingbear999": 84,
      "xieyaoyue": 84,
      "pinfang": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/category/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package seedu.duke.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public enum Category {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    FOOD(\"Food\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    EDUCATION(\"Education\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    ENTERTAINMENT(\"Entertainment\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    HEALTH(\"Health\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    TRANSPORTATION(\"Transportation\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    UTILITIES(\"Utilities\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    OTHER(\"Other\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    Category(String category) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static String categoryName(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (Category c: values()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            if (name.equalsIgnoreCase(c.category)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                return c.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return OTHER.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/category/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package seedu.duke.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String symbol;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String category \u003d \"Other\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Item(String description, String symbol, double amount) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.date \u003d currentDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Item(String description, String symbol, double amount, String category) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.date \u003d currentDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.category \u003d Category.categoryName(category);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    protected String currentDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void editDescription(String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void editAmount(double amount) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void editSymbol(String symbol) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void editCategory(String category) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.category \u003d Category.categoryName(category);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void editDate(String specificDate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.date \u003d specificDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return date + \" [\" + category + \"] \" + description + \" \" + symbol + \" \" + amount;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 17,
      "pinfang": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingListCategoriser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public double amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public String symbol;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public String category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"AddCommand\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public AddCommand(String description, String symbol, double amount, String category) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        init(description, symbol, amount, category);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    private void init(String description, String symbol, double amount, String category) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private final String[][] exchangeRates \u003d {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            {\"SGD USD\", \"USD SGD\", \"SGD CNY\", \"CNY SGD\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            {\"0.74\", \"1.36\", \"4.99\", \"0.20\"},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        logger.log(Level.FINE, \"going to add item\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (!symbol.equals(\"SGD\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            updateAmount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            updateCurrency();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        spendingList.addItem(description, symbol, amount, category);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ui.printAdd(spendingList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        int size \u003d spendingList.getListSize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        if (size \u003e 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            SpendingListCategoriser spendingListCategoriser \u003d new SpendingListCategoriser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            spendingListCategoriser.execute(spendingList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        if (size % 8 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            EncouragementCommand encouragementCommand \u003d new EncouragementCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            encouragementCommand.execute(spendingList, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        if (Budget.hasBudget) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            WarnCommand warnCommand \u003d new WarnCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            warnCommand.execute(spendingList, ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void updateAmount() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (symbol.equals(\"USD\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            amount \u003d amount * Double.parseDouble(exchangeRates[1][1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (symbol.equals(\"CNY\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            amount \u003d amount * Double.parseDouble(exchangeRates[1][3]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void updateCurrency() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        symbol \u003d \"SGD\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 4,
      "k-walter": 8,
      "killingbear999": 27,
      "xieyaoyue": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ClearBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class ClearBudgetCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.clearBudget();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ClearListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.RepaymentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class ClearListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public boolean isClearAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public int clearIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(SpendingList spendingList, RepaymentList repaymentList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        spendingList.clearAllItems();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        repaymentList.clearAllEntries();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assert spendingList.getListSize() \u003d\u003d 0 : \"List size should be 0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assert repaymentList.getListSize() \u003d\u003d 0 : \"List size should be 0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ui.printClearAll();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 4,
      "xieyaoyue": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ClearRepaymentListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.RepaymentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class ClearRepaymentListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private boolean isClearAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private int clearIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public ClearRepaymentListCommand(boolean isClearAll, int clearIndex) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        this.isClearAll \u003d isClearAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        this.clearIndex \u003d clearIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(RepaymentList repaymentList, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        if (!isClearAll) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            assert (clearIndex \u003e 0 \u0026\u0026 clearIndex \u003c\u003d repaymentList.getListSize()) : \"Wrong index\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            ui.printClearIndex(repaymentList.getEntry(clearIndex - 1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            repaymentList.deleteRepaymentEntry(clearIndex - 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            repaymentList.clearAllEntries();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            assert repaymentList.getListSize() \u003d\u003d 0 : \"List size should be 0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            ui.printClearAllRepaymentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ClearSpendingListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.RepaymentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class ClearSpendingListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private boolean isClearAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    private int clearIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public ClearSpendingListCommand(boolean isClearAll, int clearIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        this.isClearAll \u003d isClearAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        this.clearIndex \u003d clearIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        if (!isClearAll) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            assert (clearIndex \u003e 0 \u0026\u0026 clearIndex \u003c\u003d spendingList.getListSize()) : \"Wrong index\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            ui.printClearIndex(spendingList.getItem(clearIndex - 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            spendingList.deleteItem(clearIndex - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            spendingList.clearAllItems();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            assert spendingList.getListSize() \u003d\u003d 0 : \"List size should be 0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            ui.printClearAllSpendingList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 3,
      "xieyaoyue": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.RepaymentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.exceptions.InvalidMonthException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws InvalidCommandException, IOException,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            InvalidMonthException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(RepaymentList repaymentList, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(SpendingList spendingList, RepaymentList repaymentList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 2,
      "xieyaoyue": 22,
      "pinfang": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ConvertCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class ConvertCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String currencies;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String outputCurrency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String inputCurrency;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private Item currentString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private double exchangeRate \u003d 1.0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static ArrayList\u003cItem\u003e newSpendingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"ConvertCommand\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /** SGD to USD; USD to SGD; SGD to CNY; CNY to SGD. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private final String[][] exchangeRates \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            {\"SGD USD\", \"USD SGD\", \"SGD CNY\", \"CNY SGD\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            {\"0.74\", \"1.36\", \"4.99\", \"0.20\"},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public ConvertCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public ConvertCommand(String source, String target) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.inputCurrency \u003d source;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.outputCurrency \u003d target;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String identifyCurrency() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return inputCurrency + outputCurrency;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void findExchangeRate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            if (exchangeRates[0][i].equals(currencies)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                exchangeRate \u003d Double.parseDouble(exchangeRates[1][i]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                assert exchangeRate \u003d\u003d Double.parseDouble(exchangeRates[1][i]) : \"Incorrect exchange rate\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        logger.log(Level.FINE, \"going to start processing\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        newSpendingList \u003d spendingList.getSpendingList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        currencies \u003d identifyCurrency();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        findExchangeRate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        for (int i \u003d 0; i \u003c newSpendingList.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            currentString \u003d newSpendingList.get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            if (!currentString.getSymbol().equals(outputCurrency)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                updateNewAmount(currentString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                updateCurrency(currentString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ui.printConvertCurrency(outputCurrency);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        spendingList.updateSpendingList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        updateBudgetList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        logger.log(Level.FINE, \"end of processing\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void updateNewAmount(Item currentString) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        double amount \u003d currentString.getAmount();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        amount \u003d amount * exchangeRate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        currentString.editAmount(amount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void updateCurrency(Item currentString) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        switch (currencies) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        case \"SGD USD\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            currentString.editSymbol(\"USD\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        case \"USD SGD\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            currentString.editSymbol(\"SGD\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        case \"SGD CNY\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            currentString.editSymbol(\"CNY\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        case \"CNY SGD\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            currentString.editSymbol(\"SGD\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void updateBudgetList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        double budgetLimit \u003d Budget.getBudgetLimit();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        double newBudgetLimit \u003d budgetLimit * exchangeRate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Budget.updateBudget(outputCurrency, newBudgetLimit);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public ArrayList\u003cItem\u003e updateSpendingList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return newSpendingList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 95,
      "xieyaoyue": 8,
      "pinfang": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DateFormatter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public String currentDate() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public String getCurrentMonth() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return currentDate().substring(5, 7);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public String getCurrentYear() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return currentDate().substring(0, 4);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public String changeMonthFormat(String month) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        HashMap\u003cString, String\u003e months \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Jan\", \"01\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Feb\", \"02\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Mar\", \"03\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Apr\", \"04\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"May\", \"05\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Jun\", \"06\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Jul\", \"07\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Aug\", \"08\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Sep\", \"09\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Oct\", \"10\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Nov\", \"11\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        months.put(\"Dec\", \"12\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        if (months.containsKey(month)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            return months.get(month);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DrawCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.AxisPosition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.ChartTypes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.XDDFChartAxis;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.XDDFChartData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.XDDFChartLegend;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.XDDFDataSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.XDDFDataSourcesFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.XDDFNumericalDataSource;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xddf.usermodel.chart.XDDFValueAxis;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFClientAnchor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFDrawing;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFSheet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFWorkbook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.openxmlformats.schemas.drawingml.x2006.chart.CTBoolean;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.openxmlformats.schemas.drawingml.x2006.chart.CTLineChart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.openxmlformats.schemas.drawingml.x2006.chart.CTLineSer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.openxmlformats.schemas.drawingml.x2006.chart.CTPlotArea;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "//@@author Wu-Haitao"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "public class DrawCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private final DateFormatter dateFormatter \u003d new DateFormatter();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private String timePeriod;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public DrawCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        timePeriod \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public DrawCommand(String year) throws InvalidCommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        timePeriod \u003d year;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public DrawCommand(String year, String month) throws InvalidCommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        String convertedMonth \u003d dateFormatter.changeMonthFormat(month);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        if (convertedMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            timePeriod \u003d year + \"-\" + convertedMonth;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFWorkbook workbook \u003d new XSSFWorkbook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFSheet sheet0 \u003d workbook.createSheet(\"Sheet 0\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFSheet sheet1 \u003d workbook.createSheet(\"Sheet 1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        sheet0.setDefaultColumnWidth(5);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        sheet1.setDefaultColumnWidth(5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        ArrayList\u003cItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        SpendingList targetSpendingList \u003d new SpendingList(items);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d 0; i \u003c spendingList.getListSize(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if (spendingList.getItem(i).getDate().startsWith(timePeriod)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                targetSpendingList.getSpendingList().add(spendingList.getItem(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        if (targetSpendingList.getListSize() !\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            TreeMap\u003cInteger, Double\u003e dateMap;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if (timePeriod.equals(\"\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                dateMap \u003d getYearMap(targetSpendingList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            } else if (timePeriod.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                dateMap \u003d getMonthMap(targetSpendingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                dateMap \u003d getDayMap(targetSpendingList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            Integer[] dates \u003d dateMap.keySet().toArray(new Integer[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            Double[] amountsForDates \u003d dateMap.values().toArray(new Double[0]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            drawChart(sheet0, dates, amountsForDates, 0, 0, 10, 15);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            TreeMap\u003cString, Double\u003e categoryMap \u003d getCategoryMap(targetSpendingList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            String[] categories \u003d categoryMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            Double[] amountsForCategories \u003d categoryMap.values().toArray(new Double[0]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            drawChart(sheet1, categories, amountsForCategories, 0, 0, 10, 12);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            FileOutputStream fileOut \u003d new FileOutputStream(\"Charts.xlsx\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            workbook.write(fileOut);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            fileOut.flush();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            ui.printDrawMessage(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            ui.printDrawMessage(false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private TreeMap\u003cString, Double\u003e getCategoryMap(SpendingList spendingList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        TreeMap\u003cString, Double\u003e map \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d 0; i \u003c spendingList.getListSize(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            Item item \u003d spendingList.getItem(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if (map.containsKey(item.getCategory())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                map.replace(item.getCategory(), map.get(item.getCategory()) + item.getAmount());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                map.put(item.getCategory(), item.getAmount());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private TreeMap\u003cInteger, Double\u003e getYearMap(SpendingList spendingList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        TreeMap\u003cInteger, Double\u003e map \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        int minYear \u003d Integer.parseInt(spendingList.getItem(0).getDate().substring(0, 4));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        int maxYear \u003d minYear;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d 0; i \u003c spendingList.getListSize(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            Item item \u003d spendingList.getItem(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            int year \u003d Integer.parseInt(item.getDate().substring(0, 4));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if (year \u003e maxYear) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                maxYear \u003d year;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if (year \u003c minYear) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                minYear \u003d year;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if (map.containsKey(year)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                map.replace(year, map.get(year) + item.getAmount());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                map.put(year, item.getAmount());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d minYear; i \u003c\u003d maxYear; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            map.putIfAbsent(i, 0.0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private TreeMap\u003cInteger, Double\u003e getMonthMap(SpendingList spendingList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        TreeMap\u003cInteger, Double\u003e map \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        final int minMonth \u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        final int maxMonth \u003d 12;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d 0; i \u003c spendingList.getListSize(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            Item item \u003d spendingList.getItem(i);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            int month \u003d Integer.parseInt(item.getDate().substring(5, 7));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if ((month \u003c minMonth) || (month \u003e maxMonth)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if (map.containsKey(month)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                map.replace(month, map.get(month) + item.getAmount());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                map.put(month, item.getAmount());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d minMonth; i \u003c\u003d maxMonth; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            map.putIfAbsent(i, 0.0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private TreeMap\u003cInteger, Double\u003e getDayMap(SpendingList spendingList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        TreeMap\u003cInteger, Double\u003e map \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        final int minDay \u003d 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        final int maxDay \u003d 12;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d 0; i \u003c spendingList.getListSize(); i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            Item item \u003d spendingList.getItem(i);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            int day \u003d Integer.parseInt(item.getDate().substring(8, 10));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if ((day \u003c minDay) || (day \u003e maxDay)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            if (map.containsKey(day)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                map.replace(day, map.get(day) + item.getAmount());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                map.put(day, item.getAmount());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d minDay; i \u003c\u003d maxDay; i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            map.putIfAbsent(i, 0.0);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private void drawChart(XSSFSheet sheet, String[] category, Double[] values, int x1, int y1, int x2, int y2) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFDrawing drawing \u003d sheet.createDrawingPatriarch();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFClientAnchor anchor \u003d drawing.createAnchor(0, 0, 0, 0, x1, y1, x2, y2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFChart chart \u003d drawing.createChart(anchor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFChartLegend legend \u003d chart.getOrAddLegend();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        legend.setPosition(org.apache.poi.xddf.usermodel.chart.LegendPosition.TOP_RIGHT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFDataSource\u003cString\u003e cat \u003d XDDFDataSourcesFactory.fromArray(category);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFNumericalDataSource\u003cDouble\u003e val \u003d XDDFDataSourcesFactory.fromArray(values);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFChartData chartData \u003d chart.createData(ChartTypes.PIE, null, null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        chartData.addSeries(cat, val);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        chart.plot(chartData);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private void drawChart(XSSFSheet sheet, Integer[] category, Double[] values, int x1, int y1, int x2, int y2) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFDrawing drawing \u003d sheet.createDrawingPatriarch();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFClientAnchor anchor \u003d drawing.createAnchor(0, 0, 0, 0, x1, y1, x2, y2);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XSSFChart chart \u003d drawing.createChart(anchor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFDataSource\u003cInteger\u003e cat \u003d XDDFDataSourcesFactory.fromArray(category);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFNumericalDataSource\u003cDouble\u003e val \u003d XDDFDataSourcesFactory.fromArray(values);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFChartAxis chartAxis \u003d chart.createCategoryAxis(AxisPosition.LEFT);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFValueAxis valueAxis \u003d chart.createValueAxis(AxisPosition.BOTTOM);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        XDDFChartData chartData \u003d chart.createData(ChartTypes.LINE, chartAxis, valueAxis);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        chartData.addSeries(cat, val);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        chart.plot(chartData);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        CTPlotArea plotArea \u003d chart.getCTChart().getPlotArea();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (CTLineChart ch : plotArea.getLineChartList()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            for (CTLineSer ser : ch.getSerList()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                CTBoolean ctBool \u003d CTBoolean.Factory.newInstance();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                ctBool.setVal(false);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "                ser.setSmooth(ctBool);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 180,
      "pinfang": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public Double amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String symbol;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public EditCommand(int index, String description, String symbol, Double amount, String category) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (description !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            spendingList.editItemDescription(index, description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (symbol !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            // TODO : edit symbol @killingbear999"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (amount !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            spendingList.editItemAmount(index, amount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (category !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            spendingList.editItemCategory(index, category);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ui.printEdit(spendingList, index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 2,
      "killingbear999": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EncouragementCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class EncouragementCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ui.printEncouragementMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 15,
      "xieyaoyue": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.apache.poi.ss.usermodel.Cell;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.apache.poi.ss.usermodel.CellStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.apache.poi.ss.usermodel.Font;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.apache.poi.ss.usermodel.Row;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.apache.poi.ss.usermodel.Sheet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.apache.poi.ss.usermodel.Workbook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFWorkbook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public ExportCommand(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        exportToExcel(spendingList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        ui.printExportMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    private void exportToExcel(SpendingList list) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        Workbook workbook \u003d new XSSFWorkbook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        Sheet sheet \u003d workbook.createSheet(\"sheet0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        sheet.setDefaultColumnWidth(15);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        Row row \u003d sheet.createRow(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        Cell[] cells \u003d new Cell[5];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        CellStyle cellStyle \u003d workbook.createCellStyle();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        Font font \u003d workbook.createFont();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        font.setBold(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        cellStyle.setFont(font);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            cells[i] \u003d row.createCell(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            cells[i].setCellStyle(cellStyle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        cells[0].setCellValue(\"Description\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        cells[1].setCellValue(\"Currency\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        cells[2].setCellValue(\"Amount\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        cells[3].setCellValue(\"Date\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        cells[4].setCellValue(\"Category\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        for (int i \u003d 0; i \u003c list.getListSize(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            row \u003d sheet.createRow(i + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            Item item \u003d list.getItem(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            row.createCell(0).setCellValue(item.getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            row.createCell(1).setCellValue(item.getSymbol());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            row.createCell(2).setCellValue(item.getAmount());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            row.createCell(3).setCellValue(item.getDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            row.createCell(4).setCellValue(item.getCategory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            FileOutputStream output \u003d new FileOutputStream(filePath + \"Records.xlsx\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            workbook.write(output);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            output.flush();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            output.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PurgeDataCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.RepaymentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "public class PurgeDataCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        RepaymentList repaymentList \u003d new RepaymentList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ClearSpendingListCommand clearSpendingListCommand \u003d new ClearSpendingListCommand(true, 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ClearRepaymentListCommand clearRepaymentListCommand \u003d new ClearRepaymentListCommand(true, 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ClearBudgetCommand clearBudgetCommand \u003d new ClearBudgetCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        clearSpendingListCommand.execute(spendingList, ui);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        clearRepaymentListCommand.execute(repaymentList, ui);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        clearBudgetCommand.execute(spendingList, ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ui.printPurgeData();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.command.WarnCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class Reminder extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private LocalDate startWeek;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    WarnCommand warn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private ArrayList\u003cString\u003e week \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public Reminder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        saveDatesToList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        warn \u003d new WarnCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        double amountRemained \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (Budget.hasBudget) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            warn.execute(spendingList, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            amountRemained \u003d findRemainingAmount(spendingList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        double totalAmountSpent \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (String i: week) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            totalAmountSpent +\u003d spendingList.getSpendingAmountTime(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        ui.printReminderMessage(totalAmountSpent, amountRemained, startWeek.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private LocalDate startOfWeek() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        DayOfWeek day \u003d today.getDayOfWeek();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            startWeek \u003d today;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            startWeek \u003d today.minusDays(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            startWeek \u003d today.minusDays(2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            startWeek \u003d today.minusDays(3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            startWeek \u003d today.minusDays(4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        case SATURDAY:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            startWeek \u003d today.minusDays(5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        case SUNDAY:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            startWeek \u003d today.minusDays(6);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return startWeek;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private void saveDatesToList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        LocalDate startDay \u003d startOfWeek();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            week.add(startDay.minusDays(-i).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public double findRemainingAmount(SpendingList spendingList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        double budgetLimit \u003d Budget.getBudgetLimit();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        double currentAmount \u003d spendingList.getCurrentAmount();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return budgetLimit - currentAmount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 2,
      "xieyaoyue": 4,
      "pinfang": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RepayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.RepaymentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class RepayCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String currency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private double repayment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public RepayCommand(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void identifyRepaymentInformation(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int nameBeginIndex \u003d description.indexOf(\"-n\") + \"-n\".length() + 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int nameEndIndex \u003d description.indexOf(\"-s\") - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        name \u003d description.substring(nameBeginIndex, nameEndIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int currencyBeginIndex \u003d description.indexOf(\"-s\") + \"-s\".length() + 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int currencyEndIndex \u003d currencyBeginIndex + 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        currency \u003d description.substring(currencyBeginIndex, currencyEndIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int repaymentBeginIndex \u003d currencyEndIndex + 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int repaymentEndIndex \u003d description.indexOf(\"-t\") - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        repayment \u003d Double.parseDouble(description.substring(repaymentBeginIndex, repaymentEndIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int deadlineBeginIndex \u003d description.indexOf(\"-t\") + \"-t\".length() + 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int deadlineEndIndex \u003d description.length();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        deadline \u003d description.substring(deadlineBeginIndex, deadlineEndIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        identifyRepaymentInformation(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        RepaymentList repaymentList \u003d new RepaymentList(name, currency, repayment, deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        repaymentList.storeCurrentString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ui.printRepay(repaymentList.returnCurrentString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RepaymentListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.RepaymentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class RepaymentListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        RepaymentList repaymentList \u003d new RepaymentList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ui.printRepaymentList(repaymentList.getRepaymentList());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/SetBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class SetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private double budgetLimit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String currency;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public SetBudgetCommand(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private void identifyBudgetLimit(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int currencyBeginIndex \u003d description.indexOf(\"-s\") + \"-s\".length() + 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int currencyEndIndex \u003d currencyBeginIndex + 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        int length \u003d description.length();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        currency \u003d description.substring(currencyBeginIndex, currencyEndIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        budgetLimit \u003d Double.parseDouble(description.substring(currencyEndIndex + 1, length));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        identifyBudgetLimit(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Budget.addBudget(currency, budgetLimit);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ui.printBudgetLimit(currency, budgetLimit);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 33,
      "xieyaoyue": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/SpendingListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class SpendingListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        ui.printSpendingList(spendingList);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 9,
      "killingbear999": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/SummaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.exceptions.InvalidMonthException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "//@@author pinfang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private String period;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private boolean isValidMonth \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(\"SummaryCommand\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private final DateFormatter dateFormatter \u003d new DateFormatter();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    //@@author pinfang"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public SummaryCommand(String year, String month) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.month \u003d dateFormatter.changeMonthFormat(month);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        period \u003d this.year + \"-\" + this.month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public SummaryCommand(String year) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        period \u003d year;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public SummaryCommand(boolean isCurrentMonth) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (isCurrentMonth) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            this.year \u003d dateFormatter.getCurrentYear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            this.month \u003d dateFormatter.getCurrentMonth();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            period \u003d year + \"-\" + month;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            this.month \u003d \"-\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            period \u003d \"-\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) throws InvalidMonthException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (month \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            isValidMonth \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        if (isValidMonth) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            logger.log(Level.FINE, \"going to start processing\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            double amountSpent \u003d spendingList.getSpendingAmountTime(period);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            logger.log(Level.FINE, \"end of processing\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            ui.printSummaryMessage(amountSpent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            for (Category c : Category.values()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                double categoryAmountSpent \u003d spendingList.getSpendingAmountCategory(c.toString(), period);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                ui.printSummaryCategory(c.name(), categoryAmountSpent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            throw new InvalidMonthException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 6,
      "pinfang": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (Budget.hasBudget) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            Ui.printCurrentBudgetLimit();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            Ui.printNoBudget();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/WarnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class WarnCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private double budgetLimit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private double budgetThreshold;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private String outputCurrency;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    private final double threshold \u003d 0.9;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public WarnCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute(SpendingList spendingList, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        outputCurrency \u003d Budget.getCurrency();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        budgetLimit \u003d Budget.getBudgetLimit();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        budgetThreshold \u003d budgetLimit * threshold;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        double currentAmount \u003d spendingList.getCurrentAmount();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        if (currentAmount \u003e\u003d budgetThreshold \u0026\u0026 currentAmount \u003c budgetLimit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            double amountRemaining \u003d budgetLimit - currentAmount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printApproachingWarningMessage(outputCurrency, amountRemaining);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        } else if (currentAmount \u003e\u003d budgetLimit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            ui.printExceedingWarningMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 28,
      "xieyaoyue": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return \"Sorry, the command input is invalid. Please re-enter a new command.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidMonthException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class InvalidMonthException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return \"Invalid month input.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidStorageFileExtensionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "public class InvalidStorageFileExtensionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return \"Please indicate a .json file\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidStorageFilePathException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class InvalidStorageFilePathException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return \"Sorry, the file path is invalid.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/AddParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "public class AddParser extends Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public AddParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option description \u003d Option.builder(\"d\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"description\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArgs()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"description\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .required()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option category \u003d Option.builder(\"c\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"category\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArgs()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"category\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option spending \u003d Option.builder(\"s\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"spending\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArgs()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"spending\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .required()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(category);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(spending);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Command parse(String[] args) throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        CommandLine line \u003d parser.parse(options, args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String[] descriptionArray \u003d line.getOptionValues(\"d\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String description \u003d String.join(\" \", descriptionArray);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String category \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (line.hasOption(\"c\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            category \u003d line.getOptionValue(\"c\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String[] spending \u003d line.getOptionValues(\"s\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (spending.length !\u003d 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String symbol \u003d spending[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        double amount \u003d Double.parseDouble(spending[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return new AddCommand(description, symbol, amount, category);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/ClearParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.ClearListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "public class ClearParser extends Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public ClearParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option all \u003d Option.builder(\"a\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"all\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"all\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option repayment \u003d Option.builder(\"r\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"repayment\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArg()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"repayment\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option spending \u003d Option.builder(\"s\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"spending\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArg()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"spending\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(all);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(repayment);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(spending);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Command parse(String[] args) throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        CommandLine line \u003d parser.parse(options, args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (line.hasOption(\"a\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            //return new ClearListCommand(true, 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            return new ClearListCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String indexString \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (line.hasOption(\"r\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            indexString \u003d line.getOptionValue(\"r\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        } else if (line.hasOption(\"s\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            indexString \u003d line.getOptionValue(\"s\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (indexString \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        int index \u003d getIndex(indexString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        //return new ClearListCommand(false, index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        return new ClearListCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 53,
      "xieyaoyue": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/ConvertParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.ConvertCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "public class ConvertParser extends Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public ConvertParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option source \u003d Option.builder(\"s\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"source\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArg()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .required()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"source\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option target \u003d Option.builder(\"t\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"target\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArg()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .required()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"target\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(source);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(target);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Command parse(String[] args) throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        CommandLine line \u003d parser.parse(options, args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String source \u003d line.getOptionValue(\"s\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String target \u003d line.getOptionValue(\"t\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return new ConvertCommand(source, target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/EditParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "public class EditParser extends Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public EditParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option description \u003d Option.builder(\"d\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"description\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArgs()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"description\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option category \u003d Option.builder(\"c\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"category\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArgs()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"category\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option spending \u003d Option.builder(\"s\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"spending\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .hasArgs()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"spending\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(category);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(spending);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Command parse(String[] args) throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        CommandLine line \u003d parser.parse(options, args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        int index \u003d getIndex(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (line.hasOption(\"d\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            String[] descriptionArray \u003d line.getOptionValues(\"d\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            description \u003d String.join(\" \", descriptionArray);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String category \u003d line.getOptionValue(\"c\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String symbol \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Double amount \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (line.hasOption(\"s\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            String[] spending \u003d line.getOptionValues(\"s\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            if (spending.length !\u003d 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            symbol \u003d spending[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            amount \u003d Double.parseDouble(spending[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return new EditCommand(index, description, symbol, amount, category);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 62
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.CommandLineParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.command.RepaymentListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.command.ViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    protected static CommandLineParser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    protected static Options options;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public abstract Command parse(String[] args) throws ParseException, InvalidCommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        parser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options \u003d new Options();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    protected static int getIndex(CommandLine line) throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String[] indexString \u003d line.getArgs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (indexString.length !\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return getIndex(indexString[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    protected static int getIndex(String s) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        int index \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public static Command parseCommand(String userInput) throws InvalidCommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String[] args \u003d userInput.strip().split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String cmd \u003d args[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String[] opts \u003d Arrays.copyOfRange(args, 1, args.length);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"add\": return new AddParser().parse(opts);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"edit\": return new EditParser().parse(opts);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"help\": return new HelpCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"clear\": return new ClearParser().parse(opts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"convert\": return new ConvertParser().parse(opts);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"draw\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"export\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"repay\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        case \"repayment\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            return new RepaymentListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"spending\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"logout\": return new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"summary\": return new SummaryParser().parse(opts);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case \"view\": return new ViewCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        default: throw new InvalidCommandException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 66,
      "killingbear999": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/SummaryParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.SummaryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "public class SummaryParser extends Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public SummaryParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Option all \u003d Option.builder(\"a\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .longOpt(\"all\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .argName(\"all\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        options.addOption(all);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public Command parse(String[] args) throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        CommandLine line \u003d parser.parse(options, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (line.hasOption(\"a\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            return new SummaryCommand(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String[] period \u003d line.getArgs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        switch (period.length) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case 1: return new SummaryCommand(period[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        case 2: return new SummaryCommand(period[0], period[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        default: throw new InvalidCommandException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 40
    }
  },
  {
    "path": "src/test/java/seedu/duke/ItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private Item rice \u003d new Item(\"rice\", \"SGD\", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    private Item food \u003d new Item(\"food\", \"SGD\", 2, \"Food\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedString \u003d date.toString() + \" [Other] rice SGD 2.0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedString, rice.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void editAmount() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedString \u003d date.toString() + \" [Other] rice SGD 5.0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        rice.editAmount(5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedString, rice.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void editDescription() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedString \u003d date.toString() + \" [Other] chicken rice SGD 2.0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        rice.editDescription(\"chicken rice\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedString, rice.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void editCategory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedString \u003d date.toString() + \" [Food] rice SGD 2.0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        rice.editCategory(\"Food\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedString, rice.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void editSymbol() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedString \u003d date.toString() + \" [Other] rice USD 2.0\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        rice.editSymbol(\"USD\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedString, rice.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void getAmount() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        Double expectedAmount \u003d 2.0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedAmount, rice.getAmount());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedDescription \u003d \"rice\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedDescription, rice.getDescription());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void getSymbol() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedSymbol \u003d \"SGD\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedSymbol, rice.getSymbol());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void getDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedString \u003d date.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedString, rice.getDate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void getCategory() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        String expectedString \u003d \"Food\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(expectedString, food.getCategory());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pinfang": 78
    }
  },
  {
    "path": "src/test/java/seedu/duke/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.MissingOptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.ClearListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.ConvertCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.command.SummaryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    static class Rule\u003cT extends Throwable\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        final String commandString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        final Class\u003cT\u003e subclass;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Rule(String command, Class\u003cT\u003e subclass) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            this.commandString \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            this.subclass \u003d subclass;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    static Rule[] rules \u003d new Rule[]{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"add -c Food -d Item 0 -s SGD 114.514\", AddCommand.class),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"add -d Item 0 -s SGD 114.514 \", AddCommand.class),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"edit 100 -s SGD 1.23 --description Chicken Rice -c Food\", EditCommand.class),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"edit 100 -s SGD 1.23 -c Food\", EditCommand.class),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"clear --all\", ClearListCommand.class),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"clear --spending 234\", ClearListCommand.class),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"clear -r 420\", ClearListCommand.class),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"convert -s SGD --target CNY\", ConvertCommand.class),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"summary 2020 Jul\", SummaryCommand.class),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"summary --all\", SummaryCommand.class),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"help\", HelpCommand.class)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void allParserReturnClass() throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        for (Rule r : rules) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            Command c \u003d Parser.parseCommand(r.commandString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            assertTrue(r.subclass.isInstance(c), String.format(\"Expected %s, got %s\", r.subclass, c.getClass()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void addWithoutCategory() throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        AddCommand c \u003d (AddCommand) Parser.parseCommand(\"add -d Item 0 -s SGD 114.514 \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(c.amount, 114.514);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(c.description, \"Item 0\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(c.category, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void addShuffledArg() throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        AddCommand c \u003d (AddCommand) Parser.parseCommand(\"add -d Item 0 -s SGD 114.514 -c Food \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(c.amount, 114.514);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(c.description, \"Item 0\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(c.category, \"Food\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void editInvalidIndex() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            EditCommand c \u003d (EditCommand) Parser.parseCommand(\"edit not index -s SGD 1.23 -d Chicken Rice -c Food\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void editOneParam() throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        EditCommand c \u003d (EditCommand) Parser.parseCommand(\"edit 987 --description fried rice\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(c.index, 987);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(c.description, \"fried rice\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertNull(c.amount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertNull(c.symbol);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertNull(c.category);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "     * void clearIndex() throws ParseException, InvalidCommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "     * ClearListCommand c \u003d (ClearListCommand) Parser.parseCommand(\"clear --repayment 23\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "     * assertFalse(c.isClearAll);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "     * assertEquals(c.clearIndex, 23);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void convertMissingSource() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertThrows(MissingOptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            ConvertCommand c \u003d (ConvertCommand) Parser.parseCommand(\"convert --target USD\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 13,
      "k-walter": 81,
      "xieyaoyue": 7
    }
  },
  {
    "path": "src/test/java/seedu/duke/SpendingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "class SpendingListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void addItem() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList expectedList \u003d initSpendingList("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"buy book\", \"S$\", 10, \"\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList realList \u003d new SpendingList((Storage) null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        realList.addItem(\"buy book\", \"S$\", 10, \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assert realList.getListSize() \u003d\u003d 1 : \"item not added\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEqualList(expectedList, realList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public static void assertEqualList(SpendingList expectedList, SpendingList realList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String expectedString \u003d Arrays.toString(expectedList.getSpendingList().toArray());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String realString \u003d Arrays.toString(realList.getSpendingList().toArray());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(expectedString, realString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public static ArrayList\u003cItem\u003e initList(Item... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(items));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public static SpendingList initSpendingList(Item... items) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        return new SpendingList(initList(items));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void deleteItem() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList expectedList \u003d initSpendingList("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"noodle\", \"S$\", 1.5, \"\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"fish\", \"S$\", 10, \"\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"books\", \"S$\", 8.9, \"\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList realList \u003d initSpendingList("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"rice\", \"S$\", 2, \"\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"noodle\", \"S$\", 1.5, \"\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"fish\", \"S$\", 10, \"\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"books\", \"S$\", 8.9, \"\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        realList.deleteItem(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assert realList.getListSize() \u003d\u003d 3 : \"item is not deleted\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEqualList(expectedList, realList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void getItem() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList realList \u003d initSpendingList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                new Item(\"buy book\", \"S$\", 10)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Item firstItem \u003d realList.getItem(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(firstItem.getDescription(), \"buy book\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(firstItem.getSymbol(), \"S$\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(firstItem.getAmount(), 10);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void getListSize() throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList realList \u003d new SpendingList((Storage) null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        realList.addItem(\"buy book\", \"S$\", 10, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(realList.getListSize(), 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        realList.addItem(\"buy stationary\", \"S$\", 5, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(realList.getListSize(), 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        realList.deleteItem(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(realList.getListSize(), 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        realList.addItem(\"buy grocery\", \"S$\", 10, \"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(realList.getListSize(), 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void getList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        ArrayList\u003cItem\u003e expectedList \u003d initList("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"rice\", \"S$\", 2, \"\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"noodle\", \"S$\", 1.5, \"\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"fish\", \"S$\", 10, \"\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"books\", \"S$\", 8.9, \"\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList realSL \u003d new SpendingList(expectedList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        ArrayList\u003cItem\u003e realList \u003d realSL.getSpendingList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(expectedList, realList, \"List not same\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void clearAllItems() throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        final SpendingList expectedList \u003d new SpendingList((Storage) null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList realList \u003d initSpendingList("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"buy book\", \"S$\", 10, \"\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"buy stationary\", \"S$\", 5, \"\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEquals(realList.getListSize(), 2, \"List not instantiated with 2 items\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        realList.clearAllItems();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assert realList.getListSize() \u003d\u003d 0 : \"List is not cleared\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertEqualList(expectedList, realList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    void editItem() throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList realList \u003d initSpendingList("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                new Item(\"buy book\", \"S$\", 10, \"Education\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        realList.editItem(0, 12);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(realList.getItem(0).getAmount(), 12);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void getSpendingAmountTime() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        double expectedAmount \u003d 22.4;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String expectedYear \u003d Integer.toString(LocalDate.now().getYear());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList realList \u003d initSpendingList("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"rice\", \"S$\", 2, \"\"),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"noodle\", \"S$\", 1.5, \"\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"fish\", \"S$\", 10, \"\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pinfang"
        },
        "content": "                new Item(\"books\", \"S$\", 8.9, \"\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        assertEquals(realList.getSpendingAmountTime(expectedYear), expectedAmount);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    //@@author killingbear999"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void getCurrentAmountTest() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        double expectedAmount \u003d 20.0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        SpendingList realList \u003d initSpendingList("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                new Item(\"sushi\", \"S$\", 11.0, \"\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                new Item(\"bubble tea\", \"S$\", 4.0, \"\"),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "                new Item(\"medicine\", \"S$\", 5.0, \"\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        );"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        assertEquals(realList.getCurrentAmount(), expectedAmount);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 77,
      "killingbear999": 17,
      "xieyaoyue": 17,
      "pinfang": 46
    }
  },
  {
    "path": "src/test/java/seedu/duke/StoragePathTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFileExtensionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "class StoragePathTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    static class Rule\u003cT extends Throwable\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        final String path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        final Class\u003cT\u003e exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        Rule(String path, Class\u003cT\u003e exception, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            this.path \u003d path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            this.exception \u003d exception;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    static Rule[] rules \u003d new Rule[]{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"       \", InvalidStorageFilePathException.class, \"Allowed blank file path/names\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"json\", InvalidStorageFileExtensionException.class, \"Must specify file extension\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        new Rule(\"data/test.txt\", InvalidStorageFileExtensionException.class, \"Allowed non JSON files\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void fullFileName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        for (Rule r : rules) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            assertThrows(r.exception, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "                Storage s \u003d new Storage(r.path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "            }, r.description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "k-walter": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "k-walter"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFileExtensionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "k-walter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "k-walter"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void createFileAndPath() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String path \u003d storage.getFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertTrue(f.exists(), \"Did not create path or file\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void saveAndLoad() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList expectedList \u003d new SpendingList(storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        expectedList.addItem(\"noodle\", \"S$\", 1.5, \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        expectedList.addItem(\"fish\", \"S$\", 10, \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        expectedList.addItem(\"books\", \"S$\", 8.9, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingList actualList \u003d storage.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        SpendingListTest.assertEqualList(expectedList, actualList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void initStorage() throws InvalidStorageFilePathException, InvalidStorageFileExtensionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String randomPath \u003d String.format(\"data/%s.json\", UUID.randomUUID().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        storage \u003d new Storage(randomPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    public void deleteStorage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        String path \u003d storage.getFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        storage \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertTrue(f.delete(), \"Unable to delete file\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "k-walter"
        },
        "content": "        assertFalse(f.exists(), \"Did not delete file\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "k-walter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "k-walter"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "k-walter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "k-walter": 50,
      "pinfang": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFileExtensionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    void execute() throws IOException, InvalidStorageFileExtensionException, InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(\"buy sushi\", \"SGD\", 3.0, \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        SpendingList spendingList \u003d new SpendingList(storage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        addCommand.execute(spendingList, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertEquals(\"buy sushi\", spendingList.getItem(0).getDescription());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        assertEquals(\"SGD\", spendingList.getItem(0).getSymbol());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertEquals(3.0, spendingList.getItem(0).getAmount());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 2,
      "xieyaoyue": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ClearBudgetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "class ClearBudgetCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.addBudget(\"SGD\", 100);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.clearBudget();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertFalse(Budget.hasBudget);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 16
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ClearRepaymentListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.RepaymentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "class ClearRepaymentListCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    void execute_clearIndex() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        RepaymentList repaymentList1 \u003d new RepaymentList(\"John\", \"SGD\", 10.00, \"1 Nov 2020\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        repaymentList1.storeCurrentString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        RepaymentList repaymentList2 \u003d new RepaymentList(\"Ben\", \"USD\", 20.00, \"10 Nov 2020\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        repaymentList2.storeCurrentString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ClearRepaymentListCommand c \u003d new ClearRepaymentListCommand(false, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        c.execute(repaymentList2, ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertEquals(1, repaymentList2.getListSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    void execute_clearAll()  {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        RepaymentList repaymentList1 \u003d new RepaymentList(\"John\", \"SGD\", 10.00, \"1 Nov 2020\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        repaymentList1.storeCurrentString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        RepaymentList repaymentList2 \u003d new RepaymentList(\"Ben\", \"USD\", 20.00, \"10 Nov 2020\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        repaymentList2.storeCurrentString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ClearRepaymentListCommand c \u003d new ClearRepaymentListCommand(true, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        c.execute(repaymentList2, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertEquals(0, repaymentList2.getListSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ClearSpendingListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFileExtensionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "class ClearSpendingListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    void execute_clearIndex() throws InvalidStorageFileExtensionException,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            InvalidStorageFilePathException, IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ClearSpendingListCommand c \u003d new ClearSpendingListCommand(false, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        SpendingList spendingList \u003d new SpendingList(storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        spendingList.addItem(\"buy chicken rice\", \"$\", 3.0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        spendingList.addItem(\"buy sushi\", \"$\", 5.1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        c.execute(spendingList, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertEquals(1, spendingList.getListSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    void execute_clearAll() throws InvalidStorageFileExtensionException, InvalidStorageFilePathException, IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        ClearSpendingListCommand c \u003d new ClearSpendingListCommand(true, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        SpendingList spendingList \u003d new SpendingList(storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        spendingList.addItem(\"buy chicken rice\", \"$\", 3.0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        spendingList.addItem(\"buy sushi\", \"$\", 5.1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        c.execute(spendingList, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertEquals(0, spendingList.getListSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 1,
      "xieyaoyue": 40
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ConvertCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "killingbear999"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class ConvertCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static ArrayList\u003cItem\u003e initList(Item... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(items));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static SpendingList initSpendingList(Item... items) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return new SpendingList(initList(items));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    SpendingList realList \u003d initSpendingList("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            new Item(\"sushi\", \"SGD\", 10.5),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            new Item(\"bubble tea\", \"SGD\", 4.0),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            new Item(\"medicine\", \"SGD\", 5.0)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void execute() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        ConvertCommand convertCommand \u003d new ConvertCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        convertCommand.execute(realList, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 35,
      "xieyaoyue": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DrawCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "class DrawCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public static ArrayList\u003cItem\u003e initList(Item... items) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(items));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public static SpendingList initSpendingList(Item... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return new SpendingList(initList(items));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    SpendingList spendingList \u003d initSpendingList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new Item(\"Item0\", \"USD\", 1.5),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new Item(\"Item1\", \"USD\", 233, \"Food\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new Item(\"Item2\", \"USD\", 13.14, \"Education\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new Item(\"Item3\", \"USD\", 50.0, \"Education\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        spendingList.getItem(0).editDate(\"2020-09-11\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        spendingList.getItem(1).editDate(\"2019-09-11\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        spendingList.getItem(2).editDate(\"2020-08-11\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        spendingList.getItem(3).editDate(\"2020-08-12\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new DrawCommand(\"2020\").execute(spendingList, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        assert true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ExportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "class ExportCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public static ArrayList\u003cItem\u003e initList(Item... items) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(items));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    public static SpendingList initSpendingList(Item... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        return new SpendingList(initList(items));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    SpendingList spendingList \u003d initSpendingList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new Item(\"Item0\", \"SGD\", 1.5),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new Item(\"Item1\", \"RMB\", 233, \"Food\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new Item(\"Item2\", \"USD\", 13.14, \"Education\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            new ExportCommand(System.getProperty(\"user.dir\") + \"\\\\\").execute(spendingList, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "        assert true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wu-Haitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wu-Haitao": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PurgeDataCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFileExtensionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "class PurgeDataCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    void execute() throws IOException, InvalidStorageFileExtensionException, InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        SpendingList spendingList \u003d new SpendingList(storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        spendingList.addItem(\"buy chicken rice\", \"$\", 3.0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        spendingList.addItem(\"buy sushi\", \"$\", 5.1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Budget.addBudget(\"SGD\", 100);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        PurgeDataCommand purgeDataCommand \u003d new PurgeDataCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        purgeDataCommand.execute(spendingList, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertFalse(Budget.hasBudget);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "        assertEquals(0, spendingList.getListSize());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/SummaryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pinfang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import seedu.duke.exceptions.InvalidMonthException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pinfang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pinfang"
        },
        "content": "public class SummaryCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static ArrayList\u003cItem\u003e initList(Item... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(items));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public static SpendingList initSpendingList(Item... items) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        return new SpendingList(initList(items));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    SpendingList spendingList \u003d initSpendingList("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            new Item(\"noodle\", \"S$\", 1.5),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            new Item(\"fish\", \"S$\", 10),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            new Item(\"books\", \"S$\", 8.9)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        SummaryCommand invalidSummaryMonth \u003d new SummaryCommand(\"2020\", \"fdj\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        SummaryCommand validSummaryMonth \u003d new SummaryCommand(\"2020\", \"Jan\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        SummaryCommand summaryYear \u003d new SummaryCommand(\"2020\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        SummaryCommand summary \u003d new SummaryCommand(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            invalidSummaryMonth.execute(spendingList, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            validSummaryMonth.execute(spendingList, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            summaryYear.execute(spendingList, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pinfang"
        },
        "content": "            summary.execute(spendingList, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        } catch (InvalidMonthException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "            assertEquals(\"Invalid month input.\", e.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pinfang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pinfang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pinfang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pinfang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xieyaoyue": 1,
      "pinfang": 47
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/WarnCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.SpendingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.category.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xieyaoyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "//@@author killingbear999"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "public class WarnCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static ArrayList\u003cItem\u003e initList(Item... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(items));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public static SpendingList initSpendingList(Item... items) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        return new SpendingList(initList(items));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    SpendingList realList \u003d initSpendingList("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            new Item(\"sushi\", \"S$\", 10.5),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            new Item(\"bubble tea\", \"S$\", 4.0),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "            new Item(\"medicine\", \"S$\", 5.0)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void approachLimit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Budget.addBudget(\"SGD\", 20.0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        WarnCommand approachingLimit \u003d new WarnCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        approachingLimit.execute(realList, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    public void exceedLimit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        Budget.addBudget(\"SGD\", 10.0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        WarnCommand exceedingLimit \u003d new WarnCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "        exceedingLimit.execute(realList, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "killingbear999"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "killingbear999": 32,
      "xieyaoyue": 14
    }
  }
]
