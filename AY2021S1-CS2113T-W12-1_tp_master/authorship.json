[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    mainClassName \u003d \"seedu.planus.Planus\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    archiveBaseName \u003d \"planus\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 4,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Arindam Shiva Tripathi | [Github](https://github.com/arindamshivatrip) | [Portfolio](team/arindamshivatrip.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czlin98"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Timothy Cheah | [Github](https://github.com/e0406981) | [Portfolio](team/e0406981.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Qixing | [Github](https://github.com/QX-CHEN) | [Portfolio](team/qx-chen.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czlin98"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chong Zhi Lin | [Github](https://github.com/czlin98) | [Portfolio](team/czlin98.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czlin98"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chan Meng Han | [Github](https://github.com/mhchan163) | [Portfolio](team/mhchan163.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "czlin98": 3,
      "QX-CHEN": 4,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Design \u0026 implementation](#design--implementation)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Architecture](#architecture)  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Ui component](#ui-component)  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Logic component](#logic-component)  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Model component](#model-component)  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Storage component](#storage-component)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Product scope](#product-scope)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Target user profile](#target-user-profile)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - [Value proposition](#value-proposition)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [User stories](#user-stories)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Use cases](#use-cases)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Non-functional requirements](#non-functional-requirements) "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Glossary](#glossary)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Instruction for manual testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![Architecture](diagrams/Architecture.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "The Architecture Diagram above gives an overview of how different components interacts "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "with each other in the app. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "As the app starts, the main program initialises the Ui, Logic and Storage components."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Then, the Storage component reads existing data file if it is available, else a fresh copy of "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "data file is created.The storage component also reads the .ics file that has the user\u0027s timetable and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "if it exists imports all the tasks into the TaskMap object. If it does not exist then a warning error"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "is given. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "This step also initialises the content of runtime storage which is store "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "in a TaskMap object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Now the Ui component is ready to take inputs from the User, and the input is processed and executed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "in the Logic component, the execution result is passed back to Ui component and displayed to the User."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Just before the main program exits, Storage component saves the content in the TaskMap to the data file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Commons provide utility functions and messages to be used by other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "The sequence diagrams below shows a typical workflow the program."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![LoadAndSaveTasks](diagrams/Startup.png)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "At the start of the app, tasks are loaded using loadTasks function from Storage class, "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "and writeTasksToFile function is called when the program stops. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "Also at the "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![ComponentsSeq](diagrams/ComponentsSeq.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "In the example above, after the programs starts, User inputs \"add meeting\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "the input is captured by the Ui component, then it calls the processRaw "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "function from the Logic component, to extract useful information from the input. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Logic component verified the command is valid and calls the addTask function "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "from the TaskMap, then TaskMap carries out the operation, and a message is"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "return to the Ui from the Logic component."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "The next input provide by the User is \"bye\", it follows a similar process."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "After the message is shown to the User, the main program calls the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "writeTasksToFile() function in Storage and saves the data."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Ui component"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![UiComponent](diagrams/UiClass.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "The diagram above is a class diagram of the Ui component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Other than the usual InputStream and OutputStream, the Ui component has a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "DisplayDateStructure. This abstract class prepares the content to be "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "printed when the DisplayMode is DAY, WEEK or MONTH. The content is generated"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "using generateContent function, which writes the intended content into"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "the 2-D array of characters for weekly and monthly view. After that, "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "the array will be shown to the user by Ui class via the OutputStream. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Moreover, DayStructure, WeekStructure and MonthStructure extends the DisplayDateStructure."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "DayStructure generate content in table format while the other two class will generate "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "a different size of the 2-D array mentioned in the previous paragraph "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "due the difference in number of days displayed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![LogicComponent](diagrams/LogicClass.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "From the Ui component, the raw input from the User is passed to the Parser class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Parser class will process and validate the input, then it generates a specific"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "command accordingly.  Specific commands extends from the abstract Command class."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Command operates on the TaskMap and execution of Command generates a "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "CommandResult. This CommandResult is passed back to the Ui component and "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "respective content will be displayed to User based on the CommandResult. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![ModelComponent](diagrams/TaskMapClass.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Task class consists of attributes like description, date, start time, end time,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "priority, and reminder that are important to users. Whereas other attributes like "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "HASH_VALUE_DIGITS, taskID and internal values of Priority enum class matters"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "more to developers. For example, the HASH_VALUE_DIGITS and the color code of "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Priority could affect the content displayed to User, and the reason why the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "constant 4 is used will be explained in the next paragraph. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "TaskMap is the container used for runtime storage, it stores up to 10000 Task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "objects. The number 10000 is chosen such that the unique identifier of each"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Task is kept within 4 digits. Keeping it to 4 digits allows the app to have a"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "better displaying effect."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "The underlying data structure used for TaskMap is the Java LinkedHashMap."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "It is chosen because it allows efficient access to an element (Task) using the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "unique identifier (Integer). Another reason of using LinkedHashMap is because "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "it is ordered, this allows the container to be sorted. DateSorter and "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "PrioritySorter implements the Task comparator, they are used in the TaskMap"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "functions sortListByDate() and sortListByPriority()."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "Reminder is a class that consists of a class of timer and localtime, as each "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "reminder needs to have its own timer. The timer is created when a reminder "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "is started, and cancelled when the reminder is turned off. As such, having"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "individual timers for each task is important so that they will not interfere"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "with one another."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![StorageComponent](diagrams/StorageClass.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "At the initiating and closing stage of the program, the Storage component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "will read and write to the data file respectively. As shown in the diagram"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "above, the data file is named as \"data.json\" and placed under a folder called"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\"data\". The Storage component also uses the Google Gson library to convert Task"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "object to and from json format. For example, in the process of saving to file,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "each Task object is convert to json string and then writes to file via FileWriter. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Common classes provide utility functions and string messages used by multiple components,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "and these classes are stored in the seedu.commons package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - Students in general"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - Owns a personal laptop/PC"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - Willing to use command line app for planning"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    PlaNUS is a one stop location for students to be able to view all their "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    commitments and assignments, and prioritize their work and commitment "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    with a user-friendly text interface."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v1.0|Forgetful student|add tasks to list|keep track of them and not forget it|"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v1.0|Busy student|modify existing tasks|don\u0027t waste time deleting and adding it all over again|"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v1.0|New user|see instructions|have quick access to the instruction w/o having to access the user guide|"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v1.0|Student with many different tasks \u0026 due dates|set task priority|focus on more urgent tasks |"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v1.0|Student with many different tasks \u0026 due dates|sort tasks by priority|clearly view of tasks urgency|"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v1.0|Student with many tasks|search for tasks|find what i want quickly|"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v1.0|Student with many tasks|delete tasks|old tasks don’t clutter up the display|"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v1.0|Busy student|clear all tasks|don’t waste time deleting one by one|"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v2.0|Busy student|view tasks in a weekly and monthly view|I know what i have due for that time period|"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v2.0|Lazy student|revert operation|easily undo if delete all tasks accidentally|"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "|v2.0|Forgetful student|be reminded of important tasks|attend the event on time|"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "|v2.0|Busy student|View my timetable with my tasks|I know when I have to attend lecture.|"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "## Use cases"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Use case: Add task"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Main success scenario"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1. User adds a task"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2. PLANus adds task"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "3. PLANus shows the task added message"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Extensions  "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "   - 1a. User adds task without any date  "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Date is set to the current date  "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "   - 1b. User adds tasks without any priority  "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Priority is set to low  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "   - 1c. User adds task without start and end time  "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Time is set to empty  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "   - 1d. User inputs wrong details format  "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "PLANus shows invalid command message"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "   - 1e. User add tasks without any input for "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "   reminder. Reminder is set to off."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Use case: List task"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Main success scenario"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1. User requests to list tasks"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2. PLANus shows tasks"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "   - 2a. List is empty - PLANus displays empty list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Use case: Edit task"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Main success scenario"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1. User inputs the task index, and what user wants to change"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2. PLANus changes the task details"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "3. PLANus shows the task edited message. "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends.  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Extensions    "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1a. User inputs an invalid index   "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    1a1. Shows invalid command message  "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1b. User inputs wrong details format  "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    1b1. Shows invalid command message  "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Use case: Help"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Main success scenario"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1. User inputs help command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2. PLANus displays help message"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Use case: Search"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Main success scenario"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1. User inputs search command with keyword"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2. PLANus searches the task list for keyword"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "3. PLANus displays results"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2a. PLANus is unable to find any matches"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2a1. Shows no tasks found message"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Use case: Delete"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Main success scenario"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1. User inputs delete command with index"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2. PLANus deletes the task"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "3. PLANus shows task deleted message"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Extensions "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1a. User inputs invalid index"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1a1. PLANus shows invalid task number message"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Use case: Clear "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Main success scenario"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "1. User inputs clear command"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "2. PLANus clears all tasks"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "3. PLANus shows tasks cleared message"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - The system should respond within two seconds."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - The system should be easy to use, do not require much effort to learn."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - Features should be able to be implemented before project deadline."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - JSON: (JavaScript Object Notation) is a lightweight data-interchange format, and a standard text-based format "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            used for representing structured data based on JavaScript object syntax."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - LinkedHashMap: is a Hash table and linked list implementation of the Map interface, with predictable  "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                     iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running  "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                     through all of its entries. "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "\u003c!-- @@author mhchan163 --\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "### Launch and Shutdown"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "\t"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Download the jar file and copy into an empty folder. Type `java -jar planus.jar`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    int the command line window and press enter, welcome message will be displayed."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Type “bye” into the command line and the program should exit."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "### Adding a task"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "1. Add a task into the list by using add command using only description"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework  "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: homework task should be added to the list with default date being set "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    to the current date."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "2. Add a task into the lists using add command with description and date."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-12-2020  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: homework task should be added to the list with the date set as 25-12-2020."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-13-2020  "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: Since there is no 13th month, the task is not added to the list, "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and an error message is shown."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "3. Add a task into the lists using add command with description, date and start and end times."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-12-2020 st/1900 et/2000  "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: homework task should be added to the list with date set as 25-12-2020 "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and start time 19:00 and end time 20:00."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-12-2020 st/1900 et/2500  "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: Since there is only 24 hours in a day, the task is not added to the list, "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and an error message is shown."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "4. Add a task into the lists using add command with description, date, start "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and end times and priority."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "\t"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-12-2020 st/1900 et/2000 p/3  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: homework task should be added to the list with date set as 25-12-2020 "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and start time 19:00 and end time 20:00 and with a HIGH priority."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-12-2020 st/1900 et/2000 p/4  "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected:  Since the highest priority is HIGH, the task is not added to the list, "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and an error message is shown."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "  "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " 5. Add a task into the lists using add command with description, date, start "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and end times and priority and set a reminder."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-12-2020 st/1900 et/2000 p/3 r/on  "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: homework task should be added to the list with date set as 25-12-2020 "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and start time 19:00 and end time 20:00, with a HIGH priority and reminder set to \"Yes\"."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-12-2020 st/1900 et/2000 p/3 r/to  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: Since \"to\" is not a valid reminder command, the task is not added to the list,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and an error message is shown."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: add homework d/25-12-2020 st/1900 et/2000 p/3 r/off  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: homework task should be added to the list with date set as 25-12-2020 "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and start time 19:00 and end time 20:00, with a HIGH priority and reminder set to \"No\"."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "### Deleting a task"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "Prerequisites: Add some tasks to the list. List all tasks using the list command. "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "All indexes are less than or equal to four-digit numbers."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "1. Deleting a task"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: delete 3542  "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: Task with the index of 3542 is deleted from the list. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: delete 12378  "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: No task is deleted, and an Invalid index error is shown."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "### Editing a task"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "Prerequisites: Add some tasks to the list. List all tasks using the list command."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "All indexes are less than or equal to four-digit numbers."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "1. Editing the description of a task"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 des/homework   "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: The task with index 3542 will have its description changed to “homework” "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    while the other components will remain the same."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "2. Editing the date of a task"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 d/21-10-2020  "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: The task with index 3542 will have its date changed to “21-10-2020” "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    while the other components will remain the same."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 d/22-13-2020  "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: Since there is no 13th month, the task with index 3542 will not be edited, and an error message is shown. "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "3. Editing the start and end time of a task"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 st/1500 et/1600  "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: The task with index 3542 will have its start time changed to 15:00 "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and end time changed to 16:00  while the other components will remain the same."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 st/1500 et/2500  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: Since \"2500\" is not a valid time input, the task with index 3542 will not be edited, "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and an error message is shown. "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "4. Editing the priority of a task"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 p/3  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: The task with index 3542 will have its priority changed to “HIGH” "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    while the other components will remain the same."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 p/4  "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: Since 4 does not correspond to a not a valid priority, the task with index 3542 will not be edited,"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    and an error message is shown. "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "5. Editing the reminder of a task"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 r/on t-2000  "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: The task with index 3542 will have it reminder set to \"Yes\" and a reminder"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    prompt will given at time 20:00 while the other components will remain the same."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    - Test case: edit 3542 r/to  "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Expected: Since \"to\" is not a valid reminder command, the task with index 3542 will not be edited,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "     and an error message is shown. "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "Prerequisites: Add some tasks to the list. "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "Ensure that data is saved during exit of the program"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "After adding some tasks to the list, exit the program using the “bye” command."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "Reopen the program using the jar file and list all tasks using the list command."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "Expected: All pre-existing tasks before the most recent program exit "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "should be displayed in the list."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "arindamshivatrip": 6,
      "mhchan163": 159,
      "QX-CHEN": 264,
      "-": 26
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "# PlaNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "PlaNUS is a desktop application for NUS students to manage their tasks and schedule, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "optimized for use via Command Line Interface (CLI). We aim for PlaNUS to become a "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "one stop location for students to be able to view all their commitments and assignments "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "and prioritize their work and commitment with a user-friendly text interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 7,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "![layout_labelled](images/logo.png)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "--"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- [What is PlaNUS](#what-is-planus)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- [About this document](#about-this-document)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Quick start](#quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Features](#features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - [Showing commands](#showing-all-commands--help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - [Adding task](#adding-a-task--add)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - [Editing task](#editing-a-task--edit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - [Displaying tasks](#displaying-tasks--list)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - [Searching task](#searching-relevant-tasks--search)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - [Removing task](#removing-a-task--delete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - [Clearing task](#clearing-tasks--clear)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - [Undo](#undo--undo)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - [Redo](#redo--redo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - [Exiting program](#exiting-program--bye)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [FAQ](#faq)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- [Java 11 Installation Guide](#java-11-installation-guide)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- [Command summary](#command-summary)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\\pagebreak "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czlin98"
        },
        "content": "## What is PlaNUS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czlin98"
        },
        "content": "PlaNUS is a desktop application for NUS students to manage their tasks and schedule."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czlin98"
        },
        "content": "With this system, you can add your upcoming tasks into the list, and then display"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czlin98"
        },
        "content": "them in a table view or in a calendar view, so that you may easily see and plan your"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czlin98"
        },
        "content": "schedule ahead. This application is optimized for use via Command Line Interface (CLI),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czlin98"
        },
        "content": "this means that you operate the application by typing commands into the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czlin98"
        },
        "content": "This is what **PlaNUS** looks like: "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czlin98"
        },
        "content": "![layout_labelled](images/layout_labelled.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czlin98"
        },
        "content": "*Figure 1. The user interface for PlaNUS.*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\\pagebreak "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czlin98"
        },
        "content": "## About this document"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czlin98"
        },
        "content": "This user guide is a document aiming to help users in understanding the features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czlin98"
        },
        "content": "provided by PlaNUS and the instructions required for each step."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Included is a quick start guide, a brief explanation of each features available,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czlin98"
        },
        "content": "as well as a summary of commands for quick reference at the bottom of the document."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czlin98"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czlin98"
        },
        "content": "\\pagebreak "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czlin98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czlin98"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czlin98"
        },
        "content": "1. Ensure that you have Java 11 or above installed. To check that if you have Java 11 installed for Windows user,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czlin98"
        },
        "content": "open command prompt by pressing `Windows key + R` and type `cmd`, then type `java -version` in the command prompt"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czlin98"
        },
        "content": "and press `Enter`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czlin98"
        },
        "content": "2. If you do not have Java 11 installed, go [here](#java-11-installation-guide)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czlin98"
        },
        "content": "3. For first time Windows user, open command prompt and run the following line to enable color display of command prompt:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    `reg add HKCU\\Console /v VirtualTerminalLevel /t REG_DWORD /d 1`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czlin98"
        },
        "content": "4. Download the latest \"planus.jar\" from [here](https://github.com/AY2021S1-CS2113T-W12-1/tp/releases/tag/v2.1)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czlin98"
        },
        "content": "5. Open a **new** command prompt in the folder where \"planus.jar\" is located at."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czlin98"
        },
        "content": "For Windows user, you can do so by going to the folder in file explorer,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czlin98"
        },
        "content": "and at the location bar type `cmd` and press `Enter`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czlin98"
        },
        "content": "6. Run \"planus.jar\" with the following command:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    `java -jar planus.jar`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    The following content will be displayed if there\u0027s no existing data file:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    ![initial display](images/init.PNG)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    *Figure 2. The first thing you will see upon opening the application.*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czlin98"
        },
        "content": "7. **Maximise** the command prompt window to get a full display of the contents."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czlin98"
        },
        "content": "8. Type a command in command prompt and press `Enter` to execute it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czlin98"
        },
        "content": "9. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\\pagebreak "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Notes about command format:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czlin98"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- Words in UPPER_CASE are the inputs to be supplied by the user while words in LOWER_CASE are the command words."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - e.g. in \"add DESCRIPTION [d/DATE] [st/START_TIME] [et/END_TIME] [p/PRIORITY]\", "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    add is a command word while DESCRIPTION is a description about the task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "      "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- Parameter in square bracket is optional. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - e.g. in \"add DESCRIPTION [d/DATE] [st/START_TIME] [et/END_TIME] [p/PRIORITY]\", "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    DATE, START_TIME, END_TIME and PRIORITY are optional inputs which can be omitted."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- Input date format is dd-MM-yyyy."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - e.g. 20-02-2020 means 20th February 2020"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "      "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "- Input time format is HHmm in 24-hrs."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - e.g. 1830 means 6.30pm"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- Input priority format is 1, 2 or 3 which represents LOW, MEDIUM and HIGH respectively."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - e.g. 1"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- Task index is the number displayed between \"#\" and description of the task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    - e.g. \"#1029 meeting\", 1029 is the index."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "- Input reminder format is either on or off, with the time component having the same HHmm in 24-hrs."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0406981"
        },
        "content": "- If only the index is entered for the edit command, command will still be valid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    - e.g. \"edit 1028\u0027 is valid. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czlin98"
        },
        "content": "```    "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "### Showing all commands : `help`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Shows the commands available with the formats."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "czlin98"
        },
        "content": "![help_command](images/help.PNG)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "czlin98"
        },
        "content": "*Figure 3. A list of available commands and their formats will be displayed.*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "### Adding a task : `add`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Add a task to the task list and display task that was added."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "czlin98"
        },
        "content": "If the date and priority are omitted,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "czlin98"
        },
        "content": "default date will be the day when the tasked is added and"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "czlin98"
        },
        "content": "default priority will be low. If the timings are omitted, the time displayed will be empty.  "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "A reminder can be set for the task, which will be displayed at a given time. If no time is given for the reminder, "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "it will be set to its default which is one hour before the start time of the task. "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "If both are omitted, an error is given."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `add DESCRIPTION [d/DATE] [st/START_TIME] [et/END_TIME] [p/PRIORITY] [r/ON|OFF] [t-REMINDER_TIME]`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`add meeting st/1000`  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`add borrow book`  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "`add Movie st/1700 et/1900 p/3 r/on t-1530`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![add_with_start_time](images/task_add_st.png)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "czlin98"
        },
        "content": "*Figure 4. After adding \"meeting\" starting at 10.00am.*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![add_without_optional_parameters](images/task_add_normal.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "czlin98"
        },
        "content": "*Figure 5. After adding \"borrow book\" with no other inputs.*"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![remainder_set](images/reminder_set.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 6. After adding \"Movie\" with starting time at 05:00pm, end time at 07:00pm and priority HIGH with "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "a reminder set for 3:30pm*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![remainder_prompt](images/reminder_prompt.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 7. After the reminder has reached the specified time*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "### Editing a task : `edit`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Edit a task in the task list using its index and display the task edited."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `edit INDEX [des/DESCRIPTION] [d/DATE] [st/START_TIME] [et/END_TIME] [p/PRIORITY]`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "`edit 875 des/reading`  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "`edit 4075 st/1400 et/1600 p/3`  "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "`edit 875 r/off`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![edit_intial_list](images/edit_Initial_list.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 8. Initial list before edits.*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![edit_after_description](images/edit_after_des.png)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 9. After editing the description of task #875.*"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![edit_after_start_end_priority](images/edit_after_else.png)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 10. After editing the timings and priority of task #4075.*"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![edit_after_reminder_off](images/edit_after_reminder.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 11. After editing the reminder of task #875 to off.*"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "### Displaying tasks : `list` "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Default/no suffix: display **all** tasks in the **order of their addition**.  "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "`-d`: display **all** tasks by **date**, from oldest to newest.  "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`-p`: display **all** tasks by **priority**, from HIGH to LOW.  "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "czlin98"
        },
        "content": "`-w`: display **only tasks in current week** in a weekly view.   "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "czlin98"
        },
        "content": "`-m`: display **only tasks in current month** in a monthly view.  "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "czlin98"
        },
        "content": "`d/DATE`: display **all tasks under a specified date** in **order of their addition**.  "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `list [-d|-p|-w|-m|d/DATE]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Regarding the format, \u0027|\u0027 means \"or\", thus the suffix can either be `-d`, `-p`, `-w`, `-m`, or `d/DATE`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "czlin98"
        },
        "content": "It can also be nothing since square brackets denote optional.  "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Under partial display modes like daily, weekly and monthly view, "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "you could enter `q`, `w` and `e` to quit, view previous and next period respectively."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`list`  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`list -d`  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`list -w`  "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`list d/20-10-2020`  "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "czlin98"
        },
        "content": "`list`:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![list](images/list_normal.png)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 12. Default list, tasks are in order of their addition to the list.*"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "czlin98"
        },
        "content": "`list -d`:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![list_date](images/list_date.png)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 13. List tasks by date, from oldest to newest.*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "czlin98"
        },
        "content": "`list -p`:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![list_priority](images/list_priority.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 14. List tasks by priority, from HIGH to LOW.*"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "czlin98"
        },
        "content": "`list -w`:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![weekly_view](images/list_week.PNG)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 15. Display tasks in a weekly view for the current week.*"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "czlin98"
        },
        "content": "`list -m`:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "![monthly_view](images/list_month.PNG)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 16. Display tasks in a monthly view for the current month.*"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "When viewing tasks by the  `list -w` or `list -m`, monthly or weekly view , then the user will"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "be in the display mode and can view tasks in the previous and month/week using `e` for the next"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "month or date and the command`w` to view the previous month/week. The user can quit the display mode"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "by typing in the command \u0027q\u0027 to quit display mode. "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "### Searching relevant task(s) : `search`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Search and display task(s) with given keyword, keywords do not have to be case-sensitive."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `search KEYWORD`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`search meeting`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![search_meeting](images/search_meeting.png)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 17. A list of tasks containing the keyword will be displayed.*"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "### Removing a task : `delete`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Delete a task from the task list using its index and display the task deleted."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "`delete 7369`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![delete](images/delete.png)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 18. The task that was deleted will be displayed.*"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "### Clearing tasks : `clear`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Delete all tasks in the list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    All tasks cleared."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![clear](images/Clear_tasks.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "*Figure 19. The task that was deleted will be displayed.*"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "czlin98"
        },
        "content": "### Undo : `undo`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Undo the previous action and display a message."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Only modification commands can be undone: `add`, `edit`, `delete`, `clear`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "czlin98"
        },
        "content": "You can undo until the data is the same as what the current session started with."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "czlin98"
        },
        "content": "In this case, the previous action is `add CG2028 final quiz d/11-10-2020 st/1600 et/1700 p/3`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "czlin98"
        },
        "content": "![undo](images/undo.png)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "czlin98"
        },
        "content": "*Figure 20. List of tasks before and after the undo command.*"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "czlin98"
        },
        "content": "### Redo : `redo`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Reverse the undo command and restore the previous action."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "czlin98"
        },
        "content": "This command can only be executed if at least one action has been undone."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "czlin98"
        },
        "content": "In this case, the previous action `add CG2028 final quiz d/11-10-2020 st/1600 et/1700 p/3` was undone."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "czlin98"
        },
        "content": "![redo](images/redo.png)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "czlin98"
        },
        "content": "*Figure 21. List of tasks before and after the redo command.*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "### Exiting program : `bye`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Display a goodbye message and exits the program."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "![bye](images/bye.png)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "czlin98"
        },
        "content": "*Figure 22. Exit message.*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "### Saving data to file"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Data will be automatically saved after modification commands like "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "`add`, `delete`, `edit` and so forth."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "The data is saved in a file called data.jason which can  be found in the folder named"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "data in the same location as the PlaNUS jar file. If you are moving over to a new device and"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "wish to carry over your tasks from the previous device, then simply copy over the data folder into the "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "new device in the same location as the jar file and you\u0027ll have your tasks over"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "in no time."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\\pagebreak "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "**A**: Copy the existing data file to the computer, then create a \"data\" folder under the "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "same folder as \"planus.jar\". Lastly, copy the data file to \"data\" folder and name it \"data.json\"."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "czlin98"
        },
        "content": "**Q**: There is an error and I cannot open the application."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "czlin98"
        },
        "content": "**A**: Check that your Java version is 11. Press `Windows key + R`, type `cmd` and press `Enter`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "czlin98"
        },
        "content": "In the command prompt, type `java -version` and press `Enter` to see your Java version."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "czlin98"
        },
        "content": "If the version is not correct, go [here](#java-11-installation-guide)."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\\pagebreak "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "czlin98"
        },
        "content": "## Java 11 Installation Guide"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "czlin98"
        },
        "content": "1. Click [here](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html) to go to the"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "czlin98"
        },
        "content": "download page for Java 11 JDK. Click on the download link with **zip file** corresponding to your operating system."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "czlin98"
        },
        "content": "2. Create a new folder named \"Java\" in your C drive and extract the contents of the zip file there."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "czlin98"
        },
        "content": "3. Go to [LumiNUS](https://luminus.nus.edu.sg/) under the CS2113T module, go to \"Files\", in the \"Resources\" folder,"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "czlin98"
        },
        "content": "download SwitchJava.bat and SwitchJava.sh and move them to your created \"Java\" folder."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "czlin98"
        },
        "content": "4. For Windows user, open command prompt in the \"Java\" folder by typing `cmd` at the location bar of the file explorer,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "czlin98"
        },
        "content": "and run the batch file by typing `SwitchJava.bat` and press `Enter`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "czlin98"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "czlin98"
        },
        "content": "\\pagebreak "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "czlin98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Action | Format | Example"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "------ | ------ | -------"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "add | `add DESCRIPTION [d/DATE] [st/START_TIME] [et/END_TIME] [p/PRIORITY] [r/(ON/OFF)] [t-REMINDER_TIME]` | `add meeting st/1400`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "edit | \u003ccode\u003eedit INDEX [des/DESCRIPTION] [d/DATE] [st/START_TIME] [et/END_TIME] [p/PRIORITY] [r/ON\u0026#124;OFF] [t-REMINDER_TIME]\u003c/code\u003e | `edit 1234 p/3`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list | \u003ccode\u003elist [-d\u0026#124;-p\u0026#124;-w\u0026#124;-m\u0026#124;d/DATE]\u003c/code\u003e | `list -d`, `list d/10-10-2020`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "search | `search KEYWORD` | `search meet`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete | `delete INDEX` | `delete 212`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "clear | `clear` | `clear`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "undo | `undo` | `undo`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "bye | `bye` | `bye`"
      }
    ],
    "authorContributionMap": {
      "czlin98": 145,
      "arindamshivatrip": 29,
      "e0406981": 2,
      "mhchan163": 56,
      "QX-CHEN": 159,
      "-": 31
    }
  },
  {
    "path": "docs/team/arindamshivatrip.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "# Arindam Shiva Tripathi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "## Project: PlaNUS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "PlaNUS is a desktop CLI based application for NUS students to schedule their tasks and timetable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "Listed below are my contributions to this team project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "* **New Features**: Added the ability to search for tasks. [\\#31](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/31)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  * What it does: Allows the user to search for tasks by using keywords from the description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "   of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  * Justification: By using this feature a user can effectively search for their tasks and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "   won\u0027t spend too long searching for tasks in  the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  * Highlights: -"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  * Credits: -"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "* **New Features**: Added the ability to import their timetable from NUSMODS. [\\#116](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/116)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  * What it does: Allows the user to basically import their NUSMods Timetable into the PlaNUS program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  * Justification: Allows the user to import their timetable into the PlaNUS program. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  Hence, the user will be able to easily access all the class timings as well as exam timings without needing to leave the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "* **Code contributed**: [RepoSense link]( https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003darindamshivatrip\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026tabOpen\u003dtrue\u0026zFR\u003dfalse\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabType\u003dzoom\u0026zA\u003darindamshivatrip\u0026zR\u003dAY2021S1-CS2113T-W12-1%2Ftp%5Bmaster%5D\u0026zACS\u003d118.75\u0026zS\u003d2020-09-27\u0026zFS\u003darindamshivatrip\u0026zU\u003d2020-11-09\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  * Fixed a bug early on in the development of the program where the program would accept blank descriptions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "   [\\#31](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/31)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    *  Added some changes to the UG for user understanding based on the feedback received during bug testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "         [\\#116]   [\\#31](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/116)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "* I added the search feature, but it was further maintained and updated by my teammates."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "- **Community:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    - Reported [bugs and suggestions](https://github.com/arindamshivatrip/ped/issues)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     for the team T13-2 in the PE dry run. "
      }
    ],
    "authorContributionMap": {
      "arindamshivatrip": 36,
      "-": 3
    }
  },
  {
    "path": "docs/team/czlin98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czlin98"
        },
        "content": "# Chong Zhi Lin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czlin98"
        },
        "content": "## Project: PlaNUS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czlin98"
        },
        "content": "PlaNUS is a desktop application for NUS students to manage their tasks and schedule,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czlin98"
        },
        "content": "optimized for Command Line Interface (CLI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czlin98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- **New Feature:** Added the ability to edit existing tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - What it does: Allows the user to edit every component of each task that were already"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - Justification: This feature improves the product as the user may want to edit specific"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    components of the task after already having added them to the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- **New Feature:** Added the ability to redo/restore previous commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - What it does: Allows the user to reverse executed undo commands and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    restore previous changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - Justification: This feature improves the product as the user may want to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    restore commands that they have undone, thus greatly enhancing the user experience"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- **Code contributed:** [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dczlin98\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- **Project management:**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - Provides skeleton code of "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - Managed release `v2.1` on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- **Enhancements to existing features:**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - Updated the UI [#51](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/51)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- **Documentation:**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - User Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        - Added documentation for the features `undo` and `redo` [#125](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/125)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        - Improved introduction and added Java 11 installation guide [#73](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/73)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - Developer Guide"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        - Added product scope"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czlin98"
        },
        "content": "- **Community:**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    - Reported [bugs and suggestions](https://github.com/czlin98/ped/issues) for the other team in the PE dry run."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "czlin98": 35
    }
  },
  {
    "path": "docs/team/e0406981.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "# Timothy Cheah’s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0406981"
        },
        "content": "## Project: PLANus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0406981"
        },
        "content": "PlaNUS - PlaNUS is a desktop application for NUS students to manage their tasks and schedule, optimized for use via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0406981"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0406981"
        },
        "content": "* **New Feature**: Added the ability to delete tasks. [\\#40](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/40)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * What it does: Allows the user to delete a task in the task map. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * Justification: This feature allows users to delete tasks that they deem unnecessary, saving space and making the display better."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * Highlights: -"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * Credits: -"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0406981"
        },
        "content": "* **Code contributed**: [RepoSense link]( https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003de0406981\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003de0406981\u0026tabRepo\u003dAY2021S1-CS2113T-W12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0406981"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage [\\#62](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/62) , [\\#67](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/67)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * Fixed a bug where they allowed for starting time of a task to be later than end time "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  of the task. [\\#112](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/112)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * Added JavaDoc to a few classes and methods. [\\#124](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/124) [\\#120](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/120)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0406981"
        },
        "content": "      "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0406981"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    * Added another note in the UG to be clearer on the edit function. [\\#112](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/112)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0406981"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added use case details of the `Add` feature."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added use case details of the `List` feature."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added use case details of the `Edit` feature."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added use case details of the `Help` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added use case details of the `Search` feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added use case details of the `Delete` feature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added user story details of the `Add` feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added user story details of the `List` feature."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added user story details of the `Edit` feature."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added user story details of the `Help` feature."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added user story details of the `Search` feature."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0406981"
        },
        "content": "\t* Added user story details of the `Delete` feature."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0406981"
        },
        "content": "I added these initial features, but they were further maintained and updated by my teammates. The initial commit for these features were also done by Qixing, not me, as I did the DG on a 3rd party platform. [\\#55](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/55)"
      }
    ],
    "authorContributionMap": {
      "e0406981": 42,
      "QX-CHEN": 2
    }
  },
  {
    "path": "docs/team/mhchan163.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "# Chan Meng Han - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "PlaNUS is a desktop application for NUS students to manage their tasks and schedule."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "With this system, you can add your upcoming tasks into the list, and then display"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "them in a table view or in a calendar view, so that you may easily see and plan your"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "schedule ahead. This application is optimized for use via Command Line Interface (CLI),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "this means that you operate the application by typing commands into the command box."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "* **New Feature**: Added the ability to add reminders to a task. (Pull Requests [\\#71](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/71), [\\#110](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/110))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "  * What it does: Allows the user to set up a reminder for any specific task that they chose, for any specific time within the date of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "  * Justification: This feature is helpful for our application as part of a planner\u0027s purpose is to help the user keep on a fixed schedule. The reminder function helps forgetful or extremely people keep track of their tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "  * Highlights: This feature has been integrated into the add task command, so instead of having a separate command for reminder, it is embedded into the add command for easier use. It was an intricate implementation as the Task object has many interactions to account for, and it\u0027s integration required careful consideration of how it could affect the other parts of the code negatively."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmhchan163\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "* **Enhancement to existing features**:  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "   * Restructured the Parser class to extract the parameters from the user input instead of leaving it to be done in the command classes, with the aim of making it more in accordance with OOP. (Pull Request [\\#69](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/69))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "   * Wrote test for Reminder class after integration to Task object. (Pull Request [\\#110](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/110))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    * User Guide: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        * Added documentation for reminder feature and edit the format for add and edit according (Pull Request [\\#115](CS2113T-W12-1/tp/pull/115))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        * Standardised expected outcome photos (Pull request [\\#115](CS2113T-W12-1/tp/pull/115))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    * Developer Guide: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        * Added manual testing section (Done on a 3rd party platform by me and transferred and committed by my teammate Qixing. Pull Request [\\#55](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/55))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        * Added documentation for reminder feature into design and implementation section (Pull request [\\#126](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/126))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        * Added reminder class to the task class diagram (Pull request [\\#126](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/126))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "mhchan163": 35
    }
  },
  {
    "path": "docs/team/qx-chen.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "# Chen Qixing\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "## Project: PlaNUS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "PlaNUS - PlaNUS is a desktop application for NUS students to manage their tasks and "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "schedule, optimized for use via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "* **New Feature**: Added the ability to display tasks by day, week and month. Under these modes,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "user could use \u0027q\u0027, \u0027w\u0027 and \u0027e\u0027 to quit, view previous period and next period respectively. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * What it does: allows the user to view the tasks under different display modes and "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  adjust the viewing period without to enter a full command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Justification: This feature improves the user experience as a user can focus on tasks over a specific period"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "   (day, week, month) and change the period conveniently."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "* **New Feature**: Added the ability to undo previous modification commands like add, edit, delete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * What it does: allows the user to undo modification commands one at a time until it reaches startup state. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Justification: This feature improves the user experience as a user can easily revert a mistake without having"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  the trouble to enter one or multiple full commands to rectify it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dqx-)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Setting up the GitHub team org/repo"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Necessary general code enhancements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Maintaining the issue tracker"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Managed releases `v1.0` - `v2.0` (2 releases) on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    * Display with color text."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    * JUnit tests for Utility and TaskMap."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    * Added quick start section."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    * Added documentation for the features `list` and `undo`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    * Added internal links."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    * Created summary table."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    * Added design and implementation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    * Added internal links."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * PR reviewed: [\\#38](https://github.com/AY2021S1-CS2113T-W12-1/tp/pull/38)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Reported [3 bugs](https://github.com/QX-CHEN/ped/issues) for other team in the PE dry run."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "  * Integrated a third party library (Gson) to the project"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 54
    }
  },
  {
    "path": "src/main/java/seedu/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.MaxNumTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.ADD_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class AddCommand extends ModificationCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    // Default date: day that the task is created, default priority: 0 (low to high: 0 - 2)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final Pattern COMMAND_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            \"^(?\u003cdescription\u003e(\\\\w+\\\\s*)+\\\\w*)\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"( d/(?\u003cdate\u003e\\\\d{2}-\\\\d{2}-\\\\d{4}))?\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"( st/(?\u003cst\u003e\\\\d{4}))?\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"( et/(?\u003cet\u003e\\\\d{4}))?\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    + \"( p/(?\u003cpriority\u003e\\\\d))?\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    + \"( r/(?\u003creminder\u003e\\\\w+\\\\s*))?\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    + \"( t-(?\u003ct\u003e\\\\d{4}))?$\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private final String reminder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private final String reminderTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param description  name/description of task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param date         date of task being created"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param startTime    start time of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param endTime      end time of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param priority     1,2 or 3.(low/med/high)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @param reminder     remind on/off"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @param reminderTime time set for reminder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidCommandException throws this when start time is at a later timing in the day than end time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public AddCommand(String description, String date, String startTime, String endTime, String priority,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0406981"
        },
        "content": "                      String reminder, String reminderTime) throws InvalidCommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.reminderTime \u003d reminderTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        if (startTime !\u003d null \u0026\u0026 endTime !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            if (Integer.parseInt(startTime) \u003e\u003d Integer.parseInt(endTime)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0406981"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Adds a task. Updates the model with new list of tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param model Contains the TaskMap and stack(for the undo function)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return the CommandResult object, which shows the task added message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidPriorityException if priority given is not 1,2 or 3."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidDatetimeException if wrong date or time format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws MaxNumTaskException      if tasks size \u003d\u003d 10000"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @throws InvalidReminderException if wrong reminder format"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(Model model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            throws InvalidPriorityException, InvalidDatetimeException, MaxNumTaskException, InvalidReminderException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap tasks \u003d model.getTaskMap();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Handle collision by generating new taskID if the value is in use."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Task task \u003d new Task(description, date, startTime, endTime, priority, reminder, reminderTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Integer taskID \u003d task.getTaskID();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (tasks.size() \u003d\u003d TaskMap.MAX_NUM_TASKS) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new MaxNumTaskException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assert tasks.size() !\u003d TaskMap.MAX_NUM_TASKS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Finding an unused key"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        while (tasks.get(taskID) !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            taskID \u003d (taskID + 1) % TaskMap.MAX_NUM_TASKS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        task.reminder.startReminder(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        task.setTaskID(taskID);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // update stack"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        model.pushCurrentStackAndUpdate(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return new CommandResult(ADD_MESSAGE, task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 5,
      "e0406981": 31,
      "mhchan163": 18,
      "QX-CHEN": 43
    }
  },
  {
    "path": "src/main/java/seedu/commands/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.data.Timers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.BYE_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class ByeCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Exits the program \u0026 prints bye message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return CommandsResult object with the bye message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        CommandResult result \u003d new CommandResult(BYE_MESSAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Timers.cancel();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        result.setExit(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0406981": 4,
      "mhchan163": 3,
      "QX-CHEN": 13
    }
  },
  {
    "path": "src/main/java/seedu/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.data.Timers;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.CLEAR_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class ClearCommand extends ModificationCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Clears the current list of all tasks and updates the stack."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param model contains TaskMap and stack."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return CommandResult object with the clear message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap tasks \u003d model.getTaskMap();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Timers.cancel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        model.pushCurrentStackAndUpdate(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(CLEAR_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 1,
      "e0406981": 5,
      "mhchan163": 3,
      "QX-CHEN": 16
    }
  },
  {
    "path": "src/main/java/seedu/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.MaxNumTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.EmptyDataStackException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public CommandResult execute(TaskMap taskMap) throws InvalidTaskNumberException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(Model model) throws InvalidPriorityException, InvalidDatetimeException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        MaxNumTaskException, InvalidTaskNumberException, EmptyDataStackException, InvalidReminderException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 8,
      "QX-CHEN": 17
    }
  },
  {
    "path": "src/main/java/seedu/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.ui.DisplayMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private TaskMap tasks \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private Task task \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private DisplayMode displayMode \u003d DisplayMode.ALL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult(String message, TaskMap tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public CommandResult(String message,Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap getTasks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DisplayMode getDisplayMode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return displayMode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setExit(boolean exit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        isExit \u003d exit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setTasks(TaskMap tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDisplayMode(DisplayMode displayMode) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.displayMode \u003d displayMode;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 11,
      "QX-CHEN": 60
    }
  },
  {
    "path": "src/main/java/seedu/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0406981"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import static seedu.messages.Messages.DELETE_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DeleteCommand extends ModificationCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final Integer key;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final Pattern COMMAND_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            \"^(?\u003ckey\u003e\\\\d+)$\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param keyString the Index of the task being deleted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidTaskNumberException When something other than an int is entered after the delete command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DeleteCommand(String keyString) throws InvalidTaskNumberException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            key \u003d Integer.parseInt(keyString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Deletes the task, updates the model with new list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param model Contains the TaskMap and stack(for the undo function)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return the CommandResult object, which shows the task deleted message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidTaskNumberException if the Index the user entered was invalid, AKA task does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(Model model) throws InvalidTaskNumberException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap tasks \u003d model.getTaskMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Task task \u003d tasks.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Task taskDeleted \u003d task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.delete(key);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        model.pushCurrentStackAndUpdate(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return new CommandResult(DELETE_MESSAGE,taskDeleted);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0406981"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 2,
      "e0406981": 29,
      "mhchan163": 4,
      "QX-CHEN": 15
    }
  },
  {
    "path": "src/main/java/seedu/commands/DisplayReminderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import static seedu.messages.Messages.REMINDER_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " * This class creates a command for displaying the reminder task when the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " * time set for the reminder is reached."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DisplayReminderCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DisplayReminderCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return new CommandResult(REMINDER_MESSAGE, task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 19,
      "QX-CHEN": 2
    }
  },
  {
    "path": "src/main/java/seedu/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.EDIT_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class EditCommand extends ModificationCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final Pattern COMMAND_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            \"^(?\u003ckey\u003e\\\\d+)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"( des/(?\u003cdescription\u003e(\\\\w+\\\\s*)+\\\\w*))?\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"( d/(?\u003cdate\u003e\\\\d{2}-\\\\d{2}-\\\\d{4}))?\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"( st/(?\u003cst\u003e\\\\d{4}))?\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"( et/(?\u003cet\u003e\\\\d{4}))?\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    + \"( p/(?\u003cpriority\u003e\\\\d))?\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    + \"( r/(?\u003creminder\u003e\\\\w+\\\\s*))?\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    + \"( t-(?\u003ct\u003e\\\\d{4}))?$\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final Integer key;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private final String reminder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private final String reminderTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param keyString    the index of the task being edited."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param description  the description of the task being edited."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param date         the date of the task being edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param startTime    the start time of the task being edited."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param endTime      the end time of the task being edited."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param priority     the priority of the task being edited. (1,2 or 3)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @param reminder     the reminder being set to on/off"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @param reminderTime the reminder time being set"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidTaskNumberException When index is not a integer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidCommandException    When the start time is more than end time(invalid format)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public EditCommand(String keyString, String description, String date, String startTime, String endTime,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                       String priority, String reminder, String reminderTime)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            throws InvalidTaskNumberException, InvalidCommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            key \u003d Integer.parseInt(keyString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.reminderTime \u003d reminderTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        if (startTime !\u003d null \u0026\u0026 endTime !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            if (Integer.parseInt(startTime) \u003e\u003d Integer.parseInt(endTime)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0406981"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Changed the required field of the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param model Contains TaskMap and stack(for undo function)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return CommandResult object with the task edited message."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidTaskNumberException If the task at the index is not found. (Task has not been created)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidPriorityException   Priority is not 1,2 or 3."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidDatetimeException   Date/time is not in desired format. (eg 2500 or 1236 or abcd)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @throws InvalidReminderException   If wrong reminder format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(Model model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            throws InvalidTaskNumberException, InvalidPriorityException,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            InvalidDatetimeException, InvalidReminderException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap tasks \u003d model.getTaskMap();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Task task \u003d tasks.get(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Task editedTask \u003d new Task(key, task.getDescription(), task.getDate(), task.getStartTime(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                task.getEndTime(), task.getPriority(), task.newReminder());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Set field"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (description !\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            editedTask.setDescription(description);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            editedTask.setDate(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (startTime !\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            editedTask.setStartTime(startTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (endTime !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            editedTask.setEndTime(endTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (priority !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            editedTask.setPriority(priority);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        if (reminder !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            editedTask.setReminder(reminder, reminderTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        editedTask.reminder.startReminder(editedTask);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.delete(key);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.addTask(editedTask);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        model.pushCurrentStackAndUpdate(tasks);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return new CommandResult(EDIT_MESSAGE, editedTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 5,
      "e0406981": 33,
      "mhchan163": 22,
      "QX-CHEN": 60
    }
  },
  {
    "path": "src/main/java/seedu/commands/GeneralCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class GeneralCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 4
    }
  },
  {
    "path": "src/main/java/seedu/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.HELP_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class HelpCommand extends GeneralCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Prints list of commands for user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return CommandResult object with the help message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new CommandResult(HELP_MESSAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0406981": 5,
      "QX-CHEN": 14
    }
  },
  {
    "path": "src/main/java/seedu/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.ui.DisplayMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.zip.CheckedOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.LIST_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class ListCommand extends ReadOnlyCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final Pattern COMMAND_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            \"^(?\u003cdateFlag\u003e-d)?\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"(?\u003cpriorityFlag\u003e-p)?\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"(?\u003cdisplayByWeek\u003e-w)?\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"(?\u003cdisplayByMonth\u003e-m)?\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    + \"(d/(?\u003cdate\u003e\\\\d{2}-\\\\d{2}-\\\\d{4}))?$\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final boolean dateFlag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final boolean priorityFlag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final boolean displayByWeek;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final boolean displayByMonth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param dateFlag       True if user wants to sort by date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param priorityFlag   True if user wants to sort by priority."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param displayByWeek  True if user wants to sort by weekly view."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param displayByMonth True if user wants to sort by monthly view."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param date           The date which the user wants to check the tasks for."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public ListCommand(boolean dateFlag, boolean priorityFlag, boolean displayByWeek,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                       boolean displayByMonth, String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.dateFlag \u003d dateFlag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.priorityFlag \u003d priorityFlag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.displayByWeek \u003d displayByWeek;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.displayByMonth \u003d displayByMonth;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Displays what the user is looking for."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param tasks TaskMap of all the tasks in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return CommandResult object with the list message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskMap tasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assert !(dateFlag \u0026\u0026 priorityFlag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (dateFlag) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new CommandResult(LIST_MESSAGE, tasks.sortListByDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (priorityFlag) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new CommandResult(LIST_MESSAGE, tasks.sortListByPriority());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        CommandResult result \u003d new CommandResult(LIST_MESSAGE, tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            LocalDate tempDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            result.setDate(tempDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            result.setDisplayMode(DisplayMode.DAY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (displayByWeek) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            result.setDisplayMode(DisplayMode.WEEK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (displayByMonth) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            result.setDisplayMode(DisplayMode.MONTH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 1,
      "e0406981": 15,
      "mhchan163": 6,
      "QX-CHEN": 54
    }
  },
  {
    "path": "src/main/java/seedu/commands/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.MaxNumTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.EmptyDataStackException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class LogicManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LogicManager(Ui ui, Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                assert userInput !\u003d null : \"null input\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                Command command \u003d parser.processRaw(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                assert command !\u003d null : \"null command\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                assert result !\u003d null : \"null command result\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                isExit \u003d ui.interpretCommandResult(result);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                ui.showException(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private CommandResult executeCommand(Command cmd)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        throws MaxNumTaskException, InvalidTaskNumberException, InvalidDatetimeException,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        InvalidPriorityException, EmptyDataStackException, InvalidReminderException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (cmd instanceof ReadOnlyCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return cmd.execute(model.getTaskMap());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (cmd instanceof ModificationCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return cmd.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return cmd.execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 7,
      "QX-CHEN": 52
    }
  },
  {
    "path": "src/main/java/seedu/commands/ModificationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class ModificationCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 4
    }
  },
  {
    "path": "src/main/java/seedu/commands/ReadOnlyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class ReadOnlyCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 4
    }
  },
  {
    "path": "src/main/java/seedu/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czlin98"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.data.DataStack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.exceptions.EmptyDataStackException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czlin98"
        },
        "content": "public class RedoCommand extends ModificationCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Pops the latest version of the TaskMap from the undo stack"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * and push it into the data stack."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Updates the current list of tasks to the previous version."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @param model Contains TaskMap and stack."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @return A CommandResult, depending on whether there was an undo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @throws EmptyDataStackException if stack is empty."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public CommandResult execute(Model model) throws EmptyDataStackException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        DataStack dataStack \u003d model.getUndoStack();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        if (dataStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            return new CommandResult(Messages.NO_PREV_MODIFICATION_REDO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            model.popUndoStackAndUpdate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            return new CommandResult(Messages.REDO_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czlin98"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "czlin98": 32
    }
  },
  {
    "path": "src/main/java/seedu/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.SEARCH_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.SEARCH_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class SearchCommand extends ReadOnlyCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    // Search by description, can extend to other attributes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final Pattern COMMAND_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            \"^(?\u003ctoSearch\u003e(\\\\w+\\\\s*)+\\\\w*)$\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String toSearch;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param keyWord String to be searched for in the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public SearchCommand(String keyWord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        toSearch \u003d keyWord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Searches TaskMap for the keyword, and displays task(s) if found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param tasks TaskMap of all the tasks in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return A CommandResult object, depending on whether keyword is found, with the relevant message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(TaskMap tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap found \u003d tasks.searchByDescription(toSearch);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (found.size() \u003e 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new CommandResult(SEARCH_FOUND_MESSAGE, found);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new CommandResult(SEARCH_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 1,
      "e0406981": 11,
      "mhchan163": 2,
      "QX-CHEN": 29
    }
  },
  {
    "path": "src/main/java/seedu/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.DataStack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.EmptyDataStackException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class UndoCommand extends ModificationCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Pops the latest version of the TaskMap from the stack"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Updates the current list of tasks to the previous version."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param model Contains TaskMap and stack."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return A CommandResult, depending on whether there was an undo, with the relevant message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws EmptyDataStackException if stack is empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public CommandResult execute(Model model) throws EmptyDataStackException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        DataStack dataStack \u003d model.getDataStack();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (dataStack.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new CommandResult(Messages.NO_PREV_MODIFICATION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            model.popCurrentStackAndUpdate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new CommandResult(Messages.UNDO_MESSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 1,
      "e0406981": 8,
      "QX-CHEN": 21
    }
  },
  {
    "path": "src/main/java/seedu/commons/Util.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Provides common utility functions for other classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Util {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Generates a pad string with character and length."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param pad character that needs to be duplicate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param length number of the characters required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return String of pad characters of length."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static String generatePadStringWithCharAndLength(char pad, int length) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return String.format(\"%\" + length + \"s\", \"\").replace(\u0027 \u0027, pad);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Adds three dots to the back of a string if the length of the string exceeds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param string to be processed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param limit length limit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return processed string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static String limitStringWithDots(String string, int limit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (limit \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else if (limit \u003c 3) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return string.substring(0, limit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return (string.length() \u003e limit) ? (string.substring(0, limit - 3) + \"...\") : string;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Copy a string into a character array."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param string source."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param arr destination."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param start position of the array."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void putsIntoArray(String string, char[] arr, int start) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        string.getChars(0, string.length(), arr, start);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Copy a string into a character array with centralise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param string source."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param arr destination."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param start position of the array."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param end position of the array."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void putsIntoArrayWithCentralise(String string, char[] arr, int start, int end) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // assert within range"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // assert (end - start + 1) \u003e\u003d string.length();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int dstBegin \u003d start + (end - start - string.length()) / 2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        string.getChars(0, string.length(), arr, dstBegin);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Convert a string representation of date with format DD-MM-YYYY to a LocalDate object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param dateString string representation of date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return LocalDate object represented by dateString."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws InvalidDatetimeException when date values are not in range."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static LocalDate dateStringToDate(String dateString) throws InvalidDatetimeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (dateString \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String[] dateParts \u003d dateString.split(\"-\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int day \u003d Integer.parseInt(dateParts[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int month \u003d Integer.parseInt(dateParts[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int year \u003d Integer.parseInt(dateParts[2]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidDatetimeException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Convert a string representation of time with format HHMM to a LocalTime object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param timeString string representation of time."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return LocalTime object represented by timeString."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws InvalidDatetimeException when time values are not in range."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static LocalTime timeStringToTime(String timeString) throws InvalidDatetimeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (timeString \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int time \u003d Integer.parseInt(timeString);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int hour \u003d time / 100;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int minute \u003d time % 100;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidDatetimeException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Convert a string representation of priority to a Priority object."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param priorityString string representation of priority."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return Priority object represented by string."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws InvalidPriorityException when priority value is not in range."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static Priority priorityStringToPriority(String priorityString) throws InvalidPriorityException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (priorityString \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Priority priority;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        switch (priorityString) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new InvalidPriorityException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Converts date object into its string representation."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param date LocalDate object to be converted."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return String representation of the date."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static String dateToString(LocalDate date) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return \" \" + date.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Converts time object into its string representation."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param time LocalTime object to be converted."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return String representation of the time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static String timeToString(LocalTime time) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return \" \" + time.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Converts priority object into its string representation."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param priority Priority object to be converted."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return String representation of the priority."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static String priorityToString(Priority priority) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return \" \" + priority.toString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 175
    }
  },
  {
    "path": "src/main/java/seedu/data/DataStack.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.EmptyDataStackException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Maintain a stack for undo function."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DataStack {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Deque\u003cTaskMap\u003e stack \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Adds a copy of taskMap into the stack."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param taskMap copy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void push(TaskMap taskMap) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        stack.addFirst(taskMap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get the most recent copy of taskMap and remove it from the stack."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return most recent taskMap."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws EmptyDataStackException when stack is empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap pop() throws EmptyDataStackException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (stack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throw new EmptyDataStackException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return stack.removeFirst();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get the most recent copy of taskMap."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return most recent taskMap."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap peek() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return stack.getFirst();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get size of stack."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return size of stack."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return stack.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 49
    }
  },
  {
    "path": "src/main/java/seedu/data/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.EmptyDataStackException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Model keeps track of the runtime data,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czlin98"
        },
        "content": " * it maintain a taskMap that contains updated tasks,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czlin98"
        },
        "content": " * a currentStack that contains copies of taskMap from start to end of a session,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czlin98"
        },
        "content": " * and an undoStack that contains copies of taskMap removed from currentStack."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private TaskMap taskMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    private DataStack currentStack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    private DataStack undoStack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creates a new data model with taskMap."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param taskMap taskMap with existing tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Model(TaskMap taskMap) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.taskMap \u003d taskMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Initialise currentStack by adding the first copy of taskMap to the stack."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Initialise undoStack."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        currentStack \u003d new DataStack();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        undoStack \u003d new DataStack();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        currentStack.push(taskMap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Get currentStack that contains taskMaps."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @return currentStack."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DataStack getDataStack() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        return currentStack;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get a copy of updated taskMap."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return copy of latest taskMap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap getTaskMap() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // new copy of taskMap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new TaskMap(taskMap.getValues());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Get undoStack that contains taskMaps removed from currentStack."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * @return undoStack"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public DataStack getUndoStack() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        return undoStack;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Set the updated taskMap."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param taskMap updated taskMap."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setTaskMap(TaskMap taskMap) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.taskMap \u003d taskMap;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Add latest taskMap to currentStack and sets updated taskMap."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param taskMap updated taskMap."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public void pushCurrentStackAndUpdate(TaskMap taskMap) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        currentStack.push(taskMap);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setTaskMap(taskMap);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Get latest taskMap and remove it from currentStack, then sets updated taskMap."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @throws EmptyDataStackException when dataStack is empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public void popCurrentStackAndUpdate() throws EmptyDataStackException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        undoStack.push(currentStack.pop());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        setTaskMap(currentStack.peek());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Get latest taskMap and remove it from undoStack."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     * Add that taskMap to currentStack and sets updated taskMap."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public void popUndoStackAndUpdate() throws EmptyDataStackException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        currentStack.push(undoStack.pop());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        setTaskMap(currentStack.peek());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 36,
      "QX-CHEN": 58
    }
  },
  {
    "path": "src/main/java/seedu/data/TaskMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.DateSorter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.PrioritySorter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " * Container for storing tasks in (Integer, Task) pairs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class TaskMap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final int MAX_NUM_TASKS \u003d 10000;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LinkedHashMap\u003cInteger, Task\u003e tasksMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creating a new TaskMap to store tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasksMap \u003d new LinkedHashMap\u003c\u003e(MAX_NUM_TASKS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Creating a TaskMap from an existing collection of task objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks collection of task objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasksMap \u003d new LinkedHashMap\u003c\u003e(MAX_NUM_TASKS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            tasksMap.put(task.getTaskID(), task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get a collection of task objects from a TaskMap."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return collection of task objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Collection\u003cTask\u003e getValues() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasksMap.values();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Adds a task to a TaskMap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param task to be added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasksMap.put(task.getTaskID(), task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get the size of a TaskMap."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return size of the TaskMap."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasksMap.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Get the task from TaskMap by key."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param key unique identifier of a task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return the task with the key as unique identifier."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task get(Integer key) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasksMap.get(key);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Sort a TaskMap by date of tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return new TaskMap which sort tasks by date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap sortListByDate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Sort by date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        List\u003cTask\u003e sorted \u003d tasksMap.values().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .sorted(new DateSorter())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new TaskMap(sorted);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Sort a TaskMap by priority of tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return new TaskMap which sort tasks by priority."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap sortListByPriority() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Sort by priority, same priority then date"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        List\u003cTask\u003e sorted \u003d tasksMap.values().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .sorted(new DateSorter())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .sorted(new PrioritySorter())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new TaskMap(sorted);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Search task in TaskMap by description."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param toSearch string to be searched."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return new TaskMap with tasks\u0027 description contain toSearch."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap searchByDescription(String toSearch) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        List\u003cTask\u003e found \u003d tasksMap.values().stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .filter(task -\u003e task.getDescription().toLowerCase().contains(toSearch.toLowerCase()))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new TaskMap(found);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Search task in TaskMap by date."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param date of task."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return new TaskMap with tasks on date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap searchByDate(LocalDate date) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        List\u003cTask\u003e found \u003d tasksMap.values().stream()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .filter(task -\u003e task.getDate().equals(date))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new TaskMap(found);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Empty TaskMap."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasksMap.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Delete a task from TaskMap by key."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param key unique identifier of a task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void delete(Integer key) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        if (tasksMap.size() \u003e 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            tasksMap.get(key).reminder.offReminder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasksMap.remove(key);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 3,
      "QX-CHEN": 135
    }
  },
  {
    "path": "src/main/java/seedu/data/Timers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "package seedu.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " * This class holds all the timers used during the program"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " * using an Arraylist of timer objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "public class Timers {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private static final ArrayList\u003cTimer\u003e timers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static void add(Timer timer) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        timers.add(timer);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static void cancel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        for (Timer t : timers) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t.cancel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 22
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/EmptyDataStackException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class EmptyDataStackException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return Messages.EMPTY_DATA_STACK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 10
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return Messages.INVALID_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 10
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/InvalidDatetimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class InvalidDatetimeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return Messages.INVALID_DATETIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 10
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/InvalidFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czlin98"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        return Messages.INVALID_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 2,
      "QX-CHEN": 8
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/InvalidPriorityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class InvalidPriorityException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return Messages.INVALID_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 10
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/InvalidReminderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "public class InvalidReminderException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return Messages.INVALID_REMINDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 10
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/InvalidTaskNumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class InvalidTaskNumberException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return Messages.INVALID_TASK_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 10
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/MaxNumTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class MaxNumTaskException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return Messages.MAX_NUM_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 10
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/UnknownCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czlin98"
        },
        "content": "public class UnknownCommandException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return Messages.UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 1,
      "QX-CHEN": 9
    }
  },
  {
    "path": "src/main/java/seedu/exceptions/UnknownFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "package seedu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import seedu.messages.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "public class UnknownFileException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        return Messages.NO_SUCH_FILE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arindamshivatrip": 10
    }
  },
  {
    "path": "src/main/java/seedu/font/Colors.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.font;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Colors {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    // Colors from https://dev.to/awwsmm/coloured-terminal-output-with-java-57l3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_RESET  \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BLACK  \u003d \"\\u001B[30m\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_RED    \u003d \"\\u001B[31m\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_GREEN  \u003d \"\\u001B[32m\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_YELLOW \u003d \"\\u001B[33m\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BLUE   \u003d \"\\u001B[34m\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_PURPLE \u003d \"\\u001B[35m\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_CYAN   \u003d \"\\u001B[36m\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_WHITE  \u003d \"\\u001B[37m\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BLACK  \u003d \"\\u001B[90m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_RED    \u003d \"\\u001B[91m\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_GREEN  \u003d \"\\u001B[92m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_YELLOW \u003d \"\\u001B[93m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BLUE   \u003d \"\\u001B[94m\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_PURPLE \u003d \"\\u001B[95m\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_CYAN   \u003d \"\\u001B[96m\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_WHITE  \u003d \"\\u001B[97m\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String[] FOREGROUNDS \u003d {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ANSI_BLACK, ANSI_RED, ANSI_GREEN, ANSI_YELLOW,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ANSI_BLUE, ANSI_PURPLE, ANSI_CYAN, ANSI_WHITE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ANSI_BRIGHT_BLACK, ANSI_BRIGHT_RED, ANSI_BRIGHT_GREEN, ANSI_BRIGHT_YELLOW,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ANSI_BRIGHT_BLUE, ANSI_BRIGHT_GREEN, ANSI_BRIGHT_CYAN, ANSI_BRIGHT_WHITE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BG_BLACK  \u003d \"\\u001B[40m\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BG_RED    \u003d \"\\u001B[41m\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BG_GREEN  \u003d \"\\u001B[42m\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BG_YELLOW \u003d \"\\u001B[43m\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BG_BLUE   \u003d \"\\u001B[44m\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BG_PURPLE \u003d \"\\u001B[45m\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BG_CYAN   \u003d \"\\u001B[46m\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BG_WHITE  \u003d \"\\u001B[47m\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BG_BLACK  \u003d \"\\u001B[100m\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BG_RED    \u003d \"\\u001B[101m\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BG_GREEN  \u003d \"\\u001B[102m\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BG_YELLOW \u003d \"\\u001B[103m\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BG_BLUE   \u003d \"\\u001B[104m\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BG_PURPLE \u003d \"\\u001B[105m\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BG_CYAN   \u003d \"\\u001B[106m\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ANSI_BRIGHT_BG_WHITE  \u003d \"\\u001B[107m\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String[] BACKGROUNDS \u003d {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ANSI_BG_BLACK, ANSI_BG_RED, ANSI_BG_GREEN, ANSI_BG_YELLOW,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ANSI_BG_BLUE, ANSI_BG_PURPLE, ANSI_BG_CYAN, ANSI_BG_WHITE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ANSI_BRIGHT_BG_BLACK, ANSI_BRIGHT_BG_RED, ANSI_BRIGHT_BG_GREEN, ANSI_BRIGHT_BG_YELLOW,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ANSI_BRIGHT_BG_BLUE, ANSI_BRIGHT_BG_PURPLE, ANSI_BRIGHT_BG_CYAN, ANSI_BRIGHT_BG_WHITE };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String DEFAULT_STRING_COLOR \u003d ANSI_YELLOW;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 57
    }
  },
  {
    "path": "src/main/java/seedu/messages/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commons.Util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_BRIGHT_GREEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_CYAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_RESET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_YELLOW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String WELCOME_BORDER \u003d \" \" + padString(\u0027\u003d\u0027, 58) + \" \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String WELCOME_BORDER_SPACE \u003d \"||\" + padString(\u0027 \u0027, 56) + \"||\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String WELCOME_PREFIX \u003d \"||         \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final String HELP_BORDER \u003d \" \" + padString(\u0027\u003d\u0027, 120) + \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final String HELP_BORDER_SPACE \u003d \"||\" + padString(\u0027 \u0027, 118) + \"||\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String HELP_PREFIX \u003d \"||       \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String INVALID_PRIORITY \u003d \"Invalid priority!\" + LS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String INVALID_COMMAND \u003d \"Invalid command!\" + LS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String UNKNOWN_COMMAND \u003d \"Unknown command!\" + LS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String INVALID_TASK_NUMBER \u003d \"Invalid task number!\" + LS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String INVALID_DATETIME \u003d \"Invalid datetime!\" + LS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String MAX_NUM_TASK \u003d \"Max number of tasks reached!\" + LS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String EMPTY_DATA_STACK \u003d \"Empty data stack!\" + LS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static final String NO_SUCH_FILE \u003d \"This ics file does not exist\" + LS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final String INVALID_REMINDER \u003d \"Invalid reminder command!\" + LS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String IO_EXCEPTION \u003d \"Check data file!\" + LS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \"Format entered is not valid! Type \u0027help\u0027 for more info.\" + LS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String WELCOME_MESSAGE \u003d WELCOME_BORDER + LS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + WELCOME_BORDER_SPACE + LS"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + WELCOME_PREFIX + ANSI_YELLOW + \"Welcome to\" + ANSI_RESET + padString(\u0027 \u0027, 37) + \"||\" + LS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + WELCOME_PREFIX + ANSI_CYAN + \"    ____  __      _   ____  _______\" + ANSI_RESET + \"            ||\" + LS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + WELCOME_PREFIX + ANSI_CYAN + \"   / __ \\\\/ /___ _/ | / / / / / ___/\" + ANSI_RESET + \"            ||\" + LS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + WELCOME_PREFIX + ANSI_CYAN + \"  / /_/ / / __ `/  |/ / / / /\\\\__ \\\\ \" + ANSI_RESET + \"            ||\" + LS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + WELCOME_PREFIX + ANSI_CYAN + \" / ____/ / /_/ / /|  / /_/ /___/ / \" + ANSI_RESET + \"            ||\" + LS"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + WELCOME_PREFIX + ANSI_CYAN + \"/_/   /_/\\\\__,_/_/ |_/\\\\____//____/  \" + ANSI_RESET"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + ANSI_CYAN + \"v2.1\" + ANSI_RESET + \"        ||\" + LS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + WELCOME_BORDER_SPACE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String HELP_MESSAGE \u003d HELP_BORDER + LS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_BORDER_SPACE + LS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + HELP_PREFIX + \"List of available commands:\" + padString(\u0027 \u0027, 84) + \"||\" + LS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_PREFIX + \"Note: Square bracket input is optional.\" + padString(\u0027 \u0027, 72) + \"||\" + LS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + HELP_PREFIX + \"- help: show list of available commands\" + padString(\u0027 \u0027, 72) + \"||\" + LS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN + \"help\" + ANSI_RESET + padString(\u0027 \u0027, 97)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + \"||\" + LS + HELP_PREFIX + \"- add: add a task\" + padString(\u0027 \u0027, 94) + \"||\" + LS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + \"add DESCRIPTION [d/dd-MM-yyyy] [st/HHmm] [et/HHmm] [p/NUMBER] [r/(ON/OFF)] [t-HHmm]\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + ANSI_RESET + \"                  ||\" + LS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + HELP_PREFIX + \"- edit: edit a task\" + padString(\u0027 \u0027, 92) + \"||\" + LS"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + \"edit INDEX [des/DESCRIPTION] [d/dd-MM-yyyy] [st/HHmm] [et/HHmm] [p/NUMBER] [r/(ON/OFF)] [t-HHmm]\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + ANSI_RESET + \"     ||\" + LS"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + HELP_PREFIX + \"- list: show list of tasks\" + padString(\u0027 \u0027, 85) + \"||\" + LS"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN + \"list [-d|-p|-w|-m|d/DATE]\" + ANSI_RESET"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + padString(\u0027 \u0027, 76) + \"||\" + LS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_PREFIX + \"- search: find task(s) with keyword in description\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + padString(\u0027 \u0027, 61) + \"||\" + LS"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN + \"search KEYWORD(S)\" + ANSI_RESET"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + padString(\u0027 \u0027, 84) + \"||\" + LS"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + HELP_PREFIX + \"- delete remove particular task by index\" + padString(\u0027 \u0027, 71) + \"||\" + LS"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN + \"delete INDEX\" + ANSI_RESET"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + padString(\u0027 \u0027, 89) + \"||\" + LS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            + HELP_PREFIX + \"- clear: remove all tasks\" + padString(\u0027 \u0027, 86) + \"||\" + LS"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN + \"clear\" + ANSI_RESET + padString(\u0027 \u0027, 96)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + \"||\" + LS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + HELP_PREFIX + \"- undo: revert modifications commands like add, edit, delete\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + padString(\u0027 \u0027, 51) + \"||\" + LS"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN + \"undo\" + ANSI_RESET + padString(\u0027 \u0027, 97)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + \"||\" + LS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_PREFIX + \"- redo: restore undone actions\" + padString(\u0027 \u0027, 81) + \"||\" + LS"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN + \"redo\" + ANSI_RESET"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + padString(\u0027 \u0027, 97) + \"||\" + LS"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + HELP_PREFIX + \"- bye: exit the program\" + padString(\u0027 \u0027, 88) + \"||\" + LS"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_PREFIX + \"  format: \" + ANSI_BRIGHT_GREEN + \"bye\" + ANSI_RESET + padString(\u0027 \u0027, 98)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + \"||\" + LS + HELP_BORDER_SPACE + LS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            + HELP_BORDER + LS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String BYE_MESSAGE \u003d \"Bye! See you again!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String LIST_MESSAGE \u003d \"Here is your list of tasks:\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String ADD_MESSAGE \u003d \"Task added.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static final String IMPORT_MESSAGE \u003d \"Imported Calender.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String EDIT_MESSAGE \u003d \"Task edited.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String CLEAR_MESSAGE \u003d \"All tasks cleared.\" + LS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public static final String DELETE_MESSAGE \u003d \"Task deleted.\" + LS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String SEARCH_NOT_FOUND_MESSAGE \u003d \"No matched item found.\" + LS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String SEARCH_FOUND_MESSAGE \u003d \"Here is your list of tasks\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            + \" which contain the word/letters:\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String NO_PREV_MODIFICATION \u003d \"There\u0027s nothing to undo.\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static final String UNDO_MESSAGE \u003d \"Previous modification has been undone.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public static final String REMINDER_MESSAGE \u003d \"Reminder, you have an upcoming task: \";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String NO_PREV_MODIFICATION_REDO \u003d \"There\u0027s nothing to redo.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public static final String REDO_MESSAGE \u003d \"Previous modification has been restored.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    private static String padString(char letter, int length) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        return Util.generatePadStringWithCharAndLength(letter, length);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 38,
      "arindamshivatrip": 2,
      "e0406981": 1,
      "mhchan163": 14,
      "QX-CHEN": 46
    }
  },
  {
    "path": "src/main/java/seedu/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.SearchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Parses the raw user input to make sense of what was inputed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param rawInput the raw user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return the command to be executed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws UnknownCommandException    the the method can\u0027t make sense of the input, default case"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidCommandException    if input format is wrong"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidTaskNumberException for edit/delete, if task index is wrong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Command processRaw(String rawInput) throws"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            UnknownCommandException, InvalidCommandException, InvalidTaskNumberException, InvalidFormatException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Matcher matcher;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        String commandWord \u003d getCommandWord(rawInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        String commandArgs \u003d getCommandArgs(rawInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            matcher \u003d ListCommand.COMMAND_PATTERN.matcher(commandArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                return new ListCommand(\"-d\".equals(matcher.group(\"dateFlag\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        \"-p\".equals(matcher.group(\"priorityFlag\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        \"-w\".equals(matcher.group(\"displayByWeek\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        \"-m\".equals(matcher.group(\"displayByMonth\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        matcher.group(\"date\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case ByeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            matcher \u003d AddCommand.COMMAND_PATTERN.matcher(commandArgs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                return new AddCommand(matcher.group(\"description\"), matcher.group(\"date\"), matcher.group(\"st\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        matcher.group(\"et\"), matcher.group(\"priority\"), matcher.group(\"reminder\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        matcher.group(\"t\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czlin98"
        },
        "content": "                throw new InvalidFormatException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            matcher \u003d EditCommand.COMMAND_PATTERN.matcher(commandArgs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                return new EditCommand(matcher.group(\"key\"), matcher.group(\"description\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        matcher.group(\"date\"), matcher.group(\"st\"), matcher.group(\"et\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        matcher.group(\"priority\"), matcher.group(\"reminder\"), matcher.group(\"t\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czlin98"
        },
        "content": "                throw new InvalidFormatException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            matcher \u003d SearchCommand.COMMAND_PATTERN.matcher(commandArgs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                return new SearchCommand(matcher.group(\"toSearch\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            matcher \u003d DeleteCommand.COMMAND_PATTERN.matcher(commandArgs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                return new DeleteCommand(matcher.group(\"key\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Gets the command word from the raw input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param rawInput the user input"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return the command word. e.g add/edit/delete"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public String getCommandWord(String rawInput) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        String commandWord \u003d rawInput;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        if (rawInput.contains(\" \")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            String[] split \u003d rawInput.split(\" \", 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            commandWord \u003d split[0];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        return commandWord.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Gets everything after the command word."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param rawInput the user input"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return the string after the command word"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public String getCommandArgs(String rawInput) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        String commandArgs \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        if (rawInput.contains(\" \")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            String[] split \u003d rawInput.split(\" \", 2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            commandArgs \u003d split[1];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        return commandArgs.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 40,
      "arindamshivatrip": 1,
      "e0406981": 22,
      "mhchan163": 29,
      "QX-CHEN": 35
    }
  },
  {
    "path": "src/main/java/seedu/planus/Planus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.planus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commands.LogicManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Planus {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        new Planus().run();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            initProgram();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            logicManager.run();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            shutdownProgram();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            ui.showIoException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            ui.showException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void initProgram() throws IOException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        model \u003d new Model(storage.loadTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        logicManager \u003d new LogicManager(ui, model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        ui.showWelcomeMessage(model.getTaskMap());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void shutdownProgram() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        storage.writeTasksToFile(model.getTaskMap());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 50
    }
  },
  {
    "path": "src/main/java/seedu/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import seedu.task.Priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "import static seedu.messages.Messages.NO_SUCH_FILE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String DIRECTORY_NAME \u003d \"data\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String FILE_NAME \u003d \"data.json\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final String TIMETABLE \u003d \"nusmods_calendar.ics\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * Extract the each line from the ics file and store it as a string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @param textFile is the ics file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @return taskData, the string taskData if the file exists."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static String lineExtractor(File textFile) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        Scanner myReader \u003d new Scanner(textFile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        String taskData \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        while (myReader.hasNextLine()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            taskData +\u003d (\"\\n\" + myReader.nextLine());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        return taskData;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * Extract and return the number of times the event repeats."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @param splitLines is a chunk of string data that contains information about one lesson/exam."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @return count, the integer value of the number of times this event repeats."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static int countExtractor(String splitLines) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        String[] splitCount \u003d splitLines.split(\"COUNT\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        String[] lineSplit \u003d splitCount[1].split(\";\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        int count \u003d Integer.parseInt(lineSplit[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * Extract and return the name of the event."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @param splitLines is a chunk of string data that contains information about one lesson/exam."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @return lineSplit, the string containing the name of this event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static String descriptionExtractor(String splitLines) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        String[] splitCount \u003d splitLines.split(\"SUMMARY:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        String[] lineSplit \u003d splitCount[1].split(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        return lineSplit[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * Extract and return the name of the event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @param splitLines is a chunk of string data that contains information about one lesson/exam."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @return the string containing the name of this event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static ArrayList\u003cLocalDate\u003e exceptionExtractor(String splitLines) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        ArrayList\u003cLocalDate\u003e exceptionDates \u003d new ArrayList\u003cLocalDate\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        String[] splitCount \u003d splitLines.split(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        for (String i : splitCount) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            if (i.contains(\"EXDATE:\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                String exDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                exDate \u003d i.split(\"EXDATE:\")[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                LocalDate startDate \u003d LocalDate.parse(exDate, DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\u0027Z\u0027\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                exceptionDates.add(startDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        return exceptionDates;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * Extract and return an array of the dates where this event happens."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @param splitString is a chunk of string data that contains information about one lesson/exam."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @return dates, an ArrayList containing LocalDate objects that represents the dates when the event occurs."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static ArrayList\u003cLocalDate\u003e dateExtractor(String splitString, int count) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        String[] splitCount \u003d splitString.split(\"\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        ArrayList\u003cLocalDate\u003e dates \u003d new ArrayList\u003cLocalDate\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        int tempIndex \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        for (String i : splitCount) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            if (i.contains(\"DTSTART:\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                String exDate;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                exDate \u003d i.split(\"DTSTART:\")[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                startDate \u003d LocalDate.parse(exDate, DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\u0027Z\u0027\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                dates.add(startDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                tempIndex++;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        for (int i \u003d 1; i \u003c count; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            LocalDate nextWeekDate \u003d dates.get(i - 1).plusDays(7);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            boolean isNotException \u003d exceptionChecker(dates, nextWeekDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            if (isNotException) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                dates.add(nextWeekDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                tempIndex++;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static boolean exceptionChecker(ArrayList\u003cLocalDate\u003e exceptionDates, LocalDate nextWeekDate)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        for (LocalDate i : exceptionDates) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            if (i.isEqual(nextWeekDate)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * Extract and return the start and end time of the event."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @param splitLines is a chunk of string data that contains information about one lesson/exam."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @return taskDuration, an List containing LocalTime objects that contains the start and end time of the event."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public static LocalTime[] timeExtractor(String splitLines) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        LocalTime startTime;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        LocalTime endTime;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        LocalTime[] taskDuration \u003d new LocalTime[2];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        String[] splitCount \u003d splitLines.split(\"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        for (String i : splitCount) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            if (i.contains(\"DTSTART:\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                String exDate;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                exDate \u003d i.split(\"DTSTART:\")[1];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                LocalTime gmtTime \u003d LocalTime.parse(exDate, DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\u0027Z\u0027\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                startTime \u003d (gmtTime).plusHours(8);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                taskDuration[0] \u003d startTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            if (i.contains(\"DTEND:\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                String exDate;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                exDate \u003d i.split(\"DTEND:\")[1];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                LocalTime gmtTime \u003d LocalTime.parse(exDate, DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\u0027Z\u0027\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                endTime \u003d (gmtTime).plusHours(8);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                taskDuration[1] \u003d endTime;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        return taskDuration;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Write to file the latest data of tasks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @param tasks latest TaskList object after modification."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void writeTasksToFile(TaskMap tasks) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        FileWriter file \u003d new FileWriter(DIRECTORY_NAME + \"/\" + FILE_NAME);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (Task task : tasks.getValues()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            file.write(gson.toJson(task) + System.lineSeparator());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Load data from file and add tasks to TaskList."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public TaskMap loadTasks() throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // If both dir and file are newly created, return empty taskMap."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (!createFile()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            TaskMap taskMap \u003d readTasksFromFile();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            calReader(taskMap);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            return taskMap;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return new TaskMap();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Create a directory if the \"data\" directory does not exists."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * @return true if directory is created at the point of execution."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private boolean createFile() throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        File directory \u003d new File(DIRECTORY_NAME);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        File data \u003d new File(DIRECTORY_NAME + \"/\" + FILE_NAME);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            boolean directoryCreated \u003d directory.mkdir();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assert directoryCreated;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return data.createNewFile();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (!data.exists()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            return data.createNewFile();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     * Read lines from file and process each line."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private TaskMap readTasksFromFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap tasks \u003d new TaskMap();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        File file \u003d new File(DIRECTORY_NAME + \"/\" + FILE_NAME);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        Type type \u003d new TypeToken\u003cTask\u003e() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }.getType();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            tasks.addTask(gson.fromJson(scanner.nextLine(), type));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        restartReminders(tasks);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * Extracts and adds the events in the ics file into the TaskList."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * @param taskMap is the latest TaskList object after importing data from the saved json file."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public void calReader(TaskMap taskMap) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            calenderChecker(taskMap);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            System.err.println(\"Directory not there!\" + e.getMessage());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidDatetimeException | InvalidReminderException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            System.err.println(\"Invalid data format!\" + e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void calenderChecker(TaskMap taskMap)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throws IOException, ParseException, InvalidDatetimeException, InvalidReminderException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        File dirFile \u003d new File(DIRECTORY_NAME);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        Priority priority;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        if (dirFile.isDirectory()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            File calfile \u003d new File(DIRECTORY_NAME + \"/\" + TIMETABLE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            String output \u003d lineExtractor(calfile);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            String[] splitInputs \u003d output.split(\"UID:\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            LocalTime startTime;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            LocalTime endTime;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            LocalTime[] taskDuration \u003d new LocalTime[2];"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            int repeatCount \u003d 0;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            ArrayList\u003cLocalDate\u003e exceptionDates;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            ArrayList\u003cLocalDate\u003e dates;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            String taskDescription;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            for (int i \u003d 1; i \u003c splitInputs.length; i++) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                if (splitInputs[i].contains(\"RRULE:\")) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                    repeatCount \u003d countExtractor(splitInputs[i]);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                    repeatCount \u003d 1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                if (repeatCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                    priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                    priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                taskDescription \u003d descriptionExtractor(splitInputs[i]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                exceptionDates \u003d exceptionExtractor(splitInputs[i]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                dates \u003d dateExtractor(splitInputs[i], repeatCount);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                taskDuration \u003d timeExtractor(splitInputs[i]);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                startTime \u003d taskDuration[0];"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                endTime \u003d taskDuration[1];"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                taskAdder(taskMap, dates, startTime, endTime, taskDescription, repeatCount, priority);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            System.out.println(NO_SUCH_FILE);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     * Adds extracted tasks tasks to the taskMap."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    public void taskAdder(TaskMap taskMap, ArrayList\u003cLocalDate\u003e dates,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                          LocalTime startTime, LocalTime endTime,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "                          String description, int repeatCount,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                          Priority priority) throws InvalidReminderException, InvalidDatetimeException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        for (int i \u003d 0; i \u003c repeatCount; i++) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            task \u003d new Task(description, dates.get(i), startTime, endTime, priority);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "            taskMap.addTask(task);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "arindamshivatrip"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private void restartReminders(TaskMap tasks) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        for (Task t : tasks.getValues()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            if (t.getReminder().getIsOn()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                t.reminder.startReminder(t);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void readTasksFromTimetable(TaskMap taskMap)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throws FileNotFoundException, ParseException, InvalidReminderException, InvalidDatetimeException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        File file \u003d new File(DIRECTORY_NAME + \"/\" + TIMETABLE);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            LocalTime startTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            LocalTime endTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Priority priority;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                String currentLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                String temp;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                if (currentLine.startsWith(\"DTSTART:\")) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    temp \u003d currentLine.replace(\"DTSTART:\", \"\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    DateFormat df \u003d new SimpleDateFormat(\"yyyyMMdd\u0027T\u0027HHmmss\u0027Z\u0027\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    Date date \u003d df.parse(temp);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    localDate \u003d date.toInstant().atZone(ZoneId.of(\"+16\")).toLocalDate();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    startTime \u003d date.toInstant().atZone(ZoneId.of(\"+16\")).toLocalTime();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                } else if (currentLine.startsWith(\"DTEND\")) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    temp \u003d currentLine.replace(\"DTEND:\", \"\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    DateFormat df \u003d new SimpleDateFormat(\"yyyyMMdd\u0027T\u0027HHmmss\u0027Z\u0027\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    Date date \u003d df.parse(temp);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    endTime \u003d date.toInstant().atZone(ZoneId.of(\"+16\")).toLocalTime();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                } else if (currentLine.startsWith(\"SUMMARY:\")) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    description \u003d currentLine.replace(\"SUMMARY:\", \"\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    if (description.contains(\"Exam\")) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                        priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    task \u003d new Task(description, localDate, startTime, endTime, priority);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    addTaskToTaskmap(taskMap, task);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void addTaskToTaskmap(TaskMap taskMap, Task task)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throws InvalidReminderException, InvalidDatetimeException {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int weeksPerSem \u003d 13;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int recessWeek \u003d 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int daysPerWeek \u003d 7;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (task.getDescription().contains(\"Exam\")) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            taskMap.addTask(task);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d weeksPerSem; i++) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                if (i \u003d\u003d recessWeek - 1) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                LocalDate date \u003d task.getDate().plusDays(i * daysPerWeek);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                Task tempTask \u003d new Task(task.getDescription(), date,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                        task.getStartTime(), task.getEndTime(), task.getPriority());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                taskMap.addTask(tempTask);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arindamshivatrip": 211,
      "mhchan163": 9,
      "QX-CHEN": 144
    }
  },
  {
    "path": "src/main/java/seedu/task/DateSorter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DateSorter implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public int compare(Task task, Task t1) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return task.getDate().compareTo(t1.getDate());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 11
    }
  },
  {
    "path": "src/main/java/seedu/task/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_GREEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_RED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_RESET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_YELLOW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    LOW(1, \"LOW\", ANSI_GREEN),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    MEDIUM(2, \"MEDIUM\", ANSI_YELLOW),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    HIGH(3, \"HIGH\", ANSI_RED);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final int priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String string;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final String color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    Priority(int priority, String string, String color) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.string \u003d string;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return color + string + ANSI_RESET;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 30
    }
  },
  {
    "path": "src/main/java/seedu/task/PrioritySorter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class PrioritySorter implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public int compare(Task task, Task t1) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // descending order"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return t1.getPriority().compareTo(task.getPriority());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 12
    }
  },
  {
    "path": "src/main/java/seedu/task/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commands.DisplayReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.data.Timers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " * This class represents a reminder for a specific task, stores the time and timer needed to start a reminder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " * An instance of this object is automatically created when a Task object is created."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhchan163"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private boolean isOn;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private transient Timer timer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void startTimer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void setIsOn(boolean reminderStatus) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        isOn \u003d reminderStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public boolean getIsOn() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return isOn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public Timer getTimer() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return timer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "     * Starts a timer and sets a schedule to print a specific task at a specified time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "     * @param task The task that is associated with the reminder."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void startReminder(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        if (!getIsOn()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        startTimer();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Timers.add(getTimer());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        calendar.set(task.getDate().getYear(), task.getDate().getMonthValue() - 1, task.getDate().getDayOfMonth(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                (getTime().getHour()), (getTime().getMinute()),0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Date date \u003d calendar.getTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        getTimer().schedule(new TimerTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                Command display \u003d new DisplayReminderCommand(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                CommandResult result \u003d display.execute();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                ui.interpretCommandResult(result);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                offReminder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }, date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void offReminder() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        if (getIsOn()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            getTimer().cancel();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        setIsOn(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 79,
      "QX-CHEN": 2
    }
  },
  {
    "path": "src/main/java/seedu/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commons.Util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static java.lang.Math.pow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0406981"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0406981"
        },
        "content": " * The class for a single task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0406981"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    // MAX_NUM_TASKS \u003d 10000"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final int HASH_VALUE_DIGITS \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Integer taskID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public Reminder reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public Task(String description, String dateString, String startTime, String endTime, String priorityString,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                String reminderString, String reminderTimeString)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            throws InvalidPriorityException, InvalidDatetimeException, InvalidReminderException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        date \u003d Util.dateStringToDate(dateString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.startTime \u003d Util.timeStringToTime(startTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.endTime \u003d Util.timeStringToTime(endTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        priority \u003d Util.priorityStringToPriority(priorityString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskID \u003d generateHashValue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        initiateReminder(reminderString, reminderTimeString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task(Integer taskID, String description, LocalDate date,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                LocalTime startTime, LocalTime endTime, Priority priority, Reminder reminder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task(String description, LocalDate date,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                LocalTime startTime, LocalTime endTime, Priority priority)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            throws InvalidDatetimeException, InvalidReminderException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.taskID \u003d generateHashValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        initiateReminder(null, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Task(String taskID, String description, String dateString,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                String startTime, String endTime, String priorityString, String reminderString,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                String reminderTimeString)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            throws InvalidPriorityException, InvalidDatetimeException, InvalidReminderException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        date \u003d Util.dateStringToDate(dateString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.startTime \u003d Util.timeStringToTime(startTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.endTime \u003d Util.timeStringToTime(endTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        priority \u003d Util.priorityStringToPriority(priorityString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.taskID \u003d Integer.parseInt(taskID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        this.reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        initiateReminder(reminderString, reminderTimeString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    private void initiateReminder(String reminderString, String remainderTimeString)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            throws InvalidReminderException, InvalidDatetimeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalTime time \u003d Util.timeStringToTime(remainderTimeString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        if (reminderString \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            reminderString \u003d \"off\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        switch (reminderString) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        case \"on\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            reminder.setIsOn(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            if (time !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                reminder.setTime(time);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            } else if (startTime !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                reminder.setTime(LocalTime.of(getStartTime().getHour() - 1,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                        getStartTime().getMinute()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                throw new InvalidReminderException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        case \"off\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            reminder.offReminder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            throw new InvalidReminderException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * Returns the reminder string."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return Yes/No string depending on whether task has a reminder"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public String getReminderString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        if (reminder.getIsOn()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            return \"Yes\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            return \"No\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * creates a new reminder for the task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return the new reminder created"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public Reminder newReminder() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return new Reminder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * gets the already existing reminder for the task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @return the reminder object for the task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public Reminder getReminder() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * sets reminder for the task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param reminderString the user input, which is either on or off"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @param reminderTime   the time the reminder is set to"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidReminderException reminder format is wrong."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     * @throws InvalidDatetimeException date/time is in an invalid format"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0406981"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void setReminder(String reminderString, String reminderTime)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            throws InvalidReminderException, InvalidDatetimeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        initiateReminder(reminderString, reminderTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private int generateHashValue() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return hashCode() % (int) pow(10, HASH_VALUE_DIGITS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Integer getTaskID() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return taskID;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setTaskID(Integer taskID) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDate(String dateString) throws InvalidDatetimeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        date \u003d Util.dateStringToDate(dateString);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setStartTime(String startTime) throws InvalidDatetimeException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.startTime \u003d Util.timeStringToTime(startTime);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setEndTime(String endTime) throws InvalidDatetimeException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.endTime \u003d Util.timeStringToTime(endTime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setPriority(String priorityString) throws InvalidPriorityException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        priority \u003d Util.priorityStringToPriority(priorityString);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return taskID.toString() + \" \" + description + Util.dateToString(date) + Util.timeToString(startTime)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                + Util.timeToString(endTime) + Util.priorityToString(priority);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0406981": 26,
      "mhchan163": 61,
      "QX-CHEN": 126
    }
  },
  {
    "path": "src/main/java/seedu/ui/DayStructure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commons.Util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.LS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DayStructure extends DisplayDateStructure {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DayStructure(LocalDate date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        super(date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected void generateContent(TaskMap tasks) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String headerFormat \u003d \"  | %-10s | %-20s | %-15s | %-10s | %-10s | %-11s |\" + LS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String contentFormat \u003d \"  | %-10s | %-20s | %-15s | %-10s | %-10s | %-20s |\" + LS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        stringBuilder.append(LS)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(currentDate.format(DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\")))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(currentDate.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.ENGLISH))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(\":\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(LS)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(\"   \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(Util.generatePadStringWithCharAndLength(\u0027_\u0027, 93))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(LS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(String.format(headerFormat, \"Index\", \"Description\", \"Date\", \"Start\", \"End\", \"Priority\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(\"   \").append(Util.generatePadStringWithCharAndLength(\u0027-\u0027, 93))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(LS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap filteredTasks \u003d tasks.searchByDate(currentDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            stringBuilder.append(\"  |\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    .append(Util.generatePadStringWithCharAndLength(\u0027 \u0027, 93))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    .append(\"|\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    .append(LS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (Task task : filteredTasks.getValues()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                stringBuilder.append(String.format(contentFormat,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    \"#\" + task.getTaskID(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    Util.limitStringWithDots(task.getDescription(), 20),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    task.getDate(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    task.getStartTime() \u003d\u003d null ? \"\" : task.getStartTime(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    task.getEndTime() \u003d\u003d null ? \"\" : task.getEndTime(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    task.getPriority()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        stringBuilder.append(\"   \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(Util.generatePadStringWithCharAndLength(\u0027-\u0027, 93))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                .append(LS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        content \u003d stringBuilder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setCurrentDate(currentDate.plusDays(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void decrement() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setCurrentDate(currentDate.minusDays(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 71
    }
  },
  {
    "path": "src/main/java/seedu/ui/DisplayDateStructure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class DisplayDateStructure {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected static final TextStyle MONTH_TEXT_STYLE \u003d TextStyle.FULL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected static final TextStyle WEEKDAY_TEXT_STYLE \u003d TextStyle.SHORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected static final Locale LOCALE \u003d Locale.ENGLISH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected static final int DAYS_PER_WEEK \u003d 7;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected static final int HASHCODE_STRING_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected static final int DISPLAY_LENGTH \u003d 141;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected static final int DAY_COLUMN_WIDTH \u003d 20;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected static final int WEEK_ROW_WIDTH \u003d 10;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected Month currentMonth \u003d currentDate.getMonth();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected int currentDateDayOfMonth \u003d currentDate.getDayOfMonth();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected DayOfWeek currentDateDayOfWeek \u003d currentDate.getDayOfWeek();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected char[][] screen;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected String content \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DisplayDateStructure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this(LocalDate.now());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public DisplayDateStructure(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        init(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void init(LocalDate date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentDate \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentMonth \u003d currentDate.getMonth();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentDateDayOfMonth \u003d currentDate.getDayOfMonth();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentDateDayOfWeek \u003d currentDate.getDayOfWeek();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (screen !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (char[] arr : screen) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                stringBuilder.append(arr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                stringBuilder.append(System.lineSeparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            content \u003d stringBuilder.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected void generateContent(TaskMap tasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setCurrentDate(LocalDate currentDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.currentDate \u003d currentDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        updateFields();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void setCurrentMonth(Month currentMonth) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.currentMonth \u003d currentMonth;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void decrement() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void updateFields() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentMonth \u003d currentDate.getMonth();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentDateDayOfMonth \u003d currentDate.getDayOfMonth();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentDateDayOfWeek \u003d currentDate.getDayOfWeek();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 80
    }
  },
  {
    "path": "src/main/java/seedu/ui/DisplayMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public enum DisplayMode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    ALL,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    WEEK,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    MONTH,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 8
    }
  },
  {
    "path": "src/main/java/seedu/ui/MonthStructure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commons.Util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.commons.Util.putsIntoArray;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.commons.Util.putsIntoArrayWithCentralise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class MonthStructure extends DisplayDateStructure {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static int displayHeight \u003d 53;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final int ROW_NUM_OFFSET \u003d 2;    // Month name and Day of week"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected void generateContent(TaskMap tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setHeight();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String monthString \u003d currentMonth.getDisplayName(MONTH_TEXT_STYLE, LOCALE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int currentCol \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int currentRow \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Set empty screen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        screen \u003d new char[displayHeight][DISPLAY_LENGTH];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        generateScreenWithBorder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Display month name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        putsIntoArrayWithCentralise(monthString, screen[currentRow++], 0, DISPLAY_LENGTH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Display day name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d DAYS_PER_WEEK; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String dayOfWeek \u003d DayOfWeek.of(i).getDisplayName(WEEKDAY_TEXT_STYLE, LOCALE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            putsIntoArrayWithCentralise(dayOfWeek,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                screen[currentRow], currentCol, currentCol + DAY_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            currentCol +\u003d DAY_COLUMN_WIDTH;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentRow++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Display days"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalDate startDate \u003d currentDate.minusDays(currentDateDayOfMonth - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int lengthOfCurrentMonth \u003d currentDate.lengthOfMonth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalDate endDate \u003d startDate.plusDays(lengthOfCurrentMonth);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentCol \u003d (startDate.getDayOfWeek().getValue() - 1) * DAY_COLUMN_WIDTH + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (LocalDate date \u003d startDate; date.isBefore(endDate); date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            int tempRowNum \u003d currentRow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            // for each day"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String dayOfMonth \u003d String.valueOf(date.getDayOfMonth());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            putsIntoArrayWithCentralise(dayOfMonth,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                screen[tempRowNum++], currentCol, currentCol + DAY_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (Task task : tasks.searchByDate(date).getValues()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                String temp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                if (tempRowNum \u003d\u003d currentRow + WEEK_ROW_WIDTH - ROW_NUM_OFFSET) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    temp \u003d \"...\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    putsIntoArray(temp, screen[tempRowNum], currentCol);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                temp \u003d \"#\" + task.getTaskID();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                // # + 4 digits + \" \" \u003d 6"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                temp +\u003d Util.generatePadStringWithCharAndLength(\u0027 \u0027, HASHCODE_STRING_LENGTH - temp.length());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                temp +\u003d task.getDescription();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                temp \u003d Util.limitStringWithDots(temp, DAY_COLUMN_WIDTH - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                putsIntoArray(temp, screen[tempRowNum++], currentCol);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            if (date.getDayOfWeek() \u003d\u003d DayOfWeek.SUNDAY) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                currentCol \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                currentRow +\u003d WEEK_ROW_WIDTH;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                currentCol +\u003d DAY_COLUMN_WIDTH;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void generateScreenWithBorder() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 0; i \u003c displayHeight; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (int j \u003d 0; j \u003c DISPLAY_LENGTH; j++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                screen[i][j] \u003d (i \u003d\u003d 0 || i \u003d\u003d (displayHeight - 1)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    || ((i - ROW_NUM_OFFSET) % WEEK_ROW_WIDTH \u003d\u003d 0 \u0026\u0026 i !\u003d ROW_NUM_OFFSET)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    || j % DAY_COLUMN_WIDTH \u003d\u003d 0) ? \u0027*\u0027 : \u0027 \u0027;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setCurrentMonth(currentMonth.plus(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (currentMonth.getValue() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            setCurrentDate(LocalDate.of(currentDate.getYear() + 1, currentMonth, 1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            setCurrentDate(LocalDate.of(currentDate.getYear(), currentMonth, 1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void decrement() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setCurrentMonth(currentMonth.minus(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (currentMonth.getValue() \u003d\u003d 12) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            setCurrentDate(LocalDate.of(currentDate.getYear() - 1, currentMonth, 1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            setCurrentDate(LocalDate.of(currentDate.getYear(), currentMonth, 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void setHeight() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalDate firstDay \u003d LocalDate.of(currentDate.getYear(), currentMonth, 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int lengthOfCurrentMonth \u003d currentDate.lengthOfMonth();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalDate tempDay \u003d firstDay;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        while (tempDay.isBefore(firstDay.plusDays(lengthOfCurrentMonth + firstDay.getDayOfWeek().getValue() - 1))) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            tempDay \u003d tempDay.plusDays(DAYS_PER_WEEK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        displayHeight \u003d 10 * count + 3;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 121
    }
  },
  {
    "path": "src/main/java/seedu/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commons.Util;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.IO_EXCEPTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.LS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.WELCOME_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private DisplayDateStructure displayDateStructure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void displayAll(TaskMap tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Basic adding sequence"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assert tasks !\u003d null : \"null tasks\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        displayTasks(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void displayByDateStructure(TaskMap tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        displayDateStructure.generateContent(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.println(displayDateStructure.getContent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.println(\"q:quit, w:previous, e:next\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        while (in.hasNext()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String input \u003d in.next();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            if (input.length() !\u003d 1 \u0026\u0026 !\"qwe\".contains(input.toLowerCase())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                out.println(\"Invalid input.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            char charIn \u003d input.toLowerCase().charAt(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            if (charIn \u003d\u003d \u0027q\u0027) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                out.println(\"You\u0027ve exited the display mode.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                in.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            } else if (charIn \u003d\u003d \u0027w\u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                displayDateStructure.decrement();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            } else if (charIn \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                displayDateStructure.increment();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            displayDateStructure.generateContent(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            out.println(displayDateStructure.getContent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            out.println(\"q:quit, w:previous, e:next\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void printHeader() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        String headerFormat \u003d \"  | %-10s | %-20s | %-15s | %-10s | %-10s | %-11s | %-12s |\" + LS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        out.println(\"   \" + Util.generatePadStringWithCharAndLength(\u0027_\u0027, 108));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        out.format(headerFormat, \"Index\", \"Description\", \"Date\", \"Start\", \"End\", \"Priority\", \"Reminder\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        out.println(\"   \" + Util.generatePadStringWithCharAndLength(\u0027-\u0027, 108));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void printContentFormat(Task task) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        String contentFormat \u003d \"  | %-10s | %-20s | %-15s | %-10s | %-10s | %-20s | %-12s |\" + LS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        out.format(contentFormat,\"#\" + task.getTaskID(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                Util.limitStringWithDots(task.getDescription(), 20),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                task.getDate(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                task.getStartTime() \u003d\u003d null ? \"\" : task.getStartTime(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                task.getEndTime() \u003d\u003d null ? \"\" : task.getEndTime(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                task.getPriority(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                task.getReminderString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void displaySingleTask(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        printHeader();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        printContentFormat(task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        out.println(\"   \" + Util.generatePadStringWithCharAndLength(\u0027-\u0027, 108));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void displayTasks(TaskMap tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        printHeader();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            out.println(\"  |\" + Util.generatePadStringWithCharAndLength(\u0027 \u0027, 108) + \"|\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (Task task : tasks.getValues()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                printContentFormat(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        out.println(\"   \" + Util.generatePadStringWithCharAndLength(\u0027-\u0027, 108));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void showWelcomeMessage(TaskMap tasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        showMessage(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            showReminders(tasks);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void showReminders(TaskMap tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assert tasks !\u003d null : \"null tasks\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap tasksDueToday \u003d tasks.searchByDate(LocalDate.now());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        String messageFormat \u003d \"%-15s%-30s%15s\" + LS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String taskFormat \u003d \"%-15s%-6s%-18s%-6s%15s\" + LS;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.println(\"||\" + Util.generatePadStringWithCharAndLength(\u0027 \u0027, 56) + \"||\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.format(messageFormat, \"||\", \"You have \" + tasksDueToday.size() + \" task(s) due today.\", \"||\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (Task task : tasksDueToday.getValues()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            out.format(taskFormat,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czlin98"
        },
        "content": "                \"||\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                \"#\" + task.getTaskID() + \" \","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                Util.limitStringWithDots(task.getDescription(), 17),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                (task.getStartTime() \u003d\u003d null ? \"\" : task.getStartTime()),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czlin98"
        },
        "content": "                \"||\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.println(\"||\" + Util.generatePadStringWithCharAndLength(\u0027 \u0027, 56) + \"||\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        TaskMap tasksDueTomorrow \u003d tasks.searchByDate(LocalDate.now().plusDays(1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        out.format(messageFormat, \"||\", \"Upcoming tasks tomorrow:\", \"||\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (Task task : tasksDueTomorrow.getValues()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            out.format(taskFormat,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "czlin98"
        },
        "content": "                \"||\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                \"#\" + task.getTaskID() + \" \","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                Util.limitStringWithDots(task.getDescription(), 17),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                (task.getStartTime() \u003d\u003d null ? \"\" : task.getStartTime()),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "czlin98"
        },
        "content": "                \"||\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.println(\"||\" + Util.generatePadStringWithCharAndLength(\u0027 \u0027,56) + \"||\" + LS"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                + \" \" + Util.generatePadStringWithCharAndLength(\u0027\u003d\u0027, 58) + \" \" + LS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "czlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void showException(Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        out.println(e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public boolean interpretCommandResult(CommandResult result) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assert result.getMessage() !\u003d null : \"null message\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        showCommandResult(result);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        return result.isExit();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void displayTasksForTesting(TaskMap taskMap) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // To be deleted later"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        displayAll(taskMap);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void showCommandResult(CommandResult result) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        showMessage(result.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        if (result.getTasks() !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            if (result.getDisplayMode() \u003d\u003d DisplayMode.ALL) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                displayAll(result.getTasks());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                if (result.getDisplayMode() \u003d\u003d DisplayMode.DAY) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    displayDateStructure \u003d new DayStructure(result.getDate());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                } else if (result.getDisplayMode() \u003d\u003d DisplayMode.WEEK) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    // Weekly view"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    displayDateStructure \u003d new WeekStructure();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                } else if (result.getDisplayMode() \u003d\u003d DisplayMode.MONTH) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    // Monthly view"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    displayDateStructure \u003d new MonthStructure();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                displayByDateStructure(result.getTasks());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        } else if (result.getTask() !\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            displaySingleTask(result.getTask());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void showIoException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        showMessage(IO_EXCEPTION);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 15,
      "mhchan163": 32,
      "QX-CHEN": 143
    }
  },
  {
    "path": "src/main/java/seedu/ui/WeekStructure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.commons.Util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "public class WeekStructure extends DisplayDateStructure {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private static final int DISPLAY_HEIGHT \u003d 11;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    protected void generateContent(TaskMap tasks) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentMonth \u003d currentDate.getMonth();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String monthString \u003d currentMonth.getDisplayName(MONTH_TEXT_STYLE, LOCALE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Set screen with border"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        screen \u003d new char[DISPLAY_HEIGHT][DISPLAY_LENGTH];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        generateScreenWithBorder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int currentCol \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int currentRow \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Display month name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Util.putsIntoArrayWithCentralise(monthString, screen[currentRow++], 0, DISPLAY_LENGTH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Display weekdays"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalDate startDate \u003d currentDate.minusDays(currentDateDayOfWeek.getValue() - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalDate endDate \u003d startDate.plusDays(DAYS_PER_WEEK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (LocalDate date \u003d startDate; date.isBefore(endDate); date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            // for each day"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String dayOfWeek \u003d date.getDayOfWeek().getDisplayName(WEEKDAY_TEXT_STYLE, LOCALE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Util.putsIntoArrayWithCentralise(dayOfWeek,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                screen[currentRow++], currentCol, currentCol + DAY_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            String dayOfMonth \u003d String.valueOf(date.getDayOfMonth());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Util.putsIntoArrayWithCentralise(dayOfMonth,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                screen[currentRow++], currentCol, currentCol + DAY_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (Task task : tasks.searchByDate(date).getValues()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                String temp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                if (currentRow \u003d\u003d DISPLAY_HEIGHT - 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    temp \u003d \"...\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    Util.putsIntoArray(temp, screen[currentRow], currentCol);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                temp \u003d \"#\" + task.getTaskID();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                // # + 4 digits + \" \" \u003d 6"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                temp +\u003d Util.generatePadStringWithCharAndLength(\u0027 \u0027, HASHCODE_STRING_LENGTH - temp.length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                temp +\u003d task.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                temp \u003d Util.limitStringWithDots(temp, 19);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                Util.putsIntoArray(temp, screen[currentRow++], currentCol);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            currentCol +\u003d 20;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            currentRow \u003d 2;    // Row0: Month str"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private void generateScreenWithBorder() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 0; i \u003c DISPLAY_HEIGHT; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            for (int j \u003d 0; j \u003c DISPLAY_LENGTH; j++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                screen[i][j] \u003d (i % WEEK_ROW_WIDTH \u003d\u003d 0 || j % DAY_COLUMN_WIDTH \u003d\u003d 0) ? \u0027*\u0027 : \u0027 \u0027;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setCurrentDate(currentDate.plusDays(DAYS_PER_WEEK));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    public void decrement() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setCurrentDate(currentDate.minusDays(DAYS_PER_WEEK));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 78
    }
  },
  {
    "path": "src/test/java/seedu/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0406981"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.MaxNumTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.EmptyDataStackException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czlin98"
        },
        "content": "    public void constructor_noRawInput_throws_InvalidFormatException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czlin98"
        },
        "content": "        assertThrows(InvalidFormatException.class, () -\u003e parser.processRaw(\"add\" + \"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public void addCommand_wrongStartTimeFormat() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        final String[] invalidInputs \u003d {\"\", \" \", \"1231242345\", \"\u0026*^%*\u0026^\", \"abc\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        for (int i \u003d 0; i \u003c invalidInputs.length; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            int finalI \u003d i;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            assertThrows(InvalidFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    parser.processRaw(\"add task1 st/\" + invalidInputs[finalI]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public void addCommand_wrongEndTimeFormat() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        final String[] invalidInputs \u003d {\"\", \" \", \"1231242345\", \"\u0026*^%*\u0026^\", \"abc\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        for (int i \u003d 0; i \u003c invalidInputs.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            int finalI \u003d i;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            assertThrows(InvalidFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    parser.processRaw(\"add task1 et/\" + invalidInputs[finalI]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public void addCommand_wrongDateFormat() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        final String[] invalidInputs \u003d {\"\", \" \", \"1231242345\", \"\u0026*^%*\u0026^\", \"abc\"};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        for (int i \u003d 0; i \u003c invalidInputs.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            int finalI \u003d i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            assertThrows(InvalidFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    parser.processRaw(\"add task1 d/\" + invalidInputs[finalI]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public void addCommand_wrongPriorityFormat() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        final String[] invalidInputs \u003d {\"\", \" \", \"1231242345\", \"\u0026*^%*\u0026^\", \"abc\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        for (int i \u003d 0; i \u003c invalidInputs.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            int finalI \u003d i;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            assertThrows(InvalidFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    parser.processRaw(\"add task1 p/\" + invalidInputs[finalI]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public void addCommand_executeSuccess() throws InvalidCommandException, InvalidDatetimeException,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            InvalidPriorityException, MaxNumTaskException, InvalidTaskNumberException,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            UnknownCommandException,EmptyDataStackException, InvalidReminderException, InvalidFormatException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        TaskMap taskMap \u003d new TaskMap();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Model model \u003d new Model(taskMap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Command add \u003d parser.processRaw(\"add newTask\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        CommandResult result \u003d add.execute(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(1, model.getTaskMap().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0406981"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 9,
      "e0406981": 50,
      "mhchan163": 17,
      "QX-CHEN": 5
    }
  },
  {
    "path": "src/test/java/seedu/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0406981"
        },
        "content": "package seedu.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.data.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.data.TaskMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.MaxNumTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.EmptyDataStackException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czlin98"
        },
        "content": "import seedu.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0406981"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    private Task t1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    private Task t2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    private Task t3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    private Task t4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    private Task t5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t1 \u003d new Task(\"meeting\", \"20-10-2020\", null, null, null, null, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t2 \u003d new Task(\"meeting\", \"20-10-2020\", null, null, \"2\", null, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t3 \u003d new Task(\"reading\", \"17-10-2020\", null, null, \"2\", null, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t4 \u003d new Task(\"reading\", \"24-10-2020\", \"2200\", \"2300\", null, null, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t5 \u003d new Task(\"random\", \"15-10-2020\", null, null, \"3\", null, null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public void constructor_noRawInput_throws_InvalidCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e parser.processRaw(\"delete\" + \"\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    public void deleteCommand_invalidData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        final String[] invalidInputs \u003d {\"\", \" \", \"\u0026*^%*\u0026^\", \"abc\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        for (int i \u003d 0; i \u003c invalidInputs.length; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0406981"
        },
        "content": "            int finalI \u003d i;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            assertThrows(InvalidCommandException.class, () -\u003e parser.processRaw(\"delete \" + invalidInputs[finalI]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void deleteCommand_executeTest() throws InvalidTaskNumberException, InvalidCommandException,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            MaxNumTaskException, InvalidDatetimeException, InvalidPriorityException, EmptyDataStackException,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            UnknownCommandException, InvalidReminderException, InvalidFormatException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        TaskMap taskMap \u003d new TaskMap();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        taskMap.addTask(t1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        taskMap.addTask(t2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        taskMap.addTask(t3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        taskMap.addTask(t4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        taskMap.addTask(t5);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Model model \u003d new Model(taskMap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        int id1 \u003d t1.getTaskID();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Command delete \u003d parser.processRaw(\"delete \" + id1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        CommandResult result \u003d delete.execute(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(4, model.getTaskMap().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    public void deleteCommand_invalidTaskNumber() throws"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czlin98"
        },
        "content": "            InvalidTaskNumberException, InvalidCommandException, UnknownCommandException, InvalidFormatException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        TaskMap taskMap \u003d new TaskMap();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0406981"
        },
        "content": "        taskMap.addTask(t3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int wrongId3 \u003d 3217;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        while (taskMap.get(wrongId3) !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            wrongId3 \u003d random.nextInt(10000);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Model model \u003d new Model(taskMap);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        Command delete \u003d parser.processRaw(\"delete \" + wrongId3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertThrows(InvalidTaskNumberException.class, () -\u003e delete.execute(model));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0406981"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0406981"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0406981"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czlin98": 4,
      "e0406981": 59,
      "mhchan163": 21,
      "QX-CHEN": 15
    }
  },
  {
    "path": "src/test/java/seedu/commons/UtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Priority;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_GREEN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.font.Colors.ANSI_RESET;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "class UtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void generatePadStringWithCharAndLength_zeroLength_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"\", Util.generatePadStringWithCharAndLength(\u0027 \u0027, 0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"\", Util.generatePadStringWithCharAndLength(\u0027$\u0027, 0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void generatePadStringWithCharAndLength_nonZeroLength_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"$$$$$$\", Util.generatePadStringWithCharAndLength(\u0027$\u0027, 6));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"----\", Util.generatePadStringWithCharAndLength(\u0027-\u0027, 4));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void generatePadStringWithCharAndLength_negativeLength_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Effect of - will be left adjust, which doesnt affect the return value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"$\", Util.generatePadStringWithCharAndLength(\u0027$\u0027, -1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"$$\", Util.generatePadStringWithCharAndLength(\u0027$\u0027, -2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void limitStringWithDots_lengthGreaterThanThree_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"abc...\", Util.limitStringWithDots(\"abcdefg\", 6));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"abcdef\", Util.limitStringWithDots(\"abcdef\", 6));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"abcdefg\", Util.limitStringWithDots(\"abcdefg\", 10));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void limitStringWithDots_lengthEqualThree_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"...\", Util.limitStringWithDots(\"abcdefg\", 3));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"abc\", Util.limitStringWithDots(\"abc\", 3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void limitStringWithDots_lengthLessThanThree_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"ab\", Util.limitStringWithDots(\"abcdefg\", 2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"\", Util.limitStringWithDots(\"abcdef\", -1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(\"\", Util.limitStringWithDots(\"abcdefg\", 0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void putsIntoArray_charArrayLongerThanString_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String testing \u003d \"Testing string!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        char[] charArray \u003d new char[20];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Util.putsIntoArray(testing, charArray, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 0; i \u003c testing.length(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(testing.charAt(i), charArray[i]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void putsIntoArray_charArrayEqualToString_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String testing \u003d \"Testing\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        char[] charArray \u003d new char[7];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Util.putsIntoArray(testing, charArray, 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 0; i \u003c testing.length(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(testing.charAt(i), charArray[i]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void putsIntoArray_charArrayShorterThanString_IndexOutOfBoundExceptionThrown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String testing \u003d \"Testing string!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        char[] charArray \u003d new char[10];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Util.putsIntoArray(testing, charArray, 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void putsIntoArrayWithCentralise_charArrayLongerThanString_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String testing \u003d \"Testing string!\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        char[] charArray \u003d new char[20];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Util.putsIntoArrayWithCentralise(testing, charArray, 0, 19);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 0; i \u003c testing.length(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(testing.charAt(i), charArray[i + 2]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void putsIntoArrayWithCentralise_charArrayEqualToString_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String testing \u003d \"Testing\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        char[] charArray \u003d new char[7];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Util.putsIntoArrayWithCentralise(testing, charArray, 0, 6);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (int i \u003d 0; i \u003c testing.length(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(testing.charAt(i), charArray[i]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void putsIntoArrayWithCentralise_charArrayShorterThanString_IndexOutOfBoundExceptionThrown() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String testing \u003d \"Testing string!\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        char[] charArray \u003d new char[10];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Util.putsIntoArrayWithCentralise(testing, charArray, 0, 9);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void dateStringToDate_correctFormat_success() throws InvalidDatetimeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalDate expected \u003d LocalDate.of(2020, 11, 11);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalDate actual \u003d Util.dateStringToDate(\"11-11-2020\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void dateStringToDate_invalidFormat_InvalidDatetimeExceptionThrown() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Util.dateStringToDate(\"111-11-2020\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidDatetimeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void timeStringToTime_correctFormat_success() throws InvalidDatetimeException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalTime expected \u003d LocalTime.of(22,0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        LocalTime actual \u003d Util.timeStringToTime(\"2200\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void timeStringToTime_invalidFormat_InvalidDatetimeExceptionThrown() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Util.timeStringToTime(\"2500\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidDatetimeException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void priorityStringToPriority_correctFormat_success() throws InvalidPriorityException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Priority expected \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Priority actual \u003d Util.priorityStringToPriority(\"3\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void priorityStringToPriority_invalidPriority_InvalidPriorityExceptionThrown() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            Util.priorityStringToPriority(\"0\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidPriorityException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void dateToString_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String expected \u003d \"\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String actual \u003d Util.dateToString(null);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        expected \u003d \" 11-11-2020\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        actual \u003d Util.dateToString(LocalDate.of(2020,11,11));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void timeToString_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String expected \u003d \"\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String actual \u003d Util.timeToString(null);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        expected \u003d \" 2000\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        actual \u003d Util.timeToString(LocalTime.of(20,0));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void priorityToString_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String expected \u003d \" \" + ANSI_GREEN + \"LOW\" + ANSI_RESET;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        String actual \u003d Util.priorityToString(Priority.LOW);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 202
    }
  },
  {
    "path": "src/test/java/seedu/data/TaskMapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "class TaskMapTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private TaskMap taskMap \u003d new TaskMap();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Task t1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Task t2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Task t3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Task t4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    private Task t5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t1 \u003d new Task(\"meeting\", \"20-10-2020\", null, null, null, null, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t2 \u003d new Task(\"meeting\", \"20-10-2020\", null, null, \"2\", null, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t3 \u003d new Task(\"reading\", \"17-10-2020\", null, null, \"2\", null, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t4 \u003d new Task(\"reading\", \"24-10-2020\", \"2200\", \"2300\", null, null, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            t5 \u003d new Task(\"random\", \"15-10-2020\", null, null, \"3\", null, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void operations_emptyTaskMap_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertNull(taskMap.get(Integer.parseInt(\"1234\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.getValues().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.sortListByDate().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.sortListByPriority().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.searchByDate(LocalDate.now()).size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.searchByDescription(\"abc\").size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // All sizes should be 0."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int sizeBeforeDelete \u003d taskMap.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.delete(Integer.parseInt(\"1234\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(sizeBeforeDelete, taskMap.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int sizeBeforeClear \u003d taskMap.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(sizeBeforeClear, taskMap.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void operations_nonEmptyTaskMap_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.addTask(t1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(1, taskMap.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(t1, taskMap.get(t1.getTaskID()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.addTask(t2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int currentSize \u003d taskMap.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(2, currentSize);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Found both tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(currentSize, taskMap.searchByDescription(\"meet\").size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(currentSize, taskMap.searchByDescription(\"Meet\").size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(currentSize, taskMap.searchByDate(LocalDate.of(2020,10,20)).size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Not found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.searchByDate(LocalDate.of(2020, 10,30)).size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.searchByDescription(\"reading\").size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.addTask(t3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.addTask(t4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        currentSize \u003d taskMap.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(currentSize, taskMap.searchByDescription(\"ing\").size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.addTask(t5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // getValues()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(5, taskMap.getValues().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Sort by date"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap sortedByDate \u003d taskMap.sortListByDate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Integer[] indexSortedByDate \u003d {t5.getTaskID(), t3.getTaskID(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                                       t1.getTaskID(), t2.getTaskID(), t4.getTaskID()};"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (Task t : sortedByDate.getValues()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(taskMap.get(indexSortedByDate[count++]), t);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        // Sort by priority"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        TaskMap sortedByPriority \u003d taskMap.sortListByPriority();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        Integer[] indexSortedByPriority \u003d {t5.getTaskID(), t3.getTaskID(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "                                           t2.getTaskID(), t1.getTaskID(), t4.getTaskID()};"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        count \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        for (Task t : sortedByPriority.getValues()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(taskMap.get(indexSortedByPriority[count++]), t);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.delete(t1.getTaskID());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(4, taskMap.size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(0, taskMap.size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void initialiseTaskMap_TaskList_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(t1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(t2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(t3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(t4);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        tasks.add(t5);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        taskMap \u003d new TaskMap(tasks);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        assertEquals(tasks.size(), taskMap.size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 5,
      "QX-CHEN": 113
    }
  },
  {
    "path": "src/test/java/seedu/planus/PlanusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.planus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "class PlanusTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 3,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidDatetimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import seedu.exceptions.InvalidPriorityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import seedu.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.INVALID_DATETIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "import static seedu.messages.Messages.INVALID_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "import static seedu.messages.Messages.INVALID_REMINDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    void initialiseTask_differentPriority_success() throws InvalidDatetimeException, InvalidReminderException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"p1\", null,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    null, null, \"1\", null, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"p2\", null,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                null, null, \"2\", null, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"p3\", null,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                null, null, \"3\", null, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidPriorityException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    void initialiseTask_invalidPriorityExceptionThrown() throws InvalidDatetimeException, InvalidReminderException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"p0\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                null, null, null, \"0\", null, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidPriorityException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(INVALID_PRIORITY, e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"p4\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                null, null, null, \"4\", null, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidPriorityException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(INVALID_PRIORITY, e.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    void initialiseTask__datetime_success() throws InvalidPriorityException, InvalidReminderException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"dt1\", \"20-10-2020\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                null, null, null, null, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"dt2\", null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                \"0000\", null, null, null, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"dt3\", null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                null, \"2359\", null, null, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidDatetimeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    void initialise_task_invalidDatetimeExceptionThrown() throws InvalidPriorityException, InvalidReminderException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"date_fail\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                \"20-20-2020\", null, null, null, null, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidDatetimeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(INVALID_DATETIME, e.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            new Task(\"time_fail\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                null, \"3000\", null, null, null, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        } catch (InvalidDatetimeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "            assertEquals(INVALID_DATETIME, e.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    void initialiseTask_differentReminder_success() throws InvalidDatetimeException, InvalidPriorityException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            new Task(\"t1\", null,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    \"1800\", null, null, \"on\", null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            new Task(\"t2\", null,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    null, null, null, \"off\", null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            new Task(\"t3\", null,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    null, null, null, \"on\", \"1800\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    void initialise_task_invalidReminderExceptionThrown() throws InvalidPriorityException, InvalidDatetimeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhchan163"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            new Task(\"reminder_fail\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    null, null, null, null, \"random\", null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            assertEquals(INVALID_REMINDER, e.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            new Task(\"reminder_time_fail\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "                    null, null, null, null, \"on\", null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "            assertEquals(INVALID_REMINDER, e.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhchan163"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhchan163": 46,
      "QX-CHEN": 68
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add    d/20-10-2020"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add\tst/2000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add  et/2000"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add p/3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add meeting d/20-10-2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add any field d/22-10-2020 st/2000 p/2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "add test d/28-11-2020 st/1400 et/1600 p/3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "find"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "search reading"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "search t"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete 813021893218302138219083291830218"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "edit -1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "edit 327187837128372897312321321"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "edit 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "edit 10"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "edit 1 des/changed d/20-10-2020 et/2200"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "clear"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 29
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QX-CHEN"
        },
        "content": "java -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "QX-CHEN": 1,
      "-": 22
    }
  }
]
