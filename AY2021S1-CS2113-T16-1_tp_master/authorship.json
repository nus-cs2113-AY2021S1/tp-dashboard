[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    mainClassName \u003d \"seedu.financeit.Financeit\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    archiveBaseName \u003d \"financeit\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "Artemis-Hunt": 1,
      "kaiwen98": 2
    }
  },
  {
    "path": "data/backup/names.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "die lah"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "who are you"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 3
    }
  },
  {
    "path": "data/info.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "Name: null"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "Interest: 0.0%"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "Cashback: 0.0%"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "Cashback Cap: $0.0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "Notes: null"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Feudalord": 6
    }
  },
  {
    "path": "data/save.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Ledger;2020-05-05"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 1
    }
  },
  {
    "path": "data/save1.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "Expense;4500;JANUARY"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "Income;5500;JANUARY"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "Expense;6500;FEBRUARY"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 3
    }
  },
  {
    "path": "data/save2.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "23;hahasdsd;-$43000.0;;Every month;Auto deduction;nothing"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Looi Kai Wen | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "kaiwen98": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "### Overview of architecture"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "There are 5 distinct features that exists within the FinanceIt application, all of which are accessed via the main menu "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "interface facilitated in FinanceIt.java."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Architecture"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](.DeveloperGuide_images/Overall%20Architecture.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* __Feature modules__: Modules implementing the features of the application as follows:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | Feature| Purpose|"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |-------|-------|"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Manual Tracker| User can manually record daily transactions into the program"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Recurring Tracker|"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Goal Tracker|"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Finance Tools|"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* __Helper modules__: Modules that serve auxillary purposes to the program"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | Feature| Purpose|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |-------|-------|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Data| Represents data relevant to the program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Ui| Handles console output and user input at user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Logic| Describes param handling and checking logic."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Storage| Handles saving and loading of program data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Error Handling.Exceptions| Exception classes unique to each program error identified."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    |Error Handling.LoggerCentre| Class that consolidates ```Logger``` instances used throughout the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "### Logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "#### Param Handling"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### UML Class Diagram"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Summary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Classes which require input parameters by users require the collection of"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "helper classes to handle the parsing, checking and organisation of the input string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* The handling of parameter input is isolated into an abstract class, whereby classes which requires a param handling"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "feature will inherit from the abstract class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Specific behavior towards different ```param type```-```parameter``` pairs  will be defined within their "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "own class declarations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Architecture"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* The initialisation of ```Ledger``` and ```Entry``` instances can be"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "performed with reference to input parameters supplied from the user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* For ledger creation operations, the input from the user is parsed and passed into an initialized ledger instance"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "to handle. That is, the handling of input parameters is abstracted out from the tracker classes. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003cbr\u003e The handle operation will set the various attributes within the ledger in accordance to specifications inferred"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "from the user input. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003cbr\u003e If the ledger is successfully specified in full, it will be added to a ```ledgerList``` instance within the handler "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "class ```ManualTracker```."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* For ledger deletion/open, a ledger will need to be selected from the ledger list maintained by the handler class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003cbr\u003eHence, the input from the user is parsed and passed into a command instance to handle. If the input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "is valid, the ledger list instance will assign a reference to the ledger selected to a public ```currLedger``` "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "attribute. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003cbr\u003eAfter which, an operation of edit/open would be performed upon the ledger referenced from "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "```currLedger``` in ```ledgerList```."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "#### Input Parsing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Input Conventions"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* The user input is composed of the following format:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    \u003ccommand\u003e \u003cparam type\u003e \u003cparameter\u003e \u003cparam type\u003e \u003cparameter\u003e ..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* The ```command``` string determines the current state of the Finite State Machine, and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "hence the function executed. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* The remainder of the string includes a series of  ```param type``` - ```param``` combinations, whereby"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "```param type``` indicates the type of the parameter which is to be identified by the user class,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "and ```param``` indicates the parameter that is associated with the ```param type```. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Param types are restricted to two types: "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    * ```/\u003cstring\u003e```, requires a corresponding parameter."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Eg. ```param type```: ```/date```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "              \u003cbr\u003e  ```param``` : ```2020-04-04```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    * ```-\u003cstring\u003e```, does not require a corresponding parameter. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Reserved for param types which are used to specify a property to be true/false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Eg. ```-auto```, to specify if an entry has automatic deduction. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Command Packet"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* A helper class. Contains two particular attributes to store the user input in an organised fashion."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    * ```commandString``` :  ```String``` Store the command string from the input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    * ```paramMap``` : ```HashMap``` Store the pairs of ```param type``` and ```param``` present in the input string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Key: ```param type```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Value:  ```param```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### InputParser"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* A helper class. Parses the input string and returns a corresponding ```commandPacket```."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    * ```parseInput()```: "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Initializes a ```commandPacket``` and populates the ```commandString``` attribute."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Calls ParamParser instance to parse the segment of the input string"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        that corresponds with the sequence of ```param type``` - ```param``` pairs, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return a HashMap populated with the aforementioned pairs."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Returns a fully populated ```commandPacket``` to be used by user classes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "         "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### ParamParser"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* A helper class. Parses the subsequence of the input string that corresponds with sequence of "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "```param type``` - ```param``` pairs."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    * Parsing of input for params via ```parseParams()```:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * __Step 1__: Use a regex helper class ```RegexMatcher``` to identify and extract ```param type``` that matches the "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        pattern specified in \"Input conventions\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Param types are restricted to two types: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "          /\u003cstring\u003e, requires a corresponding parameter."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "              Eg. param type: /date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \u003cbr\u003e  param : 2020-04-04"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "          -\u003cstring\u003e, does not require a corresponding parameter. "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "              Reserved for param types which are used to specify a property to be true/false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "              Eg. -auto, to specify if an entry has automatic deduction. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * __Step 2__: Identify the substring of the rest of the input string before the next ```param type``` or end-of-line, "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        as the ```param``` to the previously identified ```param type```. Extract it from the input string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * __Step 3__: Put the ```param type``` - ```param``` pair into a ```HashMap```."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * __Step 4__: Repeat steps 1 to 4 until there is the input string is fully extracted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * __Step 5__: Return a ```HashMap``` populated with the aforementioned pairs."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "#### Param Handling"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### ParamHandler"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* An abstract class that defines all param handling behavior. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    * Handling of params via```handleParams(packet)```:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * Initialize the state of the handler "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            * Children class of ```ParamHandler``` call ```setRequiredParams()``` to set required Params that need to be parsed successfully to constitute an overall successful parse."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            * Resetting String arrays in the following ```param``` arrays:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                * ```missingRequiredParams```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                * ```paramsSuccessfullyParsed```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            * Set the ```CommandPacket``` instance in ```ParamChecker``` by calling ```ParamChecker.setPacket(packet)```."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        * For every```paramType``` in the ```CommandPacket``` instance, execute ```handleSingleParam(packet)``` method. "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            1. ```handleSingleParam(packet)``` is an abstract method, and it is implemented by children classes of ```ParamHandler``` depending on the needs and requirements of that particular class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        1. Check if the parse was successful. The condition below that define a successful parse is:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            1. All ```param``` in ```createLedgerCommand.requiredParams``` string array are parsed with no exceptions thrown."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        1. If parse is successful, the process ends gracefully. Else, throw ```InsufficientParamsException()```."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "### Main Menu"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "- Loading up user data"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "- Access to various features"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "- Saving outstanding user data to respective save files"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "### Feature 1: Manual Tracker \u0026 Entry Tracker"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "#### Overview"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Ledgers and Entries"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "In this feature, we represent the transactions incurred by the users as ```Entry``` instances."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Instances of ```Entry``` class are categorised by the date of origin, which is represented by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "```Ledger``` instances."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "```Entry``` instances are characterized by the following: "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Time of transaction"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Type of transaction: Income/ Expense "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Amount in transaction"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Category of spending/ expenditure"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Description"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "```Ledger``` instances are characterized by the following: "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Time of transaction"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Collection of ```Entry```instances"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Manual Tracker"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "The Manual Tracker is a feature that allows users to manage Ledgers with create, delete"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "and open operations. Ledgers is a class that maintains a list of transactions that are "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "recorded for a given date. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "The Entry Tracker is fundamentally similar to the Manual Tracker, except it manages ```Entry``` instances"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "instead of ```Ledger```. Entry Tracker is initialized when a ```Ledger``` instance is \"opened\", whereby "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "the Entry Tracker facilitate the manipulation of the collection of ```Entry``` instances that are associated with"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "that particular ```Ledger``` instance."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "For the sake of brevity, this section will focus on the discussion of the Manual Tracker."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "The Manual Tracker is capable of executing the following states of operation:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|States| Operations | "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```MAIN_MENU```|Go to main menu for users to choose the available operations"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```CREATE_LEDGER```|Create a ledger specified by date, and append it to ```ledgerList```."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```DELETE_LEDGER```|Delete an existing ledger, referenced by date or index."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```OPEN_LEDGER```|Go to subroutine \"Entry Tracker\" for the entries recorded  under the specified ledger."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "#### Architecture"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Architecture Overview"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](uml_images/manualTracker/images/Architecture_ManualTracker.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|Module| Function | "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| ```Parser```|Parse inputs from user and return ```CommandPacket``` instance with organised ```commandString``` and ```paramMap``` "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| ```Tracker/ Handler```|Manages the overall workflow of the Manual Tracker; identifies operation required from input and executes the corresponding ```command```."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| ```Data``` |Refers to ```Ledger``` instances, stores relevant data of the day\u0027s transactions."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| ```Data List``` |Refers to ```LedgerList``` instances, maintains Ledger instances within the program. "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| ```Commands``` |Processes information from ```CommandPacket``` and executes the appropriate process from recognised params."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| ```Logic``` |Outlines the abstract behavior of commands, as well as handle verification of params with appropriate error handling."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Handler and Command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Command and Logic"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](uml_images/manualTracker/images/Commands_Logic_edited.png)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|Class| Function |"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```retrieveLedgerCommand```| Process ```paramTypes```-```param``` pairs from the ```CommandPacket``` instance to identify specified ```Ledger``` instance, then retrieves the instance from the existing ```LedgerList```."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```createLedgerCommand```| Process ```paramTypes```-```param``` pairs from the ```CommandPacket``` instance to identify specified ```Ledger``` instance to be created, then creates the instance and append to existing ```LedgerList```."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```retrieveEntryCommand```| Omitted and left as exercise for reader. : ^ )"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```createEntryCommand```| Omitted for brevity."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```editEntryCommand```| Omitted for brevity."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```ParamChecker```| Class contains a collection of methods that verify the correctness of the ```param``` supplied. \u003cbr\u003e\u003cbr\u003e For instance, ```ParamChecker.checkAndReturnIndex``` checks if the index provided is out of bounds relative to the specified list, and throws the relevant exception if the input index is invalid. "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```ParamHandler```| Abstract class that outlines the general param handling behavior of ```commands``` instances and other classes that need to handle ```params``` in its operation.  "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](uml_images/manualTracker/images/Handler_Commands.png)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|Class| Function |"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```retrieveLedgerCommand```| Refer to section above."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```createLedgerCommand```| Refer to section above."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```retrieveEntryCommand```| Omitted for brevity."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```createEntryCommand```| Omitted for brevity."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```editEntryCommand```| Omitted for brevity."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```ManualTracker```| Implements Manual Tracker. Contains handler methods that implements a particular operation capable by the Manual Tracker. \u003cbr\u003e\u003cbr\u003e These methods use the above ```command``` instances for param handling operations from user input."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```EntryTracker```| Omitted for brevity."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Handler and Parser"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](uml_images/manualTracker/images/Handler_Parser.png)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|Class| Function |"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```InputParser```| Breaks input string by user into ```commandString``` and a sequence of ```paramTypes```-```param``` pairs. \u003cbr\u003e\u003cbr\u003e The latter subsequence of the string is passed into ParamParser for further processing. \u003cbr\u003e\u003cbr\u003e Information obtained from input parsing will be used to populate an instantiated ```CommandPacket``` instance, which will then be passed to the entity that called the parsing function."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```ParamParser```| Process the sequence of ```paramTypes```-```param``` pairs and populate the ```paramMap``` in the instantiated ```CommandPacket``` instance."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```ManualTracker```| Refer to section above."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```EntryTracker```| Omitted for brevity."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Handler and Data"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](uml_images/manualTracker/images/Handler_Data.png)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|Class| Function |"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|--------|--------|"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```ManualTracker```| Refer to section above."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```EntryTracker```| Omitted for brevity."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```EntryList```| Omitted for brevity."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```Entry```| Omitted for brevity."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```LedgerList```| Extends ItemList. Refer to Ledgers and Entries section for class behavior."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```Ledger```| Extends DateTimeItem. Refer to Ledgers and Entries section for class behavior."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```ItemList```| Class with defined list behavior specified with helper methods such as retrieval, checking of Duplicates and deletion."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```DateTimeItem```| Abstract class that extends ```Item``` class; instances will have ```LocalDate``` or ```LocalTime``` attributes and corresponding helper methods."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "|```Item```| Abstract class to define behavior of entities that need are stored in ```ItemList``` instances."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "#### Functions with Sequence Diagrams"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Creation of Ledger"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. At ```ManualTracker.handleMainMenu()```, the user\u0027s input is registered via ```java.util.Scanner``` instance."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. Input is parsed by ```InputParser.parseInput()```, and ```ManualTracker.packet``` is set to the returned ```CommandPacket``` instance."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. The ```commandString``` of the ```CommandPacket``` instance is evaluated, and the corresponding handle method() is executed.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "In this case, ```handleCreateLedger()``` will be called."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. At ```handleCreateLedger()```, the following processes will be executed:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    1. A new instance of ```createLedgerCommand``` is created. The input String array will be passed into "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    ```createLedgerCommand.setRequiredParams()``` to set required params for a successful parse."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    1. A new instance of ```Ledger``` will be instantiated and set to ```createLedgerCommand.currLedger```."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    1. ```createLedgerCommand.handlePacket(packet)``` is called to handle params in the packet."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        1. Refer to the section on Param Parsing for more details pertaining to general param handling. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        1. For ```createLedgerCommand```, the ```handleSingleParam``` abstract method will be implemented as follows:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            |ParamType|ParamType String| Expected Param | Operation | Verification method |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            |---------|----------------|----------------|-----------|---------------------|"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            |```PARAM.DATE```|\"/date\"|Various format of date in string, eg. \"2020-03-02\"| Call ```currLedger.setDate()``` to set date for the ```Ledger``` instance. | ```ParamChecker.checkAndReturnDate(packet)```|"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. From ```ManualTracker```, the configured ```Ledger``` instance will be retrieved from the ```createLedgerCommand``` instance"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "and added into the ```LedgerList``` instance at ```ManualTracker.ledgerList```."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](uml_images/manualTracker/images/manualTrackerCreateLedgerSeqDiagram.png)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "##### Deletion of Ledger"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. At ```ManualTracker.handleMainMenu()```, the user\u0027s input is registered via ```java.util.Scanner``` instance."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. Input is parsed by ```InputParser.parseInput()```, and ```ManualTracker.packet``` is set to the returned ```CommandPacket``` instance."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. The ```commandString``` of the ```CommandPacket``` instance is evaluated, and the corresponding handle method() is executed.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "In this case, ```handleCreateLedger()``` will be called."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. At ```handleCreateLedger()```, the following processes will be executed:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    1. A new instance of ```createLedgerCommand``` is created. The input String array will be passed into "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    ```createLedgerCommand.setRequiredParams()``` to set required params for a successful parse."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    1. A new instance of ```Ledger``` will be instantiated and set to ```createLedgerCommand.currLedger```."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    1. ```createLedgerCommand.handlePacket(packet)``` is called to handle params in the packet."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        1. Refer to the section on Param Parsing for more details pertaining to general param handling. "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        1. For ```createLedgerCommand```, the ```handleSingleParam``` abstract method will be implemented as follows:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            |ParamType|ParamType String| Expected Param | Operation | Verification method |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            |---------|----------------|----------------|-----------|---------------------|"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            |```PARAM.DATE```|\"/date\"|Various format of date in string, eg. \"2020-03-02\"| Call ```currLedger.setDate()``` to set date for the ```Ledger``` instance. | ```ParamChecker.checkAndReturnDate(packet)```|"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. From ```ManualTracker```, the configured ```Ledger``` instance will be retrieved from the ```createLedgerCommand``` instance"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "and added into the ```LedgerList``` instance at ```ManualTracker.ledgerList```."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "![](uml_images/manualTracker/images/manualTrackerDeleteLedgerSeqDiagram.png)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### FinanceTools"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bqxy"
        },
        "content": "FinanceTools consists of the following features"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bqxy"
        },
        "content": "1. Simple Interest Calculator"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bqxy"
        },
        "content": "2. Yearly/Monthly Compound Interest Calculator"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bqxy"
        },
        "content": "3. Cashback Calculator"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bqxy"
        },
        "content": "4. Miles Credit Calculator"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bqxy"
        },
        "content": "6. Account Storage"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bqxy"
        },
        "content": "7. Command and Calculation History"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Simple Interest Calculator"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Simple Interest Calculator is facilitated by ```SimpleIntest``` class. It allows user to calculate interest earned."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bqxy"
        },
        "content": "When user inputs ```simple``` as a command, ```handleSimpleInterest``` from ```Handler``` class will handle user"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bqxy"
        },
        "content": "inputted parameters. The calculation is done by ```SimpleInterest``` class. The result is outputted in"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```FinanceTools.main()```."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Interest Rate (Mandatory)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following class diagram shows how the Simple Interest Calculator feature works:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![ClassDiagram](uml_images/financetools/SimpleInterest/SimpleInterestClassDiagram.png)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the params are handled before the implementation is carried out:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram1](uml_images/financetools/SimpleInterest/SimpleInterestSequenceDiagram(1).png)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the Simple Interest Calculator feature works:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram2](uml_images/financetools/SimpleInterest/SimpleInterestSequenceDiagram(2).png)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Yearly/Monthly Compound Interest Calculator"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Yearly/Monthly Compound Interest Calculator is facilitated by ```YearlyCompoundInterest``` /"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```MonthlyCompoundInterest``` class. It allows user to calculate interest earned."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bqxy"
        },
        "content": "When user inputs ```cyearly``` / ```cmonthly``` as a command, ```handleYearlyCompoundInterest``` /"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```handleMonthlyCompoundInterest``` from ```Handler``` class will handle user inputted parameters. The calculation "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bqxy"
        },
        "content": "is done by ```YearlyCompoundInterest``` / ```MonthlyCompoundInterest``` class. The result is outputted in"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```FinanceTools.main()```."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters (Yearly Compound Interest Calculator)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Interest Rate (Mandatory)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/p``` - Number of Years (Mandatory)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/d``` - Yearly Deposit (Optional)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters (Monthly Compound Interest Calculator)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Interest Rate (Mandatory)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/p``` - Number of Months (Mandatory)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/d``` - Monthly Deposit (Optional)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following class diagram shows how the Yearly/Monthly Compound Interest Calculator feature works:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![ClassDiagram1](uml_images/financetools/YearlyMonthlyCompoundInterest/YearlyCompoundInterestClassDiagram.png)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![ClassDiagram2](uml_images/financetools/YearlyMonthlyCompoundInterest/MonthlyCompoundInterestClassDiagram.png)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the params are handled before the implementation is carried out:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram1](uml_images/financetools/YearlyMonthlyCompoundInterest/YearlyCompoundInterestSequenceDiagram(1).png)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram1](uml_images/financetools/YearlyMonthlyCompoundInterest/MonthlyCompoundInterestSequenceDiagram(1).png)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the Yearly/Monthly Compound Interest Calculator feature works:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram1](uml_images/financetools/YearlyMonthlyCompoundInterest/YearlyCompoundInterestSequenceDiagram(2).png)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram1](uml_images/financetools/YearlyMonthlyCompoundInterest/MonthlyCompoundInterestSequenceDiagram(2).png)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Cashback Calculator"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Cashback Calculator is facilitated by ```Cashback``` class. It allows user to calculate cashback earned."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bqxy"
        },
        "content": "When user inputs ```cashb``` as a command, ```handleCashback``` from ```Handler``` class will handle user"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bqxy"
        },
        "content": "inputted parameters. The calculation is done by ```Cashback``` class. The result is outputted in"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```FinanceTools.main()```."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Cashback Rate (Mandatory)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/c``` - Cashback Cap (Mandatory)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following class diagram shows how the Cashback Calculator feature works:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![ClassDiagram](uml_images/financetools/Cashback/CashbackClassDiagram.png)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the params are handled before the implementation is carried out:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram1](uml_images/financetools/Cashback/CashbackSequenceDiagram(1).png)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the Cashback Calculator feature works:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram2](uml_images/financetools/Cashback/CashbackSequenceDiagram(2).png)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Miles Credit Calculator"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Miles Credit Calculator is facilitated by ```MilesCredit``` class. It allows user to calculate miles credit earned."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "bqxy"
        },
        "content": "When user inputs ```miles``` as a command, ```handleMilesCredit``` from ```Handler``` class will handle user"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "bqxy"
        },
        "content": "inputted parameters. The calculation is done by ```MilesCredit``` class. The result is outputted in"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```FinanceTools.main()```."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Miles Rate (Mandatory)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following class diagram shows how the Miles Credit Calculator feature works:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![ClassDiagram](uml_images/financetools/MilesCredit/MilesCreditClassDiagram.png)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the params are handled before the implementation is carried out:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram1](uml_images/financetools/MilesCredit/MilesCreditSequenceDiagram(1).png)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the Miles Creidt Calculator feature works:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram2](uml_images/financetools/MilesCredit/MilesCreditSequenceDiagram(2).png)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Account Storage "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Account Storage feature is facilitated by ```AccountStorage``` class. It allows user to store account"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "bqxy"
        },
        "content": "information such as name of account, interest rate, cashback rate, etc. When user inputs ```store``` as command,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```handleAccountStorage``` from ```Handler``` class will handle user inputted parameters and store information "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "bqxy"
        },
        "content": "accordingly. The implementation is done by ```handleInfoStorage``` from ```AccountStorage``` class. Afterwards, this "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "bqxy"
        },
        "content": "information is stored into a txt file which is done by ```updateFile``` from ```AccountSaver``` class."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```info``` - list account(s) information"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```clearinfo``` - clear all information"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```store /rm \u003cACCOUNT_NO\u003e``` - delete corresponding account number in list"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/n``` - Account Name (Optional)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/ir``` - Interest Rate (Optional)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Cashback Rate (Optional)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/c``` - Cashback Cap (Optional)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/o``` - Other Notes (Optional)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/rm``` - Account Number (Optional)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "bqxy"
        },
        "content": "#### Details"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```handleInfoStorage``` stores the user inputted information into an ArrayList which is then passed into"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "bqxy"
        },
        "content": "```updateFile``` to update the txt file. The purpose of using txt file is so that when the user exits and enters the"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "bqxy"
        },
        "content": "program again, the information is retained, and the user does not have to re-enter the account information(s) again."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "bqxy"
        },
        "content": " "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "bqxy"
        },
        "content": "When user first enters FinanceTools in the program, ```readFileContents``` reads 5 lines in the txt file consecutively"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "bqxy"
        },
        "content": "in a ```while``` loop because these 5 lines consists of information that belong to a particular account. These"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "bqxy"
        },
        "content": "categories include: Name, Interest Rate, Cashback Rate, Cashback Cap and Notes\". Doing so helps to facilitate"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "bqxy"
        },
        "content": "the ```delete``` option where instead of deleting single lines, we can delete the entire account information"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "bqxy"
        },
        "content": "which correspond to a particular account because the information is stored in one index of the ArrayList."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "bqxy"
        },
        "content": " "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following class diagram shows how the Account Storage feature works:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![ClassDiagram](uml_images/financetools/AccountStorage/AccountStorageClassDiagram.png)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the params are handled before the implementation is carried out:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram1](uml_images/financetools/AccountStorage/AccountStorageSequenceDiagram(1).png)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The following sequence diagram shows how the Account Storage feature works:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram2](uml_images/financetools/AccountStorage/AccountStorageSequenceDiagram(2).png)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![SequenceDiagram3](uml_images/financetools/AccountStorage/AccountStorageSequenceDiagram(3).png)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "bqxy"
        },
        "content": " "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Command and Calculation History"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "bqxy"
        },
        "content": "To store the commands inputted by user and results from calculations in FinanceTools, an ArrayList is used."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "bqxy"
        },
        "content": "The commands are stored before the params are handled and implementation is executed. The results from calculation"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bqxy"
        },
        "content": "is stored when the implementation has finished executed."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Goal Tracker"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "### Set Expense Goal Feature"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "The set expense goal feature is being implemented by ```GoalTracker```. It allows the user to set an expense goal for"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "the respective month to ensure that the user does not overspent his budget. "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "When user enter ```expense 2000 for 08```, the command will be sent to InputParser and parse it into String[]."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "With the String[], it will be sent to a class called ```Goal```, and it will store the individual information."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "Afterwards, it will be added to a ArrayList in a class called ```TotalGoalList```. "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "Not only that, ```GoalTracker``` also implemented a feature called ```set income goal``` that works almost the same as "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "set expense goal feature with just slight command difference."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " `Format:`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "* setExpenseGoal: expense 5000 for 08"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "* setIncomeGoal: income 5000 for 08"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "### How it works?"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "Firstly, user will input the command based on the `Format`."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "Secondly, the input command will be sent to InputParser to parse."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "Thirdly, the parsed information will be sent to class `Goal` to store the individual information"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "Next, it will be added to a ArrayList in class `TotalGoalList`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "Lastly, the goal status will be displayed to the user.  "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "This class diagram will show how the setting of expense goal works:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![ExpenseClassDiagram](uml_images/goaltracker/SetExpenseGoalClassDiagram.png)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "This sequence diagram will show the flow of setting of expense goal:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![ExpenseSequenceDiagram](uml_images/goaltracker/SetExpenseGoalSequenceDiagram.png)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}  "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Fresh computing graduates who are just starting to enter the workforce."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Have limited income/budget"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Little experience in personal financial management"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Busy juggling their various job applications and interview which might cause them to lose track of their expenditure/ "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "bqxy"
        },
        "content": "bill payments"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* First time drawing salary and lack experience in income tax filling"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}  "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "bqxy"
        },
        "content": "**Expenditure Tracker**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Input itemised spending on a daily basis"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Sum the monthly/weekly expenditure, as well as average weekly/daily expenditure"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Categorise expenditures (e.g. food, transport etc) and sort by category"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "bqxy"
        },
        "content": "**Budget Management**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "* Set a budget (monthly)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "* Remind users of how much budget they have left for that month"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "* Edit the budget (monthly)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "* Display the budget for that month"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "bqxy"
        },
        "content": "**Bill Tracker**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Remind users of payment due dates"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Monthly tracker for each individual bill, visualise trends in bill spending"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "bqxy"
        },
        "content": "**Finance Tools**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Calculate simple interest"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Calculate compound interest with optional monthly/yearly deposit"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Calculate cashback earned"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Calculate miles credit earned"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* Save account information for reference"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "dixoncwc": 29,
      "-": 42,
      "bqxy": 191,
      "kaiwen98": 295
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "# FinanceIt"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": "FinanceIt is an all-in-one desktop application that handles the finance tracking needs of university students who are "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "comfortable with a CLI interface. It includes 5 different finance tools, all of which take in typed commands from the "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "users to execute their respective functions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "bqxy": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "# FinanceIt: A finance management application with a CLI Interface."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "FinanceIt is an all-in-one desktop application that handles the finance tracking needs of university students who are comfortable with a CLI interface."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "It includes 5 different finance tools, all of which take in typed commands from the users to execute their respective functions."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. Download the latest release from the release page."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    Status: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    \u003d Welcome to Main Menu                                                                              \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | No.            |  Feature                                           |  Commands                    |"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    -----------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | [1]            |  Manual Income/Expense Tracker                     |  manual                      |"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | [2]            |  Recurring Income/Expense Tracker                  |  recur                       |"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | [3]            |  Account Summary                                   |  acc                         |"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | [4]            |  Goals Tracker                                     |  goal                        |"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | [5]            |  Financial Calculator                              |  financial                   |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | [6]            |  Toggle Log On or Off                              | logger                       |"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    | [7]            |  Quit The Program                                  |  exit                        |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    \u003e\u003e\u003e "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "# Features : Main Menu"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Gateway to the various other features of the application. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Users can enter an input to access the application they wish to use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Main Menu 1: Exit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Exits from the program. If you have an outstanding list, it will be saved automatically as lastSave.txt in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "the saveStates folder. This folder will be automatically created when you first run the program."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Main Menu 2: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Exits from the program. If you have an outstanding list, it will be saved automatically as lastSave.txt in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "the saveStates folder. This folder will be automatically created when you first run the program."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Main Menu 3: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Exits from the program. If you have an outstanding list, it will be saved automatically as lastSave.txt in"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "the saveStates folder. This folder will be automatically created when you first run the program."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "# Features : Manual Tracker"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Users can manage their daily entries of expenses/ income, which is organised in ledgers representing each day of transactions."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Manual Tracker 1: Add ledger"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Add a ledger to the record, representing a date."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    ledger add \u003cparam type\u003e \u003cparameter\u003e "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /date: Date of the ledger, and all the entries under that ledger."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: Input string of the date in YYMMDD or YY*MM*DD."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Manual Tracker 2: Remove ledger"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Remove a specified ledger from the record, referenced by date or id on the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    ledger delete \u003cparam type\u003e \u003cparameter\u003e "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /date: Date of the ledger, and all the entries under that ledger."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: Input string of the date in YYMMDD or YY*MM*DD."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /id: Index of the ledger on the ledger list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:Integer\u003e: Input number that is between 1 and the last index in the ledger list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Manual Tracker 3: Open ledger"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Users will gain access into the entries associated with the specified ledger."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Tracker switches mode to track entries in the ledger that has been opened."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Refer to Feature Entry Tracker onwards for instructions concerned with the "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "state of the application following this command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    ledger open \u003cparam type\u003e \u003cparameter\u003e "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /date: Date of the ledger, and all the entries under that ledger."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: Input string of the date in YYMMDD or YY*MM*DD."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /id: Index of the ledger on the ledger list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:Integer\u003e: Input number that is between 1 and the last index in the ledger list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Manual Tracker 4: Show ledger list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Shows the record of ledgers that has been added."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    ledger list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Manual Tracker 4: Exit to Main Menu"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Exit to main menu where users can choose another feature to use."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "# Features : Entry Tracker"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Subroutine that is subsidiary off the ManualTracker. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Users can manage entries associated with the ledger they have opened."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Entry Tracker 1: Add entry"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Add an entry to the ledger record."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    entry add \u003cparam type\u003e \u003cparameter\u003e "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /time: Time of entry"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: Input string of the time in HHMM or HH*MM*SS."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /amt: Amount associated with the entry, in $."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:Double\u003e: Amount of money in at most 2 decimal places."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /desc: Details of the transaction that users can refer to when they view the list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: Input string of the description of the transaction."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /cat: Category of transaction"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: {tpt, fd, tvl, shp, bll, slr, alw}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                                Only the above strings are allowed for entries. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                                They represent shortcuts to recognised entry categories that were specified "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                                within the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ -i/-e: Represents income and expenses for the entry type."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Entry Tracker 2: Edit entry"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Add an entry to the ledger record."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Users only need specify the param to edit, there is no need to fill out all params."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Parameter 1 is however compulsory, as there is a need to reference a particular entry."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    entry edit \u003cparam type 1\u003e \u003cparameter 1\u003e \u003cparam type\u003e \u003cparameter\u003e "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type 1\u003e @ /id: Index of the ledger in the entry list to edit."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter 1:Integer\u003e: Input number that is between 1 and the last index in the entry list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /time: Time of entry"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: Input string of the time in HHMM or HH*MM*SS."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /amt: Amount associated with the entry, in $."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:Double\u003e: Amount of money in at most 2 decimal places."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /desc: Details of the transaction that users can refer to when they view the list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: Input string of the description of the transaction."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /cat: Category of transaction"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:String\u003e: {tpt, fd, tvl, shp, bll, slr, alw}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                                Only the above strings are allowed for entries. "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                                They represent shortcuts to recognised entry categories that were specified "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                                within the application."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ -i/-e: Represents income and expenses for the entry type."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Entry Tracker 3: Remove entry"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Remove a specified entry from the record, referenced by id on the list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    entry delete \u003cparam type\u003e \u003cparameter\u003e "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cparam type\u003e @ /id: Index of the ledger in the entry list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u003cparameter:Integer\u003e: Input number that is between 1 and the last index in the entry list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Entry Tracker 4: Show entry list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Shows the record of entries that has been added."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    entry list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Entry Tracker 5: Exit to Manual Tracker main routine"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Exit to Manual tracker where users can choose another ledger."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    example"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bqxy"
        },
        "content": "# Features : FinanceTools"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bqxy"
        },
        "content": "FinanceTools contains tools related to financial calculations."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## FinanceTools 1: Simple Interest Calculator"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Calculate simple interest earned."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## Parameters"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Interest Rate (Mandatory)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003eSyntax:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    simple /a {AMOUNT} /r {INTEREST_RATE}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bqxy"
        },
        "content": "   "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    simple /a 1000 /r 5"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/SimpleInterest(1).PNG)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## FinanceTools 2: Yearly Compound Interest Calculator"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Calculate yearly compound interest earned with optional yearly deposit."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Interest Rate (Mandatory)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/p``` - Number of Years (Mandatory)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/d``` - Yearly Deposit (Optional)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003eSyntax:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cyearly /a {AMOUNT} /r {INTEREST_RATE} /p {YEARS} /d {YEARLY_DEPOSIT}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bqxy"
        },
        "content": "   "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cyearly /a 1000 /r 3 /p 2"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cyearly /a 1000 /r 3 /p 2 /d 1200"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/YearlyCompoundInterest(1).PNG)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/YearlyCompoundInterest(2).PNG)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## FinanceTools 3: Monthly Compound Interest Calculator"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Calculate monthly compound interest earned with optional monthly deposit."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Interest Rate (Mandatory)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/p``` - Number of Months (Mandatory)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/d``` - Monthly Deposit (Optional)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003eSyntax:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cyearly /a {AMOUNT} /r {INTEREST_RATE} /p {MONTHS} /d {MONTHLY_DEPOSIT}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bqxy"
        },
        "content": "   "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cmonthly /a 1000 /r 3 /p 2"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cmonthly /a 1000 /r 3 /p 2 /d 100"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/MonthlyCompoundInterest(1).PNG)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/MonthlyCompoundInterest(2).PNG)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## FinanceTools 4: Cashback Calculator"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Calculate cashback earned."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Cashback Rate (Mandatory)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/c``` - Cashback Cap (Mandatory)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003eSyntax:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cashb /a {AMOUNT} /r {CASHBACK_RATE} /c {CASHBACK_CAP}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bqxy"
        },
        "content": "   "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cashb /a 1000 /r 5 /c 1000"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    cashb /a 1000 /r 5 /c 10"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/Cashback(1).PNG)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/Cashback(2).PNG)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## FinanceTools 5: Miles Credit Calculator"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Calculate cashback earned."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## Parameters"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/a``` - Amount (Mandatory)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Miles Rate (Mandatory)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003eSyntax:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    miles /a {AMOUNT} /r {MILES_RATE}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bqxy"
        },
        "content": "   "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    miles /a 1000 /r 5"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/Miles(1).PNG)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## FinanceTools 6: Account Storage"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Store account information."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```info``` - list account(s) information"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```clearinfo``` - clear all information"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```store /rm \u003cACCOUNT_NO\u003e``` - delete corresponding account number in list"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bqxy"
        },
        "content": "### Parameters"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/n``` - Account Name (Optional)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/ir``` - Interest Rate (Optional)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/r``` - Cashback Rate (Optional)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/c``` - Cashback Cap (Optional)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/o``` - Other Notes (Optional)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bqxy"
        },
        "content": "* ```/rm``` - Account Number (Optional)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003eSyntax:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    store /n {ACCOUNT_NAME} /ir {INTEREST_RATE} /r {CASHBACK_RATE} /c {CASHBACK_CAP} /o {OTHER_NOTES}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bqxy"
        },
        "content": "   "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    store"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    store /n myaccount"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    store /n myaccount /ir 2"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    store /n myaccount /ir 2 /r 2"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    store /n myaccount /ir 2 /r 2 /c 100"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    store /n myaccount /ir 2 /r 2 /c 100 /o main account"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    store /rm 1"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/AccountStorage(1).PNG)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/AccountStorage(2).PNG)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/AccountStorage(3).PNG)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/AccountStorage(4).PNG)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/AccountStorage(5).PNG)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/AccountStorage(6).PNG)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/AccountStorage(7).PNG)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## FinanceTools 7: Command and Calculation History"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Store the commands inputted and results from calculations in FinanceTools."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003eSyntax:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    history"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "bqxy"
        },
        "content": "   "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    history"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/History(1).PNG)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "bqxy"
        },
        "content": "## FinanceTools 8: Exit FinanceTools"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "bqxy"
        },
        "content": "Exit FinanceTools to Main Menu."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003eSyntax:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "bqxy"
        },
        "content": "   "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "bqxy"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "bqxy"
        },
        "content": "![Example](screenshots/financetools/Exit(1).PNG)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 2. List"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Shows full list of appended tasks. You may modify the output format for each task with the appropriate arguements. "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    list \u003cparameter type\u003e \u003cparameter 1\u003e "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cparameter type\u003e:     /format , this parameter is optional."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            # \u003cparameter 1\u003e:        {datetime, day, month, week, year}. "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                                    (You may string these keywords in a single entry for your viewing preferences.)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e list"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [T][X] run the dog"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][O] walk the park (by: FRIDAY SEPTEMBER 2020)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3. [E][X] run the cat (at: FRIDAY SEPTEMBER 2020 to FRIDAY SEPTEMBER 2020)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   4. [T][X] asad"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e list /format datetime"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [T][X] run the dog"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][O] walk the park (by: 2020/09/18 20:00:00)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3. [E][X] run the cat (at: 2020/09/18 15:00:00 to 2020/09/18 16:00:00)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   4. [T][X] asad"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e list /format day year"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [T][X] run the dog"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][O] walk the park (by: FRIDAY 2020)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3. [E][X] run the cat (at: FRIDAY 2020 to FRIDAY 2020)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   4. [T][X] asad"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 3. Commands/ Command"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Displays all outstanding commands executable by the user, with guidance on acceptable syntaxes."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    command"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    commands"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e command"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   These are implemented commands that you can use."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. bye"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Exit the program \u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. list \u003cparameter type\u003e \u003cparameter 1\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Show full list of appended tasks. \u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cparameter type\u003e:      /format , this parameter is optional."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 1\u003e:         {datetime, day, month, week, year}. You may string these keywords in a single entry for your viewing preferences."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3. commands"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Show full list of commands \u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   4. done \u003cinteger\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Mark a task by number \u003cinteger\u003e as done. \u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cinteger\u003e:     Task number on the list. Out-of-bounds and negative inputs are not allowed."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   5. todo \u003cstring\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Will be interpreted as input tasks. Input task will then be added to the list. \u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c!\u003e Tasks added this way are assumed to not be done and recorded accordingly."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   6. event \u003cstring\u003e \u003cparameter type\u003e \u003cparameter 1\u003e \u003cparameter 2\u003e to \u003cparameter 3\u003e \u003cparameter 4\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Add a task which is happening in the future with specific date and time \u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cstring\u003e:      Task name."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cparameter type\u003e:      /at"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 1\u003e:         Date in this format: YYMMDD or YYYY/M/D."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 2\u003e:         Start time"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 3\u003e:         Date in this format: YYMMDD or YYYY/M/D. Feel free to omit this if the event starts and ends on the same day."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 4\u003e:         End time"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   7. deadline \u003cstring\u003e \u003cparameter type\u003e \u003cparameter 1\u003e \u003cparameter 2\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Add a task with a specific deadline\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cstring\u003e:      Task name."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cparameter type\u003e:      /by"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 1\u003e:         Date in this format: YYMMDD or YYYY/M/D."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 2\u003e:         Deadline time"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "      Note that commands 6 and 7 accepts the following date and time formats:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @Date: YYYY*MM*DD or YYMMDD or YY/M/D or YY/MM/D"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @Time: HH*MM*SS or HH*MM or HHMM or H"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           Note that * represents any non-numeric symbol."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   8. remove \u003cinteger\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Remove task by number \u003cinteger\u003e from list. \u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "      @ \u003cinteger\u003e:  Task number on the list. Out-of-bounds and negative inputs are not allowed."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   9. save \u003cparameter type 1\u003e \u003cparameter 1\u003e \u003cparameter type 2\u003e \u003cparameter 1\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Saves current task to local disk. A default folder is: \u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           [~\\savestates\\]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cparameter type 1\u003e:    /name"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 1\u003e:         File name, with or without extension. Only .txt files accepted."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cparameter type 2\u003e:    /dir"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 1\u003e:         Specify a custom save folder path."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   10. load \u003cparameter type 1\u003e \u003cparameter 1\u003e \u003cparameter type 2\u003e \u003cparameter 1\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Loads saved task from local disk. A default folder is: \u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           [~\\savestates\\]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cparameter type 1\u003e:    /name"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 1\u003e:         File name, with or without extension. Only .txt files accepted."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           @ \u003cparameter type 2\u003e:    /dir"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                   # \u003cparameter 1\u003e:         Specify a custom save folder path."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   11. saves"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Show full list of save states in default directory \u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   12. find \u003cstring\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           \u003c Conducts 1-to-1 search over all tasks for the string match. \u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 4. Done"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Marks a task with index number specified as done. The index number starts from 1."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   done \u003cinteger\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "      @ \u003cinteger\u003e:     Task number on the list. Out-of-bounds and negative inputs are not allowed."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e list"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [T][X] run the dog"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][O] walk the park (by: FRIDAY 2020)"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3. [E][X] run the cat (at: FRIDAY 2020 to FRIDAY 2020)"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   4. [T][X] asad"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e done 1"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     [T][O] run the dog"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 5. Todo"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Adds a Todo task to the list. "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Contains only the task name. "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Does not take in datetime inputs.   "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   todo \u003cstring\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cstring\u003e:      Task name."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003c!\u003e Tasks added this way are assumed to not be done and recorded accordingly."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e todo this is a todo"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     [T][X] this is a todo"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Now, you have 1 task  in the list."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 6. Event"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Adds an Event task to the list. "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Contains the task name, the start datetime and the end datetime. "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* The start and end datetimes can be registered via a myriad of input formats."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax  "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    event \u003cstring\u003e \u003cparameter type\u003e \u003cparameter 1\u003e \u003cparameter 2\u003e to \u003cparameter 3\u003e \u003cparameter 4\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cstring\u003e:      Task name."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cparameter type\u003e:      /at"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 1\u003e:         Date in this format: YYMMDD or YYYY/M/D."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 2\u003e:         Start time"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 3\u003e:         Date in this format: YYMMDD or YYYY/M/D. "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                                         (Feel free to omit this if the event starts and ends on the same day.)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 4\u003e:         End time"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e event this is an event /at 200919 1222 thisseperatorcanbeanythingsolongitdoesnotcontainnumbers 1300"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     [E][X] this is an event (at: SATURDAY SEPTEMBER 2020 to SATURDAY SEPTEMBER 2020)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Now, you have 2 tasks in the list."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003eNote that commands 6 and 7 accepts the following date and time formats:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cbr\u003e@Date: YYYY*MM*DD or YYMMDD or YY/M/D or YY/MM/D"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cbr\u003e@Time: HH*MM*SS or HH*MM or HHMM or H"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cbr\u003eNote that * represents any non-numeric symbol."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 7. Deadline "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Adds an Event task to the list. "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Contains the task name and a deadline datetime. "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* The deadline datetime can be registered via a myriad of input formats."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    deadline \u003cstring\u003e \u003cparameter type\u003e \u003cparameter 1\u003e \u003cparameter 2\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003c Add a task with a specific deadline\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cstring\u003e:      Task name."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cparameter type\u003e:      /by"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 1\u003e:         Date in this format: YYMMDD or YYYY/M/D."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 2\u003e:         Deadline time"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e deadline this is a deadline /by 200919 1222"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     [D][X] this is a deadline (by: SATURDAY SEPTEMBER 2020)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Now, you have 3 tasks in the list."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003eNote that commands 6 and 7 accepts the following date and time formats:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cbr\u003e@Date: YYYY\\*MM\\*DD or YYMMDD or YY/M/D or YY/MM/D"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cbr\u003e@Time: HH\\*MM\\*SS or HH*MM or HHMM or H"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        \u003cbr\u003eNote that * represents any non-numeric symbol."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 8. Remove task "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Removes a task with index number specified from the list. The index number starts from 1."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    remove \u003cinteger\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cinteger\u003e:  Task number on the list. "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                      (Out-of-bounds and negative inputs are not allowed.)"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e list"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [T][X] this is a todo"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [E][X] this is an event (at: SATURDAY 2020 to SATURDAY 2020)"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3. [D][X] this is a deadline (by: SATURDAY 2020)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e remove 1"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Process completed successfully!"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           [NOTE]: You have 2 task/s left."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Noted! I\u0027ve removed this task:"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     [T][X] this is a todo"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e list"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [E][X] this is an event (at: SATURDAY 2020 to SATURDAY 2020)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][X] this is a deadline (by: SATURDAY 2020)"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 9. Manual save "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Saves current list of tasks onto local disk as a save state. "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Users can specify the save directory, and the name of the save state."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Should a save state with the same input name already exists, the user will be prompted on whether they wish for the save file to be overwritten or not."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    save \u003cparameter type 1\u003e \u003cparameter 1\u003e \u003cparameter type 2\u003e \u003cparameter 1\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cparameter type 1\u003e:    /name"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 1\u003e:         File name, with or without extension. Only .txt files accepted."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cparameter type 2\u003e:    /dir"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 1\u003e:         Specify a custom save folder path."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e saves"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Save states in [~\\savestates\\]:"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1.      lastSave.txt"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2.      test.txt"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e save /name test.txt"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   The file name supplied already exists in the directory. Are you sure you want to override it? [Y\\N]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e y"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Process completed successfully!"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           [NOTE]: Alright, save state below will be overwritten:  [~\\savestates\\test.txt\\]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Noted! I\u0027ve saved the list to the following directory: [~\\savestates\\]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [E][X] this is an event (at: SATURDAY 2020 to SATURDAY 2020)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][X] this is a deadline (by: SATURDAY 2020)"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 10. Manual load"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Loads an existing save state from local disk into the program as a list of tasks. "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Users can specify the save directory, and the name of the save state."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "* Should there be an open list in the program, the user will be prompted on whether they wish for the list to be overwritten or save onto local disk first."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    load \u003cparameter type 1\u003e \u003cparameter 1\u003e \u003cparameter type 2\u003e \u003cparameter 1\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cparameter type 1\u003e:    /name"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 1\u003e:         File name, with or without extension. Only .txt files accepted."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @ \u003cparameter type 2\u003e:    /dir"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                # \u003cparameter 1\u003e:         Specify a custom save folder path."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e list"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [T][X] run the dog"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][O] walk the park (by: FRIDAY 2020)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3. [E][X] run the cat (at: FRIDAY 2020 to FRIDAY 2020)"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   4. [T][X] asad"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e load /name test"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   There is a list currently being constructed. Would you like to save it first? [Y\\N]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e y"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Process completed successfully!"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "           [NOTE]: Alright, Enter the save command now:"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e save /name anothersave"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Noted! I\u0027ve saved the list to the following directory: [~\\savestates\\]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [T][X] run the dog"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][O] walk the park (by: FRIDAY 2020)"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3. [E][X] run the cat (at: FRIDAY 2020 to FRIDAY 2020)"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   4. [T][X] asad"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Noted! I\u0027ve loaded the list from the following directory: [~\\savestates\\]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1. [E][X] this is an event (at: SATURDAY 2020 to SATURDAY 2020)"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2. [D][X] this is a deadline (by: SATURDAY 2020)"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 11. Show save states"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Show full list of save states in the default directory."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    saves"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   \u003e\u003e\u003e saves"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   Save states in [~\\savestates\\]:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   1.      anothersave.txt"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   2.      lastSave.txt"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   3.      test.txt"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## 12. Find "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "Conducts 1-to-1 word search over all tasks in their task name."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eSyntax"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    find \u003cstring\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "\u003eExample"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  \u003e\u003e\u003e list"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  1. [T][X] run the dog"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  2. [D][O] walk the park (by: FRIDAY 2020)"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  3. [E][X] run the cat (at: FRIDAY 2020 to FRIDAY 2020)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  4. [T][X] asad"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  \u003e\u003e\u003e find the"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  0. [T][X] run the dog"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  1. [D][O] walk the park (by: FRIDAY SEPTEMBER 2020)"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  2. [E][X] run the cat (at: FRIDAY SEPTEMBER 2020 to FRIDAY SEPTEMBER 2020)"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  Total number of results: 3!"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  ____________________________________________________________________________________________________"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "  ```        "
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "# Summary of Commands"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Main menu"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "No. | Command | Purpose | Syntax"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "----|---------|---------|-------"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1|bye|Exit the program|_bye_ "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "2|list | Lists all tasks|_list /format \\\u003cformat\\\u003e_"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "3|command/s|Lists all commands|_command_, _commands_"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "4|done|Mark task as done|_done \\\u003cindex\\\u003e_"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "5|todo|Add todo to list|_todo \\\u003ctask name\\\u003e_"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "6|event|Add event to list|_event \\\u003ctask name\\\u003e /at \\\u003cstart datetime\\\u003e to \\\u003cend datetime\\\u003e_"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "7|deadline|Add deadline to list|_deadline \\\u003ctaskname\\\u003e /by \\\u003cdeadline datetime\\\u003e_  "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "8|remove|Remove task from list|_remove \\\u003cindex\\\u003e_"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "9|save|Manually saves list to save state|_save /name \\\u003cname\\\u003e /dir \\\u003cpath\\\u003e_"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "10|load|Manually loads save state to list|_load /name \\\u003cname\\\u003e /dir \\\u003cpath\\\u003e_"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "11|saves|Shows all save states|_saves_"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "12|find|Search task by string|_find \\\u003cword\\\u003e_"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Manual Tracker"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "No. | Command | Purpose | Syntax"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "----|---------|---------|-------"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1|bye|Exit the program|_bye_ "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "2|list | Lists all tasks|_list /format \\\u003cformat\\\u003e_"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "3|command/s|Lists all commands|_command_, _commands_"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "4|done|Mark task as done|_done \\\u003cindex\\\u003e_"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "5|todo|Add todo to list|_todo \\\u003ctask name\\\u003e_"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "6|event|Add event to list|_event \\\u003ctask name\\\u003e /at \\\u003cstart datetime\\\u003e to \\\u003cend datetime\\\u003e_"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "7|deadline|Add deadline to list|_deadline \\\u003ctaskname\\\u003e /by \\\u003cdeadline datetime\\\u003e_  "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "8|remove|Remove task from list|_remove \\\u003cindex\\\u003e_"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "9|save|Manually saves list to save state|_save /name \\\u003cname\\\u003e /dir \\\u003cpath\\\u003e_"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "10|load|Manually loads save state to list|_load /name \\\u003cname\\\u003e /dir \\\u003cpath\\\u003e_"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "11|saves|Shows all save states|_saves_"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "12|find|Search task by string|_find \\\u003cword\\\u003e_"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "## Entry tracker"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "No. | Command | Purpose | Syntax"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "----|---------|---------|-------"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "1|bye|Exit the program|_bye_ "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "2|list | Lists all tasks|_list /format \\\u003cformat\\\u003e_"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "3|command/s|Lists all commands|_command_, _commands_"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "4|done|Mark task as done|_done \\\u003cindex\\\u003e_"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "5|todo|Add todo to list|_todo \\\u003ctask name\\\u003e_"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "6|event|Add event to list|_event \\\u003ctask name\\\u003e /at \\\u003cstart datetime\\\u003e to \\\u003cend datetime\\\u003e_"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "7|deadline|Add deadline to list|_deadline \\\u003ctaskname\\\u003e /by \\\u003cdeadline datetime\\\u003e_  "
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "8|remove|Remove task from list|_remove \\\u003cindex\\\u003e_"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "9|save|Manually saves list to save state|_save /name \\\u003cname\\\u003e /dir \\\u003cpath\\\u003e_"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "10|load|Manually loads save state to list|_load /name \\\u003cname\\\u003e /dir \\\u003cpath\\\u003e_"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "11|saves|Shows all save states|_saves_"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "12|find|Search task by string|_find \\\u003cword\\\u003e_"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "bqxy": 166,
      "kaiwen98": 634
    }
  },
  {
    "path": "src/main/java/seedu/financeit/Financeit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.goaltracker.GoalTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.ManualTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.RecurringTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.financetools.FinanceTools;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.MenuPrinter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.LoggerCentre;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.utils.storage.AutoTrackerSaver;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.utils.storage.GoalTrackerSaver;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.utils.storage.ManualTrackerSaver;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.utils.storage.SaveManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Financeit {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String test \u003d \"$123.45\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        test \u003d test.replaceAll(\"[^\\\\w | .]\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(test);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        Boolean load \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket packet \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Level mode \u003d Level.OFF;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.getInstance().setLevel(mode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        ManualTrackerSaver mt \u003d ManualTrackerSaver.getInstance(\"./data\", \"./data/save.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        GoalTrackerSaver gt \u003d GoalTrackerSaver.getInstance(\"./data\", \"./data/save1.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        AutoTrackerSaver at \u003d AutoTrackerSaver.getInstance(\"./data\", \"./data/save2.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        load(gt, mt, at);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.refreshPage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printLogo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            MenuPrinter.printMainMenu();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            packet \u003d InputParser.getInstance().parseInput(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.refreshPage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            switch (packet.getCommandString()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"manual\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                ManualTracker.main();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            case \"recur\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                RecurringTracker.main();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"acc\": //AccSummary.main();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"goal\": //GoalTracker.main();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                GoalTracker.main();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"financial\": //FinancialCalculator.main();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                FinanceTools.main();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"saver\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                load \u003d SaveManager.main();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case \"logger\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                mode \u003d (mode \u003d\u003d Level.OFF) ? Level.ALL : Level.OFF;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                MenuPrinter.prompt \u003d (mode \u003d\u003d Level.OFF)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        ? \"Logger is off.\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        : \"Logger is on.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.getInstance().setLevel(mode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                if (load \u003d\u003d false) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    save(gt, mt, at);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                MenuPrinter.prompt \u003d \"Invalid Command\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static void load(GoalTrackerSaver gt, ManualTrackerSaver mt, AutoTrackerSaver at) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            gt.load();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception m) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            System.out.println(\"Goal Tracker failed to load: \" + m);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            mt.load();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception m) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            System.out.println(\"Manual Tracker failed to load: \" + m);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            at.load();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception m) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            System.out.println(\"Auto Tracker failed to load: \" + m);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static void save(GoalTrackerSaver gt, ManualTrackerSaver mt, AutoTrackerSaver at) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            gt.save();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception m) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            System.out.println(\"Goal Tracker failed to save: \" + m);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            mt.save();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception m) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            System.out.println(\"Manual Tracker failed to save: \" + m);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            at.save();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception m) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            System.out.println(\"Auto Tracker failed to save: \" + m);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dixoncwc": 1,
      "Feudalord": 78,
      "Artemis-Hunt": 2,
      "bqxy": 1,
      "kaiwen98": 39
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/CategoryMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Bi-directional map to store transaction category and its corresponding user input shortcut."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class CategoryMap {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     *  Used to parse user category input, ensures that the range of corresponding Categories to given input is"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     *  confined to that in the CategoryMap."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static HashMap\u003cString, String\u003e inputToCategoryMap \u003d new HashMap() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"tpt\", \"TRANSPORT\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"fd\", \"FOOD\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"tvl\", \"TRAVEL\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"shp\", \"SHOPPING\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"bll\", \"BILLS\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"slr\", \"SALARY\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"alw\", \"ALLOWANCE\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Used by the SaveManager to convert category value in the Entry class to the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * corresponding user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * This allows the class to reconstruct the commands required to generate the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * saved Entry instances."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static HashMap\u003cString, String\u003e categoryToInputMap \u003d new HashMap() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"TRANSPORT\", \"tpt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"FOOD\", \"fd\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"tvl\", \"TRAVEL\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"SHOPPING\", \"shp\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"BILLS\", \"bll\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"SALARY\", \"slr\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            put(\"ALLOWANCE\", \"alw\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getInputFromCategory(String input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return categoryToInputMap.get(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getCategoryFromInput(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return inputToCategoryMap.get(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void addNewCategory(String shortcut, String category) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        inputToCategoryMap.put(shortcut, category);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        categoryToInputMap.put(category, shortcut);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 55
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/CommandPacket.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Organises data from input string into distinct data types and structure."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * For scalability purposes, a hashmap is implemented to map param type to its corresponding params."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class   CommandPacket {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String commandString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private HashMap paramMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Constructors"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public CommandPacket(String taskType, HashMap paramMap) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.commandString \u003d taskType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramMap \u003d paramMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public CommandPacket() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Param type refers to /.* (eg. /a)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Param refers to string following the param type"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getParam(String paramType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!paramMap.containsKey(paramType)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return (String) paramMap.get(paramType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public Set\u003cString\u003e getParamTypes() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return paramMap.keySet();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getCommandString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.commandString.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public HashMap getParamMap() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return (HashMap)this.paramMap.clone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void addParamToMap(String paramType, String paramString) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramMap.put(paramType, paramString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void removeParamsFromMap(String... paramTypes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        for (String paramType: paramTypes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.paramMap.remove(paramType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"%s, %s\\n\", this.commandString, this.paramMap);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 11,
      "kaiwen98": 48
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String[] DEFAULT_EXP_CAT \u003d {\"TRANSPORT\", \"FOOD\", \"TRAVEL\", \"SHOPPING\", \"BILLS\"};"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String[] DEFAULT_INC_CAT \u003d {\"ALLOWANCE\", \"WAGES\", \"BONUS\"};"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String[] DEFAULT_PARAMS_PREFIX \u003d {\"/\", \"-\"};"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PLACEHOLDER_DATE \u003d \"2020-01-01\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PLACEHOLDER_TIME \u003d \"00:00\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final int MAX_PARTITION_LINE_LEN \u003d 60;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final int MAX_ARRAY_LEN \u003d 20;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public enum EntryType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EXP(\"Expense\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        INC(\"Income\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        public String literal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryType(String string) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            literal \u003d string;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return literal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public enum PrintType {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ERROR_MESSAGE(\"ERROR\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        INSTRUCTION(\"TODO\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        GOAL_STATUS(\"GOAL STATUS\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        DIRECTORY(\"DIR\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        SYS_MSG(\"SYSTEM MESSAGE\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        public String literal;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        PrintType(String string) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            literal \u003d string;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return literal;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Regex detects the following: \u003cwhitespace\u003e/\u003cword\u003e\u003cwhitespace\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 48
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/ParamHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public abstract class ParamHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    // Compulsory params that has to be parsed - varies based on individual subclass"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    protected HashSet\u003cString\u003e requiredParams \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    // Params that parsed successfully"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    protected HashSet\u003cString\u003e paramsSuccessfullyParsed \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    // Params that are part of requiredParams yet are not present in paramsSuccessfullyParsed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    protected ArrayList\u003cString\u003e missingRequiredParams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected boolean hasParsedAllRequiredParams \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Iteratively handles params in the packet and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * evaluates if the param processing was successful."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param packet input CommandPacket obtained from parsing user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @throws InsufficientParamsException If not all compulsory params are successfully parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @throws ItemNotFoundException       For item retrieving cases, if params supplied does not correspond with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     *                                     an existing item in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handleParams(CommandPacket packet)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throws InsufficientParamsException, ItemNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Reset Sequence"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.resetAllParamCollections();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.hasParsedAllRequiredParams \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ParamChecker.getInstance().setPacket(packet);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        // Handle each param using individual handleSingleParam of subclass"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (String paramType : packet.getParamTypes()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                handleSingleParam(packet, paramType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                // ParamTypes that are parsed correctly"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                // (i.e. no exception thrown) will be recorded"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                this.paramsSuccessfullyParsed.add(paramType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (ParseFailParamException exception) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // Report paramTypes that failed to parse."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.getInstance().getParseFailParamMessage(paramType));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.hasParsedAllRequiredParams \u003d checkParseFailedParams();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.requiredParams.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!this.hasParsedAllRequiredParams) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            throw new InsufficientParamsException(this.missingRequiredParams);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public boolean getHasParsedAllRequiredParams() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.hasParsedAllRequiredParams;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Adds given params to the set of required params."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param paramTypes - all params that are required"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setRequiredParams(String... paramTypes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (String paramType : paramTypes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.requiredParams.add(paramType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Clears params assigned to required params."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void resetAllParamCollections() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.missingRequiredParams.clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramsSuccessfullyParsed.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Checks and records any required param that is missing from successfully parsed params."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Makes use of class level HashSets to check and record."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @return Whether all required params have been parsed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    protected boolean checkParseFailedParams() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        for (String param: this.requiredParams) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            boolean isRequiredParamParsed \u003d checkParamRequirementSatisfied(param);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (!isRequiredParamParsed) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                this.missingRequiredParams.add(param);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return this.missingRequiredParams.isEmpty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Checks whether the param has been parsed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Can be single param or a set of params where one param satisfies the entire set"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * E.g. \"-i or -e\". Parsing either \"-i\" or \"-e\" will satisfy this requirement"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param param - Individual param string to check. Can be single param,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *                or several params delimited by \" or \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @return Whether the param requirement has been satisfied"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    protected boolean checkParamRequirementSatisfied(String param) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String[] paramArray \u003d param.split(\" or \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        for (String paramInArray: paramArray) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (this.paramsSuccessfullyParsed.contains(paramInArray)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * To be implemented by children classes."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param packet    input CommandPacket obtained from parsing user input."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param paramType paramType of param that is currently being validated and processed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @throws InsufficientParamsException If not all compulsory params are successfully parsed"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @throws ItemNotFoundException       For item retrieving cases, if params supplied does not correspond with"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     *                                     an existing item in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public abstract void handleSingleParam(CommandPacket packet, String paramType)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throws ParseFailParamException, ItemNotFoundException;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 51,
      "kaiwen98": 77
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/DuplicateInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class DuplicateInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public DuplicateInputException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/EmptyCommandStringException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class EmptyCommandStringException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public EmptyCommandStringException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(\"Command string cannot be empty!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/EmptyParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class EmptyParamException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public EmptyParamException(String paramType) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(\"No params supplied to \" + paramType);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/FolderNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class FolderNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public FolderNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super(\"Folder not found\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/InfoTextIndexOutOfRangeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class InfoTextIndexOutOfRangeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public InfoTextIndexOutOfRangeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super(\"Number does not correspond to any item on the list\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/InsufficientParamsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class InsufficientParamsException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public InsufficientParamsException(ArrayList\u003cString\u003e params) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(\"The following params require input: \" + String.join(\", \", params));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 9
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/InvalidCategoryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class InvalidCategoryException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public InvalidCategoryException(String invalidParam) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(String.format(\"\\\"%s\\\" is not a valid category input!\", invalidParam));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class ItemNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public ItemNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(\"The object cannot be found!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/common/exceptions/ParseFailParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class ParseFailParamException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public ParseFailParamException(String param) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(\"Failed to parse the following param: \" + param);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/data/DateTimeItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.parser.DateTimeOutputManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public abstract class DateTimeItem extends Item {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected DateTimeOutputManager dateTimeOutputManager \u003d new DateTimeOutputManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected String defaultDateTimeFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public DateTimeItem() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.dateTimeOutputManager \u003d new DateTimeOutputManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.dateTimeOutputManager.setDate(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.dateTimeOutputManager \u003d new DateTimeOutputManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.dateTimeOutputManager.setTime(time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setDefaultDateTimeFormat(String format) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.defaultDateTimeFormat \u003d format;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getDateFormatted() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.dateTimeOutputManager.getSingleDateFormatted(this.defaultDateTimeFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getTimeFormatted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.dateTimeOutputManager.getSingleTimeFormatted(this.defaultDateTimeFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 48
    }
  },
  {
    "path": "src/main/java/seedu/financeit/data/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " * This is the class to set and get individual data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private int incomeGoal \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private int expenseGoal \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private Month incomeMonth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private Month expenseMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This is the function that will set the input into variable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param goal     is the amount"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param category whether expense or income"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param month    states for which month the goal is for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public Goal(int goal, String category, Month month) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        if (this.category.equals(\"Expense\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            setExpenseGoal(goal);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            setExpenseMonth(month);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            setIncomeGoal(goal);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            setIncomeMonth(month);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * Calling this function will output the expense month."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * stored"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public Month getExpenseMonth() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return this.expenseMonth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function set the expense month."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * based on the month entered by the user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param expenseMonth The month that for expense goal"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public void setExpenseMonth(Month expenseMonth) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        this.expenseMonth \u003d expenseMonth;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * Calling this function will output the income month."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * stored"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public Month getIncomeMonth() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return this.incomeMonth;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function set the income month."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * based on the month entered by the user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param incomeMonth The month that is for income goal"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public void setIncomeMonth(Month incomeMonth) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        this.incomeMonth \u003d incomeMonth;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * Calling this function will output the."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * income goal stored"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public int getIncomeGoal() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return this.incomeGoal;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will stored the income goal."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * based on the goal being entered by the user"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param incomeGoal The amount that is set as the income goal"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public void setIncomeGoal(int incomeGoal) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        assert this.incomeGoal !\u003d -1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        this.incomeGoal \u003d incomeGoal;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * Calling this function will output the expense goal."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * stored"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public int getExpenseGoal() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return this.expenseGoal;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will stored the expense goal."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * based on the goal being entered by user"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param expenseGoal The amount that is set as the expense goal"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public void setExpenseGoal(int expenseGoal) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        assert this.expenseGoal !\u003d -1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        this.expenseGoal \u003d expenseGoal;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dixoncwc": 84,
      "Feudalord": 33,
      "kaiwen98": 1
    }
  },
  {
    "path": "src/main/java/seedu/financeit/data/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Item is a class that is element to ItemList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public abstract class Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected int index \u003d -1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Item() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assert this.index !\u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public abstract String getName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 23
    }
  },
  {
    "path": "src/main/java/seedu/financeit/data/ItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * List class that stores Item instances as its elements."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Extends ParamHandler so it is able to handle params from a CommandPacket."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public abstract class ItemList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected Item currItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected ArrayList\u003cItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    protected int indexToModify \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public ItemList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        int index \u003d this.getItemsSize();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        item.setIndex(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.items.add(item);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setIndexToModify(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.indexToModify \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Add the given item and sort the list according to the given comparator."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param item - Item to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param comparator - Comparator object to determine sort order"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void addItemAndSort(Item item, Comparator comparator) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.items.add(item);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        items.sort(comparator);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Item getCurrItem() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.currItem;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setCurrItem(Item item) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.currItem \u003d item;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Item popCurrItem() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Item tempItem \u003d this.currItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.currItem \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return tempItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public int getItemsSize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.items.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public int findIndexOfItem(Item item) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return this.items.indexOf(item);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public ArrayList\u003cItem\u003e getItems() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return this.items;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public boolean isItemDuplicate(Item item) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (Item i : this.items) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i.equals(item)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Provides a reference to the specified item at the zero-based index."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Requires index to have been parsed from user-input, else it will"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * attempt to access index -1."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @throws IndexOutOfBoundsException If no index has been parsed yet and"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *                                   it attempts to access index -1."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Item getItemAtCurrIndex() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assert this.indexToModify \u003e\u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        int index \u003d this.indexToModify;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.items.get(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    //Manually specify index in the code, if necessary"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Item getItemAtCurrIndex(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assert index \u003c items.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.items.get(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void removeAllItems() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.items.clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Removes the specified item at the zero-based index. Requires index to"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * have been parsed from user-input, else it will attempt to access index -1."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @throws IndexOutOfBoundsException If no index has been parsed yet and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *                                   it attempts to access index -1."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void removeItemAtCurrIndex() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assert this.indexToModify \u003e\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.items.remove(this.indexToModify);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    //Manually specify index in the code, if necessary"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void removeItemAtCurrIndex(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assert index \u003c this.items.size();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.items.remove(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Prints all items that are in the ItemList instance."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public abstract void printList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 53,
      "kaiwen98": 67
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/entrytracker/Entry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CategoryMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.DateTimeItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.Ledger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Entry extends DateTimeItem {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String description \u003d \" \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String category \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private Constants.EntryType entryType \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private double amount \u003d -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Allows the entry to be have access to the date of its conception from its \"parent\" ledger."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private Ledger ledger \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Entry() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super.setDefaultDateTimeFormat(\"time\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setLedger(Ledger ledger) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.ledger \u003d ledger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setAmount(double amount) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.category \u003d CategoryMap.getCategoryFromInput(category);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setEntryType(Constants.EntryType entryType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.entryType \u003d entryType;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Constants.EntryType getEntryType() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.entryType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String retrieveLastWord(String input) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        input \u003d input.replaceAll(\"\u003e\", \" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] tokens \u003d input.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return tokens[tokens.length - 1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String getShortFormDesc(String description) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int maxDescLength \u003d 20;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        maxDescLength \u003d Math.min(maxDescLength, description.length());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String shortFormDescription \u003d description.substring(0, maxDescLength);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (description.length() \u003e maxDescLength) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            shortFormDescription +\u003d \"... \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            shortFormDescription +\u003d retrieveLastWord(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return shortFormDescription;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"Entry %d : [ %s ] [ %s ]\", this.getIndex() + 1,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.dateTimeOutputManager.getSingleTimeFormatted(\"time\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.getShortFormDesc(this.description));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"%s;%s;%s;%s;%s\", this.entryType, this.category, this.amount,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.getTimeFormatted(), this.description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Entry entry \u003d (Entry) object;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return (this.description.equals(entry.description))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u0026\u0026 (this.category.equals(entry.category))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u0026\u0026 (this.entryType.equals(entry.entryType))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u0026\u0026 (this.time.equals(entry.time))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \u0026\u0026 (this.amount \u003d\u003d entry.amount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 96
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/entrytracker/EntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.ItemList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.Ledger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class EntryList extends ItemList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    Ledger ledger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public EntryList(Ledger ledger) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.setLedger(ledger);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        entry.setLedger(this.ledger);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.addItem(entry);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.setTitle(String.format(\"List of Entries for Ledger [%s]\", this.ledger));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"Entry Number;Entry Type;Category;Amount;Time;Description                    \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (super.getItemsSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            TablePrinter.addRow(\"No entries created               \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            for (int i \u003d 0; i \u003c super.getItemsSize(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                TablePrinter.addRow(String.format(\"%s;%s\", i + 1, super.items.get(i)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setLedger(Ledger ledger) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.ledger \u003d ledger;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 38
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/entrytracker/EntryTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CategoryMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.DuplicateInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.goaltracker.GoalTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.Ledger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.commands.CreateEntryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.commands.EditEntryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.commands.RetrieveEntryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.FiniteStateMachine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class to handle routine for manual entry management."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class EntryTracker {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static Ledger currLedger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static EntryList entryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static CommandPacket packet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static boolean isUnderTest \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void setTestPacket(CommandPacket inputPacket) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        setCommandPacket(inputPacket);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        isUnderTest \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static void setCommandPacket(CommandPacket p) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        packet \u003d p;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void createEntry() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        handleCreateEntry();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static GoalTracker goalTracker \u003d new GoalTracker();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void setCurrLedger(Ledger ledger) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        currLedger \u003d ledger;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        entryList \u003d ledger.entryList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static FiniteStateMachine.State main() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean endTracker \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FiniteStateMachine fsm \u003d new FiniteStateMachine(FiniteStateMachine.State.MAIN_MENU);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        while (!endTracker) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            switch (fsm.getCurrState()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case MAIN_MENU:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleMainMenu());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case CREATE_ENTRY:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleCreateEntry());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case EDIT_ENTRY:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleEditEntry());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case DELETE_ENTRY:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleDeleteEntry());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case SHOW_ENTRY:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleShowEntry());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case INVALID_STATE:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleInvalidState());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                System.out.println(\"Exiting subroutine...\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                endTracker \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case END_TRACKER:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                endTracker \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // Fall through"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            fsm.transitionState();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static EntryList getEntryList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return entryList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static FiniteStateMachine.State handleMainMenu() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        UiManager.printWithStatusIcon(Constants.PrintType.DIRECTORY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"[ MAIN_MENU -\u003e MANUAL_TRACKER_MENU -\u003e ENTRY_TRACKER (LEDGER %s)\", currLedger));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"You are now in entry tracker for ledger [%s]!\", currLedger),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Enter command!\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Input \\\"commands\\\" for list of commands.\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!isUnderTest) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            packet \u003d InputParser.getInstance().parseInput(input);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        UiManager.refreshPage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (packet.getCommandString()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"entry edit\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.EDIT_ENTRY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"entry new\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"new\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.CREATE_ENTRY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"entry list\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.SHOW_ENTRY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"entry delete\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.DELETE_ENTRY;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.EXIT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"commands\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printCommandList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"cat\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printValidCategories();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            System.out.println(\"Command not recognised. Try again.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static FiniteStateMachine.State handleDeleteEntry() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        RetrieveEntryCommand command \u003d new RetrieveEntryCommand(\"/id\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FiniteStateMachine.State state \u003d FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Entry deletedEntry;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // RetrieveEntryCommand instance retrieves the corresponding entry instance"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // from the entryList instance."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(packet, entryList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            deletedEntry \u003d (Entry) entryList.getItemAtCurrIndex();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Deletion of entry."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            entryList.removeItemAtCurrIndex();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"%s deleted!\", deletedEntry.getName()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException | ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!command.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static FiniteStateMachine.State handleShowEntry() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        entryList.printList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static FiniteStateMachine.State handleCreateEntry(Boolean... isPrintGoalInput) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean isPrintGoal \u003d (isPrintGoalInput.length \u003e 0 \u0026\u0026 isPrintGoalInput[0] \u003d\u003d false)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ? false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            : true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CreateEntryCommand command \u003d new CreateEntryCommand("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FiniteStateMachine.State state \u003d FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Entry entry;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // CreateLedgerCommand instance generates a new Ledger instance"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // from the params specified in the command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(packet);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            entry \u003d command.getCurrEntry();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Checking of duplicates"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (entryList.isItemDuplicate(entry)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new DuplicateInputException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Append entry to list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            entryList.addItem(entry);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // To allow disabling of print feature during JUnit testing."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (isPrintGoal \u003d\u003d true) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                goalTracker.targetGoalTracker(entry);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"%s created!\", entry.getName()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (DuplicateInputException exception) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Duplicate item already exists in the list; not added!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!command.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static FiniteStateMachine.State handleEditEntry() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        RetrieveEntryCommand retrieveEntryCommand \u003d new RetrieveEntryCommand();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EditEntryCommand editEntryCommand;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FiniteStateMachine.State state \u003d FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Entry entry;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // RetrieveEntryCommand instance retrieves the corresponding entry instance"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // from the entryList instance."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            retrieveEntryCommand.handlePacket(packet, entryList);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            entry \u003d (Entry) entryList.getItemAtCurrIndex();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // EditEntryCommand instance edits details of the corresponding ledger instance"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // from the entryList instance."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            editEntryCommand \u003d new EditEntryCommand(entry);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            editEntryCommand.handlePacket(packet);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"%s edited!\", entry.getName()));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException | ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!retrieveEntryCommand.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static void printCommandList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.setTitle(\"List of Commands\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"No.;Command                 ;Input Format                                               \");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"1.;New entry;entry new /time {HHMM} /desc {string} /cat {category} -[i/e]\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"2.;Edit entry;entry edit /id {integer} {param-type/parameter to edit}\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"3.;list entries;entry list\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"4.;delete entry;entry delete /id {integer}\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"5.;exit to manual tracker;exit\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static void printValidCategories() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.setTitle(\"List of Valid Categories\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"Category;Input\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (String i : CategoryMap.inputToCategoryMap.keySet()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            TablePrinter.addRow(String.format(\"%s;%s\", i, CategoryMap.getCategoryFromInput(i)));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static FiniteStateMachine.State handleInvalidState() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(\"You dun goof bro uwuuuuuuu\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dixoncwc": 2,
      "Feudalord": 9,
      "Artemis-Hunt": 1,
      "kaiwen98": 260
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/entrytracker/commands/CreateEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_AMOUNT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_CATEGORY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DESCRIPTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_EXP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_TIME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Command class to create an entry instance, and populates it with parameter values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * The populated entry will be stored within the class, and can be retrieved by calling a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * corresponding getter method."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class CreateEntryCommand extends ParamHandler {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    Entry entry;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public CreateEntryCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.setRequiredParams("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            PARAM_TIME,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            PARAM_CATEGORY,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            PARAM_AMOUNT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            PARAM_INC + \" or \" + PARAM_EXP"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry \u003d new Entry();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.handleParams(packet);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_TIME:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LocalTime time \u003d ParamChecker.getInstance().checkAndReturnTime(paramType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setTime(time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_AMOUNT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            Double amount \u003d ParamChecker.getInstance().checkAndReturnDoubleSigned(paramType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setAmount(amount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_INC:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setEntryType(Constants.EntryType.INC);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_EXP:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setEntryType(Constants.EntryType.EXP);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_DESCRIPTION:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setDescription(packet.getParam(paramType));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_CATEGORY:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String category \u003d ParamChecker.getInstance().checkAndReturnCategory(paramType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setCategory(category);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String[] ignoreParams \u003d {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"/id\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (! Arrays.asList(ignoreParams).contains(paramType)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Gets the entry that is generated from the command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return Entry instance"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Entry getCurrEntry() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.entry;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 93
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/entrytracker/commands/EditEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_AMOUNT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_CATEGORY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DESCRIPTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_EXP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INDEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_TIME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Command class to edit an existing entry instance with specified parameter values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Entry to be edited must be referenced via the constructor argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class EditEntryCommand extends ParamHandler {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    Entry entry;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public EditEntryCommand(Entry entry) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.handleParams(packet);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case PARAM_TIME:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LocalTime time \u003d ParamChecker.getInstance().checkAndReturnTime(paramType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setTime(time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case PARAM_AMOUNT:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            Double amount \u003d ParamChecker.getInstance().checkAndReturnDoubleSigned(paramType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setAmount(amount);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case PARAM_INC:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setEntryType(Constants.EntryType.INC);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case PARAM_EXP:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setEntryType(Constants.EntryType.EXP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case PARAM_DESCRIPTION:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setDescription(packet.getParam(paramType));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case PARAM_CATEGORY:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String category \u003d ParamChecker.getInstance().checkAndReturnCategory(paramType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entry.setCategory(category);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String[] ignoreParams \u003d {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                PARAM_INDEX"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!Arrays.asList(ignoreParams).contains(paramType)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 78
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/entrytracker/commands/RetrieveEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.EntryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_AMOUNT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_CATEGORY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_EXP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INDEX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_TIME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Command class to reference an existing entry instance with specified parameter values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Ledger will then be referenced for the ItemList instance as currItem."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class RetrieveEntryCommand extends ParamHandler {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    EntryList entryList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public RetrieveEntryCommand(String... params) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.setRequiredParams("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            PARAM_INDEX"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handlePacket(CommandPacket packet, EntryList entryList)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throws InsufficientParamsException, ItemNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.entryList \u003d entryList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.handleParams(packet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throws ParseFailParamException, ItemNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_INDEX:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            int index \u003d ParamChecker.getInstance().checkAndReturnIndex(paramType, this.entryList.getItems());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.entryList.setIndexToModify(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String[] ignoreParams \u003d {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                PARAM_TIME,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                PARAM_CATEGORY,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                PARAM_AMOUNT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                PARAM_INC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                PARAM_EXP"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!Arrays.asList(ignoreParams).contains(paramType)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 66
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/goaltracker/GoalTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.goaltracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.Ledger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.LedgerList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.ManualTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.EntryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " * This is the class that will handle the setting of goals"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " * for expense and income for each and every individual months."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "public class GoalTracker {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static String[] cmdPacket;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static String[] editPacket;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static Goal goalToSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static int expenseGoal \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static int incomeGoal \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static String input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static boolean exitTracker \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static TotalGoalList totalGoalList \u003d new TotalGoalList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static Entry entryData;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static String entryCategory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static double totalExpenses \u003d 0.0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static double expenses \u003d 0.0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static double incomes \u003d 0.0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static double totalIncomes \u003d 0.0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static Month month;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static Month ledgerMonth;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static boolean isExist \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static boolean isEnd \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This main() function will handle the user input and based on the input will call out"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * to another method/function."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        exitTracker \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        while (!exitTracker) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, \"Welcome to Goals Tracker\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            displayCommandList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            cmdPacket \u003d InputParser.getInstance().parseGoalCommand(input.toLowerCase());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            editPacket \u003d InputParser.getInstance().parseEditCommand(input.toLowerCase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            switch (cmdPacket[0]) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            case \"expense\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                setExpenseGoal(cmdPacket);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            case \"income\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                setIncomeGoal(cmdPacket);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            case \"display\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                handleDisplayGoal();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                editGoal();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                exitTracker \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                System.out.println(\"Invalid Command\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                cmdPacket \u003d InputParser.getInstance().parseGoalCommand(input.toLowerCase());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void displayCommandList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        TablePrinter.setTitle(\"List of Commands\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        TablePrinter.addRow(\"No.;Command            ;Input Format                                                \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        TablePrinter.addRow(\"1.;Expense Goal;expense {amount} for {Month in number form (e.g 01 \u003d Jan)}\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        TablePrinter.addRow(\"2.;Income Goal;income {amount} for {Month in number form (e.g 01 \u003d Jan)}\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        TablePrinter.addRow(\"3.;Display Expense/Income goal for individual month;display expense/income for \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                + \"{Month in number form (e.g 01 \u003d Jan)}\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        TablePrinter.addRow(\"4.;Edit Expense/Income Goal;edit expense/income {amount} for \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                + \"{Month in number form (e.g 01 \u003d Jan)}\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        TablePrinter.addRow(\"5.;Exit Goals Tracker;{exit}\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will allow user to edit their respective goal"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * for respective months."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void editGoal() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            month \u003d Month.of(Integer.parseInt(editPacket[4]));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (editPacket[1].equals(\"expense\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                expenseGoal \u003d Integer.parseInt(editPacket[2]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                for (int i \u003d 0; i \u003c totalGoalList.getListSize(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        if (totalGoalList.getGoal().get(i).getExpenseMonth().equals(month)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            goalToSet \u003d new Goal(expenseGoal, \"Expense\", month);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            totalGoalList.getGoal().set(i, goalToSet);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"You have successfully\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                                    + \" edited your expense goal for \" + month);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } catch (NullPointerException e) { // This NullPointerException occurs when the first object in the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        continue;                      // arraylist is not expense so it will continue the for loop."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"You did not have \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        + \"any existing goal for \" + month);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                main();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            } else if (editPacket[1].equals(\"income\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                incomeGoal \u003d Integer.parseInt(editPacket[2]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                for (int i \u003d 0; i \u003c totalGoalList.getListSize(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        if (totalGoalList.getGoal().get(i).getIncomeMonth().equals(month)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            goalToSet \u003d new Goal(incomeGoal, \"Income\", month);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            totalGoalList.getGoal().set(i, goalToSet);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"You have successfully\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                                    + \" edited your income goal for \" + month);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            main();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"You did not have \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        + \"any existing goal for \" + month);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                main();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Please enter either expense \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \"or income\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            main();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static TotalGoalList getTotalGoalList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return totalGoalList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function is for save and load of the expense and income goals"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * for respective months."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * @param amount   the amount of income/expense goal"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * @param category Type of goal"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     * @param mon      month of goal"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static void setGoals(String amount, String category, String mon) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            month \u003d Month.valueOf(mon);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            expenseGoal \u003d Integer.parseInt(amount);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            goalToSet \u003d new Goal(expenseGoal, category, month);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            totalGoalList.addGoal(goalToSet);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Invalid input. Please enter \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \" a valid month\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will handle and parser the user command to differentiate whether"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * user want to display for expense for income."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static void handleDisplayGoal() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (cmdPacket[1].equals(\"expense\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                ledgerMonth \u003d null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                displayExpenseGoal();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            } else if (cmdPacket[1].equals(\"income\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                ledgerMonth \u003d null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                displayIncomeGoal();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Please enter either expense \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \"or income\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will handle the setting of expense goal"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * for the indicated months."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void setExpenseGoal(String[] userInput) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            isExist \u003d false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            month \u003d Month.of(Integer.parseInt(userInput[3]));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            expenseGoal \u003d Integer.parseInt(userInput[1]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            for (int i \u003d 0; i \u003c totalGoalList.getListSize(); i++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (totalGoalList.getGoal().get(i).getExpenseMonth().equals(month)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        isExist \u003d true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (isExist \u003d\u003d true) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"You have an existing \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        + \"expense goal for \" + month);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                goalToSet \u003d new Goal(expenseGoal, \"Expense\", month);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                totalGoalList.addGoal(goalToSet);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"You have set $\" + expenseGoal"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        + \" as your Expense Goals for \" + month);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (DateTimeException e) { // This exception occurs if they did not enter correct format for the month"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Invalid input. Please enter \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \" a valid month\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (NumberFormatException e) { // This exception occurs when there is invalid input"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Invalid input. Please enter \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \" a valid amount/date\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // This exception occurs when the userInput is missing params"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"You are missing params\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will handle the setting of income"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * goals for indicated month."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void setIncomeGoal(String[] userInput) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            isExist \u003d false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            month \u003d Month.of(Integer.parseInt(userInput[3]));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            incomeGoal \u003d Integer.parseInt(userInput[1]);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            for (int i \u003d 0; i \u003c totalGoalList.getListSize(); i++) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (totalGoalList.getGoal().get(i).getIncomeMonth().equals(month)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        isExist \u003d true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (isExist \u003d\u003d true) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"You have an existing \""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        + \"income goal for \" + month);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                goalToSet \u003d new Goal(incomeGoal, \"Income\", month);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                totalGoalList.addGoal(goalToSet);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"You have set $\" + incomeGoal"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        + \" as your Income Goals for \" + month);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (DateTimeException e) { // This exception occurs if they did not enter correct format for the month"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Invalid input. Please enter \""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \" a valid month\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (NumberFormatException e) { // This exception occurs when there is invalid input"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Invalid input. Please enter \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \" a valid amount/date\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // This exception occurs when the command is missing params"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"You are missing params\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will be called in EntryTracker class when there is a"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * new entry being stored into a ledger. The purpose is to parse the"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * entry to categories whether it is expense or income."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param entry entry that user enter into ledger"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @class EntryTracker is the class that handle ledger"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void targetGoalTracker(Entry entry) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        entryData \u003d entry;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        entryCategory \u003d entryData.getEntryType().toString();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        if (entryCategory.equals(\"Expense\")) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            handleExpenseGoal();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            handleIncomeGoal();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function is called when a ledger is being created"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * or opened by date."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * The purpose is to store the ledgerMonth which the entry is being added to"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param ledger ledger that is sent from manual tracker"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @class ManualTracker is the class that handle ledger"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void storeLedgerDate(Ledger ledger) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        ledgerMonth \u003d ledger.getDate().getMonth();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function allows user to display their expense goal."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * for indicated month"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void displayExpenseGoal() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        LedgerList ledgerList \u003d ManualTracker.getLedgerList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        totalExpenses \u003d 0;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        int ledgerSize \u003d ledgerList.getItemsSize();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        for (int i \u003d 0; i \u003c ledgerSize; i++) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            Ledger ledger \u003d (Ledger) ledgerList.getItemAtCurrIndex(i);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            month \u003d Month.of(Integer.parseInt(cmdPacket[3]));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (ledger.getDate().getMonth().equals(month)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                EntryList entryList \u003d ledger.entryList;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                int entrySize \u003d entryList.getItemsSize();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                for (int x \u003d 0; x \u003c entrySize; x++) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    Entry entry \u003d (Entry) entryList.getItemAtCurrIndex(x);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (entry.getEntryType().toString().equals(\"Expense\")) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        expenses \u003d entry.getAmount();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        totalExpenses +\u003d expenses;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        totalExpenses +\u003d totalExpenses;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        printExpenseGoal();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will handle the expense goal by"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * summing up the total expense being made by the"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * user based on the indicated month. Lastly printing"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * the expense goal status."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void handleExpenseGoal() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        LedgerList ledgerList \u003d ManualTracker.getLedgerList();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        totalExpenses \u003d 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        int ledgerSize \u003d ledgerList.getItemsSize();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        for (int i \u003d 0; i \u003c ledgerSize; i++) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            Ledger ledger \u003d (Ledger) ledgerList.getItemAtCurrIndex(i);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (ledger.getDate().getMonth().equals(ledgerMonth)) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                EntryList entryList \u003d ledger.entryList; // Get all the entry from the respective month ledger"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                int entrySize \u003d entryList.getItemsSize();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                for (int x \u003d 0; x \u003c entrySize; x++) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    Entry entry \u003d (Entry) entryList.getItemAtCurrIndex(x);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (entry.getEntryType().toString().equals(\"Expense\")) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        expenses \u003d entry.getAmount();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        totalExpenses +\u003d expenses;  // For each expenses entry we sum up the total"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        totalExpenses +\u003d totalExpenses;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        printExpenseGoal(); // call print method to display the goal status for the month"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will print the expense goal status for the"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * indicated month."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void printExpenseGoal() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            for (int i \u003d 0; i \u003c totalGoalList.getListSize(); i++) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (ledgerMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        month \u003d Month.of(Integer.parseInt(cmdPacket[3]));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        if (totalGoalList.getGoal().get(i).getExpenseMonth().equals(month)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            expenseGoal \u003d totalGoalList.getGoal().get(i).getExpenseGoal();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            expenseGoal \u003d 0;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else if (ledgerMonth !\u003d null) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        if (totalGoalList.getGoal().get(i).getExpenseMonth().equals(ledgerMonth)) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            expenseGoal \u003d totalGoalList.getGoal().get(i).getExpenseGoal();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            expenseGoal \u003d 0;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (expenseGoal \u003d\u003d 0) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"You did not set a expense \""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        + \"goal for \" + month);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            double goalDifference \u003d expenseGoal - totalExpenses;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (ledgerMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                if (goalDifference \u003c 0) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"This is your current \""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"expense goal status for \" + month + \". You have spent $\" + totalExpenses + \" / $\""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + expenseGoal + \". You have exceeded your \" + \"expense budget.\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, \"Do you want to exit \""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"DisplayGoal? y/n\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (input.equals(\"y\")) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        main();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else if (input.equals(\"n\")) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Please enter y/n\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"This is your current \""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"expense goal status for \" + month + \". You have spent $\" + totalExpenses + \" / $\""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + expenseGoal + \". You still have $\" + goalDifference + \" to spend\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, \"Do you want to exit \""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"DisplayGoal? y/n\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (input.equals(\"y\")) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        main();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else if (input.equals(\"n\")) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Please enter y/n\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                if (goalDifference \u003c 0) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"Expense Budget Updated, \""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \" You have spent $\" + totalExpenses + \" / $\" + expenseGoal + \" for \" + ledgerMonth"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \". You have exceeded your expense budget\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"Expense Budget Updated, \""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"You have spent $\" + totalExpenses + \" / $\" + expenseGoal + \" You have not reached your \""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"expense budget for \" + ledgerMonth + \" You still have $\" + goalDifference"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \" to spend.\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"You did not set \""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \"a goal for expense.\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function allows user to display their income goal."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * for indicated month"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void displayIncomeGoal() {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        LedgerList ledgerList \u003d ManualTracker.getLedgerList();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        totalIncomes \u003d 0;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        int ledgerSize \u003d ledgerList.getItemsSize();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        for (int i \u003d 0; i \u003c ledgerSize; i++) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            Ledger ledger \u003d (Ledger) ledgerList.getItemAtCurrIndex(i);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            month \u003d Month.of(Integer.parseInt(cmdPacket[3]));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (ledger.getDate().getMonth().equals(month)) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                EntryList entryList \u003d ledger.entryList;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                int entrySize \u003d entryList.getItemsSize();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                for (int x \u003d 0; x \u003c entrySize; x++) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    Entry entry \u003d (Entry) entryList.getItemAtCurrIndex(x);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (entry.getEntryType().toString().equals(\"Income\")) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        incomes \u003d entry.getAmount();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        totalIncomes +\u003d incomes;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        totalIncomes +\u003d totalIncomes;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        printIncomeGoal();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will handle the income goal by"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * summing up the total income being saved by the"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * user based on the indicated month. Lastly printing"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * the income goal status"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void handleIncomeGoal() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        LedgerList ledgerList \u003d ManualTracker.getLedgerList();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        totalIncomes \u003d 0;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        int ledgerSize \u003d ledgerList.getItemsSize();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        for (int i \u003d 0; i \u003c ledgerSize; i++) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            Ledger ledger \u003d (Ledger) ledgerList.getItemAtCurrIndex(i);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (ledger.getDate().getMonth().equals(ledgerMonth)) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                EntryList entryList \u003d ledger.entryList; // Get all entry for the respective month ledger"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                int entrySize \u003d entryList.getItemsSize();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                for (int x \u003d 0; x \u003c entrySize; x++) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    Entry entry \u003d (Entry) entryList.getItemAtCurrIndex(x);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (entry.getEntryType().toString().equals(\"Income\")) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        incomes \u003d entry.getAmount();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        totalIncomes +\u003d incomes;    // For each income entry we sum up the total"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        totalIncomes +\u003d totalIncomes;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        printIncomeGoal(); // call print method to display the goal status for the month"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This function will print the income goal status for the."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * indicated month"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static void printIncomeGoal() {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            for (int i \u003d 0; i \u003c totalGoalList.getListSize(); i++) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (ledgerMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        month \u003d Month.of(Integer.parseInt(cmdPacket[3]));"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        if (totalGoalList.getGoal().get(i).getIncomeMonth().equals(month)) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            incomeGoal \u003d totalGoalList.getGoal().get(i).getIncomeGoal();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            incomeGoal \u003d 0;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        if (totalGoalList.getGoal().get(i).getIncomeMonth().equals(ledgerMonth)) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            incomeGoal \u003d totalGoalList.getGoal().get(i).getIncomeGoal();"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            incomeGoal \u003d 0;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (incomeGoal \u003d\u003d 0) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"You did not set a income \""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        + \"goal for \" + month);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            double goalDifference \u003d incomeGoal - totalIncomes;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            if (ledgerMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                if (goalDifference \u003c 0) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"This is your current, \""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"income goal status for \" + month + \". You have saved $\" + totalIncomes + \" / $\""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + incomeGoal + \". You have met your \" + \"revenue goal.\");"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, \"Do you want to exit \""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"DisplayGoal? y/n\");"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (input.equals(\"y\")) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        main();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else if (input.equals(\"n\")) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Please enter y/n\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"This is your current, \""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"income goal status for \" + month + \". You have saved $\" + totalIncomes + \" / $\""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + incomeGoal + \". You have not met your \" + \"revenue goal. You are $\" + goalDifference"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \" away from your goal.\");"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, \"Do you want to exit \""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"DisplayGoal? y/n\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    if (input.equals(\"y\")) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        main();"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else if (input.equals(\"n\")) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                        UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Please enter y/n\");"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                if (goalDifference \u003c 0) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"Revenue Goal Updated, \""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \" You have saved $\" + totalIncomes + \" / $\" + incomeGoal + \" for \" + ledgerMonth"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \". You have met your revenue goal.\");"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"Revenue Goal Updated, \""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"You have saved $\" + totalIncomes + \" / $\" + incomeGoal + \" You have not met your \""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \"revenue goal. for \" + ledgerMonth + \" You are $\" + goalDifference"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                            + \" away from your goal.\");"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.GOAL_STATUS, \"You did not set \""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "                    + \"a goal for income.\");"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dixoncwc": 537,
      "Feudalord": 17,
      "kaiwen98": 22
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/goaltracker/TotalGoalList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.goaltracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " * This class is the arraylist of the class Goal."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " * @class Goal"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "public class TotalGoalList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private ArrayList\u003cGoal\u003e goals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This will add new goal to the arraylist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @param newGoal new Goal contains (amt,cat,month)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public void addGoal(Goal newGoal) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        this.goals.add(newGoal);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This will return the whole arraylist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public ArrayList\u003cGoal\u003e getGoal() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        return this.goals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * This is to get the total size of the arraylist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        return this.goals.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dixoncwc": 35,
      "kaiwen98": 2
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/manualtracker/Ledger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.manualtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.DateTimeItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.EntryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Ledger extends DateTimeItem {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected LocalDate date \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public EntryList entryList \u003d new EntryList(this);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Ledger() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super.setDefaultDateTimeFormat(\"date\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"Ledger %d : [ %s ]\", this.index + 1,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.dateTimeOutputManager.getSingleDateFormatted(\"date\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Ledger entry \u003d (Ledger) object;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return (this.getDate().equals(entry.getDate()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"%s\", this.getDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 33
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/manualtracker/LedgerList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.manualtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.ItemList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class LedgerList extends ItemList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public LedgerList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Given a date, returns the zero-based index of the ledger for that date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param date Date of ledger"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @return Zero-based index of ledger"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @throws ItemNotFoundException When there is no ledger for that date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public int getIndexFromDate(LocalDate date) throws ItemNotFoundException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        for (int i \u003d 0; i \u003c super.getItemsSize(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            Ledger ledger \u003d (Ledger) super.items.get(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (ledger.getDate().equals(date)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.setTitle(\"List of Ledgers\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"Ledger Number;Ledger Date\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (super.getItemsSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            TablePrinter.addRow(\"No ledgers created;               \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            for (int i \u003d 0; i \u003c super.getItemsSize(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                TablePrinter.addRow(String.format(\"%s;%s\", i + 1, this.items.get(i)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 12,
      "kaiwen98": 32
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/manualtracker/ManualTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.manualtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.DuplicateInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.goaltracker.GoalTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.commands.CreateLedgerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.commands.RetrieveLedgerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.EntryTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.FiniteStateMachine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class to handle routine for manual ledger management."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class ManualTracker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static LedgerList ledgerList \u003d new LedgerList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    private static GoalTracker goalTrack \u003d new GoalTracker();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static CommandPacket packet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static boolean isUnderTest \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void setTestPacket(CommandPacket inputPacket) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        packet \u003d inputPacket;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        isUnderTest \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean endTracker \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FiniteStateMachine fsm \u003d new FiniteStateMachine(FiniteStateMachine.State.MAIN_MENU);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, \"Welcome to Manual Tracker!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        while (!endTracker) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            switch (fsm.getCurrState()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case MAIN_MENU:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleMainMenu());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case CREATE_LEDGER:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleCreateLedger());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case OPEN_LEDGER:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleOpenLedger());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case DELETE_LEDGER:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleDeleteLedger());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case SHOW_LEDGER:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleShowLedger());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case INVALID_STATE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fsm.setNextState(handleInvalidState());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, \"Exiting from ManualTracker\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                endTracker \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case END_TRACKER:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                endTracker \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            fsm.transitionState();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static LedgerList getLedgerList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return ledgerList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static void setCommandPacket(CommandPacket p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        packet \u003d p;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void createLedger() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        handleCreateLedger();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static FiniteStateMachine.State handleMainMenu() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        UiManager.printWithStatusIcon(Constants.PrintType.DIRECTORY, \"[ MAIN_MENU -\u003e MANUAL_TRACKER_MENU ]\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        UiManager.printInputPromptMessage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!isUnderTest) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            packet \u003d InputParser.getInstance().parseInput(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        UiManager.refreshPage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (packet.getCommandString()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"ledger open\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"open\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.OPEN_LEDGER;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"ledger new\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"new\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.CREATE_LEDGER;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"ledger list\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.SHOW_LEDGER;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"ledger delete\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.DELETE_LEDGER;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.EXIT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"commands\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printCommandList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Command failed. Try again.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static FiniteStateMachine.State handleCreateLedger() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FiniteStateMachine.State state \u003d FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CreateLedgerCommand command \u003d new CreateLedgerCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Ledger ledger;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // CreateLedgerCommand instance generates a new Ledger instance"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // from the params specified in the command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(packet);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ledger \u003d command.getCurrLedger();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Checking of duplicates"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (ledgerList.isItemDuplicate(ledger)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new DuplicateInputException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Append ledger to list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ledgerList.addItem(ledger);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            GoalTracker.storeLedgerDate(ledger);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"%s created!\", ledger.getName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                exception.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (DuplicateInputException exception) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Duplicate item already exists in the list; not added!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!command.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static FiniteStateMachine.State handleDeleteLedger() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FiniteStateMachine.State state \u003d FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Ledger deletedLedger;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        RetrieveLedgerCommand command \u003d new RetrieveLedgerCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // RetrieveLedgerCommand instance retrieves the corresponding ledger instance"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // from the ledgerList instance."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(packet, ledgerList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            deletedLedger \u003d (Ledger) ledgerList.getItemAtCurrIndex();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Deletion of ledger."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ledgerList.removeItemAtCurrIndex();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"%s deleted!\", deletedLedger.getName()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException | ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                exception.getMessage());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!command.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static FiniteStateMachine.State handleShowLedger() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ledgerList.printList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static FiniteStateMachine.State handleInvalidState() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(\"You dun goof bro uwu\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static FiniteStateMachine.State handleOpenLedger() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FiniteStateMachine.State state \u003d FiniteStateMachine.State.MAIN_MENU;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Ledger ledger;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        RetrieveLedgerCommand command \u003d new RetrieveLedgerCommand();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // RetrieveLedgerCommand instance retrieves the corresponding ledger instance"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // from the ledgerList instance."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(packet, ledgerList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ledger \u003d (Ledger) ledgerList.getItemAtCurrIndex();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Set EntryTracker to access entries stored under this particular ledger instance."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.setCurrLedger(ledger);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            GoalTracker.storeLedgerDate(ledger);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"%s opened!\", ledger.getName()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                exception.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return state;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                exception.getMessage());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // If the ledger specified does not exist, a new ledger instance with the corresponding"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // date will be generated and \"opened\"."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Generating new ledger...\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            handleCreateLedger();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return handleOpenLedger();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!command.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return EntryTracker.main();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static void printCommandList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.setTitle(\"List of Commands\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"No.;Command            ;Input Format                  \");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"1.;Open ledger;ledger open /date {YYMMDD}\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"2.;New ledger;ledger new /date {YYMMDD}\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"3.;list ledgers;ledger list\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"4.;delete ledgers;ledger delete /date {YYMMDD}\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"5.;exit to main menu;exit\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dixoncwc": 1,
      "Feudalord": 11,
      "Artemis-Hunt": 1,
      "kaiwen98": 232
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/manualtracker/commands/CreateLedgerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.manualtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.Ledger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Command class to create a ledger instance, and populates it with parameter values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * The populated ledger will be stored within the class, and can be retrieved by calling a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * corresponding getter method."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class CreateLedgerCommand extends ParamHandler {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    Ledger ledger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public CreateLedgerCommand(String... paramTypes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.setRequiredParams("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            PARAM_DATE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.ledger \u003d new Ledger();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.handleParams(packet);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case PARAM_DATE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LocalDate date \u003d ParamChecker.getInstance().checkAndReturnDate(paramType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ledger.setDate(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Ledger getCurrLedger() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.ledger;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 57
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/manualtracker/commands/RetrieveLedgerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.manualtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.LedgerList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Command class to create an entry instance, and populates it with parameter values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * The populated entry will be stored within the class, and can be retrieved by calling a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * corresponding getter method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class RetrieveLedgerCommand extends ParamHandler {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    LedgerList ledgerList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public RetrieveLedgerCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.setRequiredParams("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            PARAM_DATE + \" or \" + PARAM_INDEX"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handlePacket(CommandPacket packet, LedgerList ledgerList)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throws InsufficientParamsException, ItemNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.ledgerList \u003d ledgerList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.handleParams(packet);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throws ParseFailParamException, ItemNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_DATE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LocalDate date \u003d ParamChecker.getInstance().checkAndReturnDate(paramType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            index \u003d this.ledgerList.getIndexFromDate(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.ledgerList.setIndexToModify(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ParamChecker.PARAM_INDEX:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            index \u003d ParamChecker.getInstance().checkAndReturnIndex(paramType, this.ledgerList.getItems());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.ledgerList.setIndexToModify(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 58
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/recurringtracker/RecurringEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.recurringtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "//@@author Artemis-Hunt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class RecurringEntry extends Item {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    int day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    String description \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    Constants.EntryType entryType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    double amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    Month start \u003d Month.of(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    Month end  \u003d Month.of(12);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    boolean isAuto \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    String notes \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public RecurringEntry() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void setDay(int day) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void setAmount(double amount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void setEntryType(Constants.EntryType entryType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.entryType \u003d entryType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void setAuto(boolean isAuto) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.isAuto \u003d isAuto;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void setNotes(String notes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return String.format(\"Entry: [ %s ] on day [ %s ] \","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                description, day);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public boolean equals(RecurringEntry entry) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        if (entry \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return (this.day \u003d\u003d entry.day)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                \u0026\u0026 (this.description.equals(entry.description))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                \u0026\u0026 (this.entryType.equals(entry.entryType))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                \u0026\u0026 (this.amount \u003d\u003d entry.amount)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                \u0026\u0026 (this.isAuto \u003d\u003d entry.isAuto)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                \u0026\u0026 (this.notes.equals(entry.notes));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        //One string is filled and the other is left blank, based on whether the entry is income or expenditure"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String expenditureAmount \u003d this.entryType \u003d\u003d Constants.EntryType.EXP ? \"-$\" + this.amount : \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String incomeAmount \u003d this.entryType \u003d\u003d Constants.EntryType.INC ? \"+$\" + this.amount : \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String duration;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        if (this.start.getValue() \u003d\u003d 1 \u0026\u0026 this.end.getValue() \u003d\u003d 12) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            duration \u003d \"Every month\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            duration \u003d start + \" to \" + end;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String payment \u003d this.isAuto ? \"Auto deduction\" : \"Manual payment\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return String.format(\"%s;%s;%s;%s;%s;%s;%s\", this.day, this.description, expenditureAmount, incomeAmount,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                duration, payment, this.notes);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 82,
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/recurringtracker/RecurringEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.recurringtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.ItemList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.comparators.SortByDay;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "//@@author Artemis-Hunt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class RecurringEntryList extends ItemList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        super.addItemAndSort(item, new SortByDay());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.setTitle(String.format(\"List of Recurring entries\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.addRow(\"No.;Day;Description;Expenditure amount;Income amount;\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                + \"Duration;Payment type;Notes                    \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        if (super.items.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            TablePrinter.addRow(\"No entries created\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            for (int i \u003d 0; i \u003c super.items.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                RecurringEntry entry \u003d (RecurringEntry) super.items.get(i);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                TablePrinter.addRow(String.format(\"%s;%s\", i + 1, entry));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 26,
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/recurringtracker/RecurringTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.recurringtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "//@@author Artemis-Hunt"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.commands.CreateEntryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.commands.EditEntryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.commands.RetrieveEntryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class RecurringTracker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    static String WelcomeMessage \u003d \"Welcome to Recurring Tracker!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    static String DirectoryMainMenu \u003d \"[ MAIN_MENU -\u003e RECURRING_TRACKER ]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    static RecurringEntryList entries \u003d new RecurringEntryList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        boolean endTracker \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, WelcomeMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.DIRECTORY, DirectoryMainMenu);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printInputPromptMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            String input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            CommandPacket packet \u003d InputParser.getInstance().parseInput(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.refreshPage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            switch (packet.getCommandString()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                handleNewEntry(packet);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                showEntries();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                handleEditEntry(packet);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                handleDeleteEntry(packet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            case \"commands\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                showHelp();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                endTracker \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                handleInvalidCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } while (!endTracker);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static RecurringEntryList getEntries() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static void loadEntry(CommandPacket packet) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        handleNewEntry(packet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static RecurringEntry handleNewEntry(CommandPacket packet) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        RecurringEntry entry \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        CreateEntryCommand command \u003d new CreateEntryCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            command.handlePacket(packet);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            entry \u003d command.getCurrEntry();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            entries.addItem(entry);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            String entryName \u003d entry.getName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    String.format(\"%s created!\", entryName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (!command.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return entry;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    static RecurringEntry handleDeleteEntry(CommandPacket packet) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        RecurringEntry entry \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        RetrieveEntryCommand command \u003d new RetrieveEntryCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            command.handlePacket(packet, entries);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            entry \u003d (RecurringEntry) entries.getItemAtCurrIndex();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            String entryName \u003d entry.getName();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            entries.removeItemAtCurrIndex();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    String.format(\"%s deleted!\", entryName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } catch (InsufficientParamsException | ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (!command.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return entry;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    static RecurringEntry handleEditEntry(CommandPacket packet) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        RecurringEntry entry \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        RetrieveEntryCommand retrieveEntryCommand \u003d new RetrieveEntryCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        EditEntryCommand editEntryCommand;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            retrieveEntryCommand.handlePacket(packet, entries);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            entry \u003d (RecurringEntry) entries.getItemAtCurrIndex();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            //Remove \"/id\" so it doesn\u0027t get parsed by entry and lead to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            //printing of UnrecognizedParamMessage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            editEntryCommand \u003d new EditEntryCommand(entry);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            editEntryCommand.handlePacket(packet);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    String.format(\"%s edited!\", entry.getName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } catch (InsufficientParamsException | ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (!retrieveEntryCommand.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                        \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return entry;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    static void showEntries() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        entries.printList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    static void showHelp() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.setTitle(\"List of Commands\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.addRow(\"No.;Command                 ;Input Format                ;\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                            + \"Notes                           \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.addRow(\"1.;New expenditure (-e) or income (-i).;add -[e/i] [-auto] \u003e/desc {DESCRIPTION} \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                            + \"\u003e/amt {AMOUNT} \u003e/day {DAY_OF_MONTH} \u003e[/notes {NOTES}];Use -auto for \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                            + \"income/expenses that are auto-credited into/auto-deducted from bank \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                            + \"account/credit card\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.addRow(\"2.;Edit entry;edit {parameter to edit};\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.addRow(\"3.;List entries;list;\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.addRow(\"4.;Delete entry;delete /id {INDEX};\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.addRow(\"5.;Exit to main menu;exit;\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    static void handleInvalidCommand() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE, \"Invalid command. Try again.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 155,
      "kaiwen98": 1
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/recurringtracker/commands/CreateEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.recurringtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.RecurringEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_AMOUNT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DAY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DESCRIPTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_EXP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "//@@author Artemis-Hunt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " * Command class to create an entry instance, and populates it with parameter values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " * The populated entry will be stored within the class, and can be retrieved by calling a"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " * corresponding getter method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class CreateEntryCommand extends ParamHandler {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    RecurringEntry recurringEntry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public CreateEntryCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.setRequiredParams("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            PARAM_DAY,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            PARAM_AMOUNT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            PARAM_INC + \" or \" + PARAM_EXP"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry \u003d new RecurringEntry();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.handleParams(packet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_DAY:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setDay(ParamChecker.getInstance().checkAndReturnInt(paramType));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_AMOUNT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setAmount(ParamChecker.getInstance().checkAndReturnDouble(paramType));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_INC:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setEntryType(Constants.EntryType.INC);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_EXP:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setEntryType(Constants.EntryType.EXP);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_DESCRIPTION:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setDescription(packet.getParam(paramType));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_AUTO:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setAuto(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_NOTES:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setNotes(packet.getParam(paramType));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public RecurringEntry getCurrEntry() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return this.recurringEntry;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 61,
      "kaiwen98": 18
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/recurringtracker/commands/EditEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.recurringtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.RecurringEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "//@@author Artemis-Hunt"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " * Command class to edit an existing entry instance with specified parameter values."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " * Entry to be edited must be referenced via the constructor argument."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INDEX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class EditEntryCommand extends ParamHandler {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    RecurringEntry recurringEntry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public EditEntryCommand(RecurringEntry recurringEntry) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.recurringEntry \u003d recurringEntry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.handleParams(packet);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_DAY:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setDay(ParamChecker.getInstance().checkAndReturnInt(paramType));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_AMOUNT:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setAmount(ParamChecker.getInstance().checkAndReturnDouble(paramType));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_INC:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setEntryType(Constants.EntryType.INC);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_EXP:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setEntryType(Constants.EntryType.EXP);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_DESCRIPTION:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setDescription(packet.getParam(paramType));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_AUTO:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setAuto(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_NOTES:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.recurringEntry.setNotes(packet.getParam(paramType));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            String[] ignoreParams \u003d {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                PARAM_INDEX"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (!Arrays.asList(ignoreParams).contains(paramType)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 57,
      "kaiwen98": 14
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/recurringtracker/commands/RetrieveEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.recurringtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.RecurringEntryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_AMOUNT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_AUTO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DAY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DESCRIPTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_EXP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INDEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "//@@author Artemis-Hunt"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " * Command class to reference an existing entry instance with specified parameter values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " * Entry will then be referenced for the ItemList instance as currItem."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class RetrieveEntryCommand extends ParamHandler {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    RecurringEntryList entryList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public RetrieveEntryCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.setRequiredParams("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            PARAM_INDEX"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void handlePacket(CommandPacket packet, RecurringEntryList entryList)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        throws InsufficientParamsException, ItemNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.entryList \u003d entryList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.handleParams(packet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        throws ParseFailParamException, ItemNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        case ParamChecker.PARAM_INDEX:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            int index \u003d ParamChecker.getInstance().checkAndReturnIndex(paramType, this.entryList.getItems());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            this.entryList.setIndexToModify(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            String[] ignoreParams \u003d {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                PARAM_DAY,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                PARAM_AUTO,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                PARAM_AMOUNT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                PARAM_EXP,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                PARAM_INC"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (!Arrays.asList(ignoreParams).contains(paramType)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                    ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 45,
      "kaiwen98": 22
    }
  },
  {
    "path": "src/main/java/seedu/financeit/datatrackers/recurringtracker/comparators/SortByDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.recurringtracker.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.RecurringEntry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class SortByDay implements Comparator\u003cRecurringEntry\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public int compare(RecurringEntry a, RecurringEntry b) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return a.getDay() - b.getDay();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 10,
      "kaiwen98": 2
    }
  },
  {
    "path": "src/main/java/seedu/financeit/financetools/AccountStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InfoTextIndexOutOfRangeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.utils.storage.AccountSaver;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class AccountStorage extends ParamHandler {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    String nameLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    String otherLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    double interestRate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    double cashbackRate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    double monthlyCap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    int deleteIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    boolean activateDelete \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public AccountStorage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            this.handleParams(packet);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public String formatText(String nameLabel, double interestRate, double cashbackRate, double monthlyCap,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                             String otherLabel) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String nameInfo \u003d \"Name: \" + nameLabel + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String interestRateInfo \u003d \"Interest: \" + interestRate + \"%\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String cashbackRateInfo \u003d \"Cashback: \" + cashbackRate + \"%\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String monthlyCapInfo \u003d \"Cashback Cap: $\" + monthlyCap + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String otherInfo \u003d \"Notes: \" + otherLabel + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String textToAdd \u003d nameInfo + interestRateInfo + cashbackRateInfo + monthlyCapInfo + otherInfo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void handleInfoStorage(String filePath, ArrayList\u003cString\u003e infoText) throws InfoTextIndexOutOfRangeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.interestRate \u003e\u003d 0 : \"Interest rate should not be a negative number\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.cashbackRate \u003e\u003d 0 : \"Cashback rate should not be a negative number\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.monthlyCap \u003e\u003d 0 : \"Monthly cap for cashback should not be a negative number\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (activateDelete \u003d\u003d true) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (this.deleteIndex \u003e 0 \u0026\u0026 this.deleteIndex \u003c\u003d infoText.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                infoText.remove(this.deleteIndex - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                throw new InfoTextIndexOutOfRangeException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                AccountSaver.updateFile(infoText, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String textToAdd \u003d formatText(this.nameLabel, this.interestRate, this.cashbackRate, this.monthlyCap,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                this.otherLabel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        infoText.add(textToAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            AccountSaver.updateFile(infoText, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            ItemNotFoundException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/n\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            this.nameLabel \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/ir\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.interestRate \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/r\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.cashbackRate \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/c\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.monthlyCap \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/rm\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.deleteIndex \u003d ParamChecker.getInstance().checkAndReturnInt(paramType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            this.activateDelete \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/o\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            this.otherLabel \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 105,
      "kaiwen98": 5
    }
  },
  {
    "path": "src/main/java/seedu/financeit/financetools/Cashback.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class Cashback extends ParamHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double amount \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double cashbackRate \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double monthlyCap \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public Cashback() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.handleParams(packet);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setAmount(Double amount) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setCashbackRate(Double cashbackRate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.cashbackRate \u003d cashbackRate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public double calculateCashback() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.amount \u003e\u003d 0 : \"Amount should not be a negative number\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.cashbackRate \u003e\u003d 0 : \"Cashback rate should not be a negative number\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.monthlyCap \u003e\u003d 0 : \"Monthly cap should not be a negative number\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double cashbackEarned \u003d Math.round((this.amount * (this.cashbackRate / 100)) * 100.00) / 100.00;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (cashbackEarned \u003e this.monthlyCap) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            cashbackEarned \u003d this.monthlyCap;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return cashbackEarned;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/a\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.amount \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/r\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.cashbackRate \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/c\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.monthlyCap \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 55,
      "kaiwen98": 13
    }
  },
  {
    "path": "src/main/java/seedu/financeit/financetools/FinanceTools.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.FolderNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.utils.storage.AccountSaver;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public abstract class FinanceTools {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        ArrayList\u003cString\u003e infoText \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String filePath \u003d \"./data/info.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        // Retrieve account data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            AccountSaver.readFileContents(filePath, infoText);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (FolderNotFoundException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        boolean continueProgram \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        String outputAmount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, \"Welcome to Finance Tools!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        while (continueProgram) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.DIRECTORY, \"[ MAIN_MENU -\u003e FINANCE_TOOLS_MENU ]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printInputPromptMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String input \u003d UiManager.handleInput();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            CommandPacket packet \u003d InputParser.getInstance().parseInput(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            commands.add(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            switch (packet.getCommandString()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"simple\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                outputAmount \u003d Double.toString(Math.round(Handler.handleSimpleInterest(packet) * 100.00) / 100.00);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Total Interest Earned: $\" + outputAmount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                commands.add(\"Total Interest Earned: $\" + outputAmount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"cashb\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                outputAmount \u003d Double.toString(Math.round(Handler.handleCashback(packet) * 100.00) / 100.00);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Total Cashback Earned: $\" + outputAmount);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                commands.add(\"Total Cashback Earned: $\" + outputAmount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"miles\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                outputAmount \u003d Double.toString(Math.round(Handler.handleMilesCredit(packet) * 100.00) / 100.00);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Total Miles Earned: \" + outputAmount);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                commands.add(\"Total Miles Earned: \" + outputAmount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"cyearly\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                outputAmount \u003d Double.toString(Math.round(Handler.handleYearlyCompoundInterest(packet)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        * 100.00) / 100.00);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Total Interest Earned: $\" + outputAmount);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                commands.add(\"Total Interest Earned: $\" + outputAmount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"cmonthly\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                outputAmount \u003d Double.toString(Math.round(Handler.handleMonthlyCompoundInterest(packet)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                        * 100.00) / 100.00);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Total Interest Earned: $\" + outputAmount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                commands.add(\"Total Interest Earned: $\" + outputAmount);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"store\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                Handler.handleAccountStorage(packet, filePath, infoText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Information Updated\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"commands\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                Handler.printCommandList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"history\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                for (int i \u003d 0; i \u003c commands.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    System.out.printf(\"%d) \", i + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    System.out.println(commands.get(i));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"info\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                if (infoText.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    System.out.println(\"There is no account in the list\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                for (int i \u003d 0; i \u003c infoText.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    System.out.printf(\"\u003d\u003d\u003d\u003dAccount No.\" + \"%d\" + \"\u003d\u003d\u003d\u003d\\n\", i + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    System.out.println(infoText.get(i));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"clearinfo\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                infoText.removeAll(infoText);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    AccountSaver.updateFile(infoText, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"All account(s) cleared in list\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Exiting Finance Tools ...\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                continueProgram \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"Invalid Command\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 106,
      "kaiwen98": 3
    }
  },
  {
    "path": "src/main/java/seedu/financeit/financetools/Handler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InfoTextIndexOutOfRangeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class Handler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static double handleSimpleInterest(CommandPacket packet) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        SimpleInterest tool \u003d new SimpleInterest();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        tool.setRequiredParams("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            \"/a\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            \"/r\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tool.handlePacket(packet);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return (tool.calculateSimpleInterest());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }  finally {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (!tool.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static double handleCashback(CommandPacket packet) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Cashback tool \u003d new Cashback();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        tool.setRequiredParams("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            \"/a\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            \"/r\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            \"/c\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tool.handlePacket(packet);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return (tool.calculateCashback());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (!tool.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static double handleMilesCredit(CommandPacket packet) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        MilesCredit tool \u003d new MilesCredit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        tool.setRequiredParams("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            \"/a\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            \"/r\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tool.handlePacket(packet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return (tool.calculateMiles());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            if (!tool.getHasParsedAllRequiredParams()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static void handleAccountStorage(CommandPacket packet, String filePath, ArrayList\u003cString\u003e infoText) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        AccountStorage tool \u003d new AccountStorage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        tool.setRequiredParams();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tool.handlePacket(packet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tool.handleInfoStorage(filePath, infoText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (AssertionError error) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (InfoTextIndexOutOfRangeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static double handleMonthlyCompoundInterest(CommandPacket packet) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        MonthlyCompoundInterest tool \u003d new MonthlyCompoundInterest();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        tool.setRequiredParams("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                \"/a\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                \"/r\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                \"/p\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tool.handlePacket(packet);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return (tool.calculateCompoundInterest());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (AssertionError error) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static double handleYearlyCompoundInterest(CommandPacket packet) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        YearlyCompoundInterest tool \u003d new YearlyCompoundInterest();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        tool.setRequiredParams("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                \"/a\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                \"/r\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                \"/p\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            tool.handlePacket(packet);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return (tool.calculateCompoundInterest());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (AssertionError error) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    \"Input failed due to param error.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static void printCommandList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.setTitle(\"List of Commands\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"No;Finance Tool             ;Input Format                                         \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"1;Simple Interest Calculator;simple /a {AMOUNT} /r {INTEREST_RATE}\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"2;Yearly Compound Interest Calculator;cyearly /a {AMOUNT} /r {INTEREST_RATE}\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                + \" /p {YEARS} /d {YEARLY_DEPOSIT}\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"3;Monthly Compound Interest Calculator;cmonthly /a {AMOUNT} /r {INTEREST_RATE}\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                + \" /p {MONTHS} /d {MONTHLY_DEPOSIT}\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"4;Cashback Calculator;cashb /a {AMOUNT} /r {CASHBACK_RATE} /c {CASHBACK_CAP}\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"5;Miles Credit Calculator;miles /a {AMOUNT} /r {MILES_RATE}\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"6;Account Storage;store /n {ACCOUNT_NAME} /ir {INTEREST_RATE} /r {CASHBACK_RATE}\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                + \" /c {CASHBACK_CAP} /o {OTHER_NOTES}\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"7;Delete Account;store /rm {ACCOUNT_NO}\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"8;Delete All Account Information;clearinfo\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"9;Show Account Information;info\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"10;Show Command and Calculation History;history\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.addRow(\"11;Exit FinanceTools;exit\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 155
    }
  },
  {
    "path": "src/main/java/seedu/financeit/financetools/MilesCredit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class MilesCredit extends ParamHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double amount \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double milesRate \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public MilesCredit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            handleParams(packet);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setAmount(Double amount) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setMilesRate(Double milesRate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.milesRate \u003d milesRate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public double calculateMiles() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.amount \u003e\u003d 0 : \"Amount should not be a negative number\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.milesRate \u003e\u003d 0 : \"Miles rate should not be a negative number\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return Math.round((this.amount * this.milesRate) * 100.00) / 100.00;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            ItemNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/a\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.amount \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/r\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.milesRate \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 55,
      "kaiwen98": 5
    }
  },
  {
    "path": "src/main/java/seedu/financeit/financetools/MonthlyCompoundInterest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class MonthlyCompoundInterest extends ParamHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double amount \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double interestRate \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private int calculationPeriod \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double monthlyDeposit \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public MonthlyCompoundInterest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            handleParams(packet);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setAmount(Double amount) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public double calculateCompoundInterest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.amount \u003e\u003d 0 : \"Amount should not be a negative number\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.interestRate \u003e\u003d 0 : \"Interest rate should not be a negative number\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.calculationPeriod \u003e\u003d 0 : \"Calculation period (in years) should not be a negative number\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.monthlyDeposit \u003e\u003d 0 : \"Monthly deposit should not be a negative number\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        double interestRate \u003d (this.interestRate / 100) / 12;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        int period \u003d this.calculationPeriod;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        int compoundInterval \u003d this.calculationPeriod;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        double totalAmount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        double interestEarned;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        double totalInterestEarned \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(\"Compound Interval: Monthly\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (monthlyDeposit \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            totalAmount \u003d this.amount * Math.pow((1 + interestRate / compoundInterval), compoundInterval * period);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            totalInterestEarned \u003d totalAmount - this.amount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            for (int i \u003d 0; i \u003c calculationPeriod; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                this.amount +\u003d monthlyDeposit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                totalAmount \u003d this.amount * Math.pow((1 + interestRate / 1), 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                interestEarned \u003d totalAmount - this.amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.printf(\"Total Interest earned in Month \" + \"%d\", i + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.printf(\": $%.2f\\n\", interestEarned);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                totalInterestEarned +\u003d interestEarned;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                this.amount +\u003d interestEarned;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return Math.round(totalInterestEarned * 100.00) / 100.00;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            ItemNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/a\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.amount \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/r\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.interestRate \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/p\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.calculationPeriod \u003d ParamChecker.getInstance().checkAndReturnInt(paramType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/d\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.monthlyDeposit \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 83,
      "kaiwen98": 6
    }
  },
  {
    "path": "src/main/java/seedu/financeit/financetools/SimpleInterest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class SimpleInterest extends ParamHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double amount \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double interestRate \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public SimpleInterest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.handleParams(packet);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setAmount(Double amount) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setInterestRate(Double interestRate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.interestRate \u003d interestRate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public double calculateSimpleInterest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.amount \u003e\u003d 0 : \"Amount should not be a negative number\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.interestRate \u003e\u003d 0 : \"Interest rate should not be a negative number\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return Math.round((this.amount * (this.interestRate / 100)) * 100.00) / 100.00;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ItemNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/a\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.amount \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/r\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.interestRate \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 48,
      "kaiwen98": 12
    }
  },
  {
    "path": "src/main/java/seedu/financeit/financetools/YearlyCompoundInterest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.ParamHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class YearlyCompoundInterest extends ParamHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double amount \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double interestRate \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private int calculationPeriod \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private double yearlyDeposit \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public YearlyCompoundInterest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void handlePacket(CommandPacket packet) throws InsufficientParamsException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            handleParams(packet);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (ItemNotFoundException exception) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            // Fall-through"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void setAmount(Double amount) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public double calculateCompoundInterest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.amount \u003e\u003d 0 : \"Amount should not be a negative number\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.interestRate \u003e\u003d 0 : \"Interest rate should not be a negative number\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.calculationPeriod \u003e\u003d 0 : \"Calculation period (in years) should not be a negative number\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assert this.yearlyDeposit \u003e\u003d 0 : \"Yearly deposit should not be a negative number\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        double interestRate \u003d this.interestRate / 100;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        int period \u003d this.calculationPeriod;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        int compoundInterval \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        double totalAmount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        double interestEarned;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        double totalInterestEarned \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(\"Compound Interval: Yearly\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (yearlyDeposit \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            totalAmount \u003d this.amount * Math.pow((1 + interestRate / compoundInterval), compoundInterval * period);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            totalInterestEarned \u003d totalAmount - this.amount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            for (int i \u003d 0; i \u003c calculationPeriod; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                this.amount +\u003d yearlyDeposit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                totalAmount \u003d this.amount * Math.pow((1 + interestRate / compoundInterval), compoundInterval);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                interestEarned \u003d totalAmount - this.amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.printf(\"Total Interest earned in Year \" + \"%d\", i + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.printf(\": $%.2f\\n\", interestEarned);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                totalInterestEarned +\u003d interestEarned;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                this.amount +\u003d interestEarned;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        return Math.round(totalInterestEarned * 100.00) / 100.00;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public void handleSingleParam(CommandPacket packet, String paramType) throws ParseFailParamException,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            ItemNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        switch (paramType) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/a\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.amount \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/r\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.interestRate \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/p\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.calculationPeriod \u003d ParamChecker.getInstance().checkAndReturnInt(paramType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        case \"/d\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.yearlyDeposit \u003d ParamChecker.getInstance().checkAndReturnDouble(paramType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().getUnrecognizedParamMessage(paramType));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 83,
      "kaiwen98": 6
    }
  },
  {
    "path": "src/main/java/seedu/financeit/parser/DateTimeOutputManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class that stores and manages the output of Datetime classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class DateTimeOutputManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public DateTimeOutputManager(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public DateTimeOutputManager(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.time \u003d dateTime.toLocalTime();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.date \u003d dateTime.toLocalDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Takes in one format specifier string and outputs datetime string with the corresponding format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param whichFormat Format to determine output of dateTime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return Formatted dateTime string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getSingleDateFormatted(String whichFormat) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (whichFormat) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // May 27 2020"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d this.date.format(DateTimeFormatter.ofPattern(\"MMM d YYYY\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Tuesday"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d this.date.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // May"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d this.date.getMonth().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"year\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // 2020"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d Integer.toString(date.getYear());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Show all information"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d this.date.format(DateTimeFormatter.ofPattern(\"YYYY/MM/dd\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getSingleTimeFormatted(String whichFormat) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (whichFormat) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // 2020"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d time.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Show all information"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d this.time.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Handles a String array of format specifiers"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * and arranges the tokens of formatted datetime substrings in a proper order."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param whichFormat Format to determine output of dateTime"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return Formatted dateTime string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getDateTimeFormatted(String[] whichFormat) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] token \u003d new String[Constants.MAX_ARRAY_LEN];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String outputDate;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String outputTime;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (whichFormat \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return getSingleDateFormatted(\" \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + getSingleTimeFormatted(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (String format : whichFormat) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            outputDate \u003d getSingleDateFormatted(format);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            outputTime \u003d getSingleTimeFormatted(format);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            switch (format) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                token[0] \u003d outputDate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                token[2] \u003d outputDate;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case \"year\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                token[3] \u003d outputDate;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case \"time\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                token[4] \u003d outputTime;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // Fall-through"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (token[i] !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output +\u003d token[i] + \" \";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 130
    }
  },
  {
    "path": "src/main/java/seedu/financeit/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.RegexMatcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class parses date and time inputs to output corresponding LocalDate and LocalTime."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static LocalDate parseLocalDate(String input) throws InvalidParameterException,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        NullPointerException, DateTimeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (RegexMatcher.alphabetMatcher(input).find() | !RegexMatcher.numberMatcher(input).find()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String formattedString \u003d getFormatStringForLocalDateParse(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return LocalDate.parse(formattedString);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static LocalTime parseLocalTime(String input) throws InvalidParameterException,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        NullPointerException, DateTimeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (RegexMatcher.alphabetMatcher(input).find() | !RegexMatcher.numberMatcher(input).find()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String formattedString \u003d getFormatStringForLocalTimeParse(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return LocalTime.parse(formattedString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getFormatStringForLocalDateParse(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        final String partition \u003d \"-\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] output \u003d new String[3];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (input.matches(\"[0-9]{6}\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // If input date format is XXXXXX, replace with XX,XX,XX. Eg: 200404"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d input.substring(0,2) + \",\" + input.substring(2, 4) + \",\" + input.substring(4);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else if (input.matches(\"[0-9]{8}\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // If input date format is XXXXXXXX, replace with XXXX,XX,XX. Eg: 20200404"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d input.substring(0,4) + \",\" + input.substring(4, 6) + \",\" + input.substring(6);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        input \u003d input.replaceAll(\"[\\\\D]+\", \"c\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] tokens \u003d input.split(\"c\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c output.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i \u003e tokens.length - 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // If subsequent pair of digits is undefined by simplified input, set to 01 (Jan, 1)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output[i] \u003d \"01\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (tokens[i].length() \u003c 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // If token is 1 or 0 digits long, fill the remaining space with 0 such that a 2 digit number is formed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output[i] \u003d \"0\" + tokens[i];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (i \u003d\u003d 0 \u0026\u0026 tokens[i].matches(\"[0-9]{2}\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // If year given is YY"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output[i] \u003d \"20\" + tokens[i].substring(0,2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output[i] \u003d tokens[i];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.join(partition, output);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getFormatStringForLocalTimeParse(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        final String partition \u003d \":\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] output \u003d new String[3];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (input.matches(\"[0-9]{4}\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // If input time format is XXXX, replace with XX:XX:00."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d input.substring(0,2) + \",\" + input.substring(2) + \",00\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        input \u003d input.replaceAll(\"[\\\\D]+\", \"c\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] tokens \u003d input.split(\"c\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c output.length; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i \u003e tokens.length - 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // If subsequent pair of digits is undefined by simplified input, set to 01 (Jan, 1)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output[i] \u003d \"01\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (tokens[i].length() \u003c 2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // If token is 1 or 0 digits long, fill the remaining space with 0 such that a 2 digit number is formed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output[i] \u003d \"0\" + tokens[i];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output[i] \u003d tokens[i];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.join(partition, output);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 87
    }
  },
  {
    "path": "src/main/java/seedu/financeit/parser/InputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.EmptyCommandStringException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.RegexMatcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "//@@author Artemis-Hunt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class InputParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    private Matcher matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    private static InputParser inputParser \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    private InputParser() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static InputParser getInstance() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        if (inputParser \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            inputParser \u003d new InputParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return inputParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * This will parse the command into 4 small parts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Example: expense 5000 for 08"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Output: expense;5000;for;08"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param userCommand the command user enter"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public String[] parseGoalCommand(String userCommand) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String[] newCommand \u003d userCommand.split(\" \", 4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return newCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * This will parse the edit command into 5 small parts."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Example: edit expense 2000 for 08"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Output: edit;expense;2000;for;08"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param userCommand command user entered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public String[] parseEditCommand(String userCommand) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String[] newCommand \u003d userCommand.split(\" \", 5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return newCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Example input: deadline /by tomorrow /note skip page 70."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * commandString: \"deadline\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * CommandPacket created:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *  commandType: ADD_DEADLINE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *  params: HashMap\u003c String, String \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *  {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *   \"by\": \"tomorrow\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *   \"note\": \"skip page 70\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *  }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public CommandPacket parseInput(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String commandString \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String[] buffer;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String separator \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        boolean paramsExist \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        //Split into [command, rest of input]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        //Check for existence of command title"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            input \u003d \" \" + input + \" \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            matcher \u003d RegexMatcher.paramMatcher(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            separator \u003d getSeparator(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } catch (java.lang.IllegalStateException exception) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            //No params provided"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            commandString \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            return new CommandPacket(commandString, params);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            //Split into [\u003ccommand\u003e, \u003cparams string\u003e]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            buffer \u003d input.split(separator, 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (buffer[0].equals(\" \")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                throw new EmptyCommandStringException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            commandString \u003d buffer[0].toLowerCase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            String paramSubstring \u003d separator + buffer[1];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            params \u003d new ParamsParser(paramSubstring).parseParams();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } catch (EmptyCommandStringException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            UiManager.printWithStatusIcon(Constants.PrintType.SYS_MSG, e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return new CommandPacket(commandString, params);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public String getSeparator(String input) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        //Matcher matches \u003cspace\u003e\u003cseparator\u003e\u003cparamType\u003e\u003cspace\u003e, so (matched index + 1) gives the separator"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        int separatorIndex \u003d matcher.start() + 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return String.valueOf(input.charAt(separatorIndex));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 93,
      "kaiwen98": 11
    }
  },
  {
    "path": "src/main/java/seedu/financeit/parser/ParamsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.RegexMatcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "//@@author Artemis-Hunt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class ParamsParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    protected String paramSubstring;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    protected Matcher matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public ParamsParser(String paramSubstring) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        this.paramSubstring \u003d paramSubstring;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public String getSeparator(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        //Matcher gives index of space before the param, so (matched index + 1) gives the separator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        int separatorIndex \u003d matcher.start() + 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return String.valueOf(input.charAt(separatorIndex));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    String prependAppendSpaces(String str) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return \" \" + str + \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Example input: deadline do homework /by tomorrow /note skip page 70"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * --First iteration--"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * paramSubstring: \"by tomorrow /note skip page 70\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * paramType: \"by\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * paramArgument: \"tomorrow\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * --Next iteration--"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * paramSubstring: \"note skip page 70\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * paramType: \"note\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * paramArgument: \"skip page 70\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * etc."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public HashMap\u003cString, String\u003e parseParams() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String[] buffer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String paramArgument \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        boolean paramArgumentExist;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            paramSubstring +\u003d \" \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            paramArgument \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            //Separate into [paramType, rest of string]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            buffer \u003d paramSubstring.split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            String paramType \u003d buffer[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            buffer[1] \u003d buffer[1].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            * Process param argument and check whether more params exist"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            boolean isRestOfStringEmpty \u003d buffer[1].length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (isRestOfStringEmpty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                //No param argument, no further params"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                params.put(paramType, paramArgument);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            //Matcher requires a leading and trailing blank space to successfully match a param"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            paramSubstring \u003d \" \" + buffer[1] + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            matcher \u003d RegexMatcher.paramMatcher(paramSubstring);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                //Throws IllegalStateException if no more params are present after current param"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                paramArgumentExist \u003d matcher.start() \u003e 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            } catch (java.lang.IllegalStateException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                //No further params"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                paramArgument \u003d paramSubstring.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                params.put(paramType, paramArgument);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (paramArgumentExist) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                //Split into [paramArgument, rest of string]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                String separator \u003d getSeparator(paramSubstring);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                buffer \u003d paramSubstring.trim().split(separator, 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                buffer[1] \u003d separator + buffer[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                paramArgument \u003d buffer[0].trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                paramSubstring \u003d buffer[1].trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                //Nothing more to process for current param"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                paramSubstring \u003d paramSubstring.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            params.put(paramType, paramArgument);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } while (true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return params;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 87,
      "kaiwen98": 7
    }
  },
  {
    "path": "src/main/java/seedu/financeit/ui/MenuPrinter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class MenuPrinter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String prompt \u003d \"\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printMainMenu() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        status();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.setTitle(\"Welcome to Main Menu\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"No.; Feature                                           ; Commands                    \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"[1]; Manual Income/Expense Tracker; manual\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        TablePrinter.addRow(\"[2]; Recurring Income/Expense Tracker; recur\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"[3]; Account Summary; acc\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"[4]; Goals Tracker; goal\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.addRow(\"[5]; Financial Calculator; financial\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"[6]; Save Manager; saver\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"[7]; Toggle Log On or Off; logger\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"[8]; Quit The Program; exit\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void status() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(\"Status: \" + prompt);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        prompt \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 3,
      "Artemis-Hunt": 1,
      "kaiwen98": 21
    }
  },
  {
    "path": "src/main/java/seedu/financeit/ui/TablePrinter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.RegexMatcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class TablePrinter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static ArrayList\u003cString\u003e listContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static String title \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static final int DEFAULT_COL_WIDTH \u003d 15;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static int[] colWidth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static int pad \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String formatTitle(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d UiManager.getLineWithSymbol(input.length() + 4, \"\u003d\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        output +\u003d \"\\n\" + String.format(\"\u003d %s \u003d\", input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        output +\u003d \"\\n\" + UiManager.getLineWithSymbol(input.length() + 4, \"\u003d\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String formatTitle(String input, int width) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d UiManager.getLineWithSymbol(width, \"\u003d\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        output +\u003d \"\\n\" + String.format(\"\u003d %s %s\u003d\", input, UiManager.getLineWithSymbol(width - 4 - input.length(), \" \"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        output +\u003d \"\\n\" + UiManager.getLineWithSymbol(width, \"\u003d\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void setTitle(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        title \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void addRow(String row) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        listContents.add(row);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printRow(String[] row) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(getPrintListRow(row) + \"|\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Main table printing function."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param input Input rows to print table contents."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printList(ArrayList\u003cString\u003e input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] header \u003d input.get(0).split(\";\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        //Set the width of the column based on the length of column header"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        setColWidth(header);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(formatTitle(title, getHeaderRowWidth(header)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        printRowHeader(header);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        printHorizontalHeaderPartition(getHeaderRowWidth(header));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 1; i \u003c input.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String[] buffer \u003d input.get(i).split(\";\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printRow(buffer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printHorizontalPartition(getHeaderRowWidth(header));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        printList(listContents);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        listContents.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        title \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static int getColWidth(int length) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return length \u003e DEFAULT_COL_WIDTH ? length : DEFAULT_COL_WIDTH;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static ArrayList\u003cString\u003e adjustWordToColWidth(String rawInput, int maxLength) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        maxLength \u003d maxLength - 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] inputs \u003d rawInput.split(\"[\u003e]\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (String input: inputs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            Matcher matcher \u003d RegexMatcher.regexMatcher(input, String.format(\".{%s}|.{1,}$\", maxLength));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            while (matcher.find()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output.add(matcher.group());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static ArrayList\u003cString\u003e adjustContentToColWidth(String rawInput, int maxLength) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] inputs \u003d rawInput.split(\"[\u003e]\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] buffer;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String feed \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean hasParsedLongWord;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (String input: inputs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Break down input line into word tokens"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            buffer \u003d input.split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            int scannedWordCount \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // While the input line is not fully visited"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            while (scannedWordCount + 1  \u003c\u003d buffer.length) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                hasParsedLongWord \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                feed \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // Acquire segment of buffer right before line feed exceeds the char limit"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (buffer[scannedWordCount].length() \u003e maxLength) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    //System.out.println(\"if: \" + buffer[scannedWordCount]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ArrayList\u003cString\u003e tokens \u003d adjustWordToColWidth(buffer[scannedWordCount], maxLength);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    for (int i \u003d 0; i \u003c tokens.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        feed \u003d tokens.get(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        if (i \u003c tokens.size() - 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                            feed +\u003d \"-\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        output.add(feed);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    scannedWordCount++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    //System.out.println(\"else: \" + buffer[scannedWordCount]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    do {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        feed +\u003d buffer[scannedWordCount] + \" \";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        scannedWordCount++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    } while ((scannedWordCount \u003c buffer.length)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        \u0026\u0026 (feed.length() + 1 + buffer[scannedWordCount].length() \u003c maxLength - pad));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    output.add(feed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Handles printing of each row for all columns."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param input Input table row to print."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getPrintListRow(String[] input) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int maxLines \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ArrayList\u003cString\u003e buffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String entry \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ArrayList\u003cString\u003e[] token \u003d new ArrayList[input.length];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Determine how many lines needed for each column, and also segmenting"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // the contents of each box to each line."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // This allows for warping of lines that would normally overflow from"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // the default column width."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int col \u003d 0; col \u003c input.length; col++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            token[col] \u003d adjustContentToColWidth(input[col], getColWidth(colWidth[col]));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (token[col].size() \u003e maxLines) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                maxLines \u003d token[col].size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int line \u003d 0; line \u003c maxLines; line++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            buffer.clear();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            for (int col \u003d 0; col \u003c input.length; col++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // If the content of the box is fully printed,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // no need to access it anymore"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (line + 1 \u003e token[col].size()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    entry \u003d getPrintFormat(\" \", getColWidth(colWidth[col]));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    entry \u003d getPrintFormat(token[col].get(line), getColWidth(colWidth[col]));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                buffer.add(entry);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d String.join(\"\", buffer);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d (line \u003c maxLines - 1) ? \"|\\n\" : \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getPrintFormat(String s, int width) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String format \u003d \"| %-\" + width + \"s\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(format, s);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printRowHeader(String[] row) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String header \u003d getPrintListRow(row);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(header + \"|\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printHorizontalPartition(int rowWidth) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(UiManager.getLineWithSymbol(rowWidth / 2, \" -\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printHorizontalHeaderPartition(int rowWidth) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(UiManager.getLineWithSymbol(rowWidth, \"-\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void setColWidth(String[] row) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        colWidth \u003d new int[row.length];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c row.length; i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            colWidth[i] \u003d row[i].length();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static int getHeaderRowWidth(String[] row) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String header \u003d getPrintListRow(row);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] output \u003d header.split(\"\\\\n\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output[0].length();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 195
    }
  },
  {
    "path": "src/main/java/seedu/financeit/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class UiManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getLineWithSymbol(int width, String symbol) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        // return new String(new char[width]).replace(\"\\0\", symbol);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return symbol.repeat(width);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printLineWithSymbol(int width, String symbol) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(getLineWithSymbol(width, symbol));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void drawPartition() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        printLineWithSymbol(Constants.MAX_PARTITION_LINE_LEN, \"_\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getPrintListRow(String[] input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ArrayList\u003cString\u003e buffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Arrays.stream(input)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                .forEach(s -\u003e buffer.add(getPrintFormat(s)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.join(\"\", buffer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getPrintFormat(String s) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"| %-15s\", s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printRowHeader(String[] row) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String header \u003d getPrintListRow(row);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(header);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(new String(new char[header.length()]).replace(\"\", \"-\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printInputPrompt() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        drawPartition();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.print(\"\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static String handleInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return handleInput(\"echo\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static String handleInput(String mode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        UiManager.printInputPrompt();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (mode.equals(\"echo\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            System.out.println(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printWithStatusIcon(Constants.PrintType printType, String... messages) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c messages.length; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                System.out.println(String.format(\"[ %-15s]: %s\", printType, messages[i]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                System.out.println(String.format(\"%-20s%s\", \" \", messages[i]));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getStringPrintWithStatusIcon(Constants.PrintType printType, String... messages) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c messages.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                message +\u003d String.format(\"[ %-15s]: %s\\n\", printType, messages[i]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                message +\u003d String.format(\"%-20s%s\\n\", \" \", messages[i]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static void printInputPromptMessage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        printWithStatusIcon(Constants.PrintType.INSTRUCTION,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                \"Enter a command! \","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "                \"Input \\\"commands\\\" for list of commands.\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void refreshPage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"   ||\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d||\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"   ||||$||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||$||||\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"   ||(100)\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d|     Welcome to       |\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d(100)||\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"   ||||$||        ~         \u0027------\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d--------\u0027                ||$||||\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"   ||\u003c\u003c |        |$|              || ____ ||                         | \u003e\u003e||\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"   ||\u003e\u003e|  12    ||L||            || ///..) ||         L38036133B   12 |\u003c\u003c||\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"   ||\u003c\u003c|        || ||           || \u003c||  \u003e)  ||                        |\u003e\u003e||\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"   ||\u003e\u003e|         |$|            ||  $$ --)  ||        One Hundred     |\u003c\u003c||\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d||\u003e||\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||||$||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||$||||\u003e||\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||(100)\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d|     FinanceIt!       |\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d(100)||\u003e||\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||||$||        ~         \u0027------\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d--------\u0027                ||$||||\u003e||\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003c\u003c |        |$|              || ____ ||                         | \u003e\u003e||)||\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003e\u003e|  12    ||L||            || ///..) ||         L38036133B   12 |\u003c\u003c||/||\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003c\u003c|        || ||           || \u003c||  \u003e)  ||                        |\u003e\u003e||\u003d||\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003e\u003e|         |$|            ||  $$ --)  ||        One Hundred     |\u003c\u003c||\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003c\u003c|      L38036133B        *||  |(_)  ||* series                 |\u003e\u003e||\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003e\u003e|  12                     *||(___)_||*   1989                  |\u003c\u003c||\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003c\u003c|      Treasurer     ______(  V1.0   )________     Secretary 12 |\u003e\u003e||\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||||$|                 ~| A finanace tracking app |~               |$||||\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||(100)\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  ONE HUNDRED DOLLARS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d(100)||\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||||$||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||$//||\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + \"||\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d||\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.print(logo);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 12,
      "kaiwen98": 110
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/FiniteStateMachine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class FiniteStateMachine {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public enum State {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        MAIN_MENU,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CREATE_LEDGER,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        OPEN_LEDGER,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        DELETE_LEDGER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        SHOW_LEDGER,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CREATE_ENTRY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        SHOW_ENTRY,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        DELETE_ENTRY,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        END_TRACKER,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        INVALID_STATE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EXIT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EDIT_ENTRY"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private State currState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private State nextState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public FiniteStateMachine(State currState) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.currState \u003d currState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.nextState \u003d State.INVALID_STATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public State getCurrState() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.currState;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setNextState(State state) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.nextState \u003d state;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void transitionState(State nexState) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.currState \u003d nextState;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        setNextState(nexState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void transitionState() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.currState \u003d nextState;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        setNextState(State.INVALID_STATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 44
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/LoggerCentre.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class LoggerCentre {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Logger loggerParamChecker \u003d Logger.getLogger(ParamChecker.class.getName());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static LoggerCentre loggerCentre \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private LoggerCentre() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static LoggerCentre getInstance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (loggerCentre \u003d\u003d null) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            loggerCentre \u003d new LoggerCentre();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return loggerCentre;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setLevel(Level level) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        loggerParamChecker.setLevel(level);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 25
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/ParamChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CategoryMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.EmptyParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InvalidCategoryException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.parser.DateTimeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.security.InvalidParameterException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class that handles error handling of params"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * and throws only ParseFailParamsException to be handled in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * the user classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class ParamChecker {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PARAM_DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static final String PARAM_DAY \u003d \"/day\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PARAM_TIME \u003d \"/time\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PARAM_INDEX \u003d \"/id\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PARAM_DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PARAM_CATEGORY \u003d \"/cat\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PARAM_AMOUNT \u003d \"/amt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static final String PARAM_NOTES \u003d \"/notes\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PARAM_INC \u003d \"-i\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String PARAM_EXP \u003d \"-e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public static final String PARAM_AUTO \u003d \"-auto\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Maximum amount of money that can be inputed: 100 digits including floating point + 1 char for decimal point"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static final int MAX_INPUT_DOUBLE_LENGTH \u003d 101;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private CommandPacket packet;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static String errorMessage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static ParamChecker paramChecker \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private ParamChecker() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static ParamChecker getInstance() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (paramChecker \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            paramChecker \u003d new ParamChecker();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return paramChecker;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setPacket(CommandPacket packet) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.packet \u003d packet;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private void printErrorMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private void clearErrorMessage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public LocalDate checkAndReturnDate(String paramType)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throws ParseFailParamException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean parseSuccess \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        clearErrorMessage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.loggerParamChecker.log(Level.INFO, \"Checking date...\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String rawDate \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (rawDate.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new EmptyParamException(paramType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            date \u003d DateTimeParser.parseLocalDate(rawDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            parseSuccess \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (DateTimeException exception) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"Date parsed but not valid... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageDateDateTimeException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InvalidParameterException exception) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"Date input cannot be parsed... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageDateInvalidFormat();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (EmptyParamException exception) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"No date input supplied... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                exception.getMessage(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Enter \\\"commands\\\" to check format!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printErrorMessage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!parseSuccess) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new ParseFailParamException(paramType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public LocalTime checkAndReturnTime(String paramType)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        throws ParseFailParamException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LocalTime time \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean parseSuccess \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        clearErrorMessage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.loggerParamChecker.log(Level.INFO, \"Checking time...\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String rawTime \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (rawTime.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new EmptyParamException(paramType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            time \u003d DateTimeParser.parseLocalTime(rawTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            parseSuccess \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (DateTimeException exception) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"Time parsed but not valid... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageTimeDateTimeException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InvalidParameterException exception) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"Time input cannot be parsed... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageTimeInvalidFormat();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (EmptyParamException exception) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"No time input supplied... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                exception.getMessage(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Enter \\\"commands\\\" to check format!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printErrorMessage();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!parseSuccess) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new ParseFailParamException(paramType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * Checks if user-inputted index is valid, and converts it to zero-based index form."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param paramType - paramType that has index as paramArgument"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @param list - list of items to select from"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @return zero-based index (i.e. user-inputted index - 1)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     * @throws ParseFailParamException If index was not parsed successfully,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     *                                 for example due to error thrown"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public int checkAndReturnIndex(String paramType, ArrayList list) throws ParseFailParamException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean parseSuccess \u003d false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        clearErrorMessage();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.loggerParamChecker.log(Level.INFO, \"Checking index validity...\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            message \u003d getMessageNoItemsInList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else if (list.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            message \u003d getMessageOneItemInList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            message \u003d getMessageListRangeIndex(list.size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            index \u003d Integer.parseInt(packet.getParam(paramType));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            if (index \u003c 1 || index \u003e list.size()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            parseSuccess \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"Index out of bounds... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageListIndexOutOfBounds(message, index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"Index cannot be parsed... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageListNumberFormatException(message);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printErrorMessage();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!parseSuccess) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new ParseFailParamException(paramType);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return index - 1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public double checkAndReturnDouble(String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String input \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean parseSuccess \u003d false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        double output \u003d -1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        clearErrorMessage();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.loggerParamChecker.log(Level.INFO, \"Checking input Double...\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        input \u003d input.replaceAll(\"[^\\\\w | .]\", \"\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            parseSuccess \u003d true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (NumberFormatException | NullPointerException exception) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.format(\"Double not recognised... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageDoubleNumberFormatException();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printErrorMessage();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!parseSuccess) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new ParseFailParamException(paramType);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public double checkAndReturnDoubleSigned(String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String input \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean parseSuccess \u003d false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        double output \u003d -1;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        clearErrorMessage();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(input.length());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.loggerParamChecker.log(Level.INFO, \"Checking input Double...\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d input.replaceAll(\"[^\\\\w | .]\", \"\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (input.length() \u003e MAX_INPUT_DOUBLE_LENGTH) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DecimalFormat bd \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            bd.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d bd.format(Double.parseDouble(input));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            parseSuccess \u003d true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (NumberFormatException | NullPointerException exception) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (input.length() \u003e MAX_INPUT_DOUBLE_LENGTH) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"Expected input out of bounds... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                errorMessage \u003d \"Amount provided is too long in length! \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    + \"Maximum amount is of 100 digits long.\\n\";"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (output \u003c 0) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"Expected positive double... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                errorMessage \u003d \"Expected Positive decimal value with at most 2 d.p!\\n\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"Double not recognised... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageNumberFormatException() + errorMessage;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printErrorMessage();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!parseSuccess) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new ParseFailParamException(paramType);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public int checkAndReturnInt(String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        String input \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        boolean parseSuccess \u003d false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        int output \u003d -1;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        clearErrorMessage();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.loggerParamChecker.log(Level.INFO, \"Checking input Integer...\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            output \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            parseSuccess \u003d true;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        } catch (NumberFormatException | NullPointerException exception) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (paramType.length() \u003e (int)Math.log(Long.MAX_VALUE) + 1) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"Int format is too long... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                errorMessage \u003d \"\\nInput value is too out of range: 9,223,372,036,854,775,807\\n\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"Int not recognised... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageNumberFormatException() + errorMessage;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printErrorMessage();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!parseSuccess) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new ParseFailParamException(paramType);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public int checkAndReturnIntSigned(String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String input \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean parseSuccess \u003d false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int output \u003d -1;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        clearErrorMessage();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.loggerParamChecker.log(Level.INFO, \"Checking input Integer...\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (output \u003c 0) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            parseSuccess \u003d true;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (NumberFormatException | NullPointerException exception) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (paramType.length() \u003e (int)Math.log(Long.MAX_VALUE) + 1) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"Int format is too long... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                errorMessage \u003d \"\\nInput value is too out of range: 9,223,372,036,854,775,807\\n\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (output \u003c 0) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"Expected positive integer... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                errorMessage \u003d \"\\nExpected Positive integer!\\n\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                LoggerCentre.loggerParamChecker.log(Level.WARNING,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    String.format(\"Int not recognised... Err: %s\", exception.getMessage()));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageNumberFormatException() + errorMessage;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printErrorMessage();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        if (!parseSuccess) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "            throw new ParseFailParamException(paramType);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String checkAndReturnCategory(String paramType) throws ParseFailParamException {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean parseSuccess \u003d false;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String category \u003d packet.getParam(paramType);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        clearErrorMessage();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LoggerCentre.loggerParamChecker.log(Level.INFO, \"Checking input Category...\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (! CategoryMap.inputToCategoryMap.containsKey(category)) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new InvalidCategoryException(category);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            parseSuccess \u003d true;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InvalidCategoryException exception) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            LoggerCentre.loggerParamChecker.log(Level.WARNING, \"Category not recognised...\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            errorMessage \u003d getErrorMessageInvalidCategoryException(exception);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            printErrorMessage();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!parseSuccess) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new ParseFailParamException(paramType);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * List of error messages that are referenced in the above functions."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageDateDateTimeException() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Not a valid date on the Gregorian Calendar!\","
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Check your input again against the following format!\","
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Date format: YYMMDD\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageDateInvalidFormat() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Input format is not recognised.\","
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Check your input again against the following format!\","
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Date format: YYMMDD\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageTimeInvalidFormat() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Input format is not recognised.\","
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Check your input again against the following format!\","
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Time format: HHMM\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageTimeDateTimeException() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Time is out of range!\","
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Check your input again against the following format!\","
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Time format: HHMM\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getMessageListRangeIndex(int size) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"The range is from 1 to %d\", size);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getMessageOneItemInList() {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return \"The only valid item index is 1.\";"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getMessageNoItemsInList() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return \"There are no items in the list.\";"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageListNumberFormatException(String message) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Cannot parse your input. Please enter a positive integer!\","
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            message);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageListIndexOutOfBounds(String message, int index) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            getMessageListRangeIndex(index),"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            message);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageDoubleNumberFormatException() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Cannot parse your input. Please enter valid 2 d.p input!\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageNumberFormatException() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Cannot parse your input. Please enter valid integer input!\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getErrorMessageInvalidCategoryException(InvalidCategoryException exception) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return errorMessage \u003d UiManager.getStringPrintWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            exception.getMessage(),"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"Input \\\"exp cat\\\" to show valid categories!\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getUnrecognizedParamMessage(String paramType) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"The param type is not recognized: \\\"%s\\\"\", paramType);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getParseFailParamMessage(String paramType) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"The param type cannot be parsed: \\\"%s\\\"\", paramType);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 29,
      "kaiwen98": 423
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/RegexMatcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class RegexMatcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Matcher regexMatcher(String inputString, String regex) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(inputString);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Matcher paramMatcher(String inputString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        //Matches \u003cspace\u003e\u003cPARAMS_PREFIX\u003e\u003cstring\u003e\u003cspace\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String regex \u003d String.format(\"(\\\\s)([%s]{1})(\\\\w+)(\\\\s)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String.join(\"\", Constants.DEFAULT_PARAMS_PREFIX));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Matcher matcher \u003d regexMatcher(inputString, regex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        matcher.find();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Matcher alphabetMatcher(String inputString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String regex \u003d \"[a-zA-Z]+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Matcher matcher \u003d regexMatcher(inputString, regex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Matcher numberMatcher(String inputString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String regex \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Matcher matcher \u003d regexMatcher(inputString, regex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 1,
      "kaiwen98": 34
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/storage/AccountSaver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.utils.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.exceptions.FolderNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class AccountSaver {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private static final int LINES_IN_AN_ACCOUNT \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    private static final int LAST_LINE_IN_AN_ACCOUNT \u003d 4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Reads file content whenever FinanceTools starts up."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param infoText array that stores all tasks in text format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws FileNotFoundException if file that contains data of tasks is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws FolderNotFoundException if folder not found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static void readFileContents(String filePath, ArrayList\u003cString\u003e infoText)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throws FileNotFoundException, FolderNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            createFile(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            System.out.println(\"IO Error\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        File folder \u003d new File(\"./data/\"); // folder directory for duke.txt"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        // Check if folder exist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (folder.isDirectory() \u003d\u003d false) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            throw new FolderNotFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        // Read tasks into FinanceTools"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            int countLines \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            String textToAdd \u003d line + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            while (countLines \u003c LINES_IN_AN_ACCOUNT \u0026\u0026 s.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                line \u003d s.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                textToAdd +\u003d line;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                if (countLines !\u003d LAST_LINE_IN_AN_ACCOUNT) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                    textToAdd +\u003d \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                countLines++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            infoText.add(textToAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Writes task data to text file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param textToAdd string that would be added to the text file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws IOException if there are issues with input or output operations."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static void writeToFile(String filePath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        fw.write(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Updates text file whenever an operation is done on the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param infoText array that stores all tasks in text format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws FileNotFoundException if file that contains data of tasks is not found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static void updateFile(ArrayList\u003cString\u003e infoText, String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(filePath); // reset .txt file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        for (int i \u003d 0; i \u003c infoText.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                writeToFile(filePath, infoText.get(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bqxy"
        },
        "content": "                System.out.println(\"IO Error\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * Creates file if existing file is not available."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @param filePath file path that contains all the tasks in text format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     * @throws IOException if there are issues with input or output operations."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bqxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static void createFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        File storageFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (storageFile.exists()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        if (!storageFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bqxy"
        },
        "content": "            storageFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        storageFile.createNewFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        System.out.println(storageFile.getAbsolutePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 109
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/storage/AutoTrackerSaver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.RecurringEntry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.RecurringEntryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.recurringtracker.RecurringTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "//@@author Feudalord"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "public class AutoTrackerSaver extends SaveHandler {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static AutoTrackerSaver saver;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private AutoTrackerSaver() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private AutoTrackerSaver(String directory, String filepath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        super(directory, filepath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static AutoTrackerSaver getInstance(String... paths) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (saver \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saver \u003d new AutoTrackerSaver(paths[0], paths[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saver \u003d new AutoTrackerSaver();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return saver;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public void save(String... paths) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile(paths[0], paths[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        RecurringEntryList entries \u003d RecurringTracker.getEntries();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        StringBuilder saveString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        int size \u003d entries.getItemsSize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            RecurringEntry entry \u003d (RecurringEntry) entries.getItemAtCurrIndex(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            saveString.append(entry.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(paths.length \u003d\u003d 2 ? paths[1] : fullPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fileWriter.write(String.valueOf(saveString));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public void load(String... paths) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile(paths[0], paths[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        File file \u003d new File(paths.length \u003d\u003d 2 ? paths[1] : fullPath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        String[] classContents;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        String inputString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        String incomeExpense;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String saveString \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            classContents \u003d saveString.split(\";\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            if (!classContents[2].equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                classContents[2] \u003d classContents[2].substring(2, classContents[2].length() - 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                incomeExpense \u003d \"-e \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                classContents[3] \u003d classContents[3].substring(2, classContents[3].length() - 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                incomeExpense \u003d \"-i \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            if (classContents[5].equals(\"Auto deduction\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                classContents[5] \u003d \"-auto \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                classContents[5] \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            inputString \u003d \"add \" + incomeExpense + classContents[5] + \"/desc \" + classContents[1]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    + \" /amt \" + classContents[2] + classContents[3] + \" /day \" + classContents[0]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    + \" /notes \" + classContents[6];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            RecurringTracker.loadEntry(InputParser.getInstance().parseInput(inputString));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 84,
      "kaiwen98": 4
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/storage/GoalTrackerSaver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.data.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.goaltracker.GoalTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.goaltracker.TotalGoalList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "//@@author Feudalord"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "public class GoalTrackerSaver extends SaveHandler {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static GoalTrackerSaver saver;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private GoalTrackerSaver() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private GoalTrackerSaver(String directory, String filepath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        super(directory, filepath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static GoalTrackerSaver getInstance(String... paths) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (saver \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saver \u003d new GoalTrackerSaver(paths[0], paths[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saver \u003d new GoalTrackerSaver();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return saver;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public void save(String... paths) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile(paths[0], paths[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        StringBuilder saveString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TotalGoalList goalList \u003d GoalTracker.getTotalGoalList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        String cat;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        Goal go;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        for (int i \u003d 0; i \u003c goalList.getListSize(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            go \u003d goalList.getGoal().get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            cat \u003d go.getCategory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            if (cat.equals(\"Expense\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saveString.append(cat + \";\" + go.getExpenseGoal() + \";\" + go.getExpenseMonth() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saveString.append(cat + \";\" + go.getIncomeGoal() + \";\" + go.getIncomeMonth() + \"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(paths.length \u003d\u003d 2 ? paths[1] : fullPath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fileWriter.write(String.valueOf(saveString));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public void load(String... paths) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile(paths[0], paths[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        File file \u003d new File(paths.length \u003d\u003d 2 ? paths[1] : fullPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        String[] classContents;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String saveString \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            classContents \u003d saveString.split(\";\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            GoalTracker.setGoals(classContents[1], classContents[0], classContents[2]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 71,
      "kaiwen98": 4
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/storage/ManualTrackerSaver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CategoryMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.EntryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.EntryTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.Ledger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.LedgerList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.ManualTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "//@@author Feudalord"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "public class ManualTrackerSaver extends SaveHandler {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static ManualTrackerSaver saver;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private ManualTrackerSaver() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private ManualTrackerSaver(String directory, String filepath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        super(directory, filepath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static ManualTrackerSaver getInstance(String... paths) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (saver \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saver \u003d new ManualTrackerSaver(paths[0], paths[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saver \u003d new ManualTrackerSaver();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return saver;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public void save(String... paths) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile(paths[0], paths[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        LedgerList ledList \u003d ManualTracker.getLedgerList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        StringBuilder saveString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        int size \u003d ledList.getItemsSize();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            Ledger ledger \u003d (Ledger) ledList.getItemAtCurrIndex(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            saveString.append(getSaveString(ledger));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            EntryList entryList \u003d ledger.entryList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            int entryListSize \u003d entryList.getItemsSize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            for (int x \u003d 0; x \u003c entryListSize; x++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                Entry ent \u003d (Entry) entryList.getItemAtCurrIndex(x);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                saveString.append(getSaveString(ent));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(paths.length \u003d\u003d 2 ? paths[1] : fullPath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fileWriter.write(String.valueOf(saveString));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public void load(String... paths) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (paths.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile(paths[0], paths[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            buildFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        File file \u003d new File(paths.length \u003d\u003d 2 ? paths[1] : fullPath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        String[] classContents;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        String inputString \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        int ledgerIndex \u003d -1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String saveString \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            classContents \u003d saveString.split(\";\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            switch (classContents[0]) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"Entry\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                if (classContents[1].equals(\"Expense\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    classContents[1] \u003d \" -e\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                } else if (classContents[1].equals(\"Income\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    classContents[1] \u003d \" -i\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                classContents[2] \u003d CategoryMap.categoryToInputMap.get(classContents[2]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                EntryTracker.setCurrLedger((Ledger) ManualTracker.getLedgerList().getItemAtCurrIndex(ledgerIndex));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                inputString \u003d \"new /time \" + classContents[4] + \" /cat \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                        + classContents[2] + \" /desc \" + classContents[5] + \" /amt \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                        + classContents[3] + classContents[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                EntryTracker.setCommandPacket(InputParser.getInstance().parseInput(inputString));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                EntryTracker.createEntry();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"Ledger\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                inputString \u003d \"new /date \" + classContents[1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                ManualTracker.setCommandPacket(InputParser.getInstance().parseInput(inputString));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                ManualTracker.createLedger();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                ledgerIndex++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                UiManager.printWithStatusIcon(Constants.PrintType.ERROR_MESSAGE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                        \"Class is not recognised to load.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 94,
      "kaiwen98": 15
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/storage/SaveHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "//@@author Feudalord"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "public abstract class SaveHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    protected String fullPath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    protected String dirPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    protected SaveHandler() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    protected SaveHandler(String directory, String filepath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fullPath \u003d filepath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        dirPath \u003d directory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    protected void buildFile() throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (!Files.exists(Paths.get(dirPath))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            Files.createDirectory(Paths.get(dirPath));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (!Files.exists(Paths.get(fullPath))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            Files.createFile(Paths.get(fullPath));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static void buildFile(String dirPath, String fullPath) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (!Files.exists(Paths.get(dirPath))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            Files.createDirectory(Paths.get(dirPath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (!Files.exists(Paths.get(fullPath))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            Files.createFile(Paths.get(fullPath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static void putString(String input) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        buildFile(\"./data\", \"./data/saveString.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(\"./data/saveString.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fileWriter.write(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static String takeString() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        buildFile(\"./data\", \"./data/saveString.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        File file \u003d new File(\"./data/saveString.txt\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static String getSaveString(Object object) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return object.getClass().getSimpleName() + \";\" + object + System.lineSeparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static String charRemoveAt(String str, int p) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return str.substring(0, p) + str.substring(p + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public void save(String... paths) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public void load(String... paths) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 72,
      "kaiwen98": 1
    }
  },
  {
    "path": "src/main/java/seedu/financeit/utils/storage/SaveManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "package seedu.financeit.utils.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.ui.TablePrinter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.nio.channels.FileChannel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "public class SaveManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static final String fullPath \u003d \"./data/backup/names.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static final String dirPath \u003d \"./data/backup\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static String prompt \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static boolean menu \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static boolean load \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    public static boolean main() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            if (menu \u003d\u003d true) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                helpMenu();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            InputParser parser \u003d InputParser.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            CommandPacket packet \u003d parser.parseInput(UiManager.handleInput(\"Please no echo\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            menu \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            switch (packet.getCommandString()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                listSaves(packet);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                if (checkValidity(packet) \u003d\u003d true) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    addSave(packet);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"load\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                if (checkValidity(packet) \u003d\u003d true) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    loadSave(packet);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                if (checkValidity(packet) \u003d\u003d true) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    deleteSave(packet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                menu \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                return load;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                prompt \u003d \"Invalid Command\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static boolean checkValidity(CommandPacket packet) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        if (packet.getParam(\"/name\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            prompt \u003d \"Invalid Command\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static void helpMenu() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        UiManager.refreshPage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        status();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.setTitle(\"Welcome to Save Manager\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"No.; Commands                                           ; Syntax                    \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"[1]; List local saves; list\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"[2]; Add/Overwrite save; add /name\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"[3]; Load save; load /name\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"[4]; Delete save; delete /name\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.addRow(\"[5]; Quit to main; exit\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        TablePrinter.printList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static void status() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        System.out.println(\"Status: \" + prompt);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        prompt \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static void helpMsg() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        System.out.println(\"Enter \u003chelp\u003e for a list of commands\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static void listSaves(CommandPacket packet) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            menu \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            UiManager.refreshPage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            helpMsg();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            TablePrinter.setTitle(\"List Saves\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            TablePrinter.addRow(\"No.; Names                                           \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            SaveHandler.buildFile(dirPath, fullPath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            File file \u003d new File(fullPath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            for (int i \u003d 1; scanner.hasNext(); ) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                String name \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                if (!name.equals(\"\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    TablePrinter.addRow(\"[\" + i + \"]; \" + name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            TablePrinter.printList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            menu \u003d true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            prompt \u003d e.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static void addSave(CommandPacket packet) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String name \u003d packet.getParam(\"/name\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String path \u003d dirPath + \"/\" + name;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            GoalTrackerSaver.getInstance().save(dirPath, path + \"_gt.txt\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            ManualTrackerSaver.getInstance().save(dirPath, path + \"_mt.txt\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            AutoTrackerSaver.getInstance().save(dirPath, path + \"_at.txt\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            SaveHandler.buildFile(dirPath, fullPath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            File file \u003d new File(fullPath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                String saveString \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                if (saveString.equals(name)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    prompt \u003d name + \" has been overwritten!\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(fullPath, true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            fileWriter.write(\"\\n\" + name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            prompt \u003d name + \" has been added!\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            prompt \u003d e.toString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static void loadSave(CommandPacket packet) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String name \u003d packet.getParam(\"/name\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String path \u003d dirPath + \"/\" + name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String desAuto \u003d AutoTrackerSaver.getInstance().fullPath;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String desGoal \u003d GoalTrackerSaver.getInstance().fullPath;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            String desManual \u003d ManualTrackerSaver.getInstance().fullPath;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            File file \u003d new File(fullPath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                String saveString \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                if (saveString.equals(name)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    FileChannel sourceChannel \u003d new FileInputStream(path + \"_gt.txt\").getChannel();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    FileChannel destChannel \u003d new FileOutputStream(desGoal).getChannel();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    sourceChannel \u003d new FileInputStream(path + \"_mt.txt\").getChannel();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    destChannel \u003d new FileOutputStream(desManual).getChannel();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    sourceChannel \u003d new FileInputStream(path + \"_at.txt\").getChannel();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    destChannel \u003d new FileOutputStream(desAuto).getChannel();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    sourceChannel.close();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    destChannel.close();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    load \u003d true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    prompt \u003d name + \" has been loaded, restart for changes to take effect!\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            prompt \u003d name + \" cannot be found!\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "            prompt \u003d e.toString();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    private static void deleteSave(CommandPacket packet) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Feudalord"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Feudalord"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Feudalord": 182
    }
  },
  {
    "path": "src/test/java/seedu/financeit/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "kaiwen98": 3
    }
  },
  {
    "path": "src/test/java/seedu/financeit/common/CommandPacketTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.common; /**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Organises data from input string into distinct data types and structure."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * For scalability purposes, a hash table is implemented to map param type to its corresponding params."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class CommandPacketTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String commandString \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private HashMap paramMap \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String rawInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Constructors"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public CommandPacketTest(String taskType, HashMap paramMap) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.commandString \u003d taskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramMap \u003d paramMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Param type refers to /.* (eg. /a)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Param refers to string following the param type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getParam(String paramType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!paramMap.containsKey(paramType)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return (String) paramMap.get(paramType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String[] getParamTypes() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return (String[]) paramMap.keySet().toArray(new String[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getCommandString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.commandString.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public HashMap getParamMap() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return (HashMap)this.paramMap.clone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void addParamToMap(String paramType, String paramString) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramMap.put(paramType, paramString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"%s, %s\\n\", this.commandString, this.paramMap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 49
    }
  },
  {
    "path": "src/test/java/seedu/financeit/datatrackers/entrytracker/EntryTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.TypicalLedgerEntries;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.entrytracker.TestCommands.generateCreateEntryCorrectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.entrytracker.TestCommands.generateCreateEntryErrorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.entrytracker.TestCommands.generateDeleteEntryByIdCorrectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.entrytracker.TestCommands.generateDeleteEntryByIdErrorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.entrytracker.TestCommands.generateEditEntryCorrectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class EntryTrackerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static final int FREQUENCY_ERROR_ENTRY \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static final int NUM_ENTRIES \u003d 20;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Function sets up the \"opened\" ledger whereby entry operations will be performed upon."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryTracker.setCurrLedger(TypicalLedgerEntries.getInstance().generateTypicalLedger1());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Test handleCreateEntry that evaluates if valid entries are added into the list, and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * invalid are not added into the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testEntryTrackerByList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int numCorrectEntries \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Illegal Params that will be generated with the Entry for negative test."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] wrongParams \u003d {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"time\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"cat\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"amt\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String wrongParam;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d NUM_ENTRIES; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i % FREQUENCY_ERROR_ENTRY \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                wrongParam \u003d wrongParams[count % 3];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateEntryErrorCommand(wrongParam);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateEntryCorrectCommand(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                numCorrectEntries++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.handleCreateEntry(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertEquals(numCorrectEntries, EntryTracker.entryList.getItemsSize());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryTracker.entryList.removeAllItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testEntryTrackerByDelete() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d NUM_ENTRIES; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            testPacket \u003d generateCreateEntryCorrectCommand(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.handleCreateEntry(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int actualListNum \u003d EntryTracker.entryList.getItemsSize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 4; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                //Fall through"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateDeleteEntryByIdCorrectCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                actualListNum -\u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                //Fall through"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateDeleteEntryByIdErrorCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // Fall- through"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.handleDeleteEntry();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int expectedListNum \u003d EntryTracker.entryList.getItemsSize();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertEquals(actualListNum, expectedListNum);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testEntryTrackerByEditEntries() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int commonSeed \u003d 3;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TypicalEntryEntries.getInstance().setSeed(commonSeed);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        final Entry expectedEntry \u003d TypicalEntryEntries.getInstance().generateTypicalEntryFromSeed();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Create a fodder entry to overwrite using edit operation."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TypicalEntryEntries.getInstance().generateTypicalEntry1();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryTracker.setTestPacket(TypicalEntryEntries.getInstance().packet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryTracker.handleCreateEntry(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Create command packet to invoke edit operation."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d generateEditEntryCorrectCommand(commonSeed);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryTracker.handleEditEntry();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Entry actualEntry \u003d (Entry) EntryTracker.entryList.getItemAtCurrIndex(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertEquals(actualEntry, expectedEntry);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryTracker.entryList.removeAllItems();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testEntryTrackerByDuplicateEntries() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c NUM_ENTRIES; i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateEntryCorrectCommand(4);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateEntryCorrectCommand(3);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            EntryTracker.handleCreateEntry(false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertEquals(2, EntryTracker.entryList.getItemsSize());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EntryTracker.entryList.removeAllItems();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 126
    }
  },
  {
    "path": "src/test/java/seedu/financeit/datatrackers/entrytracker/TestCommands.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.testutil.TestUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class TestCommands {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateCreateEntryErrorCommand(String wrongParam) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramTime \u003d (wrongParam \u003d\u003d \"time\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ? \"5600\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            : \"1500\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramCat \u003d (wrongParam \u003d\u003d \"cat\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ? \"wrong\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            : \"tpt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramAmt \u003d (wrongParam \u003d\u003d \"amt\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ? String.format(\"%f\", (Double.MAX_VALUE - 1))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            : \"5600\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(\"lol: \" + paramAmt.length());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(\"lol: \" + paramAmt);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"new\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_TIME,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_CATEGORY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramCat"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_INC,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"test description\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_AMOUNT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramAmt"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateDeleteEntryByIdCorrectCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"delete\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_INDEX,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"1\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateDeleteEntryByIdErrorCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"delete\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_INDEX,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"100000000000000\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateCreateEntryCorrectCommand(int seed) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Generates entries with time range from 0000 to 2400 in 24-h intervals."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramTime \u003d (\"\".concat(String.valueOf(seed % 24)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramCat \u003d \"tpt\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramAmt \u003d \"1500\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"edit\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_TIME,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramTime"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_CATEGORY,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramCat"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_INC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"test description\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_AMOUNT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramAmt"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateEditEntryCorrectCommand(int seed) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Generates entries with time range from 0000 to 2400 in 24-h intervals."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramTime \u003d (\"\".concat(String.valueOf(seed % 24)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramCat \u003d \"tpt\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String paramAmt \u003d \"1500\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"edit\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_INDEX,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"1\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_TIME,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramTime"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_CATEGORY,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramCat"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_INC,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"test description\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_AMOUNT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    paramAmt"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 151
    }
  },
  {
    "path": "src/test/java/seedu/financeit/datatrackers/entrytracker/TypicalEntryEntries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.entrytracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.entrytracker.commands.CreateEntryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.testutil.TestUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.utils.ParamChecker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.entrytracker.TestCommands.generateCreateEntryCorrectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Generates instances of the Entry class for testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class TypicalEntryEntries {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static CommandPacket packet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Seed used to generate an entry with a particular set of parameters. Entries generated with the same seed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // are identical."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static int seed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static TypicalEntryEntries typicalEntryEntries \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private TypicalEntryEntries() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setSeed(int seed) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.seed \u003d seed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.packet \u003d generateCreateEntryCorrectCommand(seed);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static TypicalEntryEntries getInstance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (typicalEntryEntries \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            typicalEntryEntries \u003d new TypicalEntryEntries();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return typicalEntryEntries;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Generates an entry populated with values generated from an integer seed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return populated Entry."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Entry generateTypicalEntryFromSeed() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CreateEntryCommand command \u003d new CreateEntryCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(this.packet);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return command.getCurrEntry();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Generates an entry with manually-specified parameters."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return Populated entry."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Entry generateTypicalEntry1() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CreateEntryCommand command \u003d new CreateEntryCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket packet \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"new\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][]{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_TIME,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"1500\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_CATEGORY,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"tpt\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_INC,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"-i\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"test description1\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_AMOUNT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"1600.56\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(packet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.packet \u003d packet;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return command.getCurrEntry();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Generates an entry with manually-specified parameters."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return Populated entry."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Entry generateTypicalEntry2() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CreateEntryCommand command \u003d new CreateEntryCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket packet \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"new\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][]{"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_TIME,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"1620\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_CATEGORY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"bll\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_INC,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"-e\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_DESCRIPTION,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"test description2\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                },"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.PARAM_AMOUNT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"567.00\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(packet);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.packet \u003d packet;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return command.getCurrEntry();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 130
    }
  },
  {
    "path": "src/test/java/seedu/financeit/datatrackers/goaltracker/SetGoalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.goaltracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "public class SetGoalTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    public static String[] handleInput(String input) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        UiManager.printInputPrompt();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return InputParser.getInstance().parseGoalCommand(input.toLowerCase());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    void setExpenseGoalSuccessfully() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        String[] command \u003d handleInput(\"expense 5000 for 08\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        GoalTracker.setExpenseGoal(command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    void setIncomeGoalSuccessfully() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        String[] command \u003d handleInput(\"income 2000 for 07\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "        GoalTracker.setIncomeGoal(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dixoncwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dixoncwc": 22,
      "kaiwen98": 2
    }
  },
  {
    "path": "src/test/java/seedu/financeit/datatrackers/manualtracker/ManualTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.manualtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.manualtracker.TestCommands.generateCreateLedgerCorrectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.manualtracker.TestCommands.generateCreateLedgerErrorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.manualtracker.TestCommands.generateDeleteLedgerByDateCorrectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.manualtracker.TestCommands.generateDeleteLedgerByDateErrorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.manualtracker.TestCommands.generateDeleteLedgerByIdCorrectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.manualtracker.TestCommands.generateDeleteLedgerByIdErrorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class ManualTrackerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static final int FREQUENCY_ERROR_ENTRY \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static final int NUM_ENTRIES \u003d 20;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testManualTrackerByList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d NUM_ENTRIES; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i % FREQUENCY_ERROR_ENTRY \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateLedgerErrorCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateLedgerCorrectCommand(i);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ManualTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ManualTracker.handleCreateLedger();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int correctListNum \u003d NUM_ENTRIES - (int)Math.floor((double)NUM_ENTRIES / FREQUENCY_ERROR_ENTRY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertEquals(correctListNum, ManualTracker.ledgerList.getItemsSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ManualTracker.ledgerList.removeAllItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testManualTrackerByDelete() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d NUM_ENTRIES; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i % FREQUENCY_ERROR_ENTRY \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateLedgerErrorCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateLedgerCorrectCommand(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ManualTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ManualTracker.handleCreateLedger();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int correctListNum \u003d NUM_ENTRIES - (int)Math.floor((double)NUM_ENTRIES / FREQUENCY_ERROR_ENTRY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 4; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateDeleteLedgerByDateCorrectCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateDeleteLedgerByIdCorrectCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateDeleteLedgerByIdErrorCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateDeleteLedgerByDateErrorCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ManualTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ManualTracker.handleDeleteLedger();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertEquals(correctListNum - 2, ManualTracker.ledgerList.getItemsSize());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testManualTrackerByDuplicateLedgers() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c NUM_ENTRIES; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateLedgerCorrectCommand(4);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                testPacket \u003d generateCreateLedgerCorrectCommand(3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ManualTracker.setTestPacket(testPacket);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ManualTracker.handleCreateLedger();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertEquals(2, ManualTracker.ledgerList.getItemsSize());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ManualTracker.ledgerList.removeAllItems();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 84
    }
  },
  {
    "path": "src/test/java/seedu/financeit/datatrackers/manualtracker/TestCommands.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.manualtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.testutil.TestUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.utils.ParamChecker.PARAM_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class TestCommands {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateCreateLedgerErrorCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"new\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_DATE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"2020-25-4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateDeleteLedgerByDateCorrectCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"delete\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_DATE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"2020-5-4\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateDeleteLedgerByDateErrorCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"delete\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_DATE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"2020-5-400\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateDeleteLedgerByIdCorrectCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"delete\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_INDEX,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"1\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateDeleteLedgerByIdErrorCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"delete\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_INDEX,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"100000000000000\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket generateCreateLedgerCorrectCommand(int seed) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandPacket testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"new\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][] {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    PARAM_DATE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    (\"2020-5-\".concat(String.valueOf(seed)))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return testPacket;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 88
    }
  },
  {
    "path": "src/test/java/seedu/financeit/datatrackers/manualtracker/TypicalLedgerEntries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.manualtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.InsufficientParamsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.datatrackers.manualtracker.commands.CreateLedgerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static seedu.financeit.datatrackers.manualtracker.TestCommands.generateCreateLedgerCorrectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class TypicalLedgerEntries {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static CommandPacket packet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    static int seed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static TypicalLedgerEntries typicalLedgerEntries \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private TypicalLedgerEntries() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static TypicalLedgerEntries getInstance() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (typicalLedgerEntries \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            typicalLedgerEntries \u003d new TypicalLedgerEntries();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return typicalLedgerEntries;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Ledger generateTypicalLedgerFromSeed() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CreateLedgerCommand command \u003d new CreateLedgerCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command.handlePacket(packet);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (InsufficientParamsException exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return command.getCurrLedger();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Ledger generateTypicalLedger1() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Ledger ledger \u003d new Ledger();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-05-05\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ledger.setDate(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.packet \u003d packet;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return ledger;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Ledger generateTypicalLedger2() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Ledger ledger \u003d new Ledger();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-06-06\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ledger.setDate(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.packet \u003d packet;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return ledger;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setSeed(int seed) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.seed \u003d seed;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.packet \u003d generateCreateLedgerCorrectCommand(seed);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 57
    }
  },
  {
    "path": "src/test/java/seedu/financeit/datatrackers/recurringtracker/RecurringTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.datatrackers.recurringtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import seedu.financeit.common.Constants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "public class RecurringTrackerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    public void handleNewEntry_validInput_validEntryCreated() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        CommandPacket packet \u003d new CommandPacket(\"add\", new HashMap());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        packet.addParamToMap(\"-e\", \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        packet.addParamToMap(\"/desc\", \"Test23123//\u003e?\u003e_+_~#$#@\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        packet.addParamToMap(\"/amt\", \"3490.34\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        packet.addParamToMap(\"/day\", \"15\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        packet.addParamToMap(\"/notes\", \"OIYH(*^(*ot9w3848(*\u0026(*~~||///\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        RecurringEntry entry \u003d RecurringTracker.handleNewEntry(packet);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assertEquals(15, entry.day);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assertEquals(\"Test23123//\u003e?\u003e_+_~#$#@\", entry.description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assertEquals(Constants.EntryType.EXP, entry.entryType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assertEquals(3490.34, entry.amount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertFalse(entry.isAuto);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "        assertEquals(\"OIYH(*^(*ot9w3848(*\u0026(*~~||///\", entry.notes);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Artemis-Hunt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Artemis-Hunt": 28,
      "kaiwen98": 2
    }
  },
  {
    "path": "src/test/java/seedu/financeit/financetools/CashbackTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class CashbackTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static CommandPacket handleInput(String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        UiManager.printInputPrompt();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return InputParser.getInstance().parseInput(input.toLowerCase());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    void calculateCashback_inputAmount_expectCorrectCashbackEarned() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        CommandPacket packet \u003d handleInput(\"cashb /a 1000 /r 5 /c 1000\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double cashbackEarned \u003d Handler.handleCashback(packet);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assertEquals(50.0, cashbackEarned);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    void calculateCashback_inputAmountWithValidCap_expectCorrectCashbackEarned() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        CommandPacket packet \u003d handleInput(\"cashb /a 1000 /r 5 /c 10\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double cashbackEarned \u003d Handler.handleCashback(packet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assertEquals(10.0, cashbackEarned);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 27,
      "kaiwen98": 2
    }
  },
  {
    "path": "src/test/java/seedu/financeit/financetools/MilesCreditTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class MilesCreditTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static CommandPacket handleInput(String input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        UiManager.printInputPrompt();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return InputParser.getInstance().parseInput(input.toLowerCase());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    void calculateMilesCredit_inputAmount_expectCorrectMilesEarned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        CommandPacket packet \u003d handleInput(\"miles /a 1000 /r 5\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double milesEarned \u003d Handler.handleMilesCredit(packet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assertEquals(5000.0, milesEarned);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 20,
      "kaiwen98": 1
    }
  },
  {
    "path": "src/test/java/seedu/financeit/financetools/MonthlyCompoundInterestTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class MonthlyCompoundInterestTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static CommandPacket handleInput(String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        UiManager.printInputPrompt();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return InputParser.getInstance().parseInput(input.toLowerCase());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    void calculateCompoundInterest_inputAmount_expectCorrectInterestEarned() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        CommandPacket packet \u003d handleInput(\"cmonthly /a 1000 /r 3 /p 2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double interestEarned \u003d Handler.handleMonthlyCompoundInterest(packet);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assertEquals(5.01, interestEarned);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    void calculateCompoundInterest_inputAmountWithDeposit_expectCorrectInterestEarned() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        CommandPacket packet \u003d handleInput(\"cmonthly /a 1000 /r 3 /p 2 /d 100\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double interestEarned \u003d Handler.handleMonthlyCompoundInterest(packet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assertEquals(5.76, interestEarned);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 28,
      "kaiwen98": 1
    }
  },
  {
    "path": "src/test/java/seedu/financeit/financetools/SimpleInterestTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class SimpleInterestTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static CommandPacket handleInput(String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        UiManager.printInputPrompt();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return InputParser.getInstance().parseInput(input.toLowerCase());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    void calculateSimpleInterest_inputAmount_expectCorrectInterestEarned() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        CommandPacket packet \u003d handleInput(\"simple /a 1000 /r 5\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double interestEarned \u003d Handler.handleSimpleInterest(packet);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assertEquals(50.0, interestEarned);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 21,
      "kaiwen98": 1
    }
  },
  {
    "path": "src/test/java/seedu/financeit/financetools/YearlyCompoundInterestTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bqxy"
        },
        "content": "package seedu.financeit.financetools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.parser.InputParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import seedu.financeit.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bqxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bqxy"
        },
        "content": "public class YearlyCompoundInterestTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    public static CommandPacket handleInput(String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        UiManager.printInputPrompt();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return InputParser.getInstance().parseInput(input.toLowerCase());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    void calculateCompoundInterest_inputAmount_expectCorrectInterestEarned() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        CommandPacket packet \u003d handleInput(\"cyearly /a 1000 /r 3 /p 2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double interestEarned \u003d Handler.handleYearlyCompoundInterest(packet);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assertEquals(60.9, interestEarned);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bqxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    void calculateCompoundInterest_inputAmountWithDeposit_expectCorrectInterestEarned() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        CommandPacket packet \u003d handleInput(\"cyearly /a 1000 /r 3 /p 2 /d 1200\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        Double interestEarned \u003d Handler.handleYearlyCompoundInterest(packet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bqxy"
        },
        "content": "        assertEquals(169.98, interestEarned);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bqxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bqxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bqxy": 28,
      "kaiwen98": 1
    }
  },
  {
    "path": "src/test/java/seedu/financeit/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static CommandPacket createCommandPacket(String commandString, String[][] paramInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        HashMap\u003cString, String\u003e paramMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (paramInput !\u003d null) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            for (String[] paramSet : paramInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                paramMap.put(paramSet[0], paramSet[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return new CommandPacket(commandString, paramMap);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 17
    }
  },
  {
    "path": "src/test/java/seedu/financeit/utils/ParamCheckerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.CommandPacket;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.common.exceptions.ParseFailParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import seedu.financeit.testutil.TestUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class ParamCheckerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    CommandPacket testPacket;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testDateCorrectParseWrongDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String testParam \u003d \"/date\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][]{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                new String[]{testParam, \"202020\"}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ParamChecker.getInstance().setPacket(testPacket);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ParamChecker.getInstance().checkAndReturnDate(testParam);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (ParseFailParamException exception) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Failed to parse the following param: \" + testParam,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                exception.getMessage()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertCorrectErrorMessage(ParamChecker.getInstance(), ParamChecker.getErrorMessageDateDateTimeException());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testTimeCorrectParseWrongTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String testParam \u003d \"/time\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            new String[][]{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                new String[]{testParam, \"2500\"}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ParamChecker.getInstance().setPacket(testPacket);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ParamChecker.getInstance().checkAndReturnTime(testParam);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (ParseFailParamException exception) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"Failed to parse the following param: \" + testParam,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                exception.getMessage()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertCorrectErrorMessage(ParamChecker.getInstance(), ParamChecker.getErrorMessageTimeDateTimeException());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testTimeWrongParse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String testParam \u003d \"/time\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] errorInput \u003d {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"abcd\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \".,/-\u003d\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"this is a test\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"d d d d d \","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"sdffds\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c errorInput.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                new String[][]{"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    new String[]{testParam, errorInput[i]}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ParamChecker.getInstance().setPacket(testPacket);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().checkAndReturnTime(testParam);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (ParseFailParamException exception) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                System.out.println(errorInput[i]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                assertEquals("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Failed to parse the following param: \" + testParam,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    exception.getMessage()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            assertCorrectErrorMessage(ParamChecker.getInstance(), ParamChecker.getErrorMessageTimeInvalidFormat());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testDateWrongParse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String testParam \u003d \"/date\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] errorInput \u003d {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"abcd\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \".,/-\u003d\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"this is a test\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"d d d d d \","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"sdffds\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        };"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c errorInput.length; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                new String[][]{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    new String[]{testParam, errorInput[i]}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ParamChecker.getInstance().setPacket(testPacket);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().checkAndReturnDate(testParam);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (ParseFailParamException exception) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                assertEquals("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Failed to parse the following param: \" + testParam,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    exception.getMessage()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                );"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            assertCorrectErrorMessage(ParamChecker.getInstance(), ParamChecker.getErrorMessageDateInvalidFormat());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void testIndexOutOfBoundsList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String testParam \u003d \"/id\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] errorInput \u003d {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"-1\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            \"23\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        };"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ArrayList testList \u003d new ArrayList(Arrays.asList(errorInput));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c errorInput.length; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            testPacket \u003d TestUtil.createCommandPacket("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                new String[][]{"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    new String[]{testParam, errorInput[i]}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            ParamChecker.getInstance().setPacket(testPacket);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance().checkAndReturnIndex(testParam, testList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (ParseFailParamException exception) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                assertEquals("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    \"Failed to parse the following param: \" + testParam,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    exception.getMessage()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                );"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            int index \u003d Integer.parseInt(errorInput[i]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            assertCorrectErrorMessage("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getInstance(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                ParamChecker.getErrorMessageListIndexOutOfBounds("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    ParamChecker.getMessageListRangeIndex(testList.size()),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    index));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void assertCorrectErrorMessage(ParamChecker paramChecker, String expectedErrorMessage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            paramChecker.getErrorMessage(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            expectedErrorMessage"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 167
    }
  },
  {
    "path": "src/test/java/seedu/financeit/utils/TestInputGenerator.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package seedu.financeit.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class TestInputGenerator {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String MANUAL_TRACKER_COMMAND_STRING_PREFIX \u003d \"ledger\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String ENTRY_TRACKER_COMMAND_STRING \u003d \"entry\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String generateCommand(String commandStringPrefix, String commandType, String[][] params) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d commandStringPrefix + \" \" + commandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (String[] param : params) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d \" \" + param[0] + \" \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d \" \" + param[1] + \" \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "manual"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger new /date 200404"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger open /date 200404"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /amt 600 /time 1500 -e /desc Lunch with friends in the middle of the ocean on the peak of the sky pillar  sdsadsadsadsadsadsadsadsadsdsadsadsadsadsadsadsadsa /cat fd -auto"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /amt 400 /time 1600 -e /desc Bought ten chilli \u003eand five bell peppers \u003eand three carrots \u003eand a big bag of cheetos \u003eand diet coke, please /cat shp"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /amt 500 /time 1700 -i /desc Monthly wages /cat slr"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry edit /id 3 /amt 1000"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry delete /id 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "exit"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 12
    }
  },
  {
    "path": "text-ui-test/input1.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "manual"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "commands"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger open /date 200404"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "exit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger open /id"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger new /date 200404"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger new /date 200504"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger open /date 202020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger open /date 200404"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /time /desc /cat /amt 1500"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /time 1500 /desc Go to the poll -i /cat tpt /amt 1500"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /time 1500 /desc Go to the poll -i /cat tpt /amt 1501"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /time 1500 /desc Go to the poll where\u003e1.the rainbow used to be nice\u003e2. and colorful, haha -i /cat tpt /amt 1503"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /time 1500 /desc Go to the pole -i /cat tpt /amt 1501"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry new /time 1500 /desc Go to the pole -i /cat tpt /amt 1501 /slowbro ddffsfs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry edit /id 1 /time 1600"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry edit /id"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "exit"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "ledger open /date 200404"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "entry list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "exit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "exit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 26
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "call ..\\..\\SwitchJava.bat"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input1.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "kaiwen98": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input1.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "kaiwen98": 1
    }
  }
]
